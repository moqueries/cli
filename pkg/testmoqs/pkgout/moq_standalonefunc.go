// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT.

package pkgout

import (
	"fmt"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/impl"
	"moqueries.org/runtime/moq"
)

// StandaloneFunc_genType is the fabricated implementation type of this mock
// (emitted when mocking functions directly and not from a function type)
type StandaloneFunc_genType func(_ string, bParam bool) (string, error)

// MoqStandaloneFunc_genType holds the state of a moq of the
// StandaloneFunc_genType type
type MoqStandaloneFunc_genType struct {
	Moq *impl.Moq[
		*MoqStandaloneFunc_genType_adaptor,
		MoqStandaloneFunc_genType_params,
		MoqStandaloneFunc_genType_paramsKey,
		MoqStandaloneFunc_genType_results,
	]

	Runtime MoqStandaloneFunc_genType_runtime
}

// MoqStandaloneFunc_genType_runtime holds runtime configuration for the
// StandaloneFunc_genType type
type MoqStandaloneFunc_genType_runtime struct {
	ParameterIndexing MoqStandaloneFunc_genType_paramIndexing
}

// MoqStandaloneFunc_genType_adaptor adapts MoqStandaloneFunc_genType as needed
// by the runtime
type MoqStandaloneFunc_genType_adaptor struct {
	Moq *MoqStandaloneFunc_genType
}

// MoqStandaloneFunc_genType_params holds the params of the
// StandaloneFunc_genType type
type MoqStandaloneFunc_genType_params struct {
	Param1 string
	BParam bool
}

// MoqStandaloneFunc_genType_paramsKey holds the map key params of the
// StandaloneFunc_genType type
type MoqStandaloneFunc_genType_paramsKey struct {
	Params struct {
		Param1 string
		BParam bool
	}
	Hashes struct {
		Param1 hash.Hash
		BParam hash.Hash
	}
}

// MoqStandaloneFunc_genType_results holds the results of the
// StandaloneFunc_genType type
type MoqStandaloneFunc_genType_results struct {
	Result1 string
	Result2 error
}

// MoqStandaloneFunc_genType_paramIndexing holds the parameter indexing runtime
// configuration for the StandaloneFunc_genType type
type MoqStandaloneFunc_genType_paramIndexing struct {
	Param1 moq.ParamIndexing
	BParam moq.ParamIndexing
}

// MoqStandaloneFunc_genType_doFn defines the type of function needed when
// calling AndDo for the StandaloneFunc_genType type
type MoqStandaloneFunc_genType_doFn func(_ string, bParam bool)

// MoqStandaloneFunc_genType_doReturnFn defines the type of function needed
// when calling DoReturnResults for the StandaloneFunc_genType type
type MoqStandaloneFunc_genType_doReturnFn func(_ string, bParam bool) (string, error)

// MoqStandaloneFunc_genType_recorder routes recorded function calls to the
// MoqStandaloneFunc_genType moq
type MoqStandaloneFunc_genType_recorder struct {
	Recorder *impl.Recorder[
		*MoqStandaloneFunc_genType_adaptor,
		MoqStandaloneFunc_genType_params,
		MoqStandaloneFunc_genType_paramsKey,
		MoqStandaloneFunc_genType_results,
	]
}

// MoqStandaloneFunc_genType_anyParams isolates the any params functions of the
// StandaloneFunc_genType type
type MoqStandaloneFunc_genType_anyParams struct {
	Recorder *MoqStandaloneFunc_genType_recorder
}

// NewMoqStandaloneFunc_genType creates a new moq of the StandaloneFunc_genType
// type
func NewMoqStandaloneFunc_genType(scene *moq.Scene, config *moq.Config) *MoqStandaloneFunc_genType {
	adaptor1 := &MoqStandaloneFunc_genType_adaptor{}
	m := &MoqStandaloneFunc_genType{
		Moq: impl.NewMoq[
			*MoqStandaloneFunc_genType_adaptor,
			MoqStandaloneFunc_genType_params,
			MoqStandaloneFunc_genType_paramsKey,
			MoqStandaloneFunc_genType_results,
		](scene, adaptor1, config),

		Runtime: MoqStandaloneFunc_genType_runtime{ParameterIndexing: MoqStandaloneFunc_genType_paramIndexing{
			Param1: moq.ParamIndexByValue,
			BParam: moq.ParamIndexByValue,
		}},
	}
	adaptor1.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the moq implementation of the StandaloneFunc_genType type
func (m *MoqStandaloneFunc_genType) Mock() StandaloneFunc_genType {
	return func(param1 string, bParam bool) (string, error) {
		m.Moq.Scene.T.Helper()
		params := MoqStandaloneFunc_genType_params{
			Param1: param1,
			BParam: bParam,
		}

		var result1 string
		var result2 error
		if result := m.Moq.Function(params); result != nil {
			result1 = result.Result1
			result2 = result.Result2
		}
		return result1, result2
	}
}

func (m *MoqStandaloneFunc_genType) OnCall(param1 string, bParam bool) *MoqStandaloneFunc_genType_recorder {
	return &MoqStandaloneFunc_genType_recorder{
		Recorder: m.Moq.OnCall(MoqStandaloneFunc_genType_params{
			Param1: param1,
			BParam: bParam,
		}),
	}
}

func (r *MoqStandaloneFunc_genType_recorder) Any() *MoqStandaloneFunc_genType_anyParams {
	r.Recorder.Moq.Scene.T.Helper()
	if !r.Recorder.IsAnyPermitted(true) {
		return nil
	}
	return &MoqStandaloneFunc_genType_anyParams{Recorder: r}
}

func (a *MoqStandaloneFunc_genType_anyParams) Param1() *MoqStandaloneFunc_genType_recorder {
	a.Recorder.Recorder.AnyParam(1)
	return a.Recorder
}

func (a *MoqStandaloneFunc_genType_anyParams) BParam() *MoqStandaloneFunc_genType_recorder {
	a.Recorder.Recorder.AnyParam(2)
	return a.Recorder
}

func (r *MoqStandaloneFunc_genType_recorder) Seq() *MoqStandaloneFunc_genType_recorder {
	r.Recorder.Moq.Scene.T.Helper()
	if !r.Recorder.Seq(true, "Seq", true) {
		return nil
	}
	return r
}

func (r *MoqStandaloneFunc_genType_recorder) NoSeq() *MoqStandaloneFunc_genType_recorder {
	r.Recorder.Moq.Scene.T.Helper()
	if !r.Recorder.Seq(false, "NoSeq", true) {
		return nil
	}
	return r
}

func (r *MoqStandaloneFunc_genType_recorder) ReturnResults(result1 string, result2 error) *MoqStandaloneFunc_genType_recorder {
	r.Recorder.Moq.Scene.T.Helper()
	r.Recorder.ReturnResults(MoqStandaloneFunc_genType_results{
		Result1: result1,
		Result2: result2,
	})
	return r
}

func (r *MoqStandaloneFunc_genType_recorder) AndDo(fn MoqStandaloneFunc_genType_doFn) *MoqStandaloneFunc_genType_recorder {
	r.Recorder.Moq.Scene.T.Helper()
	if !r.Recorder.AndDo(func(params MoqStandaloneFunc_genType_params) {
		fn(params.Param1, params.BParam)
	}, true) {
		return nil
	}
	return r
}

func (r *MoqStandaloneFunc_genType_recorder) DoReturnResults(fn MoqStandaloneFunc_genType_doReturnFn) *MoqStandaloneFunc_genType_recorder {
	r.Recorder.Moq.Scene.T.Helper()
	r.Recorder.DoReturnResults(func(params MoqStandaloneFunc_genType_params) *MoqStandaloneFunc_genType_results {
		result1, result2 := fn(params.Param1, params.BParam)
		return &MoqStandaloneFunc_genType_results{
			Result1: result1,
			Result2: result2,
		}
	})
	return r
}

func (r *MoqStandaloneFunc_genType_recorder) Repeat(repeaters ...moq.Repeater) *MoqStandaloneFunc_genType_recorder {
	r.Recorder.Moq.Scene.T.Helper()
	if !r.Recorder.Repeat(repeaters, true) {
		return nil
	}
	return r
}

func (*MoqStandaloneFunc_genType_adaptor) PrettyParams(params MoqStandaloneFunc_genType_params) string {
	return fmt.Sprintf("StandaloneFunc_genType(%#v, %#v)", params.Param1, params.BParam)
}

func (a *MoqStandaloneFunc_genType_adaptor) ParamsKey(params MoqStandaloneFunc_genType_params, anyParams uint64) MoqStandaloneFunc_genType_paramsKey {
	a.Moq.Moq.Scene.T.Helper()
	param1Used, param1UsedHash := impl.ParamKey(
		params.Param1, 1, a.Moq.Runtime.ParameterIndexing.Param1, anyParams)
	bParamUsed, bParamUsedHash := impl.ParamKey(
		params.BParam, 2, a.Moq.Runtime.ParameterIndexing.BParam, anyParams)
	return MoqStandaloneFunc_genType_paramsKey{
		Params: struct {
			Param1 string
			BParam bool
		}{
			Param1: param1Used,
			BParam: bParamUsed,
		},
		Hashes: struct {
			Param1 hash.Hash
			BParam hash.Hash
		}{
			Param1: param1UsedHash,
			BParam: bParamUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqStandaloneFunc_genType) Reset() {
	m.Moq.Reset()
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqStandaloneFunc_genType) AssertExpectationsMet() {
	m.Moq.Scene.T.Helper()
	m.Moq.AssertExpectationsMet()
}
