// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT.

package pkgout

import (
	"fmt"

	"moqueries.org/cli/pkg/testmoqs"
	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/impl"
	"moqueries.org/runtime/moq"
)

// DoSomethingWithParam_genType is the fabricated implementation type of this
// mock (emitted when mocking functions directly and not from a function type)
type DoSomethingWithParam_genType func(testmoqs.Param)

// MoqDoSomethingWithParam_genType holds the state of a moq of the
// DoSomethingWithParam_genType type
type MoqDoSomethingWithParam_genType struct {
	Moq *impl.Moq[
		*MoqDoSomethingWithParam_genType_adaptor,
		MoqDoSomethingWithParam_genType_params,
		MoqDoSomethingWithParam_genType_paramsKey,
		MoqDoSomethingWithParam_genType_results,
	]

	Runtime MoqDoSomethingWithParam_genType_runtime
}

// MoqDoSomethingWithParam_genType_runtime holds runtime configuration for the
// DoSomethingWithParam_genType type
type MoqDoSomethingWithParam_genType_runtime struct {
	ParameterIndexing MoqDoSomethingWithParam_genType_paramIndexing
}

// MoqDoSomethingWithParam_genType_adaptor adapts
// MoqDoSomethingWithParam_genType as needed by the runtime
type MoqDoSomethingWithParam_genType_adaptor struct {
	Moq *MoqDoSomethingWithParam_genType
}

// MoqDoSomethingWithParam_genType_params holds the params of the
// DoSomethingWithParam_genType type
type MoqDoSomethingWithParam_genType_params struct{ Param1 testmoqs.Param }

// MoqDoSomethingWithParam_genType_paramsKey holds the map key params of the
// DoSomethingWithParam_genType type
type MoqDoSomethingWithParam_genType_paramsKey struct {
	Params struct{ Param1 testmoqs.Param }
	Hashes struct{ Param1 hash.Hash }
}

// MoqDoSomethingWithParam_genType_results holds the results of the
// DoSomethingWithParam_genType type
type MoqDoSomethingWithParam_genType_results struct{}

// MoqDoSomethingWithParam_genType_paramIndexing holds the parameter indexing
// runtime configuration for the DoSomethingWithParam_genType type
type MoqDoSomethingWithParam_genType_paramIndexing struct {
	Param1 moq.ParamIndexing
}

// MoqDoSomethingWithParam_genType_doFn defines the type of function needed
// when calling AndDo for the DoSomethingWithParam_genType type
type MoqDoSomethingWithParam_genType_doFn func(testmoqs.Param)

// MoqDoSomethingWithParam_genType_doReturnFn defines the type of function
// needed when calling DoReturnResults for the DoSomethingWithParam_genType
// type
type MoqDoSomethingWithParam_genType_doReturnFn func(testmoqs.Param)

// MoqDoSomethingWithParam_genType_recorder routes recorded function calls to
// the MoqDoSomethingWithParam_genType moq
type MoqDoSomethingWithParam_genType_recorder struct {
	Recorder *impl.Recorder[
		*MoqDoSomethingWithParam_genType_adaptor,
		MoqDoSomethingWithParam_genType_params,
		MoqDoSomethingWithParam_genType_paramsKey,
		MoqDoSomethingWithParam_genType_results,
	]
}

// MoqDoSomethingWithParam_genType_anyParams isolates the any params functions
// of the DoSomethingWithParam_genType type
type MoqDoSomethingWithParam_genType_anyParams struct {
	Recorder *MoqDoSomethingWithParam_genType_recorder
}

// NewMoqDoSomethingWithParam_genType creates a new moq of the
// DoSomethingWithParam_genType type
func NewMoqDoSomethingWithParam_genType(scene *moq.Scene, config *moq.Config) *MoqDoSomethingWithParam_genType {
	adaptor1 := &MoqDoSomethingWithParam_genType_adaptor{}
	m := &MoqDoSomethingWithParam_genType{
		Moq: impl.NewMoq[
			*MoqDoSomethingWithParam_genType_adaptor,
			MoqDoSomethingWithParam_genType_params,
			MoqDoSomethingWithParam_genType_paramsKey,
			MoqDoSomethingWithParam_genType_results,
		](scene, adaptor1, config),

		Runtime: MoqDoSomethingWithParam_genType_runtime{ParameterIndexing: MoqDoSomethingWithParam_genType_paramIndexing{
			Param1: moq.ParamIndexByValue,
		}},
	}
	adaptor1.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the moq implementation of the DoSomethingWithParam_genType type
func (m *MoqDoSomethingWithParam_genType) Mock() DoSomethingWithParam_genType {
	return func(param1 testmoqs.Param) {
		m.Moq.Scene.T.Helper()
		params := MoqDoSomethingWithParam_genType_params{
			Param1: param1,
		}

		m.Moq.Function(params)
	}
}

func (m *MoqDoSomethingWithParam_genType) OnCall(param1 testmoqs.Param) *MoqDoSomethingWithParam_genType_recorder {
	return &MoqDoSomethingWithParam_genType_recorder{
		Recorder: m.Moq.OnCall(MoqDoSomethingWithParam_genType_params{
			Param1: param1,
		}),
	}
}

func (r *MoqDoSomethingWithParam_genType_recorder) Any() *MoqDoSomethingWithParam_genType_anyParams {
	r.Recorder.Moq.Scene.T.Helper()
	if !r.Recorder.IsAnyPermitted(true) {
		return nil
	}
	return &MoqDoSomethingWithParam_genType_anyParams{Recorder: r}
}

func (a *MoqDoSomethingWithParam_genType_anyParams) Param1() *MoqDoSomethingWithParam_genType_recorder {
	a.Recorder.Recorder.AnyParam(1)
	return a.Recorder
}

func (r *MoqDoSomethingWithParam_genType_recorder) Seq() *MoqDoSomethingWithParam_genType_recorder {
	r.Recorder.Moq.Scene.T.Helper()
	if !r.Recorder.Seq(true, "Seq", true) {
		return nil
	}
	return r
}

func (r *MoqDoSomethingWithParam_genType_recorder) NoSeq() *MoqDoSomethingWithParam_genType_recorder {
	r.Recorder.Moq.Scene.T.Helper()
	if !r.Recorder.Seq(false, "NoSeq", true) {
		return nil
	}
	return r
}

func (r *MoqDoSomethingWithParam_genType_recorder) ReturnResults() *MoqDoSomethingWithParam_genType_recorder {
	r.Recorder.Moq.Scene.T.Helper()
	r.Recorder.ReturnResults(MoqDoSomethingWithParam_genType_results{})
	return r
}

func (r *MoqDoSomethingWithParam_genType_recorder) AndDo(fn MoqDoSomethingWithParam_genType_doFn) *MoqDoSomethingWithParam_genType_recorder {
	r.Recorder.Moq.Scene.T.Helper()
	if !r.Recorder.AndDo(func(params MoqDoSomethingWithParam_genType_params) {
		fn(params.Param1)
	}, true) {
		return nil
	}
	return r
}

func (r *MoqDoSomethingWithParam_genType_recorder) DoReturnResults(fn MoqDoSomethingWithParam_genType_doReturnFn) *MoqDoSomethingWithParam_genType_recorder {
	r.Recorder.Moq.Scene.T.Helper()
	r.Recorder.DoReturnResults(func(params MoqDoSomethingWithParam_genType_params) *MoqDoSomethingWithParam_genType_results {
		fn(params.Param1)
		return &MoqDoSomethingWithParam_genType_results{}
	})
	return r
}

func (r *MoqDoSomethingWithParam_genType_recorder) Repeat(repeaters ...moq.Repeater) *MoqDoSomethingWithParam_genType_recorder {
	r.Recorder.Moq.Scene.T.Helper()
	if !r.Recorder.Repeat(repeaters, true) {
		return nil
	}
	return r
}

func (*MoqDoSomethingWithParam_genType_adaptor) PrettyParams(params MoqDoSomethingWithParam_genType_params) string {
	return fmt.Sprintf("DoSomethingWithParam_genType(%#v)", params.Param1)
}

func (a *MoqDoSomethingWithParam_genType_adaptor) ParamsKey(params MoqDoSomethingWithParam_genType_params, anyParams uint64) MoqDoSomethingWithParam_genType_paramsKey {
	a.Moq.Moq.Scene.T.Helper()
	param1Used, param1UsedHash := impl.ParamKey(
		params.Param1, 1, a.Moq.Runtime.ParameterIndexing.Param1, anyParams)
	return MoqDoSomethingWithParam_genType_paramsKey{
		Params: struct{ Param1 testmoqs.Param }{
			Param1: param1Used,
		},
		Hashes: struct{ Param1 hash.Hash }{
			Param1: param1UsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqDoSomethingWithParam_genType) Reset() {
	m.Moq.Reset()
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqDoSomethingWithParam_genType) AssertExpectationsMet() {
	m.Moq.Scene.T.Helper()
	m.Moq.AssertExpectationsMet()
}
