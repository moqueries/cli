// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package testmoqs

import (
	"fmt"
	"math/bits"
	"sync/atomic"

	"moqueries.org/runtime/moq"
)

// The following type assertion assures that testmoqs.Generic_indexListGenType
// is mocked completely
var _ Generic_indexListGenType = (*MoqGeneric_indexListGenType_mock)(nil)

// Generic_indexListGenType is the fabricated implementation type of this mock
// (emitted when mocking a collections of methods directly and not from an
// interface type)
type Generic_indexListGenType interface {
	DoSomethingPtr()
	DoSomethingElsePtr()
	DoSomething()
	DoSomethingElse()
}

// MoqGeneric_indexListGenType holds the state of a moq of the
// Generic_indexListGenType type
type MoqGeneric_indexListGenType struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqGeneric_indexListGenType_mock

	ResultsByParams_DoSomethingPtr     []MoqGeneric_indexListGenType_DoSomethingPtr_resultsByParams
	ResultsByParams_DoSomethingElsePtr []MoqGeneric_indexListGenType_DoSomethingElsePtr_resultsByParams
	ResultsByParams_DoSomething        []MoqGeneric_indexListGenType_DoSomething_resultsByParams
	ResultsByParams_DoSomethingElse    []MoqGeneric_indexListGenType_DoSomethingElse_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			DoSomethingPtr     struct{}
			DoSomethingElsePtr struct{}
			DoSomething        struct{}
			DoSomethingElse    struct{}
		}
	}
}

// MoqGeneric_indexListGenType_mock isolates the mock interface of the
// Generic_indexListGenType type
type MoqGeneric_indexListGenType_mock struct {
	Moq *MoqGeneric_indexListGenType
}

// MoqGeneric_indexListGenType_recorder isolates the recorder interface of the
// Generic_indexListGenType type
type MoqGeneric_indexListGenType_recorder struct {
	Moq *MoqGeneric_indexListGenType
}

// MoqGeneric_indexListGenType_DoSomethingPtr_params holds the params of the
// Generic_indexListGenType type
type MoqGeneric_indexListGenType_DoSomethingPtr_params struct{}

// MoqGeneric_indexListGenType_DoSomethingPtr_paramsKey holds the map key
// params of the Generic_indexListGenType type
type MoqGeneric_indexListGenType_DoSomethingPtr_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqGeneric_indexListGenType_DoSomethingPtr_resultsByParams contains the
// results for a given set of parameters for the Generic_indexListGenType type
type MoqGeneric_indexListGenType_DoSomethingPtr_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqGeneric_indexListGenType_DoSomethingPtr_paramsKey]*MoqGeneric_indexListGenType_DoSomethingPtr_results
}

// MoqGeneric_indexListGenType_DoSomethingPtr_doFn defines the type of function
// needed when calling AndDo for the Generic_indexListGenType type
type MoqGeneric_indexListGenType_DoSomethingPtr_doFn func()

// MoqGeneric_indexListGenType_DoSomethingPtr_doReturnFn defines the type of
// function needed when calling DoReturnResults for the
// Generic_indexListGenType type
type MoqGeneric_indexListGenType_DoSomethingPtr_doReturnFn func()

// MoqGeneric_indexListGenType_DoSomethingPtr_results holds the results of the
// Generic_indexListGenType type
type MoqGeneric_indexListGenType_DoSomethingPtr_results struct {
	Params  MoqGeneric_indexListGenType_DoSomethingPtr_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqGeneric_indexListGenType_DoSomethingPtr_doFn
		DoReturnFn MoqGeneric_indexListGenType_DoSomethingPtr_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqGeneric_indexListGenType_DoSomethingPtr_fnRecorder routes recorded
// function calls to the MoqGeneric_indexListGenType moq
type MoqGeneric_indexListGenType_DoSomethingPtr_fnRecorder struct {
	Params    MoqGeneric_indexListGenType_DoSomethingPtr_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqGeneric_indexListGenType_DoSomethingPtr_results
	Moq       *MoqGeneric_indexListGenType
}

// MoqGeneric_indexListGenType_DoSomethingPtr_anyParams isolates the any params
// functions of the Generic_indexListGenType type
type MoqGeneric_indexListGenType_DoSomethingPtr_anyParams struct {
	Recorder *MoqGeneric_indexListGenType_DoSomethingPtr_fnRecorder
}

// MoqGeneric_indexListGenType_DoSomethingElsePtr_params holds the params of
// the Generic_indexListGenType type
type MoqGeneric_indexListGenType_DoSomethingElsePtr_params struct{}

// MoqGeneric_indexListGenType_DoSomethingElsePtr_paramsKey holds the map key
// params of the Generic_indexListGenType type
type MoqGeneric_indexListGenType_DoSomethingElsePtr_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqGeneric_indexListGenType_DoSomethingElsePtr_resultsByParams contains the
// results for a given set of parameters for the Generic_indexListGenType type
type MoqGeneric_indexListGenType_DoSomethingElsePtr_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqGeneric_indexListGenType_DoSomethingElsePtr_paramsKey]*MoqGeneric_indexListGenType_DoSomethingElsePtr_results
}

// MoqGeneric_indexListGenType_DoSomethingElsePtr_doFn defines the type of
// function needed when calling AndDo for the Generic_indexListGenType type
type MoqGeneric_indexListGenType_DoSomethingElsePtr_doFn func()

// MoqGeneric_indexListGenType_DoSomethingElsePtr_doReturnFn defines the type
// of function needed when calling DoReturnResults for the
// Generic_indexListGenType type
type MoqGeneric_indexListGenType_DoSomethingElsePtr_doReturnFn func()

// MoqGeneric_indexListGenType_DoSomethingElsePtr_results holds the results of
// the Generic_indexListGenType type
type MoqGeneric_indexListGenType_DoSomethingElsePtr_results struct {
	Params  MoqGeneric_indexListGenType_DoSomethingElsePtr_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqGeneric_indexListGenType_DoSomethingElsePtr_doFn
		DoReturnFn MoqGeneric_indexListGenType_DoSomethingElsePtr_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqGeneric_indexListGenType_DoSomethingElsePtr_fnRecorder routes recorded
// function calls to the MoqGeneric_indexListGenType moq
type MoqGeneric_indexListGenType_DoSomethingElsePtr_fnRecorder struct {
	Params    MoqGeneric_indexListGenType_DoSomethingElsePtr_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqGeneric_indexListGenType_DoSomethingElsePtr_results
	Moq       *MoqGeneric_indexListGenType
}

// MoqGeneric_indexListGenType_DoSomethingElsePtr_anyParams isolates the any
// params functions of the Generic_indexListGenType type
type MoqGeneric_indexListGenType_DoSomethingElsePtr_anyParams struct {
	Recorder *MoqGeneric_indexListGenType_DoSomethingElsePtr_fnRecorder
}

// MoqGeneric_indexListGenType_DoSomething_params holds the params of the
// Generic_indexListGenType type
type MoqGeneric_indexListGenType_DoSomething_params struct{}

// MoqGeneric_indexListGenType_DoSomething_paramsKey holds the map key params
// of the Generic_indexListGenType type
type MoqGeneric_indexListGenType_DoSomething_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqGeneric_indexListGenType_DoSomething_resultsByParams contains the results
// for a given set of parameters for the Generic_indexListGenType type
type MoqGeneric_indexListGenType_DoSomething_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqGeneric_indexListGenType_DoSomething_paramsKey]*MoqGeneric_indexListGenType_DoSomething_results
}

// MoqGeneric_indexListGenType_DoSomething_doFn defines the type of function
// needed when calling AndDo for the Generic_indexListGenType type
type MoqGeneric_indexListGenType_DoSomething_doFn func()

// MoqGeneric_indexListGenType_DoSomething_doReturnFn defines the type of
// function needed when calling DoReturnResults for the
// Generic_indexListGenType type
type MoqGeneric_indexListGenType_DoSomething_doReturnFn func()

// MoqGeneric_indexListGenType_DoSomething_results holds the results of the
// Generic_indexListGenType type
type MoqGeneric_indexListGenType_DoSomething_results struct {
	Params  MoqGeneric_indexListGenType_DoSomething_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqGeneric_indexListGenType_DoSomething_doFn
		DoReturnFn MoqGeneric_indexListGenType_DoSomething_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqGeneric_indexListGenType_DoSomething_fnRecorder routes recorded function
// calls to the MoqGeneric_indexListGenType moq
type MoqGeneric_indexListGenType_DoSomething_fnRecorder struct {
	Params    MoqGeneric_indexListGenType_DoSomething_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqGeneric_indexListGenType_DoSomething_results
	Moq       *MoqGeneric_indexListGenType
}

// MoqGeneric_indexListGenType_DoSomething_anyParams isolates the any params
// functions of the Generic_indexListGenType type
type MoqGeneric_indexListGenType_DoSomething_anyParams struct {
	Recorder *MoqGeneric_indexListGenType_DoSomething_fnRecorder
}

// MoqGeneric_indexListGenType_DoSomethingElse_params holds the params of the
// Generic_indexListGenType type
type MoqGeneric_indexListGenType_DoSomethingElse_params struct{}

// MoqGeneric_indexListGenType_DoSomethingElse_paramsKey holds the map key
// params of the Generic_indexListGenType type
type MoqGeneric_indexListGenType_DoSomethingElse_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqGeneric_indexListGenType_DoSomethingElse_resultsByParams contains the
// results for a given set of parameters for the Generic_indexListGenType type
type MoqGeneric_indexListGenType_DoSomethingElse_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqGeneric_indexListGenType_DoSomethingElse_paramsKey]*MoqGeneric_indexListGenType_DoSomethingElse_results
}

// MoqGeneric_indexListGenType_DoSomethingElse_doFn defines the type of
// function needed when calling AndDo for the Generic_indexListGenType type
type MoqGeneric_indexListGenType_DoSomethingElse_doFn func()

// MoqGeneric_indexListGenType_DoSomethingElse_doReturnFn defines the type of
// function needed when calling DoReturnResults for the
// Generic_indexListGenType type
type MoqGeneric_indexListGenType_DoSomethingElse_doReturnFn func()

// MoqGeneric_indexListGenType_DoSomethingElse_results holds the results of the
// Generic_indexListGenType type
type MoqGeneric_indexListGenType_DoSomethingElse_results struct {
	Params  MoqGeneric_indexListGenType_DoSomethingElse_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqGeneric_indexListGenType_DoSomethingElse_doFn
		DoReturnFn MoqGeneric_indexListGenType_DoSomethingElse_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqGeneric_indexListGenType_DoSomethingElse_fnRecorder routes recorded
// function calls to the MoqGeneric_indexListGenType moq
type MoqGeneric_indexListGenType_DoSomethingElse_fnRecorder struct {
	Params    MoqGeneric_indexListGenType_DoSomethingElse_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqGeneric_indexListGenType_DoSomethingElse_results
	Moq       *MoqGeneric_indexListGenType
}

// MoqGeneric_indexListGenType_DoSomethingElse_anyParams isolates the any
// params functions of the Generic_indexListGenType type
type MoqGeneric_indexListGenType_DoSomethingElse_anyParams struct {
	Recorder *MoqGeneric_indexListGenType_DoSomethingElse_fnRecorder
}

// NewMoqGeneric_indexListGenType creates a new moq of the
// Generic_indexListGenType type
func NewMoqGeneric_indexListGenType(scene *moq.Scene, config *moq.Config) *MoqGeneric_indexListGenType {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqGeneric_indexListGenType{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqGeneric_indexListGenType_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				DoSomethingPtr     struct{}
				DoSomethingElsePtr struct{}
				DoSomething        struct{}
				DoSomethingElse    struct{}
			}
		}{ParameterIndexing: struct {
			DoSomethingPtr     struct{}
			DoSomethingElsePtr struct{}
			DoSomething        struct{}
			DoSomethingElse    struct{}
		}{
			DoSomethingPtr:     struct{}{},
			DoSomethingElsePtr: struct{}{},
			DoSomething:        struct{}{},
			DoSomethingElse:    struct{}{},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Generic_indexListGenType type
func (m *MoqGeneric_indexListGenType) Mock() *MoqGeneric_indexListGenType_mock { return m.Moq }

func (m *MoqGeneric_indexListGenType_mock) DoSomethingPtr() {
	m.Moq.Scene.T.Helper()
	params := MoqGeneric_indexListGenType_DoSomethingPtr_params{}
	var results *MoqGeneric_indexListGenType_DoSomethingPtr_results
	for _, resultsByParams := range m.Moq.ResultsByParams_DoSomethingPtr {
		paramsKey := m.Moq.ParamsKey_DoSomethingPtr(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_DoSomethingPtr(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_DoSomethingPtr(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_DoSomethingPtr(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn()
	}
	return
}

func (m *MoqGeneric_indexListGenType_mock) DoSomethingElsePtr() {
	m.Moq.Scene.T.Helper()
	params := MoqGeneric_indexListGenType_DoSomethingElsePtr_params{}
	var results *MoqGeneric_indexListGenType_DoSomethingElsePtr_results
	for _, resultsByParams := range m.Moq.ResultsByParams_DoSomethingElsePtr {
		paramsKey := m.Moq.ParamsKey_DoSomethingElsePtr(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_DoSomethingElsePtr(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_DoSomethingElsePtr(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_DoSomethingElsePtr(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn()
	}
	return
}

func (m *MoqGeneric_indexListGenType_mock) DoSomething() {
	m.Moq.Scene.T.Helper()
	params := MoqGeneric_indexListGenType_DoSomething_params{}
	var results *MoqGeneric_indexListGenType_DoSomething_results
	for _, resultsByParams := range m.Moq.ResultsByParams_DoSomething {
		paramsKey := m.Moq.ParamsKey_DoSomething(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_DoSomething(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_DoSomething(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_DoSomething(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn()
	}
	return
}

func (m *MoqGeneric_indexListGenType_mock) DoSomethingElse() {
	m.Moq.Scene.T.Helper()
	params := MoqGeneric_indexListGenType_DoSomethingElse_params{}
	var results *MoqGeneric_indexListGenType_DoSomethingElse_results
	for _, resultsByParams := range m.Moq.ResultsByParams_DoSomethingElse {
		paramsKey := m.Moq.ParamsKey_DoSomethingElse(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_DoSomethingElse(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_DoSomethingElse(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_DoSomethingElse(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn()
	}
	return
}

// OnCall returns the recorder implementation of the Generic_indexListGenType
// type
func (m *MoqGeneric_indexListGenType) OnCall() *MoqGeneric_indexListGenType_recorder {
	return &MoqGeneric_indexListGenType_recorder{
		Moq: m,
	}
}

func (m *MoqGeneric_indexListGenType_recorder) DoSomethingPtr() *MoqGeneric_indexListGenType_DoSomethingPtr_fnRecorder {
	return &MoqGeneric_indexListGenType_DoSomethingPtr_fnRecorder{
		Params:   MoqGeneric_indexListGenType_DoSomethingPtr_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqGeneric_indexListGenType_DoSomethingPtr_fnRecorder) Any() *MoqGeneric_indexListGenType_DoSomethingPtr_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_DoSomethingPtr(r.Params))
		return nil
	}
	return &MoqGeneric_indexListGenType_DoSomethingPtr_anyParams{Recorder: r}
}

func (r *MoqGeneric_indexListGenType_DoSomethingPtr_fnRecorder) Seq() *MoqGeneric_indexListGenType_DoSomethingPtr_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_DoSomethingPtr(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqGeneric_indexListGenType_DoSomethingPtr_fnRecorder) NoSeq() *MoqGeneric_indexListGenType_DoSomethingPtr_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_DoSomethingPtr(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqGeneric_indexListGenType_DoSomethingPtr_fnRecorder) ReturnResults() *MoqGeneric_indexListGenType_DoSomethingPtr_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqGeneric_indexListGenType_DoSomethingPtr_doFn
		DoReturnFn MoqGeneric_indexListGenType_DoSomethingPtr_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqGeneric_indexListGenType_DoSomethingPtr_fnRecorder) AndDo(fn MoqGeneric_indexListGenType_DoSomethingPtr_doFn) *MoqGeneric_indexListGenType_DoSomethingPtr_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqGeneric_indexListGenType_DoSomethingPtr_fnRecorder) DoReturnResults(fn MoqGeneric_indexListGenType_DoSomethingPtr_doReturnFn) *MoqGeneric_indexListGenType_DoSomethingPtr_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqGeneric_indexListGenType_DoSomethingPtr_doFn
		DoReturnFn MoqGeneric_indexListGenType_DoSomethingPtr_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqGeneric_indexListGenType_DoSomethingPtr_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqGeneric_indexListGenType_DoSomethingPtr_resultsByParams
	for n, res := range r.Moq.ResultsByParams_DoSomethingPtr {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqGeneric_indexListGenType_DoSomethingPtr_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqGeneric_indexListGenType_DoSomethingPtr_paramsKey]*MoqGeneric_indexListGenType_DoSomethingPtr_results{},
		}
		r.Moq.ResultsByParams_DoSomethingPtr = append(r.Moq.ResultsByParams_DoSomethingPtr, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_DoSomethingPtr) {
			copy(r.Moq.ResultsByParams_DoSomethingPtr[insertAt+1:], r.Moq.ResultsByParams_DoSomethingPtr[insertAt:0])
			r.Moq.ResultsByParams_DoSomethingPtr[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_DoSomethingPtr(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqGeneric_indexListGenType_DoSomethingPtr_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqGeneric_indexListGenType_DoSomethingPtr_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqGeneric_indexListGenType_DoSomethingPtr_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqGeneric_indexListGenType_DoSomethingPtr_doFn
				DoReturnFn MoqGeneric_indexListGenType_DoSomethingPtr_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqGeneric_indexListGenType) PrettyParams_DoSomethingPtr(params MoqGeneric_indexListGenType_DoSomethingPtr_params) string {
	return fmt.Sprintf("DoSomethingPtr()")
}

func (m *MoqGeneric_indexListGenType) ParamsKey_DoSomethingPtr(params MoqGeneric_indexListGenType_DoSomethingPtr_params, anyParams uint64) MoqGeneric_indexListGenType_DoSomethingPtr_paramsKey {
	m.Scene.T.Helper()
	return MoqGeneric_indexListGenType_DoSomethingPtr_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqGeneric_indexListGenType_recorder) DoSomethingElsePtr() *MoqGeneric_indexListGenType_DoSomethingElsePtr_fnRecorder {
	return &MoqGeneric_indexListGenType_DoSomethingElsePtr_fnRecorder{
		Params:   MoqGeneric_indexListGenType_DoSomethingElsePtr_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqGeneric_indexListGenType_DoSomethingElsePtr_fnRecorder) Any() *MoqGeneric_indexListGenType_DoSomethingElsePtr_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_DoSomethingElsePtr(r.Params))
		return nil
	}
	return &MoqGeneric_indexListGenType_DoSomethingElsePtr_anyParams{Recorder: r}
}

func (r *MoqGeneric_indexListGenType_DoSomethingElsePtr_fnRecorder) Seq() *MoqGeneric_indexListGenType_DoSomethingElsePtr_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_DoSomethingElsePtr(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqGeneric_indexListGenType_DoSomethingElsePtr_fnRecorder) NoSeq() *MoqGeneric_indexListGenType_DoSomethingElsePtr_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_DoSomethingElsePtr(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqGeneric_indexListGenType_DoSomethingElsePtr_fnRecorder) ReturnResults() *MoqGeneric_indexListGenType_DoSomethingElsePtr_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqGeneric_indexListGenType_DoSomethingElsePtr_doFn
		DoReturnFn MoqGeneric_indexListGenType_DoSomethingElsePtr_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqGeneric_indexListGenType_DoSomethingElsePtr_fnRecorder) AndDo(fn MoqGeneric_indexListGenType_DoSomethingElsePtr_doFn) *MoqGeneric_indexListGenType_DoSomethingElsePtr_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqGeneric_indexListGenType_DoSomethingElsePtr_fnRecorder) DoReturnResults(fn MoqGeneric_indexListGenType_DoSomethingElsePtr_doReturnFn) *MoqGeneric_indexListGenType_DoSomethingElsePtr_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqGeneric_indexListGenType_DoSomethingElsePtr_doFn
		DoReturnFn MoqGeneric_indexListGenType_DoSomethingElsePtr_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqGeneric_indexListGenType_DoSomethingElsePtr_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqGeneric_indexListGenType_DoSomethingElsePtr_resultsByParams
	for n, res := range r.Moq.ResultsByParams_DoSomethingElsePtr {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqGeneric_indexListGenType_DoSomethingElsePtr_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqGeneric_indexListGenType_DoSomethingElsePtr_paramsKey]*MoqGeneric_indexListGenType_DoSomethingElsePtr_results{},
		}
		r.Moq.ResultsByParams_DoSomethingElsePtr = append(r.Moq.ResultsByParams_DoSomethingElsePtr, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_DoSomethingElsePtr) {
			copy(r.Moq.ResultsByParams_DoSomethingElsePtr[insertAt+1:], r.Moq.ResultsByParams_DoSomethingElsePtr[insertAt:0])
			r.Moq.ResultsByParams_DoSomethingElsePtr[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_DoSomethingElsePtr(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqGeneric_indexListGenType_DoSomethingElsePtr_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqGeneric_indexListGenType_DoSomethingElsePtr_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqGeneric_indexListGenType_DoSomethingElsePtr_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqGeneric_indexListGenType_DoSomethingElsePtr_doFn
				DoReturnFn MoqGeneric_indexListGenType_DoSomethingElsePtr_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqGeneric_indexListGenType) PrettyParams_DoSomethingElsePtr(params MoqGeneric_indexListGenType_DoSomethingElsePtr_params) string {
	return fmt.Sprintf("DoSomethingElsePtr()")
}

func (m *MoqGeneric_indexListGenType) ParamsKey_DoSomethingElsePtr(params MoqGeneric_indexListGenType_DoSomethingElsePtr_params, anyParams uint64) MoqGeneric_indexListGenType_DoSomethingElsePtr_paramsKey {
	m.Scene.T.Helper()
	return MoqGeneric_indexListGenType_DoSomethingElsePtr_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqGeneric_indexListGenType_recorder) DoSomething() *MoqGeneric_indexListGenType_DoSomething_fnRecorder {
	return &MoqGeneric_indexListGenType_DoSomething_fnRecorder{
		Params:   MoqGeneric_indexListGenType_DoSomething_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqGeneric_indexListGenType_DoSomething_fnRecorder) Any() *MoqGeneric_indexListGenType_DoSomething_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_DoSomething(r.Params))
		return nil
	}
	return &MoqGeneric_indexListGenType_DoSomething_anyParams{Recorder: r}
}

func (r *MoqGeneric_indexListGenType_DoSomething_fnRecorder) Seq() *MoqGeneric_indexListGenType_DoSomething_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_DoSomething(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqGeneric_indexListGenType_DoSomething_fnRecorder) NoSeq() *MoqGeneric_indexListGenType_DoSomething_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_DoSomething(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqGeneric_indexListGenType_DoSomething_fnRecorder) ReturnResults() *MoqGeneric_indexListGenType_DoSomething_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqGeneric_indexListGenType_DoSomething_doFn
		DoReturnFn MoqGeneric_indexListGenType_DoSomething_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqGeneric_indexListGenType_DoSomething_fnRecorder) AndDo(fn MoqGeneric_indexListGenType_DoSomething_doFn) *MoqGeneric_indexListGenType_DoSomething_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqGeneric_indexListGenType_DoSomething_fnRecorder) DoReturnResults(fn MoqGeneric_indexListGenType_DoSomething_doReturnFn) *MoqGeneric_indexListGenType_DoSomething_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqGeneric_indexListGenType_DoSomething_doFn
		DoReturnFn MoqGeneric_indexListGenType_DoSomething_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqGeneric_indexListGenType_DoSomething_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqGeneric_indexListGenType_DoSomething_resultsByParams
	for n, res := range r.Moq.ResultsByParams_DoSomething {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqGeneric_indexListGenType_DoSomething_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqGeneric_indexListGenType_DoSomething_paramsKey]*MoqGeneric_indexListGenType_DoSomething_results{},
		}
		r.Moq.ResultsByParams_DoSomething = append(r.Moq.ResultsByParams_DoSomething, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_DoSomething) {
			copy(r.Moq.ResultsByParams_DoSomething[insertAt+1:], r.Moq.ResultsByParams_DoSomething[insertAt:0])
			r.Moq.ResultsByParams_DoSomething[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_DoSomething(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqGeneric_indexListGenType_DoSomething_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqGeneric_indexListGenType_DoSomething_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqGeneric_indexListGenType_DoSomething_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqGeneric_indexListGenType_DoSomething_doFn
				DoReturnFn MoqGeneric_indexListGenType_DoSomething_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqGeneric_indexListGenType) PrettyParams_DoSomething(params MoqGeneric_indexListGenType_DoSomething_params) string {
	return fmt.Sprintf("DoSomething()")
}

func (m *MoqGeneric_indexListGenType) ParamsKey_DoSomething(params MoqGeneric_indexListGenType_DoSomething_params, anyParams uint64) MoqGeneric_indexListGenType_DoSomething_paramsKey {
	m.Scene.T.Helper()
	return MoqGeneric_indexListGenType_DoSomething_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqGeneric_indexListGenType_recorder) DoSomethingElse() *MoqGeneric_indexListGenType_DoSomethingElse_fnRecorder {
	return &MoqGeneric_indexListGenType_DoSomethingElse_fnRecorder{
		Params:   MoqGeneric_indexListGenType_DoSomethingElse_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqGeneric_indexListGenType_DoSomethingElse_fnRecorder) Any() *MoqGeneric_indexListGenType_DoSomethingElse_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_DoSomethingElse(r.Params))
		return nil
	}
	return &MoqGeneric_indexListGenType_DoSomethingElse_anyParams{Recorder: r}
}

func (r *MoqGeneric_indexListGenType_DoSomethingElse_fnRecorder) Seq() *MoqGeneric_indexListGenType_DoSomethingElse_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_DoSomethingElse(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqGeneric_indexListGenType_DoSomethingElse_fnRecorder) NoSeq() *MoqGeneric_indexListGenType_DoSomethingElse_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_DoSomethingElse(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqGeneric_indexListGenType_DoSomethingElse_fnRecorder) ReturnResults() *MoqGeneric_indexListGenType_DoSomethingElse_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqGeneric_indexListGenType_DoSomethingElse_doFn
		DoReturnFn MoqGeneric_indexListGenType_DoSomethingElse_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqGeneric_indexListGenType_DoSomethingElse_fnRecorder) AndDo(fn MoqGeneric_indexListGenType_DoSomethingElse_doFn) *MoqGeneric_indexListGenType_DoSomethingElse_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqGeneric_indexListGenType_DoSomethingElse_fnRecorder) DoReturnResults(fn MoqGeneric_indexListGenType_DoSomethingElse_doReturnFn) *MoqGeneric_indexListGenType_DoSomethingElse_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqGeneric_indexListGenType_DoSomethingElse_doFn
		DoReturnFn MoqGeneric_indexListGenType_DoSomethingElse_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqGeneric_indexListGenType_DoSomethingElse_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqGeneric_indexListGenType_DoSomethingElse_resultsByParams
	for n, res := range r.Moq.ResultsByParams_DoSomethingElse {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqGeneric_indexListGenType_DoSomethingElse_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqGeneric_indexListGenType_DoSomethingElse_paramsKey]*MoqGeneric_indexListGenType_DoSomethingElse_results{},
		}
		r.Moq.ResultsByParams_DoSomethingElse = append(r.Moq.ResultsByParams_DoSomethingElse, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_DoSomethingElse) {
			copy(r.Moq.ResultsByParams_DoSomethingElse[insertAt+1:], r.Moq.ResultsByParams_DoSomethingElse[insertAt:0])
			r.Moq.ResultsByParams_DoSomethingElse[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_DoSomethingElse(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqGeneric_indexListGenType_DoSomethingElse_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqGeneric_indexListGenType_DoSomethingElse_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqGeneric_indexListGenType_DoSomethingElse_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqGeneric_indexListGenType_DoSomethingElse_doFn
				DoReturnFn MoqGeneric_indexListGenType_DoSomethingElse_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqGeneric_indexListGenType) PrettyParams_DoSomethingElse(params MoqGeneric_indexListGenType_DoSomethingElse_params) string {
	return fmt.Sprintf("DoSomethingElse()")
}

func (m *MoqGeneric_indexListGenType) ParamsKey_DoSomethingElse(params MoqGeneric_indexListGenType_DoSomethingElse_params, anyParams uint64) MoqGeneric_indexListGenType_DoSomethingElse_paramsKey {
	m.Scene.T.Helper()
	return MoqGeneric_indexListGenType_DoSomethingElse_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *MoqGeneric_indexListGenType) Reset() {
	m.ResultsByParams_DoSomethingPtr = nil
	m.ResultsByParams_DoSomethingElsePtr = nil
	m.ResultsByParams_DoSomething = nil
	m.ResultsByParams_DoSomethingElse = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqGeneric_indexListGenType) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_DoSomethingPtr {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_DoSomethingPtr(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_DoSomethingElsePtr {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_DoSomethingElsePtr(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_DoSomething {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_DoSomething(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_DoSomethingElse {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_DoSomethingElse(results.Params))
			}
		}
	}
}
