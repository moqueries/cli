// Code generated by Moqueries - https://github.com/myshkin5/moqueries - DO NOT EDIT!

package moq

import (
	"math/bits"
	"sync/atomic"

	"github.com/myshkin5/moqueries/pkg/hash"
)

// MockMoqT holds the state of a mock of the MoqT type
type MockMoqT struct {
	Scene                  *Scene
	Config                 MockConfig
	ResultsByParams_Errorf []MockMoqT_Errorf_resultsByParams
	ResultsByParams_Fatalf []MockMoqT_Fatalf_resultsByParams
}

// MockMoqT_mock isolates the mock interface of the MoqT type
type MockMoqT_mock struct {
	Mock *MockMoqT
}

// MockMoqT_recorder isolates the recorder interface of the MoqT type
type MockMoqT_recorder struct {
	Mock *MockMoqT
}

// MockMoqT_Errorf_params holds the params of the MoqT type
type MockMoqT_Errorf_params struct {
	Format string
	Args   []interface{}
}

// MockMoqT_Errorf_paramsKey holds the map key params of the MoqT type
type MockMoqT_Errorf_paramsKey struct {
	Format string
	Args   hash.Hash
}

// MockMoqT_Errorf_resultsByParams contains the results for a given set of parameters for the MoqT type
type MockMoqT_Errorf_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MockMoqT_Errorf_paramsKey]*MockMoqT_Errorf_resultMgr
}

// MockMoqT_Errorf_resultMgr manages multiple results and the state of the MoqT type
type MockMoqT_Errorf_resultMgr struct {
	Params   MockMoqT_Errorf_params
	Results  []*MockMoqT_Errorf_results
	Index    uint32
	AnyTimes bool
}

// MockMoqT_Errorf_results holds the results of the MoqT type
type MockMoqT_Errorf_results struct {
}

// MockMoqT_Errorf_fnRecorder routes recorded function calls to the MockMoqT mock
type MockMoqT_Errorf_fnRecorder struct {
	Params    MockMoqT_Errorf_params
	ParamsKey MockMoqT_Errorf_paramsKey
	AnyParams uint64
	Results   *MockMoqT_Errorf_resultMgr
	Mock      *MockMoqT
}

// MockMoqT_Fatalf_params holds the params of the MoqT type
type MockMoqT_Fatalf_params struct {
	Format string
	Args   []interface{}
}

// MockMoqT_Fatalf_paramsKey holds the map key params of the MoqT type
type MockMoqT_Fatalf_paramsKey struct {
	Format string
	Args   hash.Hash
}

// MockMoqT_Fatalf_resultsByParams contains the results for a given set of parameters for the MoqT type
type MockMoqT_Fatalf_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MockMoqT_Fatalf_paramsKey]*MockMoqT_Fatalf_resultMgr
}

// MockMoqT_Fatalf_resultMgr manages multiple results and the state of the MoqT type
type MockMoqT_Fatalf_resultMgr struct {
	Params   MockMoqT_Fatalf_params
	Results  []*MockMoqT_Fatalf_results
	Index    uint32
	AnyTimes bool
}

// MockMoqT_Fatalf_results holds the results of the MoqT type
type MockMoqT_Fatalf_results struct {
}

// MockMoqT_Fatalf_fnRecorder routes recorded function calls to the MockMoqT mock
type MockMoqT_Fatalf_fnRecorder struct {
	Params    MockMoqT_Fatalf_params
	ParamsKey MockMoqT_Fatalf_paramsKey
	AnyParams uint64
	Results   *MockMoqT_Fatalf_resultMgr
	Mock      *MockMoqT
}

// NewMockMoqT creates a new mock of the MoqT type
func NewMockMoqT(scene *Scene, config *MockConfig) *MockMoqT {
	if config == nil {
		config = &MockConfig{}
	}
	m := &MockMoqT{
		Scene:  scene,
		Config: *config,
	}
	scene.AddMock(m)
	return m
}

// Mock returns the mock implementation of the MoqT type
func (m *MockMoqT) Mock() *MockMoqT_mock {
	return &MockMoqT_mock{
		Mock: m,
	}
}

func (m *MockMoqT_mock) Errorf(format string, args ...interface{}) {
	params := MockMoqT_Errorf_params{
		Format: format,
		Args:   args,
	}
	var results *MockMoqT_Errorf_resultMgr
	for _, resultsByParams := range m.Mock.ResultsByParams_Errorf {
		var formatUsed string
		if resultsByParams.AnyParams&(1<<0) == 0 {
			formatUsed = format
		}
		var argsUsed hash.Hash
		if resultsByParams.AnyParams&(1<<1) == 0 {
			argsUsed = hash.DeepHash(args)
		}
		paramsKey := MockMoqT_Errorf_paramsKey{
			Format: formatUsed,
			Args:   argsUsed,
		}
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Mock.Config.Expectation == Strict {
			m.Mock.Scene.MoqT.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= len(results.Results) {
		if !results.AnyTimes {
			if m.Mock.Config.Expectation == Strict {
				m.Mock.Scene.MoqT.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = len(results.Results) - 1
	}
	return
}

func (m *MockMoqT_mock) Fatalf(format string, args ...interface{}) {
	params := MockMoqT_Fatalf_params{
		Format: format,
		Args:   args,
	}
	var results *MockMoqT_Fatalf_resultMgr
	for _, resultsByParams := range m.Mock.ResultsByParams_Fatalf {
		var formatUsed string
		if resultsByParams.AnyParams&(1<<0) == 0 {
			formatUsed = format
		}
		var argsUsed hash.Hash
		if resultsByParams.AnyParams&(1<<1) == 0 {
			argsUsed = hash.DeepHash(args)
		}
		paramsKey := MockMoqT_Fatalf_paramsKey{
			Format: formatUsed,
			Args:   argsUsed,
		}
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Mock.Config.Expectation == Strict {
			m.Mock.Scene.MoqT.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= len(results.Results) {
		if !results.AnyTimes {
			if m.Mock.Config.Expectation == Strict {
				m.Mock.Scene.MoqT.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = len(results.Results) - 1
	}
	return
}

// OnCall returns the recorder implementation of the MoqT type
func (m *MockMoqT) OnCall() *MockMoqT_recorder {
	return &MockMoqT_recorder{
		Mock: m,
	}
}

func (m *MockMoqT_recorder) Errorf(format string, args ...interface{}) *MockMoqT_Errorf_fnRecorder {
	return &MockMoqT_Errorf_fnRecorder{
		Params: MockMoqT_Errorf_params{
			Format: format,
			Args:   args,
		},
		ParamsKey: MockMoqT_Errorf_paramsKey{
			Format: format,
			Args:   hash.DeepHash(args),
		},
		Mock: m.Mock,
	}
}

func (r *MockMoqT_Errorf_fnRecorder) AnyFormat() *MockMoqT_Errorf_fnRecorder {
	if r.Results != nil {
		r.Mock.Scene.MoqT.Fatalf("Any functions must be called prior to returning results, parameters: %#v", r.Params)
		return nil
	}
	r.AnyParams |= 1 << 0
	return r
}

func (r *MockMoqT_Errorf_fnRecorder) AnyArgs() *MockMoqT_Errorf_fnRecorder {
	if r.Results != nil {
		r.Mock.Scene.MoqT.Fatalf("Any functions must be called prior to returning results, parameters: %#v", r.Params)
		return nil
	}
	r.AnyParams |= 1 << 1
	return r
}

func (r *MockMoqT_Errorf_fnRecorder) ReturnResults() *MockMoqT_Errorf_fnRecorder {
	if r.Results == nil {
		anyCount := bits.OnesCount64(r.AnyParams)
		insertAt := -1
		var results *MockMoqT_Errorf_resultsByParams
		for n, res := range r.Mock.ResultsByParams_Errorf {
			if res.AnyParams == r.AnyParams {
				results = &res
				break
			}
			if res.AnyCount > anyCount {
				insertAt = n
			}
		}
		if results == nil {
			results = &MockMoqT_Errorf_resultsByParams{
				AnyCount:  anyCount,
				AnyParams: r.AnyParams,
				Results:   map[MockMoqT_Errorf_paramsKey]*MockMoqT_Errorf_resultMgr{},
			}
			r.Mock.ResultsByParams_Errorf = append(r.Mock.ResultsByParams_Errorf, *results)
			if insertAt != -1 && insertAt+1 < len(r.Mock.ResultsByParams_Errorf) {
				copy(r.Mock.ResultsByParams_Errorf[insertAt+1:], r.Mock.ResultsByParams_Errorf[insertAt:0])
				r.Mock.ResultsByParams_Errorf[insertAt] = *results
			}
		}

		var formatUsed string
		if r.AnyParams&(1<<0) == 0 {
			formatUsed = r.ParamsKey.Format
		}
		var argsUsed hash.Hash
		if r.AnyParams&(1<<1) == 0 {
			argsUsed = r.ParamsKey.Args
		}
		paramsKey := MockMoqT_Errorf_paramsKey{
			Format: formatUsed,
			Args:   argsUsed,
		}

		if _, ok := results.Results[paramsKey]; ok {
			r.Mock.Scene.MoqT.Fatalf("Expectations already recorded for mock with parameters %#v", r.Params)
			return nil
		}

		r.Results = &MockMoqT_Errorf_resultMgr{
			Params:   r.Params,
			Results:  []*MockMoqT_Errorf_results{},
			Index:    0,
			AnyTimes: false,
		}
		results.Results[paramsKey] = r.Results
	}
	r.Results.Results = append(r.Results.Results, &MockMoqT_Errorf_results{})
	return r
}

func (r *MockMoqT_Errorf_fnRecorder) Times(count int) *MockMoqT_Errorf_fnRecorder {
	if r.Results == nil {
		r.Mock.Scene.MoqT.Fatalf("Return must be called before calling Times")
		return nil
	}
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < count-1; n++ {
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (r *MockMoqT_Errorf_fnRecorder) AnyTimes() {
	if r.Results == nil {
		r.Mock.Scene.MoqT.Fatalf("Return must be called before calling AnyTimes")
		return
	}
	r.Results.AnyTimes = true
}

func (m *MockMoqT_recorder) Fatalf(format string, args ...interface{}) *MockMoqT_Fatalf_fnRecorder {
	return &MockMoqT_Fatalf_fnRecorder{
		Params: MockMoqT_Fatalf_params{
			Format: format,
			Args:   args,
		},
		ParamsKey: MockMoqT_Fatalf_paramsKey{
			Format: format,
			Args:   hash.DeepHash(args),
		},
		Mock: m.Mock,
	}
}

func (r *MockMoqT_Fatalf_fnRecorder) AnyFormat() *MockMoqT_Fatalf_fnRecorder {
	if r.Results != nil {
		r.Mock.Scene.MoqT.Fatalf("Any functions must be called prior to returning results, parameters: %#v", r.Params)
		return nil
	}
	r.AnyParams |= 1 << 0
	return r
}

func (r *MockMoqT_Fatalf_fnRecorder) AnyArgs() *MockMoqT_Fatalf_fnRecorder {
	if r.Results != nil {
		r.Mock.Scene.MoqT.Fatalf("Any functions must be called prior to returning results, parameters: %#v", r.Params)
		return nil
	}
	r.AnyParams |= 1 << 1
	return r
}

func (r *MockMoqT_Fatalf_fnRecorder) ReturnResults() *MockMoqT_Fatalf_fnRecorder {
	if r.Results == nil {
		anyCount := bits.OnesCount64(r.AnyParams)
		insertAt := -1
		var results *MockMoqT_Fatalf_resultsByParams
		for n, res := range r.Mock.ResultsByParams_Fatalf {
			if res.AnyParams == r.AnyParams {
				results = &res
				break
			}
			if res.AnyCount > anyCount {
				insertAt = n
			}
		}
		if results == nil {
			results = &MockMoqT_Fatalf_resultsByParams{
				AnyCount:  anyCount,
				AnyParams: r.AnyParams,
				Results:   map[MockMoqT_Fatalf_paramsKey]*MockMoqT_Fatalf_resultMgr{},
			}
			r.Mock.ResultsByParams_Fatalf = append(r.Mock.ResultsByParams_Fatalf, *results)
			if insertAt != -1 && insertAt+1 < len(r.Mock.ResultsByParams_Fatalf) {
				copy(r.Mock.ResultsByParams_Fatalf[insertAt+1:], r.Mock.ResultsByParams_Fatalf[insertAt:0])
				r.Mock.ResultsByParams_Fatalf[insertAt] = *results
			}
		}

		var formatUsed string
		if r.AnyParams&(1<<0) == 0 {
			formatUsed = r.ParamsKey.Format
		}
		var argsUsed hash.Hash
		if r.AnyParams&(1<<1) == 0 {
			argsUsed = r.ParamsKey.Args
		}
		paramsKey := MockMoqT_Fatalf_paramsKey{
			Format: formatUsed,
			Args:   argsUsed,
		}

		if _, ok := results.Results[paramsKey]; ok {
			r.Mock.Scene.MoqT.Fatalf("Expectations already recorded for mock with parameters %#v", r.Params)
			return nil
		}

		r.Results = &MockMoqT_Fatalf_resultMgr{
			Params:   r.Params,
			Results:  []*MockMoqT_Fatalf_results{},
			Index:    0,
			AnyTimes: false,
		}
		results.Results[paramsKey] = r.Results
	}
	r.Results.Results = append(r.Results.Results, &MockMoqT_Fatalf_results{})
	return r
}

func (r *MockMoqT_Fatalf_fnRecorder) Times(count int) *MockMoqT_Fatalf_fnRecorder {
	if r.Results == nil {
		r.Mock.Scene.MoqT.Fatalf("Return must be called before calling Times")
		return nil
	}
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < count-1; n++ {
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (r *MockMoqT_Fatalf_fnRecorder) AnyTimes() {
	if r.Results == nil {
		r.Mock.Scene.MoqT.Fatalf("Return must be called before calling AnyTimes")
		return
	}
	r.Results.AnyTimes = true
}

// Reset resets the state of the mock
func (m *MockMoqT) Reset() { m.ResultsByParams_Errorf = nil; m.ResultsByParams_Fatalf = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *MockMoqT) AssertExpectationsMet() {
	for _, res := range m.ResultsByParams_Errorf {
		for _, results := range res.Results {
			missing := len(results.Results) - int(atomic.LoadUint32(&results.Index))
			if missing == 1 && results.AnyTimes == true {
				continue
			}
			if missing > 0 {
				m.Scene.MoqT.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.Params)
			}
		}
	}
	for _, res := range m.ResultsByParams_Fatalf {
		for _, results := range res.Results {
			missing := len(results.Results) - int(atomic.LoadUint32(&results.Index))
			if missing == 1 && results.AnyTimes == true {
				continue
			}
			if missing > 0 {
				m.Scene.MoqT.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.Params)
			}
		}
	}
}
