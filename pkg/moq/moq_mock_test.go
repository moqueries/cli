// Code generated by Moqueries - https://github.com/myshkin5/moqueries - DO NOT EDIT!

package moq_test

import (
	"sync/atomic"

	"github.com/myshkin5/moqueries/pkg/moq"
)

// mockMock holds the state of a mock of the Mock type
type mockMock struct {
	scene                                 *moq.Scene
	config                                moq.MockConfig
	resultsByParams_Reset                 map[mockMock_Reset_paramsKey]*mockMock_Reset_resultMgr
	resultsByParams_AssertExpectationsMet map[mockMock_AssertExpectationsMet_paramsKey]*mockMock_AssertExpectationsMet_resultMgr
}

// mockMock_mock isolates the mock interface of the Mock type
type mockMock_mock struct {
	mock *mockMock
}

// mockMock_recorder isolates the recorder interface of the Mock type
type mockMock_recorder struct {
	mock *mockMock
}

// mockMock_Reset_params holds the params of the Mock type
type mockMock_Reset_params struct{}

// mockMock_Reset_paramsKey holds the map key params of the Mock type
type mockMock_Reset_paramsKey struct{}

// mockMock_Reset_resultMgr manages multiple results and the state of the Mock type
type mockMock_Reset_resultMgr struct {
	params   mockMock_Reset_params
	results  []*mockMock_Reset_results
	index    uint32
	anyTimes bool
}

// mockMock_Reset_results holds the results of the Mock type
type mockMock_Reset_results struct {
}

// mockMock_Reset_fnRecorder routes recorded function calls to the mockMock mock
type mockMock_Reset_fnRecorder struct {
	params    mockMock_Reset_params
	paramsKey mockMock_Reset_paramsKey
	results   *mockMock_Reset_resultMgr
	mock      *mockMock
}

// mockMock_AssertExpectationsMet_params holds the params of the Mock type
type mockMock_AssertExpectationsMet_params struct{}

// mockMock_AssertExpectationsMet_paramsKey holds the map key params of the Mock type
type mockMock_AssertExpectationsMet_paramsKey struct{}

// mockMock_AssertExpectationsMet_resultMgr manages multiple results and the state of the Mock type
type mockMock_AssertExpectationsMet_resultMgr struct {
	params   mockMock_AssertExpectationsMet_params
	results  []*mockMock_AssertExpectationsMet_results
	index    uint32
	anyTimes bool
}

// mockMock_AssertExpectationsMet_results holds the results of the Mock type
type mockMock_AssertExpectationsMet_results struct {
}

// mockMock_AssertExpectationsMet_fnRecorder routes recorded function calls to the mockMock mock
type mockMock_AssertExpectationsMet_fnRecorder struct {
	params    mockMock_AssertExpectationsMet_params
	paramsKey mockMock_AssertExpectationsMet_paramsKey
	results   *mockMock_AssertExpectationsMet_resultMgr
	mock      *mockMock
}

// newMockMock creates a new mock of the Mock type
func newMockMock(scene *moq.Scene, config *moq.MockConfig) *mockMock {
	if config == nil {
		config = &moq.MockConfig{}
	}
	m := &mockMock{
		scene:  scene,
		config: *config,
	}
	m.Reset()
	scene.AddMock(m)
	return m
}

// mock returns the mock implementation of the Mock type
func (m *mockMock) mock() *mockMock_mock {
	return &mockMock_mock{
		mock: m,
	}
}

func (m *mockMock_mock) Reset() {
	params := mockMock_Reset_params{}
	paramsKey := mockMock_Reset_paramsKey{}
	results, ok := m.mock.resultsByParams_Reset[paramsKey]
	if !ok {
		if m.mock.config.Expectation == moq.Strict {
			m.mock.scene.MoqT.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= len(results.results) {
		if !results.anyTimes {
			if m.mock.config.Expectation == moq.Strict {
				m.mock.scene.MoqT.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = len(results.results) - 1
	}
	return
}

func (m *mockMock_mock) AssertExpectationsMet() {
	params := mockMock_AssertExpectationsMet_params{}
	paramsKey := mockMock_AssertExpectationsMet_paramsKey{}
	results, ok := m.mock.resultsByParams_AssertExpectationsMet[paramsKey]
	if !ok {
		if m.mock.config.Expectation == moq.Strict {
			m.mock.scene.MoqT.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= len(results.results) {
		if !results.anyTimes {
			if m.mock.config.Expectation == moq.Strict {
				m.mock.scene.MoqT.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = len(results.results) - 1
	}
	return
}

// onCall returns the recorder implementation of the Mock type
func (m *mockMock) onCall() *mockMock_recorder {
	return &mockMock_recorder{
		mock: m,
	}
}

func (m *mockMock_recorder) Reset() *mockMock_Reset_fnRecorder {
	return &mockMock_Reset_fnRecorder{
		params:    mockMock_Reset_params{},
		paramsKey: mockMock_Reset_paramsKey{},
		mock:      m.mock,
	}
}

func (r *mockMock_Reset_fnRecorder) returnResults() *mockMock_Reset_fnRecorder {
	if r.results == nil {
		if _, ok := r.mock.resultsByParams_Reset[r.paramsKey]; ok {
			r.mock.scene.MoqT.Fatalf("Expectations already recorded for mock with parameters %#v", r.params)
			return nil
		}

		r.results = &mockMock_Reset_resultMgr{
			params:   r.params,
			results:  []*mockMock_Reset_results{},
			index:    0,
			anyTimes: false,
		}
		r.mock.resultsByParams_Reset[r.paramsKey] = r.results
	}
	r.results.results = append(r.results.results, &mockMock_Reset_results{})
	return r
}

func (r *mockMock_Reset_fnRecorder) times(count int) *mockMock_Reset_fnRecorder {
	if r.results == nil {
		r.mock.scene.MoqT.Fatalf("Return must be called before calling Times")
		return nil
	}
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < count-1; n++ {
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (r *mockMock_Reset_fnRecorder) anyTimes() {
	if r.results == nil {
		r.mock.scene.MoqT.Fatalf("Return must be called before calling AnyTimes")
		return
	}
	r.results.anyTimes = true
}

func (m *mockMock_recorder) AssertExpectationsMet() *mockMock_AssertExpectationsMet_fnRecorder {
	return &mockMock_AssertExpectationsMet_fnRecorder{
		params:    mockMock_AssertExpectationsMet_params{},
		paramsKey: mockMock_AssertExpectationsMet_paramsKey{},
		mock:      m.mock,
	}
}

func (r *mockMock_AssertExpectationsMet_fnRecorder) returnResults() *mockMock_AssertExpectationsMet_fnRecorder {
	if r.results == nil {
		if _, ok := r.mock.resultsByParams_AssertExpectationsMet[r.paramsKey]; ok {
			r.mock.scene.MoqT.Fatalf("Expectations already recorded for mock with parameters %#v", r.params)
			return nil
		}

		r.results = &mockMock_AssertExpectationsMet_resultMgr{
			params:   r.params,
			results:  []*mockMock_AssertExpectationsMet_results{},
			index:    0,
			anyTimes: false,
		}
		r.mock.resultsByParams_AssertExpectationsMet[r.paramsKey] = r.results
	}
	r.results.results = append(r.results.results, &mockMock_AssertExpectationsMet_results{})
	return r
}

func (r *mockMock_AssertExpectationsMet_fnRecorder) times(count int) *mockMock_AssertExpectationsMet_fnRecorder {
	if r.results == nil {
		r.mock.scene.MoqT.Fatalf("Return must be called before calling Times")
		return nil
	}
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < count-1; n++ {
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (r *mockMock_AssertExpectationsMet_fnRecorder) anyTimes() {
	if r.results == nil {
		r.mock.scene.MoqT.Fatalf("Return must be called before calling AnyTimes")
		return
	}
	r.results.anyTimes = true
}

// Reset resets the state of the mock
func (m *mockMock) Reset() {
	m.resultsByParams_Reset = map[mockMock_Reset_paramsKey]*mockMock_Reset_resultMgr{}
	m.resultsByParams_AssertExpectationsMet = map[mockMock_AssertExpectationsMet_paramsKey]*mockMock_AssertExpectationsMet_resultMgr{}
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *mockMock) AssertExpectationsMet() {
	for _, results := range m.resultsByParams_Reset {
		missing := len(results.results) - int(atomic.LoadUint32(&results.index))
		if missing == 1 && results.anyTimes == true {
			continue
		}
		if missing > 0 {
			m.scene.MoqT.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.params)
		}
	}
	for _, results := range m.resultsByParams_AssertExpectationsMet {
		missing := len(results.results) - int(atomic.LoadUint32(&results.index))
		if missing == 1 && results.anyTimes == true {
			continue
		}
		if missing > 0 {
			m.scene.MoqT.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.params)
		}
	}
}
