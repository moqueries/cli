// Code generated by Moqueries - https://github.com/myshkin5/moqueries - DO NOT EDIT!

package generator_test

import (
	"math/bits"
	"sync/atomic"

	"github.com/dave/dst"
	"github.com/myshkin5/moqueries/pkg/generator"
	"github.com/myshkin5/moqueries/pkg/hash"
	"github.com/myshkin5/moqueries/pkg/moq"
)

// mockConverterer holds the state of a mock of the Converterer type
type mockConverterer struct {
	scene                             *moq.Scene
	config                            moq.MockConfig
	resultsByParams_BaseStruct        []mockConverterer_BaseStruct_resultsByParams
	resultsByParams_IsolationStruct   []mockConverterer_IsolationStruct_resultsByParams
	resultsByParams_MethodStructs     []mockConverterer_MethodStructs_resultsByParams
	resultsByParams_NewFunc           []mockConverterer_NewFunc_resultsByParams
	resultsByParams_IsolationAccessor []mockConverterer_IsolationAccessor_resultsByParams
	resultsByParams_FuncClosure       []mockConverterer_FuncClosure_resultsByParams
	resultsByParams_MockMethod        []mockConverterer_MockMethod_resultsByParams
	resultsByParams_RecorderMethods   []mockConverterer_RecorderMethods_resultsByParams
	resultsByParams_ResetMethod       []mockConverterer_ResetMethod_resultsByParams
	resultsByParams_AssertMethod      []mockConverterer_AssertMethod_resultsByParams
}

// mockConverterer_mock isolates the mock interface of the Converterer type
type mockConverterer_mock struct {
	mock *mockConverterer
}

// mockConverterer_recorder isolates the recorder interface of the Converterer type
type mockConverterer_recorder struct {
	mock *mockConverterer
}

// mockConverterer_BaseStruct_params holds the params of the Converterer type
type mockConverterer_BaseStruct_params struct {
	typeSpec *dst.TypeSpec
	funcs    []generator.Func
}

// mockConverterer_BaseStruct_paramsKey holds the map key params of the Converterer type
type mockConverterer_BaseStruct_paramsKey struct {
	typeSpec *dst.TypeSpec
	funcs    hash.Hash
}

// mockConverterer_BaseStruct_resultsByParams contains the results for a given set of parameters for the Converterer type
type mockConverterer_BaseStruct_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[mockConverterer_BaseStruct_paramsKey]*mockConverterer_BaseStruct_resultMgr
}

// mockConverterer_BaseStruct_resultMgr manages multiple results and the state of the Converterer type
type mockConverterer_BaseStruct_resultMgr struct {
	params   mockConverterer_BaseStruct_params
	results  []*mockConverterer_BaseStruct_results
	index    uint32
	anyTimes bool
}

// mockConverterer_BaseStruct_results holds the results of the Converterer type
type mockConverterer_BaseStruct_results struct {
	structDecl   *dst.GenDecl
	moq_sequence uint32
}

// mockConverterer_BaseStruct_fnRecorder routes recorded function calls to the mockConverterer mock
type mockConverterer_BaseStruct_fnRecorder struct {
	params    mockConverterer_BaseStruct_params
	paramsKey mockConverterer_BaseStruct_paramsKey
	anyParams uint64
	sequence  bool
	results   *mockConverterer_BaseStruct_resultMgr
	mock      *mockConverterer
}

// mockConverterer_IsolationStruct_params holds the params of the Converterer type
type mockConverterer_IsolationStruct_params struct{ typeName, suffix string }

// mockConverterer_IsolationStruct_paramsKey holds the map key params of the Converterer type
type mockConverterer_IsolationStruct_paramsKey struct{ typeName, suffix string }

// mockConverterer_IsolationStruct_resultsByParams contains the results for a given set of parameters for the Converterer type
type mockConverterer_IsolationStruct_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[mockConverterer_IsolationStruct_paramsKey]*mockConverterer_IsolationStruct_resultMgr
}

// mockConverterer_IsolationStruct_resultMgr manages multiple results and the state of the Converterer type
type mockConverterer_IsolationStruct_resultMgr struct {
	params   mockConverterer_IsolationStruct_params
	results  []*mockConverterer_IsolationStruct_results
	index    uint32
	anyTimes bool
}

// mockConverterer_IsolationStruct_results holds the results of the Converterer type
type mockConverterer_IsolationStruct_results struct {
	structDecl   *dst.GenDecl
	moq_sequence uint32
}

// mockConverterer_IsolationStruct_fnRecorder routes recorded function calls to the mockConverterer mock
type mockConverterer_IsolationStruct_fnRecorder struct {
	params    mockConverterer_IsolationStruct_params
	paramsKey mockConverterer_IsolationStruct_paramsKey
	anyParams uint64
	sequence  bool
	results   *mockConverterer_IsolationStruct_resultMgr
	mock      *mockConverterer
}

// mockConverterer_MethodStructs_params holds the params of the Converterer type
type mockConverterer_MethodStructs_params struct {
	typeSpec *dst.TypeSpec
	fn       generator.Func
}

// mockConverterer_MethodStructs_paramsKey holds the map key params of the Converterer type
type mockConverterer_MethodStructs_paramsKey struct {
	typeSpec *dst.TypeSpec
	fn       generator.Func
}

// mockConverterer_MethodStructs_resultsByParams contains the results for a given set of parameters for the Converterer type
type mockConverterer_MethodStructs_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[mockConverterer_MethodStructs_paramsKey]*mockConverterer_MethodStructs_resultMgr
}

// mockConverterer_MethodStructs_resultMgr manages multiple results and the state of the Converterer type
type mockConverterer_MethodStructs_resultMgr struct {
	params   mockConverterer_MethodStructs_params
	results  []*mockConverterer_MethodStructs_results
	index    uint32
	anyTimes bool
}

// mockConverterer_MethodStructs_results holds the results of the Converterer type
type mockConverterer_MethodStructs_results struct {
	structDecls  []dst.Decl
	moq_sequence uint32
}

// mockConverterer_MethodStructs_fnRecorder routes recorded function calls to the mockConverterer mock
type mockConverterer_MethodStructs_fnRecorder struct {
	params    mockConverterer_MethodStructs_params
	paramsKey mockConverterer_MethodStructs_paramsKey
	anyParams uint64
	sequence  bool
	results   *mockConverterer_MethodStructs_resultMgr
	mock      *mockConverterer
}

// mockConverterer_NewFunc_params holds the params of the Converterer type
type mockConverterer_NewFunc_params struct{ typeSpec *dst.TypeSpec }

// mockConverterer_NewFunc_paramsKey holds the map key params of the Converterer type
type mockConverterer_NewFunc_paramsKey struct{ typeSpec *dst.TypeSpec }

// mockConverterer_NewFunc_resultsByParams contains the results for a given set of parameters for the Converterer type
type mockConverterer_NewFunc_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[mockConverterer_NewFunc_paramsKey]*mockConverterer_NewFunc_resultMgr
}

// mockConverterer_NewFunc_resultMgr manages multiple results and the state of the Converterer type
type mockConverterer_NewFunc_resultMgr struct {
	params   mockConverterer_NewFunc_params
	results  []*mockConverterer_NewFunc_results
	index    uint32
	anyTimes bool
}

// mockConverterer_NewFunc_results holds the results of the Converterer type
type mockConverterer_NewFunc_results struct {
	funcDecl     *dst.FuncDecl
	moq_sequence uint32
}

// mockConverterer_NewFunc_fnRecorder routes recorded function calls to the mockConverterer mock
type mockConverterer_NewFunc_fnRecorder struct {
	params    mockConverterer_NewFunc_params
	paramsKey mockConverterer_NewFunc_paramsKey
	anyParams uint64
	sequence  bool
	results   *mockConverterer_NewFunc_resultMgr
	mock      *mockConverterer
}

// mockConverterer_IsolationAccessor_params holds the params of the Converterer type
type mockConverterer_IsolationAccessor_params struct{ typeName, suffix, fnName string }

// mockConverterer_IsolationAccessor_paramsKey holds the map key params of the Converterer type
type mockConverterer_IsolationAccessor_paramsKey struct{ typeName, suffix, fnName string }

// mockConverterer_IsolationAccessor_resultsByParams contains the results for a given set of parameters for the Converterer type
type mockConverterer_IsolationAccessor_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[mockConverterer_IsolationAccessor_paramsKey]*mockConverterer_IsolationAccessor_resultMgr
}

// mockConverterer_IsolationAccessor_resultMgr manages multiple results and the state of the Converterer type
type mockConverterer_IsolationAccessor_resultMgr struct {
	params   mockConverterer_IsolationAccessor_params
	results  []*mockConverterer_IsolationAccessor_results
	index    uint32
	anyTimes bool
}

// mockConverterer_IsolationAccessor_results holds the results of the Converterer type
type mockConverterer_IsolationAccessor_results struct {
	funcDecl     *dst.FuncDecl
	moq_sequence uint32
}

// mockConverterer_IsolationAccessor_fnRecorder routes recorded function calls to the mockConverterer mock
type mockConverterer_IsolationAccessor_fnRecorder struct {
	params    mockConverterer_IsolationAccessor_params
	paramsKey mockConverterer_IsolationAccessor_paramsKey
	anyParams uint64
	sequence  bool
	results   *mockConverterer_IsolationAccessor_resultMgr
	mock      *mockConverterer
}

// mockConverterer_FuncClosure_params holds the params of the Converterer type
type mockConverterer_FuncClosure_params struct {
	typeName, pkgPath string
	fn                generator.Func
}

// mockConverterer_FuncClosure_paramsKey holds the map key params of the Converterer type
type mockConverterer_FuncClosure_paramsKey struct {
	typeName, pkgPath string
	fn                generator.Func
}

// mockConverterer_FuncClosure_resultsByParams contains the results for a given set of parameters for the Converterer type
type mockConverterer_FuncClosure_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[mockConverterer_FuncClosure_paramsKey]*mockConverterer_FuncClosure_resultMgr
}

// mockConverterer_FuncClosure_resultMgr manages multiple results and the state of the Converterer type
type mockConverterer_FuncClosure_resultMgr struct {
	params   mockConverterer_FuncClosure_params
	results  []*mockConverterer_FuncClosure_results
	index    uint32
	anyTimes bool
}

// mockConverterer_FuncClosure_results holds the results of the Converterer type
type mockConverterer_FuncClosure_results struct {
	funcDecl     *dst.FuncDecl
	moq_sequence uint32
}

// mockConverterer_FuncClosure_fnRecorder routes recorded function calls to the mockConverterer mock
type mockConverterer_FuncClosure_fnRecorder struct {
	params    mockConverterer_FuncClosure_params
	paramsKey mockConverterer_FuncClosure_paramsKey
	anyParams uint64
	sequence  bool
	results   *mockConverterer_FuncClosure_resultMgr
	mock      *mockConverterer
}

// mockConverterer_MockMethod_params holds the params of the Converterer type
type mockConverterer_MockMethod_params struct {
	typeName string
	fn       generator.Func
}

// mockConverterer_MockMethod_paramsKey holds the map key params of the Converterer type
type mockConverterer_MockMethod_paramsKey struct {
	typeName string
	fn       generator.Func
}

// mockConverterer_MockMethod_resultsByParams contains the results for a given set of parameters for the Converterer type
type mockConverterer_MockMethod_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[mockConverterer_MockMethod_paramsKey]*mockConverterer_MockMethod_resultMgr
}

// mockConverterer_MockMethod_resultMgr manages multiple results and the state of the Converterer type
type mockConverterer_MockMethod_resultMgr struct {
	params   mockConverterer_MockMethod_params
	results  []*mockConverterer_MockMethod_results
	index    uint32
	anyTimes bool
}

// mockConverterer_MockMethod_results holds the results of the Converterer type
type mockConverterer_MockMethod_results struct {
	funcDecl     *dst.FuncDecl
	moq_sequence uint32
}

// mockConverterer_MockMethod_fnRecorder routes recorded function calls to the mockConverterer mock
type mockConverterer_MockMethod_fnRecorder struct {
	params    mockConverterer_MockMethod_params
	paramsKey mockConverterer_MockMethod_paramsKey
	anyParams uint64
	sequence  bool
	results   *mockConverterer_MockMethod_resultMgr
	mock      *mockConverterer
}

// mockConverterer_RecorderMethods_params holds the params of the Converterer type
type mockConverterer_RecorderMethods_params struct {
	typeName string
	fn       generator.Func
}

// mockConverterer_RecorderMethods_paramsKey holds the map key params of the Converterer type
type mockConverterer_RecorderMethods_paramsKey struct {
	typeName string
	fn       generator.Func
}

// mockConverterer_RecorderMethods_resultsByParams contains the results for a given set of parameters for the Converterer type
type mockConverterer_RecorderMethods_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[mockConverterer_RecorderMethods_paramsKey]*mockConverterer_RecorderMethods_resultMgr
}

// mockConverterer_RecorderMethods_resultMgr manages multiple results and the state of the Converterer type
type mockConverterer_RecorderMethods_resultMgr struct {
	params   mockConverterer_RecorderMethods_params
	results  []*mockConverterer_RecorderMethods_results
	index    uint32
	anyTimes bool
}

// mockConverterer_RecorderMethods_results holds the results of the Converterer type
type mockConverterer_RecorderMethods_results struct {
	funcDecls    []dst.Decl
	moq_sequence uint32
}

// mockConverterer_RecorderMethods_fnRecorder routes recorded function calls to the mockConverterer mock
type mockConverterer_RecorderMethods_fnRecorder struct {
	params    mockConverterer_RecorderMethods_params
	paramsKey mockConverterer_RecorderMethods_paramsKey
	anyParams uint64
	sequence  bool
	results   *mockConverterer_RecorderMethods_resultMgr
	mock      *mockConverterer
}

// mockConverterer_ResetMethod_params holds the params of the Converterer type
type mockConverterer_ResetMethod_params struct {
	typeSpec *dst.TypeSpec
	funcs    []generator.Func
}

// mockConverterer_ResetMethod_paramsKey holds the map key params of the Converterer type
type mockConverterer_ResetMethod_paramsKey struct {
	typeSpec *dst.TypeSpec
	funcs    hash.Hash
}

// mockConverterer_ResetMethod_resultsByParams contains the results for a given set of parameters for the Converterer type
type mockConverterer_ResetMethod_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[mockConverterer_ResetMethod_paramsKey]*mockConverterer_ResetMethod_resultMgr
}

// mockConverterer_ResetMethod_resultMgr manages multiple results and the state of the Converterer type
type mockConverterer_ResetMethod_resultMgr struct {
	params   mockConverterer_ResetMethod_params
	results  []*mockConverterer_ResetMethod_results
	index    uint32
	anyTimes bool
}

// mockConverterer_ResetMethod_results holds the results of the Converterer type
type mockConverterer_ResetMethod_results struct {
	funcDecl     *dst.FuncDecl
	moq_sequence uint32
}

// mockConverterer_ResetMethod_fnRecorder routes recorded function calls to the mockConverterer mock
type mockConverterer_ResetMethod_fnRecorder struct {
	params    mockConverterer_ResetMethod_params
	paramsKey mockConverterer_ResetMethod_paramsKey
	anyParams uint64
	sequence  bool
	results   *mockConverterer_ResetMethod_resultMgr
	mock      *mockConverterer
}

// mockConverterer_AssertMethod_params holds the params of the Converterer type
type mockConverterer_AssertMethod_params struct {
	typeSpec *dst.TypeSpec
	funcs    []generator.Func
}

// mockConverterer_AssertMethod_paramsKey holds the map key params of the Converterer type
type mockConverterer_AssertMethod_paramsKey struct {
	typeSpec *dst.TypeSpec
	funcs    hash.Hash
}

// mockConverterer_AssertMethod_resultsByParams contains the results for a given set of parameters for the Converterer type
type mockConverterer_AssertMethod_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[mockConverterer_AssertMethod_paramsKey]*mockConverterer_AssertMethod_resultMgr
}

// mockConverterer_AssertMethod_resultMgr manages multiple results and the state of the Converterer type
type mockConverterer_AssertMethod_resultMgr struct {
	params   mockConverterer_AssertMethod_params
	results  []*mockConverterer_AssertMethod_results
	index    uint32
	anyTimes bool
}

// mockConverterer_AssertMethod_results holds the results of the Converterer type
type mockConverterer_AssertMethod_results struct {
	funcDecl     *dst.FuncDecl
	moq_sequence uint32
}

// mockConverterer_AssertMethod_fnRecorder routes recorded function calls to the mockConverterer mock
type mockConverterer_AssertMethod_fnRecorder struct {
	params    mockConverterer_AssertMethod_params
	paramsKey mockConverterer_AssertMethod_paramsKey
	anyParams uint64
	sequence  bool
	results   *mockConverterer_AssertMethod_resultMgr
	mock      *mockConverterer
}

// newMockConverterer creates a new mock of the Converterer type
func newMockConverterer(scene *moq.Scene, config *moq.MockConfig) *mockConverterer {
	if config == nil {
		config = &moq.MockConfig{}
	}
	m := &mockConverterer{
		scene:  scene,
		config: *config,
	}
	scene.AddMock(m)
	return m
}

// mock returns the mock implementation of the Converterer type
func (m *mockConverterer) mock() *mockConverterer_mock {
	return &mockConverterer_mock{
		mock: m,
	}
}

func (m *mockConverterer_mock) BaseStruct(typeSpec *dst.TypeSpec, funcs []generator.Func) (structDecl *dst.GenDecl) {
	params := mockConverterer_BaseStruct_params{
		typeSpec: typeSpec,
		funcs:    funcs,
	}
	var results *mockConverterer_BaseStruct_resultMgr
	for _, resultsByParams := range m.mock.resultsByParams_BaseStruct {
		var typeSpecUsed *dst.TypeSpec
		if resultsByParams.anyParams&(1<<0) == 0 {
			typeSpecUsed = typeSpec
		}
		var funcsUsed hash.Hash
		if resultsByParams.anyParams&(1<<1) == 0 {
			funcsUsed = hash.DeepHash(funcs)
		}
		paramsKey := mockConverterer_BaseStruct_paramsKey{
			typeSpec: typeSpecUsed,
			funcs:    funcsUsed,
		}
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.mock.config.Expectation == moq.Strict {
			m.mock.scene.MoqT.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= len(results.results) {
		if !results.anyTimes {
			if m.mock.config.Expectation == moq.Strict {
				m.mock.scene.MoqT.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = len(results.results) - 1
	}

	result := results.results[i]
	if result.moq_sequence != 0 {
		sequence := m.mock.scene.NextMockSequence()
		if (!results.anyTimes && result.moq_sequence != sequence) || result.moq_sequence > sequence {
			m.mock.scene.MoqT.Fatalf("Call sequence does not match %#v", params)
		}
	}

	structDecl = result.structDecl
	return
}

func (m *mockConverterer_mock) IsolationStruct(typeName, suffix string) (structDecl *dst.GenDecl) {
	params := mockConverterer_IsolationStruct_params{
		typeName: typeName,
		suffix:   suffix,
	}
	var results *mockConverterer_IsolationStruct_resultMgr
	for _, resultsByParams := range m.mock.resultsByParams_IsolationStruct {
		var typeNameUsed string
		if resultsByParams.anyParams&(1<<0) == 0 {
			typeNameUsed = typeName
		}
		var suffixUsed string
		if resultsByParams.anyParams&(1<<1) == 0 {
			suffixUsed = suffix
		}
		paramsKey := mockConverterer_IsolationStruct_paramsKey{
			typeName: typeNameUsed,
			suffix:   suffixUsed,
		}
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.mock.config.Expectation == moq.Strict {
			m.mock.scene.MoqT.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= len(results.results) {
		if !results.anyTimes {
			if m.mock.config.Expectation == moq.Strict {
				m.mock.scene.MoqT.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = len(results.results) - 1
	}

	result := results.results[i]
	if result.moq_sequence != 0 {
		sequence := m.mock.scene.NextMockSequence()
		if (!results.anyTimes && result.moq_sequence != sequence) || result.moq_sequence > sequence {
			m.mock.scene.MoqT.Fatalf("Call sequence does not match %#v", params)
		}
	}

	structDecl = result.structDecl
	return
}

func (m *mockConverterer_mock) MethodStructs(typeSpec *dst.TypeSpec, fn generator.Func) (structDecls []dst.Decl) {
	params := mockConverterer_MethodStructs_params{
		typeSpec: typeSpec,
		fn:       fn,
	}
	var results *mockConverterer_MethodStructs_resultMgr
	for _, resultsByParams := range m.mock.resultsByParams_MethodStructs {
		var typeSpecUsed *dst.TypeSpec
		if resultsByParams.anyParams&(1<<0) == 0 {
			typeSpecUsed = typeSpec
		}
		var fnUsed generator.Func
		if resultsByParams.anyParams&(1<<1) == 0 {
			fnUsed = fn
		}
		paramsKey := mockConverterer_MethodStructs_paramsKey{
			typeSpec: typeSpecUsed,
			fn:       fnUsed,
		}
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.mock.config.Expectation == moq.Strict {
			m.mock.scene.MoqT.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= len(results.results) {
		if !results.anyTimes {
			if m.mock.config.Expectation == moq.Strict {
				m.mock.scene.MoqT.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = len(results.results) - 1
	}

	result := results.results[i]
	if result.moq_sequence != 0 {
		sequence := m.mock.scene.NextMockSequence()
		if (!results.anyTimes && result.moq_sequence != sequence) || result.moq_sequence > sequence {
			m.mock.scene.MoqT.Fatalf("Call sequence does not match %#v", params)
		}
	}

	structDecls = result.structDecls
	return
}

func (m *mockConverterer_mock) NewFunc(typeSpec *dst.TypeSpec) (funcDecl *dst.FuncDecl) {
	params := mockConverterer_NewFunc_params{
		typeSpec: typeSpec,
	}
	var results *mockConverterer_NewFunc_resultMgr
	for _, resultsByParams := range m.mock.resultsByParams_NewFunc {
		var typeSpecUsed *dst.TypeSpec
		if resultsByParams.anyParams&(1<<0) == 0 {
			typeSpecUsed = typeSpec
		}
		paramsKey := mockConverterer_NewFunc_paramsKey{
			typeSpec: typeSpecUsed,
		}
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.mock.config.Expectation == moq.Strict {
			m.mock.scene.MoqT.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= len(results.results) {
		if !results.anyTimes {
			if m.mock.config.Expectation == moq.Strict {
				m.mock.scene.MoqT.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = len(results.results) - 1
	}

	result := results.results[i]
	if result.moq_sequence != 0 {
		sequence := m.mock.scene.NextMockSequence()
		if (!results.anyTimes && result.moq_sequence != sequence) || result.moq_sequence > sequence {
			m.mock.scene.MoqT.Fatalf("Call sequence does not match %#v", params)
		}
	}

	funcDecl = result.funcDecl
	return
}

func (m *mockConverterer_mock) IsolationAccessor(typeName, suffix, fnName string) (funcDecl *dst.FuncDecl) {
	params := mockConverterer_IsolationAccessor_params{
		typeName: typeName,
		suffix:   suffix,
		fnName:   fnName,
	}
	var results *mockConverterer_IsolationAccessor_resultMgr
	for _, resultsByParams := range m.mock.resultsByParams_IsolationAccessor {
		var typeNameUsed string
		if resultsByParams.anyParams&(1<<0) == 0 {
			typeNameUsed = typeName
		}
		var suffixUsed string
		if resultsByParams.anyParams&(1<<1) == 0 {
			suffixUsed = suffix
		}
		var fnNameUsed string
		if resultsByParams.anyParams&(1<<2) == 0 {
			fnNameUsed = fnName
		}
		paramsKey := mockConverterer_IsolationAccessor_paramsKey{
			typeName: typeNameUsed,
			suffix:   suffixUsed,
			fnName:   fnNameUsed,
		}
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.mock.config.Expectation == moq.Strict {
			m.mock.scene.MoqT.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= len(results.results) {
		if !results.anyTimes {
			if m.mock.config.Expectation == moq.Strict {
				m.mock.scene.MoqT.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = len(results.results) - 1
	}

	result := results.results[i]
	if result.moq_sequence != 0 {
		sequence := m.mock.scene.NextMockSequence()
		if (!results.anyTimes && result.moq_sequence != sequence) || result.moq_sequence > sequence {
			m.mock.scene.MoqT.Fatalf("Call sequence does not match %#v", params)
		}
	}

	funcDecl = result.funcDecl
	return
}

func (m *mockConverterer_mock) FuncClosure(typeName, pkgPath string, fn generator.Func) (funcDecl *dst.FuncDecl) {
	params := mockConverterer_FuncClosure_params{
		typeName: typeName,
		pkgPath:  pkgPath,
		fn:       fn,
	}
	var results *mockConverterer_FuncClosure_resultMgr
	for _, resultsByParams := range m.mock.resultsByParams_FuncClosure {
		var typeNameUsed string
		if resultsByParams.anyParams&(1<<0) == 0 {
			typeNameUsed = typeName
		}
		var pkgPathUsed string
		if resultsByParams.anyParams&(1<<1) == 0 {
			pkgPathUsed = pkgPath
		}
		var fnUsed generator.Func
		if resultsByParams.anyParams&(1<<2) == 0 {
			fnUsed = fn
		}
		paramsKey := mockConverterer_FuncClosure_paramsKey{
			typeName: typeNameUsed,
			pkgPath:  pkgPathUsed,
			fn:       fnUsed,
		}
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.mock.config.Expectation == moq.Strict {
			m.mock.scene.MoqT.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= len(results.results) {
		if !results.anyTimes {
			if m.mock.config.Expectation == moq.Strict {
				m.mock.scene.MoqT.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = len(results.results) - 1
	}

	result := results.results[i]
	if result.moq_sequence != 0 {
		sequence := m.mock.scene.NextMockSequence()
		if (!results.anyTimes && result.moq_sequence != sequence) || result.moq_sequence > sequence {
			m.mock.scene.MoqT.Fatalf("Call sequence does not match %#v", params)
		}
	}

	funcDecl = result.funcDecl
	return
}

func (m *mockConverterer_mock) MockMethod(typeName string, fn generator.Func) (funcDecl *dst.FuncDecl) {
	params := mockConverterer_MockMethod_params{
		typeName: typeName,
		fn:       fn,
	}
	var results *mockConverterer_MockMethod_resultMgr
	for _, resultsByParams := range m.mock.resultsByParams_MockMethod {
		var typeNameUsed string
		if resultsByParams.anyParams&(1<<0) == 0 {
			typeNameUsed = typeName
		}
		var fnUsed generator.Func
		if resultsByParams.anyParams&(1<<1) == 0 {
			fnUsed = fn
		}
		paramsKey := mockConverterer_MockMethod_paramsKey{
			typeName: typeNameUsed,
			fn:       fnUsed,
		}
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.mock.config.Expectation == moq.Strict {
			m.mock.scene.MoqT.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= len(results.results) {
		if !results.anyTimes {
			if m.mock.config.Expectation == moq.Strict {
				m.mock.scene.MoqT.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = len(results.results) - 1
	}

	result := results.results[i]
	if result.moq_sequence != 0 {
		sequence := m.mock.scene.NextMockSequence()
		if (!results.anyTimes && result.moq_sequence != sequence) || result.moq_sequence > sequence {
			m.mock.scene.MoqT.Fatalf("Call sequence does not match %#v", params)
		}
	}

	funcDecl = result.funcDecl
	return
}

func (m *mockConverterer_mock) RecorderMethods(typeName string, fn generator.Func) (funcDecls []dst.Decl) {
	params := mockConverterer_RecorderMethods_params{
		typeName: typeName,
		fn:       fn,
	}
	var results *mockConverterer_RecorderMethods_resultMgr
	for _, resultsByParams := range m.mock.resultsByParams_RecorderMethods {
		var typeNameUsed string
		if resultsByParams.anyParams&(1<<0) == 0 {
			typeNameUsed = typeName
		}
		var fnUsed generator.Func
		if resultsByParams.anyParams&(1<<1) == 0 {
			fnUsed = fn
		}
		paramsKey := mockConverterer_RecorderMethods_paramsKey{
			typeName: typeNameUsed,
			fn:       fnUsed,
		}
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.mock.config.Expectation == moq.Strict {
			m.mock.scene.MoqT.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= len(results.results) {
		if !results.anyTimes {
			if m.mock.config.Expectation == moq.Strict {
				m.mock.scene.MoqT.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = len(results.results) - 1
	}

	result := results.results[i]
	if result.moq_sequence != 0 {
		sequence := m.mock.scene.NextMockSequence()
		if (!results.anyTimes && result.moq_sequence != sequence) || result.moq_sequence > sequence {
			m.mock.scene.MoqT.Fatalf("Call sequence does not match %#v", params)
		}
	}

	funcDecls = result.funcDecls
	return
}

func (m *mockConverterer_mock) ResetMethod(typeSpec *dst.TypeSpec, funcs []generator.Func) (funcDecl *dst.FuncDecl) {
	params := mockConverterer_ResetMethod_params{
		typeSpec: typeSpec,
		funcs:    funcs,
	}
	var results *mockConverterer_ResetMethod_resultMgr
	for _, resultsByParams := range m.mock.resultsByParams_ResetMethod {
		var typeSpecUsed *dst.TypeSpec
		if resultsByParams.anyParams&(1<<0) == 0 {
			typeSpecUsed = typeSpec
		}
		var funcsUsed hash.Hash
		if resultsByParams.anyParams&(1<<1) == 0 {
			funcsUsed = hash.DeepHash(funcs)
		}
		paramsKey := mockConverterer_ResetMethod_paramsKey{
			typeSpec: typeSpecUsed,
			funcs:    funcsUsed,
		}
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.mock.config.Expectation == moq.Strict {
			m.mock.scene.MoqT.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= len(results.results) {
		if !results.anyTimes {
			if m.mock.config.Expectation == moq.Strict {
				m.mock.scene.MoqT.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = len(results.results) - 1
	}

	result := results.results[i]
	if result.moq_sequence != 0 {
		sequence := m.mock.scene.NextMockSequence()
		if (!results.anyTimes && result.moq_sequence != sequence) || result.moq_sequence > sequence {
			m.mock.scene.MoqT.Fatalf("Call sequence does not match %#v", params)
		}
	}

	funcDecl = result.funcDecl
	return
}

func (m *mockConverterer_mock) AssertMethod(typeSpec *dst.TypeSpec, funcs []generator.Func) (funcDecl *dst.FuncDecl) {
	params := mockConverterer_AssertMethod_params{
		typeSpec: typeSpec,
		funcs:    funcs,
	}
	var results *mockConverterer_AssertMethod_resultMgr
	for _, resultsByParams := range m.mock.resultsByParams_AssertMethod {
		var typeSpecUsed *dst.TypeSpec
		if resultsByParams.anyParams&(1<<0) == 0 {
			typeSpecUsed = typeSpec
		}
		var funcsUsed hash.Hash
		if resultsByParams.anyParams&(1<<1) == 0 {
			funcsUsed = hash.DeepHash(funcs)
		}
		paramsKey := mockConverterer_AssertMethod_paramsKey{
			typeSpec: typeSpecUsed,
			funcs:    funcsUsed,
		}
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.mock.config.Expectation == moq.Strict {
			m.mock.scene.MoqT.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= len(results.results) {
		if !results.anyTimes {
			if m.mock.config.Expectation == moq.Strict {
				m.mock.scene.MoqT.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = len(results.results) - 1
	}

	result := results.results[i]
	if result.moq_sequence != 0 {
		sequence := m.mock.scene.NextMockSequence()
		if (!results.anyTimes && result.moq_sequence != sequence) || result.moq_sequence > sequence {
			m.mock.scene.MoqT.Fatalf("Call sequence does not match %#v", params)
		}
	}

	funcDecl = result.funcDecl
	return
}

// onCall returns the recorder implementation of the Converterer type
func (m *mockConverterer) onCall() *mockConverterer_recorder {
	return &mockConverterer_recorder{
		mock: m,
	}
}

func (m *mockConverterer_recorder) BaseStruct(typeSpec *dst.TypeSpec, funcs []generator.Func) *mockConverterer_BaseStruct_fnRecorder {
	return &mockConverterer_BaseStruct_fnRecorder{
		params: mockConverterer_BaseStruct_params{
			typeSpec: typeSpec,
			funcs:    funcs,
		},
		paramsKey: mockConverterer_BaseStruct_paramsKey{
			typeSpec: typeSpec,
			funcs:    hash.DeepHash(funcs),
		},
		sequence: m.mock.config.Sequence == moq.SeqDefaultOn,
		mock:     m.mock,
	}
}

func (r *mockConverterer_BaseStruct_fnRecorder) anyTypeSpec() *mockConverterer_BaseStruct_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("Any functions must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.anyParams |= 1 << 0
	return r
}

func (r *mockConverterer_BaseStruct_fnRecorder) anyFuncs() *mockConverterer_BaseStruct_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("Any functions must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.anyParams |= 1 << 1
	return r
}

func (r *mockConverterer_BaseStruct_fnRecorder) seq() *mockConverterer_BaseStruct_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("seq must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.sequence = true
	return r
}

func (r *mockConverterer_BaseStruct_fnRecorder) noSeq() *mockConverterer_BaseStruct_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("noSeq must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.sequence = false
	return r
}

func (r *mockConverterer_BaseStruct_fnRecorder) returnResults(structDecl *dst.GenDecl) *mockConverterer_BaseStruct_fnRecorder {
	if r.results == nil {
		anyCount := bits.OnesCount64(r.anyParams)
		insertAt := -1
		var results *mockConverterer_BaseStruct_resultsByParams
		for n, res := range r.mock.resultsByParams_BaseStruct {
			if res.anyParams == r.anyParams {
				results = &res
				break
			}
			if res.anyCount > anyCount {
				insertAt = n
			}
		}
		if results == nil {
			results = &mockConverterer_BaseStruct_resultsByParams{
				anyCount:  anyCount,
				anyParams: r.anyParams,
				results:   map[mockConverterer_BaseStruct_paramsKey]*mockConverterer_BaseStruct_resultMgr{},
			}
			r.mock.resultsByParams_BaseStruct = append(r.mock.resultsByParams_BaseStruct, *results)
			if insertAt != -1 && insertAt+1 < len(r.mock.resultsByParams_BaseStruct) {
				copy(r.mock.resultsByParams_BaseStruct[insertAt+1:], r.mock.resultsByParams_BaseStruct[insertAt:0])
				r.mock.resultsByParams_BaseStruct[insertAt] = *results
			}
		}

		var typeSpecUsed *dst.TypeSpec
		if r.anyParams&(1<<0) == 0 {
			typeSpecUsed = r.paramsKey.typeSpec
		}
		var funcsUsed hash.Hash
		if r.anyParams&(1<<1) == 0 {
			funcsUsed = r.paramsKey.funcs
		}
		paramsKey := mockConverterer_BaseStruct_paramsKey{
			typeSpec: typeSpecUsed,
			funcs:    funcsUsed,
		}

		if _, ok := results.results[paramsKey]; ok {
			r.mock.scene.MoqT.Fatalf("Expectations already recorded for mock with parameters %#v", r.params)
			return nil
		}

		r.results = &mockConverterer_BaseStruct_resultMgr{
			params:   r.params,
			results:  []*mockConverterer_BaseStruct_results{},
			index:    0,
			anyTimes: false,
		}
		results.results[paramsKey] = r.results
	}

	var sequence uint32
	if r.sequence {
		sequence = r.mock.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, &mockConverterer_BaseStruct_results{
		structDecl:   structDecl,
		moq_sequence: sequence,
	})
	return r
}

func (r *mockConverterer_BaseStruct_fnRecorder) times(count int) *mockConverterer_BaseStruct_fnRecorder {
	if r.results == nil {
		r.mock.scene.MoqT.Fatalf("Return must be called before calling Times")
		return nil
	}
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < count-1; n++ {
		if last.moq_sequence != 0 {
			last = &mockConverterer_BaseStruct_results{
				structDecl:   last.structDecl,
				moq_sequence: r.mock.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (r *mockConverterer_BaseStruct_fnRecorder) anyTimes() {
	if r.results == nil {
		r.mock.scene.MoqT.Fatalf("Return must be called before calling AnyTimes")
		return
	}
	r.results.anyTimes = true
}

func (m *mockConverterer_recorder) IsolationStruct(typeName, suffix string) *mockConverterer_IsolationStruct_fnRecorder {
	return &mockConverterer_IsolationStruct_fnRecorder{
		params: mockConverterer_IsolationStruct_params{
			typeName: typeName,
			suffix:   suffix,
		},
		paramsKey: mockConverterer_IsolationStruct_paramsKey{
			typeName: typeName,
			suffix:   suffix,
		},
		sequence: m.mock.config.Sequence == moq.SeqDefaultOn,
		mock:     m.mock,
	}
}

func (r *mockConverterer_IsolationStruct_fnRecorder) anyTypeName() *mockConverterer_IsolationStruct_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("Any functions must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.anyParams |= 1 << 0
	return r
}

func (r *mockConverterer_IsolationStruct_fnRecorder) anySuffix() *mockConverterer_IsolationStruct_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("Any functions must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.anyParams |= 1 << 1
	return r
}

func (r *mockConverterer_IsolationStruct_fnRecorder) seq() *mockConverterer_IsolationStruct_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("seq must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.sequence = true
	return r
}

func (r *mockConverterer_IsolationStruct_fnRecorder) noSeq() *mockConverterer_IsolationStruct_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("noSeq must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.sequence = false
	return r
}

func (r *mockConverterer_IsolationStruct_fnRecorder) returnResults(structDecl *dst.GenDecl) *mockConverterer_IsolationStruct_fnRecorder {
	if r.results == nil {
		anyCount := bits.OnesCount64(r.anyParams)
		insertAt := -1
		var results *mockConverterer_IsolationStruct_resultsByParams
		for n, res := range r.mock.resultsByParams_IsolationStruct {
			if res.anyParams == r.anyParams {
				results = &res
				break
			}
			if res.anyCount > anyCount {
				insertAt = n
			}
		}
		if results == nil {
			results = &mockConverterer_IsolationStruct_resultsByParams{
				anyCount:  anyCount,
				anyParams: r.anyParams,
				results:   map[mockConverterer_IsolationStruct_paramsKey]*mockConverterer_IsolationStruct_resultMgr{},
			}
			r.mock.resultsByParams_IsolationStruct = append(r.mock.resultsByParams_IsolationStruct, *results)
			if insertAt != -1 && insertAt+1 < len(r.mock.resultsByParams_IsolationStruct) {
				copy(r.mock.resultsByParams_IsolationStruct[insertAt+1:], r.mock.resultsByParams_IsolationStruct[insertAt:0])
				r.mock.resultsByParams_IsolationStruct[insertAt] = *results
			}
		}

		var typeNameUsed string
		if r.anyParams&(1<<0) == 0 {
			typeNameUsed = r.paramsKey.typeName
		}
		var suffixUsed string
		if r.anyParams&(1<<1) == 0 {
			suffixUsed = r.paramsKey.suffix
		}
		paramsKey := mockConverterer_IsolationStruct_paramsKey{
			typeName: typeNameUsed,
			suffix:   suffixUsed,
		}

		if _, ok := results.results[paramsKey]; ok {
			r.mock.scene.MoqT.Fatalf("Expectations already recorded for mock with parameters %#v", r.params)
			return nil
		}

		r.results = &mockConverterer_IsolationStruct_resultMgr{
			params:   r.params,
			results:  []*mockConverterer_IsolationStruct_results{},
			index:    0,
			anyTimes: false,
		}
		results.results[paramsKey] = r.results
	}

	var sequence uint32
	if r.sequence {
		sequence = r.mock.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, &mockConverterer_IsolationStruct_results{
		structDecl:   structDecl,
		moq_sequence: sequence,
	})
	return r
}

func (r *mockConverterer_IsolationStruct_fnRecorder) times(count int) *mockConverterer_IsolationStruct_fnRecorder {
	if r.results == nil {
		r.mock.scene.MoqT.Fatalf("Return must be called before calling Times")
		return nil
	}
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < count-1; n++ {
		if last.moq_sequence != 0 {
			last = &mockConverterer_IsolationStruct_results{
				structDecl:   last.structDecl,
				moq_sequence: r.mock.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (r *mockConverterer_IsolationStruct_fnRecorder) anyTimes() {
	if r.results == nil {
		r.mock.scene.MoqT.Fatalf("Return must be called before calling AnyTimes")
		return
	}
	r.results.anyTimes = true
}

func (m *mockConverterer_recorder) MethodStructs(typeSpec *dst.TypeSpec, fn generator.Func) *mockConverterer_MethodStructs_fnRecorder {
	return &mockConverterer_MethodStructs_fnRecorder{
		params: mockConverterer_MethodStructs_params{
			typeSpec: typeSpec,
			fn:       fn,
		},
		paramsKey: mockConverterer_MethodStructs_paramsKey{
			typeSpec: typeSpec,
			fn:       fn,
		},
		sequence: m.mock.config.Sequence == moq.SeqDefaultOn,
		mock:     m.mock,
	}
}

func (r *mockConverterer_MethodStructs_fnRecorder) anyTypeSpec() *mockConverterer_MethodStructs_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("Any functions must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.anyParams |= 1 << 0
	return r
}

func (r *mockConverterer_MethodStructs_fnRecorder) anyFn() *mockConverterer_MethodStructs_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("Any functions must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.anyParams |= 1 << 1
	return r
}

func (r *mockConverterer_MethodStructs_fnRecorder) seq() *mockConverterer_MethodStructs_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("seq must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.sequence = true
	return r
}

func (r *mockConverterer_MethodStructs_fnRecorder) noSeq() *mockConverterer_MethodStructs_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("noSeq must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.sequence = false
	return r
}

func (r *mockConverterer_MethodStructs_fnRecorder) returnResults(structDecls []dst.Decl) *mockConverterer_MethodStructs_fnRecorder {
	if r.results == nil {
		anyCount := bits.OnesCount64(r.anyParams)
		insertAt := -1
		var results *mockConverterer_MethodStructs_resultsByParams
		for n, res := range r.mock.resultsByParams_MethodStructs {
			if res.anyParams == r.anyParams {
				results = &res
				break
			}
			if res.anyCount > anyCount {
				insertAt = n
			}
		}
		if results == nil {
			results = &mockConverterer_MethodStructs_resultsByParams{
				anyCount:  anyCount,
				anyParams: r.anyParams,
				results:   map[mockConverterer_MethodStructs_paramsKey]*mockConverterer_MethodStructs_resultMgr{},
			}
			r.mock.resultsByParams_MethodStructs = append(r.mock.resultsByParams_MethodStructs, *results)
			if insertAt != -1 && insertAt+1 < len(r.mock.resultsByParams_MethodStructs) {
				copy(r.mock.resultsByParams_MethodStructs[insertAt+1:], r.mock.resultsByParams_MethodStructs[insertAt:0])
				r.mock.resultsByParams_MethodStructs[insertAt] = *results
			}
		}

		var typeSpecUsed *dst.TypeSpec
		if r.anyParams&(1<<0) == 0 {
			typeSpecUsed = r.paramsKey.typeSpec
		}
		var fnUsed generator.Func
		if r.anyParams&(1<<1) == 0 {
			fnUsed = r.paramsKey.fn
		}
		paramsKey := mockConverterer_MethodStructs_paramsKey{
			typeSpec: typeSpecUsed,
			fn:       fnUsed,
		}

		if _, ok := results.results[paramsKey]; ok {
			r.mock.scene.MoqT.Fatalf("Expectations already recorded for mock with parameters %#v", r.params)
			return nil
		}

		r.results = &mockConverterer_MethodStructs_resultMgr{
			params:   r.params,
			results:  []*mockConverterer_MethodStructs_results{},
			index:    0,
			anyTimes: false,
		}
		results.results[paramsKey] = r.results
	}

	var sequence uint32
	if r.sequence {
		sequence = r.mock.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, &mockConverterer_MethodStructs_results{
		structDecls:  structDecls,
		moq_sequence: sequence,
	})
	return r
}

func (r *mockConverterer_MethodStructs_fnRecorder) times(count int) *mockConverterer_MethodStructs_fnRecorder {
	if r.results == nil {
		r.mock.scene.MoqT.Fatalf("Return must be called before calling Times")
		return nil
	}
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < count-1; n++ {
		if last.moq_sequence != 0 {
			last = &mockConverterer_MethodStructs_results{
				structDecls:  last.structDecls,
				moq_sequence: r.mock.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (r *mockConverterer_MethodStructs_fnRecorder) anyTimes() {
	if r.results == nil {
		r.mock.scene.MoqT.Fatalf("Return must be called before calling AnyTimes")
		return
	}
	r.results.anyTimes = true
}

func (m *mockConverterer_recorder) NewFunc(typeSpec *dst.TypeSpec) *mockConverterer_NewFunc_fnRecorder {
	return &mockConverterer_NewFunc_fnRecorder{
		params: mockConverterer_NewFunc_params{
			typeSpec: typeSpec,
		},
		paramsKey: mockConverterer_NewFunc_paramsKey{
			typeSpec: typeSpec,
		},
		sequence: m.mock.config.Sequence == moq.SeqDefaultOn,
		mock:     m.mock,
	}
}

func (r *mockConverterer_NewFunc_fnRecorder) anyTypeSpec() *mockConverterer_NewFunc_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("Any functions must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.anyParams |= 1 << 0
	return r
}

func (r *mockConverterer_NewFunc_fnRecorder) seq() *mockConverterer_NewFunc_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("seq must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.sequence = true
	return r
}

func (r *mockConverterer_NewFunc_fnRecorder) noSeq() *mockConverterer_NewFunc_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("noSeq must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.sequence = false
	return r
}

func (r *mockConverterer_NewFunc_fnRecorder) returnResults(funcDecl *dst.FuncDecl) *mockConverterer_NewFunc_fnRecorder {
	if r.results == nil {
		anyCount := bits.OnesCount64(r.anyParams)
		insertAt := -1
		var results *mockConverterer_NewFunc_resultsByParams
		for n, res := range r.mock.resultsByParams_NewFunc {
			if res.anyParams == r.anyParams {
				results = &res
				break
			}
			if res.anyCount > anyCount {
				insertAt = n
			}
		}
		if results == nil {
			results = &mockConverterer_NewFunc_resultsByParams{
				anyCount:  anyCount,
				anyParams: r.anyParams,
				results:   map[mockConverterer_NewFunc_paramsKey]*mockConverterer_NewFunc_resultMgr{},
			}
			r.mock.resultsByParams_NewFunc = append(r.mock.resultsByParams_NewFunc, *results)
			if insertAt != -1 && insertAt+1 < len(r.mock.resultsByParams_NewFunc) {
				copy(r.mock.resultsByParams_NewFunc[insertAt+1:], r.mock.resultsByParams_NewFunc[insertAt:0])
				r.mock.resultsByParams_NewFunc[insertAt] = *results
			}
		}

		var typeSpecUsed *dst.TypeSpec
		if r.anyParams&(1<<0) == 0 {
			typeSpecUsed = r.paramsKey.typeSpec
		}
		paramsKey := mockConverterer_NewFunc_paramsKey{
			typeSpec: typeSpecUsed,
		}

		if _, ok := results.results[paramsKey]; ok {
			r.mock.scene.MoqT.Fatalf("Expectations already recorded for mock with parameters %#v", r.params)
			return nil
		}

		r.results = &mockConverterer_NewFunc_resultMgr{
			params:   r.params,
			results:  []*mockConverterer_NewFunc_results{},
			index:    0,
			anyTimes: false,
		}
		results.results[paramsKey] = r.results
	}

	var sequence uint32
	if r.sequence {
		sequence = r.mock.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, &mockConverterer_NewFunc_results{
		funcDecl:     funcDecl,
		moq_sequence: sequence,
	})
	return r
}

func (r *mockConverterer_NewFunc_fnRecorder) times(count int) *mockConverterer_NewFunc_fnRecorder {
	if r.results == nil {
		r.mock.scene.MoqT.Fatalf("Return must be called before calling Times")
		return nil
	}
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < count-1; n++ {
		if last.moq_sequence != 0 {
			last = &mockConverterer_NewFunc_results{
				funcDecl:     last.funcDecl,
				moq_sequence: r.mock.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (r *mockConverterer_NewFunc_fnRecorder) anyTimes() {
	if r.results == nil {
		r.mock.scene.MoqT.Fatalf("Return must be called before calling AnyTimes")
		return
	}
	r.results.anyTimes = true
}

func (m *mockConverterer_recorder) IsolationAccessor(typeName, suffix, fnName string) *mockConverterer_IsolationAccessor_fnRecorder {
	return &mockConverterer_IsolationAccessor_fnRecorder{
		params: mockConverterer_IsolationAccessor_params{
			typeName: typeName,
			suffix:   suffix,
			fnName:   fnName,
		},
		paramsKey: mockConverterer_IsolationAccessor_paramsKey{
			typeName: typeName,
			suffix:   suffix,
			fnName:   fnName,
		},
		sequence: m.mock.config.Sequence == moq.SeqDefaultOn,
		mock:     m.mock,
	}
}

func (r *mockConverterer_IsolationAccessor_fnRecorder) anyTypeName() *mockConverterer_IsolationAccessor_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("Any functions must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.anyParams |= 1 << 0
	return r
}

func (r *mockConverterer_IsolationAccessor_fnRecorder) anySuffix() *mockConverterer_IsolationAccessor_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("Any functions must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.anyParams |= 1 << 1
	return r
}

func (r *mockConverterer_IsolationAccessor_fnRecorder) anyFnName() *mockConverterer_IsolationAccessor_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("Any functions must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.anyParams |= 1 << 2
	return r
}

func (r *mockConverterer_IsolationAccessor_fnRecorder) seq() *mockConverterer_IsolationAccessor_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("seq must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.sequence = true
	return r
}

func (r *mockConverterer_IsolationAccessor_fnRecorder) noSeq() *mockConverterer_IsolationAccessor_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("noSeq must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.sequence = false
	return r
}

func (r *mockConverterer_IsolationAccessor_fnRecorder) returnResults(funcDecl *dst.FuncDecl) *mockConverterer_IsolationAccessor_fnRecorder {
	if r.results == nil {
		anyCount := bits.OnesCount64(r.anyParams)
		insertAt := -1
		var results *mockConverterer_IsolationAccessor_resultsByParams
		for n, res := range r.mock.resultsByParams_IsolationAccessor {
			if res.anyParams == r.anyParams {
				results = &res
				break
			}
			if res.anyCount > anyCount {
				insertAt = n
			}
		}
		if results == nil {
			results = &mockConverterer_IsolationAccessor_resultsByParams{
				anyCount:  anyCount,
				anyParams: r.anyParams,
				results:   map[mockConverterer_IsolationAccessor_paramsKey]*mockConverterer_IsolationAccessor_resultMgr{},
			}
			r.mock.resultsByParams_IsolationAccessor = append(r.mock.resultsByParams_IsolationAccessor, *results)
			if insertAt != -1 && insertAt+1 < len(r.mock.resultsByParams_IsolationAccessor) {
				copy(r.mock.resultsByParams_IsolationAccessor[insertAt+1:], r.mock.resultsByParams_IsolationAccessor[insertAt:0])
				r.mock.resultsByParams_IsolationAccessor[insertAt] = *results
			}
		}

		var typeNameUsed string
		if r.anyParams&(1<<0) == 0 {
			typeNameUsed = r.paramsKey.typeName
		}
		var suffixUsed string
		if r.anyParams&(1<<1) == 0 {
			suffixUsed = r.paramsKey.suffix
		}
		var fnNameUsed string
		if r.anyParams&(1<<2) == 0 {
			fnNameUsed = r.paramsKey.fnName
		}
		paramsKey := mockConverterer_IsolationAccessor_paramsKey{
			typeName: typeNameUsed,
			suffix:   suffixUsed,
			fnName:   fnNameUsed,
		}

		if _, ok := results.results[paramsKey]; ok {
			r.mock.scene.MoqT.Fatalf("Expectations already recorded for mock with parameters %#v", r.params)
			return nil
		}

		r.results = &mockConverterer_IsolationAccessor_resultMgr{
			params:   r.params,
			results:  []*mockConverterer_IsolationAccessor_results{},
			index:    0,
			anyTimes: false,
		}
		results.results[paramsKey] = r.results
	}

	var sequence uint32
	if r.sequence {
		sequence = r.mock.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, &mockConverterer_IsolationAccessor_results{
		funcDecl:     funcDecl,
		moq_sequence: sequence,
	})
	return r
}

func (r *mockConverterer_IsolationAccessor_fnRecorder) times(count int) *mockConverterer_IsolationAccessor_fnRecorder {
	if r.results == nil {
		r.mock.scene.MoqT.Fatalf("Return must be called before calling Times")
		return nil
	}
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < count-1; n++ {
		if last.moq_sequence != 0 {
			last = &mockConverterer_IsolationAccessor_results{
				funcDecl:     last.funcDecl,
				moq_sequence: r.mock.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (r *mockConverterer_IsolationAccessor_fnRecorder) anyTimes() {
	if r.results == nil {
		r.mock.scene.MoqT.Fatalf("Return must be called before calling AnyTimes")
		return
	}
	r.results.anyTimes = true
}

func (m *mockConverterer_recorder) FuncClosure(typeName, pkgPath string, fn generator.Func) *mockConverterer_FuncClosure_fnRecorder {
	return &mockConverterer_FuncClosure_fnRecorder{
		params: mockConverterer_FuncClosure_params{
			typeName: typeName,
			pkgPath:  pkgPath,
			fn:       fn,
		},
		paramsKey: mockConverterer_FuncClosure_paramsKey{
			typeName: typeName,
			pkgPath:  pkgPath,
			fn:       fn,
		},
		sequence: m.mock.config.Sequence == moq.SeqDefaultOn,
		mock:     m.mock,
	}
}

func (r *mockConverterer_FuncClosure_fnRecorder) anyTypeName() *mockConverterer_FuncClosure_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("Any functions must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.anyParams |= 1 << 0
	return r
}

func (r *mockConverterer_FuncClosure_fnRecorder) anyPkgPath() *mockConverterer_FuncClosure_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("Any functions must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.anyParams |= 1 << 1
	return r
}

func (r *mockConverterer_FuncClosure_fnRecorder) anyFn() *mockConverterer_FuncClosure_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("Any functions must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.anyParams |= 1 << 2
	return r
}

func (r *mockConverterer_FuncClosure_fnRecorder) seq() *mockConverterer_FuncClosure_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("seq must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.sequence = true
	return r
}

func (r *mockConverterer_FuncClosure_fnRecorder) noSeq() *mockConverterer_FuncClosure_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("noSeq must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.sequence = false
	return r
}

func (r *mockConverterer_FuncClosure_fnRecorder) returnResults(funcDecl *dst.FuncDecl) *mockConverterer_FuncClosure_fnRecorder {
	if r.results == nil {
		anyCount := bits.OnesCount64(r.anyParams)
		insertAt := -1
		var results *mockConverterer_FuncClosure_resultsByParams
		for n, res := range r.mock.resultsByParams_FuncClosure {
			if res.anyParams == r.anyParams {
				results = &res
				break
			}
			if res.anyCount > anyCount {
				insertAt = n
			}
		}
		if results == nil {
			results = &mockConverterer_FuncClosure_resultsByParams{
				anyCount:  anyCount,
				anyParams: r.anyParams,
				results:   map[mockConverterer_FuncClosure_paramsKey]*mockConverterer_FuncClosure_resultMgr{},
			}
			r.mock.resultsByParams_FuncClosure = append(r.mock.resultsByParams_FuncClosure, *results)
			if insertAt != -1 && insertAt+1 < len(r.mock.resultsByParams_FuncClosure) {
				copy(r.mock.resultsByParams_FuncClosure[insertAt+1:], r.mock.resultsByParams_FuncClosure[insertAt:0])
				r.mock.resultsByParams_FuncClosure[insertAt] = *results
			}
		}

		var typeNameUsed string
		if r.anyParams&(1<<0) == 0 {
			typeNameUsed = r.paramsKey.typeName
		}
		var pkgPathUsed string
		if r.anyParams&(1<<1) == 0 {
			pkgPathUsed = r.paramsKey.pkgPath
		}
		var fnUsed generator.Func
		if r.anyParams&(1<<2) == 0 {
			fnUsed = r.paramsKey.fn
		}
		paramsKey := mockConverterer_FuncClosure_paramsKey{
			typeName: typeNameUsed,
			pkgPath:  pkgPathUsed,
			fn:       fnUsed,
		}

		if _, ok := results.results[paramsKey]; ok {
			r.mock.scene.MoqT.Fatalf("Expectations already recorded for mock with parameters %#v", r.params)
			return nil
		}

		r.results = &mockConverterer_FuncClosure_resultMgr{
			params:   r.params,
			results:  []*mockConverterer_FuncClosure_results{},
			index:    0,
			anyTimes: false,
		}
		results.results[paramsKey] = r.results
	}

	var sequence uint32
	if r.sequence {
		sequence = r.mock.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, &mockConverterer_FuncClosure_results{
		funcDecl:     funcDecl,
		moq_sequence: sequence,
	})
	return r
}

func (r *mockConverterer_FuncClosure_fnRecorder) times(count int) *mockConverterer_FuncClosure_fnRecorder {
	if r.results == nil {
		r.mock.scene.MoqT.Fatalf("Return must be called before calling Times")
		return nil
	}
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < count-1; n++ {
		if last.moq_sequence != 0 {
			last = &mockConverterer_FuncClosure_results{
				funcDecl:     last.funcDecl,
				moq_sequence: r.mock.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (r *mockConverterer_FuncClosure_fnRecorder) anyTimes() {
	if r.results == nil {
		r.mock.scene.MoqT.Fatalf("Return must be called before calling AnyTimes")
		return
	}
	r.results.anyTimes = true
}

func (m *mockConverterer_recorder) MockMethod(typeName string, fn generator.Func) *mockConverterer_MockMethod_fnRecorder {
	return &mockConverterer_MockMethod_fnRecorder{
		params: mockConverterer_MockMethod_params{
			typeName: typeName,
			fn:       fn,
		},
		paramsKey: mockConverterer_MockMethod_paramsKey{
			typeName: typeName,
			fn:       fn,
		},
		sequence: m.mock.config.Sequence == moq.SeqDefaultOn,
		mock:     m.mock,
	}
}

func (r *mockConverterer_MockMethod_fnRecorder) anyTypeName() *mockConverterer_MockMethod_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("Any functions must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.anyParams |= 1 << 0
	return r
}

func (r *mockConverterer_MockMethod_fnRecorder) anyFn() *mockConverterer_MockMethod_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("Any functions must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.anyParams |= 1 << 1
	return r
}

func (r *mockConverterer_MockMethod_fnRecorder) seq() *mockConverterer_MockMethod_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("seq must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.sequence = true
	return r
}

func (r *mockConverterer_MockMethod_fnRecorder) noSeq() *mockConverterer_MockMethod_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("noSeq must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.sequence = false
	return r
}

func (r *mockConverterer_MockMethod_fnRecorder) returnResults(funcDecl *dst.FuncDecl) *mockConverterer_MockMethod_fnRecorder {
	if r.results == nil {
		anyCount := bits.OnesCount64(r.anyParams)
		insertAt := -1
		var results *mockConverterer_MockMethod_resultsByParams
		for n, res := range r.mock.resultsByParams_MockMethod {
			if res.anyParams == r.anyParams {
				results = &res
				break
			}
			if res.anyCount > anyCount {
				insertAt = n
			}
		}
		if results == nil {
			results = &mockConverterer_MockMethod_resultsByParams{
				anyCount:  anyCount,
				anyParams: r.anyParams,
				results:   map[mockConverterer_MockMethod_paramsKey]*mockConverterer_MockMethod_resultMgr{},
			}
			r.mock.resultsByParams_MockMethod = append(r.mock.resultsByParams_MockMethod, *results)
			if insertAt != -1 && insertAt+1 < len(r.mock.resultsByParams_MockMethod) {
				copy(r.mock.resultsByParams_MockMethod[insertAt+1:], r.mock.resultsByParams_MockMethod[insertAt:0])
				r.mock.resultsByParams_MockMethod[insertAt] = *results
			}
		}

		var typeNameUsed string
		if r.anyParams&(1<<0) == 0 {
			typeNameUsed = r.paramsKey.typeName
		}
		var fnUsed generator.Func
		if r.anyParams&(1<<1) == 0 {
			fnUsed = r.paramsKey.fn
		}
		paramsKey := mockConverterer_MockMethod_paramsKey{
			typeName: typeNameUsed,
			fn:       fnUsed,
		}

		if _, ok := results.results[paramsKey]; ok {
			r.mock.scene.MoqT.Fatalf("Expectations already recorded for mock with parameters %#v", r.params)
			return nil
		}

		r.results = &mockConverterer_MockMethod_resultMgr{
			params:   r.params,
			results:  []*mockConverterer_MockMethod_results{},
			index:    0,
			anyTimes: false,
		}
		results.results[paramsKey] = r.results
	}

	var sequence uint32
	if r.sequence {
		sequence = r.mock.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, &mockConverterer_MockMethod_results{
		funcDecl:     funcDecl,
		moq_sequence: sequence,
	})
	return r
}

func (r *mockConverterer_MockMethod_fnRecorder) times(count int) *mockConverterer_MockMethod_fnRecorder {
	if r.results == nil {
		r.mock.scene.MoqT.Fatalf("Return must be called before calling Times")
		return nil
	}
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < count-1; n++ {
		if last.moq_sequence != 0 {
			last = &mockConverterer_MockMethod_results{
				funcDecl:     last.funcDecl,
				moq_sequence: r.mock.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (r *mockConverterer_MockMethod_fnRecorder) anyTimes() {
	if r.results == nil {
		r.mock.scene.MoqT.Fatalf("Return must be called before calling AnyTimes")
		return
	}
	r.results.anyTimes = true
}

func (m *mockConverterer_recorder) RecorderMethods(typeName string, fn generator.Func) *mockConverterer_RecorderMethods_fnRecorder {
	return &mockConverterer_RecorderMethods_fnRecorder{
		params: mockConverterer_RecorderMethods_params{
			typeName: typeName,
			fn:       fn,
		},
		paramsKey: mockConverterer_RecorderMethods_paramsKey{
			typeName: typeName,
			fn:       fn,
		},
		sequence: m.mock.config.Sequence == moq.SeqDefaultOn,
		mock:     m.mock,
	}
}

func (r *mockConverterer_RecorderMethods_fnRecorder) anyTypeName() *mockConverterer_RecorderMethods_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("Any functions must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.anyParams |= 1 << 0
	return r
}

func (r *mockConverterer_RecorderMethods_fnRecorder) anyFn() *mockConverterer_RecorderMethods_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("Any functions must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.anyParams |= 1 << 1
	return r
}

func (r *mockConverterer_RecorderMethods_fnRecorder) seq() *mockConverterer_RecorderMethods_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("seq must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.sequence = true
	return r
}

func (r *mockConverterer_RecorderMethods_fnRecorder) noSeq() *mockConverterer_RecorderMethods_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("noSeq must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.sequence = false
	return r
}

func (r *mockConverterer_RecorderMethods_fnRecorder) returnResults(funcDecls []dst.Decl) *mockConverterer_RecorderMethods_fnRecorder {
	if r.results == nil {
		anyCount := bits.OnesCount64(r.anyParams)
		insertAt := -1
		var results *mockConverterer_RecorderMethods_resultsByParams
		for n, res := range r.mock.resultsByParams_RecorderMethods {
			if res.anyParams == r.anyParams {
				results = &res
				break
			}
			if res.anyCount > anyCount {
				insertAt = n
			}
		}
		if results == nil {
			results = &mockConverterer_RecorderMethods_resultsByParams{
				anyCount:  anyCount,
				anyParams: r.anyParams,
				results:   map[mockConverterer_RecorderMethods_paramsKey]*mockConverterer_RecorderMethods_resultMgr{},
			}
			r.mock.resultsByParams_RecorderMethods = append(r.mock.resultsByParams_RecorderMethods, *results)
			if insertAt != -1 && insertAt+1 < len(r.mock.resultsByParams_RecorderMethods) {
				copy(r.mock.resultsByParams_RecorderMethods[insertAt+1:], r.mock.resultsByParams_RecorderMethods[insertAt:0])
				r.mock.resultsByParams_RecorderMethods[insertAt] = *results
			}
		}

		var typeNameUsed string
		if r.anyParams&(1<<0) == 0 {
			typeNameUsed = r.paramsKey.typeName
		}
		var fnUsed generator.Func
		if r.anyParams&(1<<1) == 0 {
			fnUsed = r.paramsKey.fn
		}
		paramsKey := mockConverterer_RecorderMethods_paramsKey{
			typeName: typeNameUsed,
			fn:       fnUsed,
		}

		if _, ok := results.results[paramsKey]; ok {
			r.mock.scene.MoqT.Fatalf("Expectations already recorded for mock with parameters %#v", r.params)
			return nil
		}

		r.results = &mockConverterer_RecorderMethods_resultMgr{
			params:   r.params,
			results:  []*mockConverterer_RecorderMethods_results{},
			index:    0,
			anyTimes: false,
		}
		results.results[paramsKey] = r.results
	}

	var sequence uint32
	if r.sequence {
		sequence = r.mock.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, &mockConverterer_RecorderMethods_results{
		funcDecls:    funcDecls,
		moq_sequence: sequence,
	})
	return r
}

func (r *mockConverterer_RecorderMethods_fnRecorder) times(count int) *mockConverterer_RecorderMethods_fnRecorder {
	if r.results == nil {
		r.mock.scene.MoqT.Fatalf("Return must be called before calling Times")
		return nil
	}
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < count-1; n++ {
		if last.moq_sequence != 0 {
			last = &mockConverterer_RecorderMethods_results{
				funcDecls:    last.funcDecls,
				moq_sequence: r.mock.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (r *mockConverterer_RecorderMethods_fnRecorder) anyTimes() {
	if r.results == nil {
		r.mock.scene.MoqT.Fatalf("Return must be called before calling AnyTimes")
		return
	}
	r.results.anyTimes = true
}

func (m *mockConverterer_recorder) ResetMethod(typeSpec *dst.TypeSpec, funcs []generator.Func) *mockConverterer_ResetMethod_fnRecorder {
	return &mockConverterer_ResetMethod_fnRecorder{
		params: mockConverterer_ResetMethod_params{
			typeSpec: typeSpec,
			funcs:    funcs,
		},
		paramsKey: mockConverterer_ResetMethod_paramsKey{
			typeSpec: typeSpec,
			funcs:    hash.DeepHash(funcs),
		},
		sequence: m.mock.config.Sequence == moq.SeqDefaultOn,
		mock:     m.mock,
	}
}

func (r *mockConverterer_ResetMethod_fnRecorder) anyTypeSpec() *mockConverterer_ResetMethod_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("Any functions must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.anyParams |= 1 << 0
	return r
}

func (r *mockConverterer_ResetMethod_fnRecorder) anyFuncs() *mockConverterer_ResetMethod_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("Any functions must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.anyParams |= 1 << 1
	return r
}

func (r *mockConverterer_ResetMethod_fnRecorder) seq() *mockConverterer_ResetMethod_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("seq must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.sequence = true
	return r
}

func (r *mockConverterer_ResetMethod_fnRecorder) noSeq() *mockConverterer_ResetMethod_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("noSeq must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.sequence = false
	return r
}

func (r *mockConverterer_ResetMethod_fnRecorder) returnResults(funcDecl *dst.FuncDecl) *mockConverterer_ResetMethod_fnRecorder {
	if r.results == nil {
		anyCount := bits.OnesCount64(r.anyParams)
		insertAt := -1
		var results *mockConverterer_ResetMethod_resultsByParams
		for n, res := range r.mock.resultsByParams_ResetMethod {
			if res.anyParams == r.anyParams {
				results = &res
				break
			}
			if res.anyCount > anyCount {
				insertAt = n
			}
		}
		if results == nil {
			results = &mockConverterer_ResetMethod_resultsByParams{
				anyCount:  anyCount,
				anyParams: r.anyParams,
				results:   map[mockConverterer_ResetMethod_paramsKey]*mockConverterer_ResetMethod_resultMgr{},
			}
			r.mock.resultsByParams_ResetMethod = append(r.mock.resultsByParams_ResetMethod, *results)
			if insertAt != -1 && insertAt+1 < len(r.mock.resultsByParams_ResetMethod) {
				copy(r.mock.resultsByParams_ResetMethod[insertAt+1:], r.mock.resultsByParams_ResetMethod[insertAt:0])
				r.mock.resultsByParams_ResetMethod[insertAt] = *results
			}
		}

		var typeSpecUsed *dst.TypeSpec
		if r.anyParams&(1<<0) == 0 {
			typeSpecUsed = r.paramsKey.typeSpec
		}
		var funcsUsed hash.Hash
		if r.anyParams&(1<<1) == 0 {
			funcsUsed = r.paramsKey.funcs
		}
		paramsKey := mockConverterer_ResetMethod_paramsKey{
			typeSpec: typeSpecUsed,
			funcs:    funcsUsed,
		}

		if _, ok := results.results[paramsKey]; ok {
			r.mock.scene.MoqT.Fatalf("Expectations already recorded for mock with parameters %#v", r.params)
			return nil
		}

		r.results = &mockConverterer_ResetMethod_resultMgr{
			params:   r.params,
			results:  []*mockConverterer_ResetMethod_results{},
			index:    0,
			anyTimes: false,
		}
		results.results[paramsKey] = r.results
	}

	var sequence uint32
	if r.sequence {
		sequence = r.mock.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, &mockConverterer_ResetMethod_results{
		funcDecl:     funcDecl,
		moq_sequence: sequence,
	})
	return r
}

func (r *mockConverterer_ResetMethod_fnRecorder) times(count int) *mockConverterer_ResetMethod_fnRecorder {
	if r.results == nil {
		r.mock.scene.MoqT.Fatalf("Return must be called before calling Times")
		return nil
	}
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < count-1; n++ {
		if last.moq_sequence != 0 {
			last = &mockConverterer_ResetMethod_results{
				funcDecl:     last.funcDecl,
				moq_sequence: r.mock.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (r *mockConverterer_ResetMethod_fnRecorder) anyTimes() {
	if r.results == nil {
		r.mock.scene.MoqT.Fatalf("Return must be called before calling AnyTimes")
		return
	}
	r.results.anyTimes = true
}

func (m *mockConverterer_recorder) AssertMethod(typeSpec *dst.TypeSpec, funcs []generator.Func) *mockConverterer_AssertMethod_fnRecorder {
	return &mockConverterer_AssertMethod_fnRecorder{
		params: mockConverterer_AssertMethod_params{
			typeSpec: typeSpec,
			funcs:    funcs,
		},
		paramsKey: mockConverterer_AssertMethod_paramsKey{
			typeSpec: typeSpec,
			funcs:    hash.DeepHash(funcs),
		},
		sequence: m.mock.config.Sequence == moq.SeqDefaultOn,
		mock:     m.mock,
	}
}

func (r *mockConverterer_AssertMethod_fnRecorder) anyTypeSpec() *mockConverterer_AssertMethod_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("Any functions must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.anyParams |= 1 << 0
	return r
}

func (r *mockConverterer_AssertMethod_fnRecorder) anyFuncs() *mockConverterer_AssertMethod_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("Any functions must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.anyParams |= 1 << 1
	return r
}

func (r *mockConverterer_AssertMethod_fnRecorder) seq() *mockConverterer_AssertMethod_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("seq must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.sequence = true
	return r
}

func (r *mockConverterer_AssertMethod_fnRecorder) noSeq() *mockConverterer_AssertMethod_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("noSeq must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.sequence = false
	return r
}

func (r *mockConverterer_AssertMethod_fnRecorder) returnResults(funcDecl *dst.FuncDecl) *mockConverterer_AssertMethod_fnRecorder {
	if r.results == nil {
		anyCount := bits.OnesCount64(r.anyParams)
		insertAt := -1
		var results *mockConverterer_AssertMethod_resultsByParams
		for n, res := range r.mock.resultsByParams_AssertMethod {
			if res.anyParams == r.anyParams {
				results = &res
				break
			}
			if res.anyCount > anyCount {
				insertAt = n
			}
		}
		if results == nil {
			results = &mockConverterer_AssertMethod_resultsByParams{
				anyCount:  anyCount,
				anyParams: r.anyParams,
				results:   map[mockConverterer_AssertMethod_paramsKey]*mockConverterer_AssertMethod_resultMgr{},
			}
			r.mock.resultsByParams_AssertMethod = append(r.mock.resultsByParams_AssertMethod, *results)
			if insertAt != -1 && insertAt+1 < len(r.mock.resultsByParams_AssertMethod) {
				copy(r.mock.resultsByParams_AssertMethod[insertAt+1:], r.mock.resultsByParams_AssertMethod[insertAt:0])
				r.mock.resultsByParams_AssertMethod[insertAt] = *results
			}
		}

		var typeSpecUsed *dst.TypeSpec
		if r.anyParams&(1<<0) == 0 {
			typeSpecUsed = r.paramsKey.typeSpec
		}
		var funcsUsed hash.Hash
		if r.anyParams&(1<<1) == 0 {
			funcsUsed = r.paramsKey.funcs
		}
		paramsKey := mockConverterer_AssertMethod_paramsKey{
			typeSpec: typeSpecUsed,
			funcs:    funcsUsed,
		}

		if _, ok := results.results[paramsKey]; ok {
			r.mock.scene.MoqT.Fatalf("Expectations already recorded for mock with parameters %#v", r.params)
			return nil
		}

		r.results = &mockConverterer_AssertMethod_resultMgr{
			params:   r.params,
			results:  []*mockConverterer_AssertMethod_results{},
			index:    0,
			anyTimes: false,
		}
		results.results[paramsKey] = r.results
	}

	var sequence uint32
	if r.sequence {
		sequence = r.mock.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, &mockConverterer_AssertMethod_results{
		funcDecl:     funcDecl,
		moq_sequence: sequence,
	})
	return r
}

func (r *mockConverterer_AssertMethod_fnRecorder) times(count int) *mockConverterer_AssertMethod_fnRecorder {
	if r.results == nil {
		r.mock.scene.MoqT.Fatalf("Return must be called before calling Times")
		return nil
	}
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < count-1; n++ {
		if last.moq_sequence != 0 {
			last = &mockConverterer_AssertMethod_results{
				funcDecl:     last.funcDecl,
				moq_sequence: r.mock.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (r *mockConverterer_AssertMethod_fnRecorder) anyTimes() {
	if r.results == nil {
		r.mock.scene.MoqT.Fatalf("Return must be called before calling AnyTimes")
		return
	}
	r.results.anyTimes = true
}

// Reset resets the state of the mock
func (m *mockConverterer) Reset() {
	m.resultsByParams_BaseStruct = nil
	m.resultsByParams_IsolationStruct = nil
	m.resultsByParams_MethodStructs = nil
	m.resultsByParams_NewFunc = nil
	m.resultsByParams_IsolationAccessor = nil
	m.resultsByParams_FuncClosure = nil
	m.resultsByParams_MockMethod = nil
	m.resultsByParams_RecorderMethods = nil
	m.resultsByParams_ResetMethod = nil
	m.resultsByParams_AssertMethod = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *mockConverterer) AssertExpectationsMet() {
	for _, res := range m.resultsByParams_BaseStruct {
		for _, results := range res.results {
			missing := len(results.results) - int(atomic.LoadUint32(&results.index))
			if missing == 1 && results.anyTimes == true {
				continue
			}
			if missing > 0 {
				m.scene.MoqT.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.params)
			}
		}
	}
	for _, res := range m.resultsByParams_IsolationStruct {
		for _, results := range res.results {
			missing := len(results.results) - int(atomic.LoadUint32(&results.index))
			if missing == 1 && results.anyTimes == true {
				continue
			}
			if missing > 0 {
				m.scene.MoqT.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.params)
			}
		}
	}
	for _, res := range m.resultsByParams_MethodStructs {
		for _, results := range res.results {
			missing := len(results.results) - int(atomic.LoadUint32(&results.index))
			if missing == 1 && results.anyTimes == true {
				continue
			}
			if missing > 0 {
				m.scene.MoqT.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.params)
			}
		}
	}
	for _, res := range m.resultsByParams_NewFunc {
		for _, results := range res.results {
			missing := len(results.results) - int(atomic.LoadUint32(&results.index))
			if missing == 1 && results.anyTimes == true {
				continue
			}
			if missing > 0 {
				m.scene.MoqT.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.params)
			}
		}
	}
	for _, res := range m.resultsByParams_IsolationAccessor {
		for _, results := range res.results {
			missing := len(results.results) - int(atomic.LoadUint32(&results.index))
			if missing == 1 && results.anyTimes == true {
				continue
			}
			if missing > 0 {
				m.scene.MoqT.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.params)
			}
		}
	}
	for _, res := range m.resultsByParams_FuncClosure {
		for _, results := range res.results {
			missing := len(results.results) - int(atomic.LoadUint32(&results.index))
			if missing == 1 && results.anyTimes == true {
				continue
			}
			if missing > 0 {
				m.scene.MoqT.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.params)
			}
		}
	}
	for _, res := range m.resultsByParams_MockMethod {
		for _, results := range res.results {
			missing := len(results.results) - int(atomic.LoadUint32(&results.index))
			if missing == 1 && results.anyTimes == true {
				continue
			}
			if missing > 0 {
				m.scene.MoqT.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.params)
			}
		}
	}
	for _, res := range m.resultsByParams_RecorderMethods {
		for _, results := range res.results {
			missing := len(results.results) - int(atomic.LoadUint32(&results.index))
			if missing == 1 && results.anyTimes == true {
				continue
			}
			if missing > 0 {
				m.scene.MoqT.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.params)
			}
		}
	}
	for _, res := range m.resultsByParams_ResetMethod {
		for _, results := range res.results {
			missing := len(results.results) - int(atomic.LoadUint32(&results.index))
			if missing == 1 && results.anyTimes == true {
				continue
			}
			if missing > 0 {
				m.scene.MoqT.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.params)
			}
		}
	}
	for _, res := range m.resultsByParams_AssertMethod {
		for _, results := range res.results {
			missing := len(results.results) - int(atomic.LoadUint32(&results.index))
			if missing == 1 && results.anyTimes == true {
				continue
			}
			if missing > 0 {
				m.scene.MoqT.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.params)
			}
		}
	}
}
