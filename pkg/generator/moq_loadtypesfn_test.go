// Code generated by Moqueries - https://github.com/myshkin5/moqueries - DO NOT EDIT!

package generator_test

import (
	"github.com/dave/dst"
	"github.com/myshkin5/moqueries/pkg/generator"
)

// mockLoadTypesFn holds the state of a mock of the LoadTypesFn type
type mockLoadTypesFn struct {
	resultsByParams map[mockLoadTypesFn_params]mockLoadTypesFn_results
	params          chan mockLoadTypesFn_params
}

// mockLoadTypesFn_mock isolates the mock interface of the LoadTypesFn type
type mockLoadTypesFn_mock struct {
	mock *mockLoadTypesFn
}

// mockLoadTypesFn_recorder isolates the recorder interface of the LoadTypesFn type
type mockLoadTypesFn_recorder struct {
	mock *mockLoadTypesFn
}

// mockLoadTypesFn_params holds the params of the LoadTypesFn type
type mockLoadTypesFn_params struct {
	pkg           string
	loadTestTypes bool
}

// mockLoadTypesFn_results holds the results of the LoadTypesFn type
type mockLoadTypesFn_results struct {
	typeSpecs []*dst.TypeSpec
	pkgPath   string
	err       error
}

// mockLoadTypesFn_fnRecorder routes recorded function calls to the mockLoadTypesFn mock
type mockLoadTypesFn_fnRecorder struct {
	params mockLoadTypesFn_params
	mock   *mockLoadTypesFn
}

// newMockLoadTypesFn creates a new mock of the LoadTypesFn type
func newMockLoadTypesFn() *mockLoadTypesFn {
	return &mockLoadTypesFn{
		resultsByParams: map[mockLoadTypesFn_params]mockLoadTypesFn_results{},
		params:          make(chan mockLoadTypesFn_params, 100),
	}
}

// mock returns the mock implementation of the LoadTypesFn type
func (m *mockLoadTypesFn) mock() generator.LoadTypesFn {
	return func(pkg string, loadTestTypes bool) (typeSpecs []*dst.TypeSpec, pkgPath string, err error) {
		mock := &mockLoadTypesFn_mock{mock: m}
		return mock.fn(pkg, loadTestTypes)
	}
}

func (m *mockLoadTypesFn_mock) fn(pkg string, loadTestTypes bool) (typeSpecs []*dst.TypeSpec, pkgPath string, err error) {
	params := mockLoadTypesFn_params{
		pkg:           pkg,
		loadTestTypes: loadTestTypes,
	}
	m.mock.params <- params
	results, ok := m.mock.resultsByParams[params]
	if ok {
		typeSpecs = results.typeSpecs
		pkgPath = results.pkgPath
		err = results.err
	}
	return typeSpecs, pkgPath, err
}

func (m *mockLoadTypesFn) onCall(pkg string, loadTestTypes bool) *mockLoadTypesFn_fnRecorder {
	return &mockLoadTypesFn_fnRecorder{
		params: mockLoadTypesFn_params{
			pkg:           pkg,
			loadTestTypes: loadTestTypes,
		},
		mock: m,
	}
}

func (r *mockLoadTypesFn_fnRecorder) ret(typeSpecs []*dst.TypeSpec, pkgPath string, err error) {
	r.mock.resultsByParams[r.params] = mockLoadTypesFn_results{
		typeSpecs: typeSpecs,
		pkgPath:   pkgPath,
		err:       err,
	}
}
