// Code generated by Moqueries - https://github.com/myshkin5/moqueries - DO NOT EDIT!

package exported

import (
	"sync/atomic"

	"github.com/myshkin5/moqueries/pkg/config"
	"github.com/myshkin5/moqueries/pkg/generator/testmocks"
	"github.com/myshkin5/moqueries/pkg/testing"
)

// MockNothingFn holds the state of a mock of the NothingFn type
type MockNothingFn struct {
	T               testing.MoqT
	Config          config.MockConfig
	ResultsByParams map[MockNothingFn_params]*MockNothingFn_resultMgr
	Params          chan MockNothingFn_params
}

// MockNothingFn_mock isolates the mock interface of the NothingFn type
type MockNothingFn_mock struct {
	Mock *MockNothingFn
}

// MockNothingFn_recorder isolates the recorder interface of the NothingFn type
type MockNothingFn_recorder struct {
	Mock *MockNothingFn
}

// MockNothingFn_params holds the params of the NothingFn type
type MockNothingFn_params struct{}

// MockNothingFn_resultMgr manages multiple results and the state of the NothingFn type
type MockNothingFn_resultMgr struct {
	Results  []*MockNothingFn_results
	Index    uint32
	AnyTimes bool
}

// MockNothingFn_results holds the results of the NothingFn type
type MockNothingFn_results struct {
}

// MockNothingFn_fnRecorder routes recorded function calls to the MockNothingFn mock
type MockNothingFn_fnRecorder struct {
	Params  MockNothingFn_params
	Results *MockNothingFn_resultMgr
	Mock    *MockNothingFn
}

// NewMockNothingFn creates a new mock of the NothingFn type
func NewMockNothingFn(t testing.MoqT, c *config.MockConfig) *MockNothingFn {
	if c == nil {
		c = &config.MockConfig{}
	}
	return &MockNothingFn{
		T:               t,
		Config:          *c,
		ResultsByParams: map[MockNothingFn_params]*MockNothingFn_resultMgr{},
		Params:          make(chan MockNothingFn_params, 100),
	}
}

// Mock returns the mock implementation of the NothingFn type
func (m *MockNothingFn) Mock() testmocks.NothingFn {
	return func() { mock := &MockNothingFn_mock{Mock: m}; mock.Fn() }
}

func (m *MockNothingFn_mock) Fn() {
	params := MockNothingFn_params{}
	m.Mock.Params <- params
	results, ok := m.Mock.ResultsByParams[params]
	if !ok {
		if m.Mock.Config.Expectation == config.Strict {
			m.Mock.T.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= len(results.Results) {
		if !results.AnyTimes {
			if m.Mock.Config.Expectation == config.Strict {
				m.Mock.T.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = len(results.Results) - 1
	}
	return
}

func (m *MockNothingFn) OnCall() *MockNothingFn_fnRecorder {
	return &MockNothingFn_fnRecorder{
		Params: MockNothingFn_params{},
		Mock:   m,
	}
}

func (r *MockNothingFn_fnRecorder) ReturnResults() *MockNothingFn_fnRecorder {
	if r.Results == nil {
		if _, ok := r.Mock.ResultsByParams[r.Params]; ok {
			r.Mock.T.Fatalf("Expectations already recorded for mock with parameters %#v", r.Params)
			return nil
		}

		r.Results = &MockNothingFn_resultMgr{Results: []*MockNothingFn_results{}, Index: 0, AnyTimes: false}
		r.Mock.ResultsByParams[r.Params] = r.Results
	}
	r.Results.Results = append(r.Results.Results, &MockNothingFn_results{})
	return r
}

func (r *MockNothingFn_fnRecorder) Times(count int) *MockNothingFn_fnRecorder {
	if r.Results == nil {
		r.Mock.T.Fatalf("Return must be called before calling Times")
		return nil
	}
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < count-1; n++ {
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (r *MockNothingFn_fnRecorder) AnyTimes() {
	if r.Results == nil {
		r.Mock.T.Fatalf("Return must be called before calling AnyTimes")
		return
	}
	r.Results.AnyTimes = true
}
