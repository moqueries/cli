// Code generated by Moqueries - https://github.com/myshkin5/moqueries - DO NOT EDIT!

package exported

import (
	"sync/atomic"

	"github.com/myshkin5/moqueries/pkg/generator/testmocks"
	"github.com/myshkin5/moqueries/pkg/moq"
)

// MockNoParamsFn holds the state of a mock of the NoParamsFn type
type MockNoParamsFn struct {
	Scene           *moq.Scene
	Config          moq.MockConfig
	ResultsByParams map[MockNoParamsFn_paramsKey]*MockNoParamsFn_resultMgr
}

// MockNoParamsFn_mock isolates the mock interface of the NoParamsFn type
type MockNoParamsFn_mock struct {
	Mock *MockNoParamsFn
}

// MockNoParamsFn_recorder isolates the recorder interface of the NoParamsFn type
type MockNoParamsFn_recorder struct {
	Mock *MockNoParamsFn
}

// MockNoParamsFn_params holds the params of the NoParamsFn type
type MockNoParamsFn_params struct{}

// MockNoParamsFn_paramsKey holds the map key params of the NoParamsFn type
type MockNoParamsFn_paramsKey struct{}

// MockNoParamsFn_resultMgr manages multiple results and the state of the NoParamsFn type
type MockNoParamsFn_resultMgr struct {
	Results  []*MockNoParamsFn_results
	Index    uint32
	AnyTimes bool
}

// MockNoParamsFn_results holds the results of the NoParamsFn type
type MockNoParamsFn_results struct {
	SResult string
	Err     error
}

// MockNoParamsFn_fnRecorder routes recorded function calls to the MockNoParamsFn mock
type MockNoParamsFn_fnRecorder struct {
	Params    MockNoParamsFn_params
	ParamsKey MockNoParamsFn_paramsKey
	Results   *MockNoParamsFn_resultMgr
	Mock      *MockNoParamsFn
}

// NewMockNoParamsFn creates a new mock of the NoParamsFn type
func NewMockNoParamsFn(scene *moq.Scene, config *moq.MockConfig) *MockNoParamsFn {
	if config == nil {
		config = &moq.MockConfig{}
	}
	m := &MockNoParamsFn{
		Scene:  scene,
		Config: *config,
	}
	m.Reset()
	scene.AddMock(m)
	return m
}

// Mock returns the mock implementation of the NoParamsFn type
func (m *MockNoParamsFn) Mock() testmocks.NoParamsFn {
	return func() (sResult string, err error) { mock := &MockNoParamsFn_mock{Mock: m}; return mock.Fn() }
}

func (m *MockNoParamsFn_mock) Fn() (sResult string, err error) {
	params := MockNoParamsFn_paramsKey{}
	results, ok := m.Mock.ResultsByParams[params]
	if !ok {
		if m.Mock.Config.Expectation == moq.Strict {
			m.Mock.Scene.MoqT.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= len(results.Results) {
		if !results.AnyTimes {
			if m.Mock.Config.Expectation == moq.Strict {
				m.Mock.Scene.MoqT.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = len(results.Results) - 1
	}
	result := results.Results[i]
	sResult = result.SResult
	err = result.Err
	return
}

func (m *MockNoParamsFn) OnCall() *MockNoParamsFn_fnRecorder {
	return &MockNoParamsFn_fnRecorder{
		Params:    MockNoParamsFn_params{},
		ParamsKey: MockNoParamsFn_paramsKey{},
		Mock:      m,
	}
}

func (r *MockNoParamsFn_fnRecorder) ReturnResults(sResult string, err error) *MockNoParamsFn_fnRecorder {
	if r.Results == nil {
		if _, ok := r.Mock.ResultsByParams[r.ParamsKey]; ok {
			r.Mock.Scene.MoqT.Fatalf("Expectations already recorded for mock with parameters %#v", r.ParamsKey)
			return nil
		}

		r.Results = &MockNoParamsFn_resultMgr{Results: []*MockNoParamsFn_results{}, Index: 0, AnyTimes: false}
		r.Mock.ResultsByParams[r.ParamsKey] = r.Results
	}
	r.Results.Results = append(r.Results.Results, &MockNoParamsFn_results{
		SResult: sResult,
		Err:     err,
	})
	return r
}

func (r *MockNoParamsFn_fnRecorder) Times(count int) *MockNoParamsFn_fnRecorder {
	if r.Results == nil {
		r.Mock.Scene.MoqT.Fatalf("Return must be called before calling Times")
		return nil
	}
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < count-1; n++ {
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (r *MockNoParamsFn_fnRecorder) AnyTimes() {
	if r.Results == nil {
		r.Mock.Scene.MoqT.Fatalf("Return must be called before calling AnyTimes")
		return
	}
	r.Results.AnyTimes = true
}

// Reset resets the state of the mock
func (m *MockNoParamsFn) Reset() {
	m.ResultsByParams = map[MockNoParamsFn_paramsKey]*MockNoParamsFn_resultMgr{}
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MockNoParamsFn) AssertExpectationsMet() {
	for params, results := range m.ResultsByParams {
		missing := len(results.Results) - int(atomic.LoadUint32(&results.Index))
		if missing == 1 && results.AnyTimes == true {
			continue
		}
		if missing > 0 {
			m.Scene.MoqT.Errorf("Expected %d additional call(s) with parameters %#v", missing, params)
		}
	}
}
