// Code generated by Moqueries - https://github.com/myshkin5/moqueries - DO NOT EDIT!

package exported

import (
	"sync/atomic"

	"github.com/myshkin5/moqueries/pkg/generator/testmocks"
	"github.com/myshkin5/moqueries/pkg/testing"
)

// MockNoParamsFn holds the state of a mock of the NoParamsFn type
type MockNoParamsFn struct {
	T               testing.MoqT
	ResultsByParams map[MockNoParamsFn_params]*MockNoParamsFn_resultMgr
	Params          chan MockNoParamsFn_params
}

// MockNoParamsFn_mock isolates the mock interface of the NoParamsFn type
type MockNoParamsFn_mock struct {
	Mock *MockNoParamsFn
}

// MockNoParamsFn_recorder isolates the recorder interface of the NoParamsFn type
type MockNoParamsFn_recorder struct {
	Mock *MockNoParamsFn
}

// MockNoParamsFn_params holds the params of the NoParamsFn type
type MockNoParamsFn_params struct{}

// MockNoParamsFn_resultMgr manages multiple results and the state of the NoParamsFn type
type MockNoParamsFn_resultMgr struct {
	Results  []*MockNoParamsFn_results
	Index    uint32
	AnyTimes bool
}

// MockNoParamsFn_results holds the results of the NoParamsFn type
type MockNoParamsFn_results struct {
	SResult string
	Err     error
}

// MockNoParamsFn_fnRecorder routes recorded function calls to the MockNoParamsFn mock
type MockNoParamsFn_fnRecorder struct {
	Params  MockNoParamsFn_params
	Results *MockNoParamsFn_resultMgr
	Mock    *MockNoParamsFn
}

// NewMockNoParamsFn creates a new mock of the NoParamsFn type
func NewMockNoParamsFn(t testing.MoqT) *MockNoParamsFn {
	return &MockNoParamsFn{
		T:               t,
		ResultsByParams: map[MockNoParamsFn_params]*MockNoParamsFn_resultMgr{},
		Params:          make(chan MockNoParamsFn_params, 100),
	}
}

// Mock returns the mock implementation of the NoParamsFn type
func (m *MockNoParamsFn) Mock() testmocks.NoParamsFn {
	return func() (sResult string, err error) { mock := &MockNoParamsFn_mock{Mock: m}; return mock.Fn() }
}

func (m *MockNoParamsFn_mock) Fn() (sResult string, err error) {
	params := MockNoParamsFn_params{}
	m.Mock.Params <- params
	results, ok := m.Mock.ResultsByParams[params]
	if ok {
		i := int(atomic.AddUint32(&results.Index, 1)) - 1
		if i >= len(results.Results) {
			if !results.AnyTimes {
				m.Mock.T.Fatalf("Too many calls to mock with parameters %#v", params)
				return
			}
			i = len(results.Results) - 1
		}
		result := results.Results[i]
		sResult = result.SResult
		err = result.Err
	}
	return sResult, err
}

func (m *MockNoParamsFn) OnCall() *MockNoParamsFn_fnRecorder {
	return &MockNoParamsFn_fnRecorder{
		Params: MockNoParamsFn_params{},
		Mock:   m,
	}
}

func (r *MockNoParamsFn_fnRecorder) ReturnResults(sResult string, err error) *MockNoParamsFn_fnRecorder {
	if r.Results == nil {
		if _, ok := r.Mock.ResultsByParams[r.Params]; ok {
			r.Mock.T.Fatalf("Expectations already recorded for mock with parameters %#v", r.Params)
			return nil
		}

		r.Results = &MockNoParamsFn_resultMgr{Results: []*MockNoParamsFn_results{}, Index: 0, AnyTimes: false}
		r.Mock.ResultsByParams[r.Params] = r.Results
	}
	r.Results.Results = append(r.Results.Results, &MockNoParamsFn_results{
		SResult: sResult,
		Err:     err,
	})
	return r
}

func (r *MockNoParamsFn_fnRecorder) Times(count int) *MockNoParamsFn_fnRecorder {
	if r.Results == nil {
		r.Mock.T.Fatalf("Return must be called before calling Times")
		return nil
	}
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < count-1; n++ {
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (r *MockNoParamsFn_fnRecorder) AnyTimes() {
	if r.Results == nil {
		r.Mock.T.Fatalf("Return must be called before calling AnyTimes")
		return
	}
	r.Results.AnyTimes = true
}
