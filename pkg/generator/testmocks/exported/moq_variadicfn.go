// Code generated by Moqueries - https://github.com/myshkin5/moqueries - DO NOT EDIT!

package exported

import (
	"sync/atomic"

	"github.com/myshkin5/moqueries/pkg/generator/testmocks"
	"github.com/myshkin5/moqueries/pkg/hash"
	"github.com/myshkin5/moqueries/pkg/testing"
)

// MockVariadicFn holds the state of a mock of the VariadicFn type
type MockVariadicFn struct {
	T               testing.MoqT
	ResultsByParams map[MockVariadicFn_params]*MockVariadicFn_resultMgr
	Params          chan MockVariadicFn_params
}

// MockVariadicFn_mock isolates the mock interface of the VariadicFn type
type MockVariadicFn_mock struct {
	Mock *MockVariadicFn
}

// MockVariadicFn_recorder isolates the recorder interface of the VariadicFn type
type MockVariadicFn_recorder struct {
	Mock *MockVariadicFn
}

// MockVariadicFn_params holds the params of the VariadicFn type
type MockVariadicFn_params struct {
	Other bool
	Args  hash.Hash
}

// MockVariadicFn_resultMgr manages multiple results and the state of the VariadicFn type
type MockVariadicFn_resultMgr struct {
	Results  []*MockVariadicFn_results
	Index    uint32
	AnyTimes bool
}

// MockVariadicFn_results holds the results of the VariadicFn type
type MockVariadicFn_results struct {
	SResult string
	Err     error
}

// MockVariadicFn_fnRecorder routes recorded function calls to the MockVariadicFn mock
type MockVariadicFn_fnRecorder struct {
	Params  MockVariadicFn_params
	Results *MockVariadicFn_resultMgr
	Mock    *MockVariadicFn
}

// NewMockVariadicFn creates a new mock of the VariadicFn type
func NewMockVariadicFn(t testing.MoqT) *MockVariadicFn {
	return &MockVariadicFn{
		T:               t,
		ResultsByParams: map[MockVariadicFn_params]*MockVariadicFn_resultMgr{},
		Params:          make(chan MockVariadicFn_params, 100),
	}
}

// Mock returns the mock implementation of the VariadicFn type
func (m *MockVariadicFn) Mock() testmocks.VariadicFn {
	return func(other bool, args ...string) (sResult string, err error) {
		mock := &MockVariadicFn_mock{Mock: m}
		return mock.Fn(other, args...)
	}
}

func (m *MockVariadicFn_mock) Fn(other bool, args ...string) (sResult string, err error) {
	params := MockVariadicFn_params{
		Other: other,
		Args:  hash.DeepHash(args),
	}
	m.Mock.Params <- params
	results, ok := m.Mock.ResultsByParams[params]
	if ok {
		i := int(atomic.AddUint32(&results.Index, 1)) - 1
		if i >= len(results.Results) {
			if !results.AnyTimes {
				m.Mock.T.Fatalf("Too many calls to mock with parameters %#v", params)
				return
			}
			i = len(results.Results) - 1
		}
		result := results.Results[i]
		sResult = result.SResult
		err = result.Err
	}
	return sResult, err
}

func (m *MockVariadicFn) OnCall(other bool, args ...string) *MockVariadicFn_fnRecorder {
	return &MockVariadicFn_fnRecorder{
		Params: MockVariadicFn_params{
			Other: other,
			Args:  hash.DeepHash(args),
		},
		Mock: m,
	}
}

func (r *MockVariadicFn_fnRecorder) ReturnResults(sResult string, err error) *MockVariadicFn_fnRecorder {
	if r.Results == nil {
		if _, ok := r.Mock.ResultsByParams[r.Params]; ok {
			r.Mock.T.Fatalf("Expectations already recorded for mock with parameters %#v", r.Params)
			return nil
		}

		r.Results = &MockVariadicFn_resultMgr{Results: []*MockVariadicFn_results{}, Index: 0, AnyTimes: false}
		r.Mock.ResultsByParams[r.Params] = r.Results
	}
	r.Results.Results = append(r.Results.Results, &MockVariadicFn_results{
		SResult: sResult,
		Err:     err,
	})
	return r
}

func (r *MockVariadicFn_fnRecorder) Times(count int) *MockVariadicFn_fnRecorder {
	if r.Results == nil {
		r.Mock.T.Fatalf("Return must be called before calling Times")
		return nil
	}
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < count-1; n++ {
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (r *MockVariadicFn_fnRecorder) AnyTimes() {
	if r.Results == nil {
		r.Mock.T.Fatalf("Return must be called before calling AnyTimes")
		return
	}
	r.Results.AnyTimes = true
}
