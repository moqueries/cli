// Code generated by Moqueries - https://github.com/myshkin5/moqueries - DO NOT EDIT!

package exported

import (
	"sync/atomic"

	"github.com/myshkin5/moqueries/pkg/config"
	"github.com/myshkin5/moqueries/pkg/generator/testmocks"
	"github.com/myshkin5/moqueries/pkg/testing"
)

// MockNoNamesFn holds the state of a mock of the NoNamesFn type
type MockNoNamesFn struct {
	T               testing.MoqT
	Config          config.MockConfig
	ResultsByParams map[MockNoNamesFn_params]*MockNoNamesFn_resultMgr
	Params          chan MockNoNamesFn_params
}

// MockNoNamesFn_mock isolates the mock interface of the NoNamesFn type
type MockNoNamesFn_mock struct {
	Mock *MockNoNamesFn
}

// MockNoNamesFn_recorder isolates the recorder interface of the NoNamesFn type
type MockNoNamesFn_recorder struct {
	Mock *MockNoNamesFn
}

// MockNoNamesFn_params holds the params of the NoNamesFn type
type MockNoNamesFn_params struct {
	SParam string
	BParam bool
}

// MockNoNamesFn_resultMgr manages multiple results and the state of the NoNamesFn type
type MockNoNamesFn_resultMgr struct {
	Results  []*MockNoNamesFn_results
	Index    uint32
	AnyTimes bool
}

// MockNoNamesFn_results holds the results of the NoNamesFn type
type MockNoNamesFn_results struct {
	SResult string
	Err     error
}

// MockNoNamesFn_fnRecorder routes recorded function calls to the MockNoNamesFn mock
type MockNoNamesFn_fnRecorder struct {
	Params  MockNoNamesFn_params
	Results *MockNoNamesFn_resultMgr
	Mock    *MockNoNamesFn
}

// NewMockNoNamesFn creates a new mock of the NoNamesFn type
func NewMockNoNamesFn(t testing.MoqT, c *config.MockConfig) *MockNoNamesFn {
	if c == nil {
		c = &config.MockConfig{}
	}
	return &MockNoNamesFn{
		T:               t,
		Config:          *c,
		ResultsByParams: map[MockNoNamesFn_params]*MockNoNamesFn_resultMgr{},
		Params:          make(chan MockNoNamesFn_params, 100),
	}
}

// Mock returns the mock implementation of the NoNamesFn type
func (m *MockNoNamesFn) Mock() testmocks.NoNamesFn {
	return func(sParam string, bParam bool) (sResult string, err error) {
		mock := &MockNoNamesFn_mock{Mock: m}
		return mock.Fn(sParam, bParam)
	}
}

func (m *MockNoNamesFn_mock) Fn(sParam string, bParam bool) (sResult string, err error) {
	params := MockNoNamesFn_params{
		SParam: sParam,
		BParam: bParam,
	}
	m.Mock.Params <- params
	results, ok := m.Mock.ResultsByParams[params]
	if !ok {
		if m.Mock.Config.Expectation == config.Strict {
			m.Mock.T.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= len(results.Results) {
		if !results.AnyTimes {
			if m.Mock.Config.Expectation == config.Strict {
				m.Mock.T.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = len(results.Results) - 1
	}
	result := results.Results[i]
	sResult = result.SResult
	err = result.Err
	return
}

func (m *MockNoNamesFn) OnCall(sParam string, bParam bool) *MockNoNamesFn_fnRecorder {
	return &MockNoNamesFn_fnRecorder{
		Params: MockNoNamesFn_params{
			SParam: sParam,
			BParam: bParam,
		},
		Mock: m,
	}
}

func (r *MockNoNamesFn_fnRecorder) ReturnResults(sResult string, err error) *MockNoNamesFn_fnRecorder {
	if r.Results == nil {
		if _, ok := r.Mock.ResultsByParams[r.Params]; ok {
			r.Mock.T.Fatalf("Expectations already recorded for mock with parameters %#v", r.Params)
			return nil
		}

		r.Results = &MockNoNamesFn_resultMgr{Results: []*MockNoNamesFn_results{}, Index: 0, AnyTimes: false}
		r.Mock.ResultsByParams[r.Params] = r.Results
	}
	r.Results.Results = append(r.Results.Results, &MockNoNamesFn_results{
		SResult: sResult,
		Err:     err,
	})
	return r
}

func (r *MockNoNamesFn_fnRecorder) Times(count int) *MockNoNamesFn_fnRecorder {
	if r.Results == nil {
		r.Mock.T.Fatalf("Return must be called before calling Times")
		return nil
	}
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < count-1; n++ {
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (r *MockNoNamesFn_fnRecorder) AnyTimes() {
	if r.Results == nil {
		r.Mock.T.Fatalf("Return must be called before calling AnyTimes")
		return
	}
	r.Results.AnyTimes = true
}
