// Code generated by Moqueries - https://github.com/myshkin5/moqueries - DO NOT EDIT!

package exported

import (
	"sync/atomic"

	"github.com/myshkin5/moqueries/pkg/hash"
	"github.com/myshkin5/moqueries/pkg/testing"
)

// MockUsual holds the state of a mock of the Usual type
type MockUsual struct {
	T                           testing.MoqT
	ResultsByParams_Usual       map[MockUsual_Usual_params]*MockUsual_Usual_resultMgr
	Params_Usual                chan MockUsual_Usual_params
	ResultsByParams_NoNames     map[MockUsual_NoNames_params]*MockUsual_NoNames_resultMgr
	Params_NoNames              chan MockUsual_NoNames_params
	ResultsByParams_NoResults   map[MockUsual_NoResults_params]*MockUsual_NoResults_resultMgr
	Params_NoResults            chan MockUsual_NoResults_params
	ResultsByParams_NoParams    map[MockUsual_NoParams_params]*MockUsual_NoParams_resultMgr
	Params_NoParams             chan MockUsual_NoParams_params
	ResultsByParams_Nothing     map[MockUsual_Nothing_params]*MockUsual_Nothing_resultMgr
	Params_Nothing              chan MockUsual_Nothing_params
	ResultsByParams_Variadic    map[MockUsual_Variadic_params]*MockUsual_Variadic_resultMgr
	Params_Variadic             chan MockUsual_Variadic_params
	ResultsByParams_RepeatedIds map[MockUsual_RepeatedIds_params]*MockUsual_RepeatedIds_resultMgr
	Params_RepeatedIds          chan MockUsual_RepeatedIds_params
}

// MockUsual_mock isolates the mock interface of the Usual type
type MockUsual_mock struct {
	Mock *MockUsual
}

// MockUsual_recorder isolates the recorder interface of the Usual type
type MockUsual_recorder struct {
	Mock *MockUsual
}

// MockUsual_Usual_params holds the params of the Usual type
type MockUsual_Usual_params struct {
	SParam string
	BParam bool
}

// MockUsual_Usual_resultMgr manages multiple results and the state of the Usual type
type MockUsual_Usual_resultMgr struct {
	Results  []*MockUsual_Usual_results
	Index    uint32
	AnyTimes bool
}

// MockUsual_Usual_results holds the results of the Usual type
type MockUsual_Usual_results struct {
	SResult string
	Err     error
}

// MockUsual_Usual_fnRecorder routes recorded function calls to the MockUsual mock
type MockUsual_Usual_fnRecorder struct {
	Params  MockUsual_Usual_params
	Results *MockUsual_Usual_resultMgr
	Mock    *MockUsual
}

// MockUsual_NoNames_params holds the params of the Usual type
type MockUsual_NoNames_params struct {
	Param1 string
	Param2 bool
}

// MockUsual_NoNames_resultMgr manages multiple results and the state of the Usual type
type MockUsual_NoNames_resultMgr struct {
	Results  []*MockUsual_NoNames_results
	Index    uint32
	AnyTimes bool
}

// MockUsual_NoNames_results holds the results of the Usual type
type MockUsual_NoNames_results struct {
	Result1 string
	Result2 error
}

// MockUsual_NoNames_fnRecorder routes recorded function calls to the MockUsual mock
type MockUsual_NoNames_fnRecorder struct {
	Params  MockUsual_NoNames_params
	Results *MockUsual_NoNames_resultMgr
	Mock    *MockUsual
}

// MockUsual_NoResults_params holds the params of the Usual type
type MockUsual_NoResults_params struct {
	SParam string
	BParam bool
}

// MockUsual_NoResults_resultMgr manages multiple results and the state of the Usual type
type MockUsual_NoResults_resultMgr struct {
	Results  []*MockUsual_NoResults_results
	Index    uint32
	AnyTimes bool
}

// MockUsual_NoResults_results holds the results of the Usual type
type MockUsual_NoResults_results struct {
}

// MockUsual_NoResults_fnRecorder routes recorded function calls to the MockUsual mock
type MockUsual_NoResults_fnRecorder struct {
	Params  MockUsual_NoResults_params
	Results *MockUsual_NoResults_resultMgr
	Mock    *MockUsual
}

// MockUsual_NoParams_params holds the params of the Usual type
type MockUsual_NoParams_params struct{}

// MockUsual_NoParams_resultMgr manages multiple results and the state of the Usual type
type MockUsual_NoParams_resultMgr struct {
	Results  []*MockUsual_NoParams_results
	Index    uint32
	AnyTimes bool
}

// MockUsual_NoParams_results holds the results of the Usual type
type MockUsual_NoParams_results struct {
	SResult string
	Err     error
}

// MockUsual_NoParams_fnRecorder routes recorded function calls to the MockUsual mock
type MockUsual_NoParams_fnRecorder struct {
	Params  MockUsual_NoParams_params
	Results *MockUsual_NoParams_resultMgr
	Mock    *MockUsual
}

// MockUsual_Nothing_params holds the params of the Usual type
type MockUsual_Nothing_params struct{}

// MockUsual_Nothing_resultMgr manages multiple results and the state of the Usual type
type MockUsual_Nothing_resultMgr struct {
	Results  []*MockUsual_Nothing_results
	Index    uint32
	AnyTimes bool
}

// MockUsual_Nothing_results holds the results of the Usual type
type MockUsual_Nothing_results struct {
}

// MockUsual_Nothing_fnRecorder routes recorded function calls to the MockUsual mock
type MockUsual_Nothing_fnRecorder struct {
	Params  MockUsual_Nothing_params
	Results *MockUsual_Nothing_resultMgr
	Mock    *MockUsual
}

// MockUsual_Variadic_params holds the params of the Usual type
type MockUsual_Variadic_params struct {
	Other bool
	Args  hash.Hash
}

// MockUsual_Variadic_resultMgr manages multiple results and the state of the Usual type
type MockUsual_Variadic_resultMgr struct {
	Results  []*MockUsual_Variadic_results
	Index    uint32
	AnyTimes bool
}

// MockUsual_Variadic_results holds the results of the Usual type
type MockUsual_Variadic_results struct {
	SResult string
	Err     error
}

// MockUsual_Variadic_fnRecorder routes recorded function calls to the MockUsual mock
type MockUsual_Variadic_fnRecorder struct {
	Params  MockUsual_Variadic_params
	Results *MockUsual_Variadic_resultMgr
	Mock    *MockUsual
}

// MockUsual_RepeatedIds_params holds the params of the Usual type
type MockUsual_RepeatedIds_params struct {
	SParam1, SParam2 string
	BParam           bool
}

// MockUsual_RepeatedIds_resultMgr manages multiple results and the state of the Usual type
type MockUsual_RepeatedIds_resultMgr struct {
	Results  []*MockUsual_RepeatedIds_results
	Index    uint32
	AnyTimes bool
}

// MockUsual_RepeatedIds_results holds the results of the Usual type
type MockUsual_RepeatedIds_results struct {
	SResult1, SResult2 string
	Err                error
}

// MockUsual_RepeatedIds_fnRecorder routes recorded function calls to the MockUsual mock
type MockUsual_RepeatedIds_fnRecorder struct {
	Params  MockUsual_RepeatedIds_params
	Results *MockUsual_RepeatedIds_resultMgr
	Mock    *MockUsual
}

// NewMockUsual creates a new mock of the Usual type
func NewMockUsual(t testing.MoqT) *MockUsual {
	return &MockUsual{
		T:                           t,
		ResultsByParams_Usual:       map[MockUsual_Usual_params]*MockUsual_Usual_resultMgr{},
		Params_Usual:                make(chan MockUsual_Usual_params, 100),
		ResultsByParams_NoNames:     map[MockUsual_NoNames_params]*MockUsual_NoNames_resultMgr{},
		Params_NoNames:              make(chan MockUsual_NoNames_params, 100),
		ResultsByParams_NoResults:   map[MockUsual_NoResults_params]*MockUsual_NoResults_resultMgr{},
		Params_NoResults:            make(chan MockUsual_NoResults_params, 100),
		ResultsByParams_NoParams:    map[MockUsual_NoParams_params]*MockUsual_NoParams_resultMgr{},
		Params_NoParams:             make(chan MockUsual_NoParams_params, 100),
		ResultsByParams_Nothing:     map[MockUsual_Nothing_params]*MockUsual_Nothing_resultMgr{},
		Params_Nothing:              make(chan MockUsual_Nothing_params, 100),
		ResultsByParams_Variadic:    map[MockUsual_Variadic_params]*MockUsual_Variadic_resultMgr{},
		Params_Variadic:             make(chan MockUsual_Variadic_params, 100),
		ResultsByParams_RepeatedIds: map[MockUsual_RepeatedIds_params]*MockUsual_RepeatedIds_resultMgr{},
		Params_RepeatedIds:          make(chan MockUsual_RepeatedIds_params, 100),
	}
}

// Mock returns the mock implementation of the Usual type
func (m *MockUsual) Mock() *MockUsual_mock {
	return &MockUsual_mock{
		Mock: m,
	}
}

func (m *MockUsual_mock) Usual(sParam string, bParam bool) (sResult string, err error) {
	params := MockUsual_Usual_params{
		SParam: sParam,
		BParam: bParam,
	}
	m.Mock.Params_Usual <- params
	results, ok := m.Mock.ResultsByParams_Usual[params]
	if ok {
		i := int(atomic.AddUint32(&results.Index, 1)) - 1
		if i >= len(results.Results) {
			if !results.AnyTimes {
				m.Mock.T.Fatalf("Too many calls to mock with parameters %#v", params)
				return
			}
			i = len(results.Results) - 1
		}
		result := results.Results[i]
		sResult = result.SResult
		err = result.Err
	}
	return sResult, err
}

func (m *MockUsual_mock) NoNames(param1 string, param2 bool) (result1 string, result2 error) {
	params := MockUsual_NoNames_params{
		Param1: param1,
		Param2: param2,
	}
	m.Mock.Params_NoNames <- params
	results, ok := m.Mock.ResultsByParams_NoNames[params]
	if ok {
		i := int(atomic.AddUint32(&results.Index, 1)) - 1
		if i >= len(results.Results) {
			if !results.AnyTimes {
				m.Mock.T.Fatalf("Too many calls to mock with parameters %#v", params)
				return
			}
			i = len(results.Results) - 1
		}
		result := results.Results[i]
		result1 = result.Result1
		result2 = result.Result2
	}
	return result1, result2
}

func (m *MockUsual_mock) NoResults(sParam string, bParam bool) {
	params := MockUsual_NoResults_params{
		SParam: sParam,
		BParam: bParam,
	}
	m.Mock.Params_NoResults <- params
	results, ok := m.Mock.ResultsByParams_NoResults[params]
	if ok {
		i := int(atomic.AddUint32(&results.Index, 1)) - 1
		if i >= len(results.Results) {
			if !results.AnyTimes {
				m.Mock.T.Fatalf("Too many calls to mock with parameters %#v", params)
				return
			}
			i = len(results.Results) - 1
		}
	}
	return
}

func (m *MockUsual_mock) NoParams() (sResult string, err error) {
	params := MockUsual_NoParams_params{}
	m.Mock.Params_NoParams <- params
	results, ok := m.Mock.ResultsByParams_NoParams[params]
	if ok {
		i := int(atomic.AddUint32(&results.Index, 1)) - 1
		if i >= len(results.Results) {
			if !results.AnyTimes {
				m.Mock.T.Fatalf("Too many calls to mock with parameters %#v", params)
				return
			}
			i = len(results.Results) - 1
		}
		result := results.Results[i]
		sResult = result.SResult
		err = result.Err
	}
	return sResult, err
}

func (m *MockUsual_mock) Nothing() {
	params := MockUsual_Nothing_params{}
	m.Mock.Params_Nothing <- params
	results, ok := m.Mock.ResultsByParams_Nothing[params]
	if ok {
		i := int(atomic.AddUint32(&results.Index, 1)) - 1
		if i >= len(results.Results) {
			if !results.AnyTimes {
				m.Mock.T.Fatalf("Too many calls to mock with parameters %#v", params)
				return
			}
			i = len(results.Results) - 1
		}
	}
	return
}

func (m *MockUsual_mock) Variadic(other bool, args ...string) (sResult string, err error) {
	params := MockUsual_Variadic_params{
		Other: other,
		Args:  hash.DeepHash(args),
	}
	m.Mock.Params_Variadic <- params
	results, ok := m.Mock.ResultsByParams_Variadic[params]
	if ok {
		i := int(atomic.AddUint32(&results.Index, 1)) - 1
		if i >= len(results.Results) {
			if !results.AnyTimes {
				m.Mock.T.Fatalf("Too many calls to mock with parameters %#v", params)
				return
			}
			i = len(results.Results) - 1
		}
		result := results.Results[i]
		sResult = result.SResult
		err = result.Err
	}
	return sResult, err
}

func (m *MockUsual_mock) RepeatedIds(sParam1, sParam2 string, bParam bool) (sResult1, sResult2 string, err error) {
	params := MockUsual_RepeatedIds_params{
		SParam1: sParam1,
		SParam2: sParam2,
		BParam:  bParam,
	}
	m.Mock.Params_RepeatedIds <- params
	results, ok := m.Mock.ResultsByParams_RepeatedIds[params]
	if ok {
		i := int(atomic.AddUint32(&results.Index, 1)) - 1
		if i >= len(results.Results) {
			if !results.AnyTimes {
				m.Mock.T.Fatalf("Too many calls to mock with parameters %#v", params)
				return
			}
			i = len(results.Results) - 1
		}
		result := results.Results[i]
		sResult1 = result.SResult1
		sResult2 = result.SResult2
		err = result.Err
	}
	return sResult1, sResult2, err
}

// OnCall returns the recorder implementation of the Usual type
func (m *MockUsual) OnCall() *MockUsual_recorder {
	return &MockUsual_recorder{
		Mock: m,
	}
}

func (m *MockUsual_recorder) Usual(sParam string, bParam bool) *MockUsual_Usual_fnRecorder {
	return &MockUsual_Usual_fnRecorder{
		Params: MockUsual_Usual_params{
			SParam: sParam,
			BParam: bParam,
		},
		Mock: m.Mock,
	}
}

func (r *MockUsual_Usual_fnRecorder) ReturnResults(sResult string, err error) *MockUsual_Usual_fnRecorder {
	if r.Results == nil {
		if _, ok := r.Mock.ResultsByParams_Usual[r.Params]; ok {
			r.Mock.T.Fatalf("Expectations already recorded for mock with parameters %#v", r.Params)
			return nil
		}

		r.Results = &MockUsual_Usual_resultMgr{Results: []*MockUsual_Usual_results{}, Index: 0, AnyTimes: false}
		r.Mock.ResultsByParams_Usual[r.Params] = r.Results
	}
	r.Results.Results = append(r.Results.Results, &MockUsual_Usual_results{
		SResult: sResult,
		Err:     err,
	})
	return r
}

func (r *MockUsual_Usual_fnRecorder) Times(count int) *MockUsual_Usual_fnRecorder {
	if r.Results == nil {
		r.Mock.T.Fatalf("Return must be called before calling Times")
		return nil
	}
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < count-1; n++ {
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (r *MockUsual_Usual_fnRecorder) AnyTimes() {
	if r.Results == nil {
		r.Mock.T.Fatalf("Return must be called before calling AnyTimes")
		return
	}
	r.Results.AnyTimes = true
}

func (m *MockUsual_recorder) NoNames(param1 string, param2 bool) *MockUsual_NoNames_fnRecorder {
	return &MockUsual_NoNames_fnRecorder{
		Params: MockUsual_NoNames_params{
			Param1: param1,
			Param2: param2,
		},
		Mock: m.Mock,
	}
}

func (r *MockUsual_NoNames_fnRecorder) ReturnResults(result1 string, result2 error) *MockUsual_NoNames_fnRecorder {
	if r.Results == nil {
		if _, ok := r.Mock.ResultsByParams_NoNames[r.Params]; ok {
			r.Mock.T.Fatalf("Expectations already recorded for mock with parameters %#v", r.Params)
			return nil
		}

		r.Results = &MockUsual_NoNames_resultMgr{Results: []*MockUsual_NoNames_results{}, Index: 0, AnyTimes: false}
		r.Mock.ResultsByParams_NoNames[r.Params] = r.Results
	}
	r.Results.Results = append(r.Results.Results, &MockUsual_NoNames_results{
		Result1: result1,
		Result2: result2,
	})
	return r
}

func (r *MockUsual_NoNames_fnRecorder) Times(count int) *MockUsual_NoNames_fnRecorder {
	if r.Results == nil {
		r.Mock.T.Fatalf("Return must be called before calling Times")
		return nil
	}
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < count-1; n++ {
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (r *MockUsual_NoNames_fnRecorder) AnyTimes() {
	if r.Results == nil {
		r.Mock.T.Fatalf("Return must be called before calling AnyTimes")
		return
	}
	r.Results.AnyTimes = true
}

func (m *MockUsual_recorder) NoResults(sParam string, bParam bool) *MockUsual_NoResults_fnRecorder {
	return &MockUsual_NoResults_fnRecorder{
		Params: MockUsual_NoResults_params{
			SParam: sParam,
			BParam: bParam,
		},
		Mock: m.Mock,
	}
}

func (r *MockUsual_NoResults_fnRecorder) ReturnResults() *MockUsual_NoResults_fnRecorder {
	if r.Results == nil {
		if _, ok := r.Mock.ResultsByParams_NoResults[r.Params]; ok {
			r.Mock.T.Fatalf("Expectations already recorded for mock with parameters %#v", r.Params)
			return nil
		}

		r.Results = &MockUsual_NoResults_resultMgr{Results: []*MockUsual_NoResults_results{}, Index: 0, AnyTimes: false}
		r.Mock.ResultsByParams_NoResults[r.Params] = r.Results
	}
	r.Results.Results = append(r.Results.Results, &MockUsual_NoResults_results{})
	return r
}

func (r *MockUsual_NoResults_fnRecorder) Times(count int) *MockUsual_NoResults_fnRecorder {
	if r.Results == nil {
		r.Mock.T.Fatalf("Return must be called before calling Times")
		return nil
	}
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < count-1; n++ {
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (r *MockUsual_NoResults_fnRecorder) AnyTimes() {
	if r.Results == nil {
		r.Mock.T.Fatalf("Return must be called before calling AnyTimes")
		return
	}
	r.Results.AnyTimes = true
}

func (m *MockUsual_recorder) NoParams() *MockUsual_NoParams_fnRecorder {
	return &MockUsual_NoParams_fnRecorder{
		Params: MockUsual_NoParams_params{},
		Mock:   m.Mock,
	}
}

func (r *MockUsual_NoParams_fnRecorder) ReturnResults(sResult string, err error) *MockUsual_NoParams_fnRecorder {
	if r.Results == nil {
		if _, ok := r.Mock.ResultsByParams_NoParams[r.Params]; ok {
			r.Mock.T.Fatalf("Expectations already recorded for mock with parameters %#v", r.Params)
			return nil
		}

		r.Results = &MockUsual_NoParams_resultMgr{Results: []*MockUsual_NoParams_results{}, Index: 0, AnyTimes: false}
		r.Mock.ResultsByParams_NoParams[r.Params] = r.Results
	}
	r.Results.Results = append(r.Results.Results, &MockUsual_NoParams_results{
		SResult: sResult,
		Err:     err,
	})
	return r
}

func (r *MockUsual_NoParams_fnRecorder) Times(count int) *MockUsual_NoParams_fnRecorder {
	if r.Results == nil {
		r.Mock.T.Fatalf("Return must be called before calling Times")
		return nil
	}
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < count-1; n++ {
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (r *MockUsual_NoParams_fnRecorder) AnyTimes() {
	if r.Results == nil {
		r.Mock.T.Fatalf("Return must be called before calling AnyTimes")
		return
	}
	r.Results.AnyTimes = true
}

func (m *MockUsual_recorder) Nothing() *MockUsual_Nothing_fnRecorder {
	return &MockUsual_Nothing_fnRecorder{
		Params: MockUsual_Nothing_params{},
		Mock:   m.Mock,
	}
}

func (r *MockUsual_Nothing_fnRecorder) ReturnResults() *MockUsual_Nothing_fnRecorder {
	if r.Results == nil {
		if _, ok := r.Mock.ResultsByParams_Nothing[r.Params]; ok {
			r.Mock.T.Fatalf("Expectations already recorded for mock with parameters %#v", r.Params)
			return nil
		}

		r.Results = &MockUsual_Nothing_resultMgr{Results: []*MockUsual_Nothing_results{}, Index: 0, AnyTimes: false}
		r.Mock.ResultsByParams_Nothing[r.Params] = r.Results
	}
	r.Results.Results = append(r.Results.Results, &MockUsual_Nothing_results{})
	return r
}

func (r *MockUsual_Nothing_fnRecorder) Times(count int) *MockUsual_Nothing_fnRecorder {
	if r.Results == nil {
		r.Mock.T.Fatalf("Return must be called before calling Times")
		return nil
	}
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < count-1; n++ {
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (r *MockUsual_Nothing_fnRecorder) AnyTimes() {
	if r.Results == nil {
		r.Mock.T.Fatalf("Return must be called before calling AnyTimes")
		return
	}
	r.Results.AnyTimes = true
}

func (m *MockUsual_recorder) Variadic(other bool, args ...string) *MockUsual_Variadic_fnRecorder {
	return &MockUsual_Variadic_fnRecorder{
		Params: MockUsual_Variadic_params{
			Other: other,
			Args:  hash.DeepHash(args),
		},
		Mock: m.Mock,
	}
}

func (r *MockUsual_Variadic_fnRecorder) ReturnResults(sResult string, err error) *MockUsual_Variadic_fnRecorder {
	if r.Results == nil {
		if _, ok := r.Mock.ResultsByParams_Variadic[r.Params]; ok {
			r.Mock.T.Fatalf("Expectations already recorded for mock with parameters %#v", r.Params)
			return nil
		}

		r.Results = &MockUsual_Variadic_resultMgr{Results: []*MockUsual_Variadic_results{}, Index: 0, AnyTimes: false}
		r.Mock.ResultsByParams_Variadic[r.Params] = r.Results
	}
	r.Results.Results = append(r.Results.Results, &MockUsual_Variadic_results{
		SResult: sResult,
		Err:     err,
	})
	return r
}

func (r *MockUsual_Variadic_fnRecorder) Times(count int) *MockUsual_Variadic_fnRecorder {
	if r.Results == nil {
		r.Mock.T.Fatalf("Return must be called before calling Times")
		return nil
	}
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < count-1; n++ {
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (r *MockUsual_Variadic_fnRecorder) AnyTimes() {
	if r.Results == nil {
		r.Mock.T.Fatalf("Return must be called before calling AnyTimes")
		return
	}
	r.Results.AnyTimes = true
}

func (m *MockUsual_recorder) RepeatedIds(sParam1, sParam2 string, bParam bool) *MockUsual_RepeatedIds_fnRecorder {
	return &MockUsual_RepeatedIds_fnRecorder{
		Params: MockUsual_RepeatedIds_params{
			SParam1: sParam1,
			SParam2: sParam2,
			BParam:  bParam,
		},
		Mock: m.Mock,
	}
}

func (r *MockUsual_RepeatedIds_fnRecorder) ReturnResults(sResult1, sResult2 string, err error) *MockUsual_RepeatedIds_fnRecorder {
	if r.Results == nil {
		if _, ok := r.Mock.ResultsByParams_RepeatedIds[r.Params]; ok {
			r.Mock.T.Fatalf("Expectations already recorded for mock with parameters %#v", r.Params)
			return nil
		}

		r.Results = &MockUsual_RepeatedIds_resultMgr{Results: []*MockUsual_RepeatedIds_results{}, Index: 0, AnyTimes: false}
		r.Mock.ResultsByParams_RepeatedIds[r.Params] = r.Results
	}
	r.Results.Results = append(r.Results.Results, &MockUsual_RepeatedIds_results{
		SResult1: sResult1,
		SResult2: sResult2,
		Err:      err,
	})
	return r
}

func (r *MockUsual_RepeatedIds_fnRecorder) Times(count int) *MockUsual_RepeatedIds_fnRecorder {
	if r.Results == nil {
		r.Mock.T.Fatalf("Return must be called before calling Times")
		return nil
	}
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < count-1; n++ {
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (r *MockUsual_RepeatedIds_fnRecorder) AnyTimes() {
	if r.Results == nil {
		r.Mock.T.Fatalf("Return must be called before calling AnyTimes")
		return
	}
	r.Results.AnyTimes = true
}
