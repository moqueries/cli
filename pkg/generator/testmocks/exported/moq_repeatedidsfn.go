// Code generated by Moqueries - https://github.com/myshkin5/moqueries - DO NOT EDIT!

package exported

import (
	"math/bits"
	"sync/atomic"

	"github.com/myshkin5/moqueries/pkg/generator/testmocks"
	"github.com/myshkin5/moqueries/pkg/moq"
)

// MockRepeatedIdsFn holds the state of a mock of the RepeatedIdsFn type
type MockRepeatedIdsFn struct {
	Scene           *moq.Scene
	Config          moq.MockConfig
	ResultsByParams []MockRepeatedIdsFn_resultsByParams
}

// MockRepeatedIdsFn_mock isolates the mock interface of the RepeatedIdsFn type
type MockRepeatedIdsFn_mock struct {
	Mock *MockRepeatedIdsFn
}

// MockRepeatedIdsFn_params holds the params of the RepeatedIdsFn type
type MockRepeatedIdsFn_params struct {
	SParam1, SParam2 string
	BParam           bool
}

// MockRepeatedIdsFn_paramsKey holds the map key params of the RepeatedIdsFn type
type MockRepeatedIdsFn_paramsKey struct {
	SParam1, SParam2 string
	BParam           bool
}

// MockRepeatedIdsFn_resultsByParams contains the results for a given set of parameters for the RepeatedIdsFn type
type MockRepeatedIdsFn_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MockRepeatedIdsFn_paramsKey]*MockRepeatedIdsFn_resultMgr
}

// MockRepeatedIdsFn_resultMgr manages multiple results and the state of the RepeatedIdsFn type
type MockRepeatedIdsFn_resultMgr struct {
	Params   MockRepeatedIdsFn_params
	Results  []*MockRepeatedIdsFn_results
	Index    uint32
	AnyTimes bool
}

// MockRepeatedIdsFn_results holds the results of the RepeatedIdsFn type
type MockRepeatedIdsFn_results struct {
	SResult1, SResult2 string
	Err                error
	Moq_Sequence       uint32
}

// MockRepeatedIdsFn_fnRecorder routes recorded function calls to the MockRepeatedIdsFn mock
type MockRepeatedIdsFn_fnRecorder struct {
	Params    MockRepeatedIdsFn_params
	ParamsKey MockRepeatedIdsFn_paramsKey
	AnyParams uint64
	Sequence  bool
	Results   *MockRepeatedIdsFn_resultMgr
	Mock      *MockRepeatedIdsFn
}

// NewMockRepeatedIdsFn creates a new mock of the RepeatedIdsFn type
func NewMockRepeatedIdsFn(scene *moq.Scene, config *moq.MockConfig) *MockRepeatedIdsFn {
	if config == nil {
		config = &moq.MockConfig{}
	}
	m := &MockRepeatedIdsFn{
		Scene:  scene,
		Config: *config,
	}
	scene.AddMock(m)
	return m
}

// Mock returns the mock implementation of the RepeatedIdsFn type
func (m *MockRepeatedIdsFn) Mock() testmocks.RepeatedIdsFn {
	return func(sParam1, sParam2 string, bParam bool) (sResult1, sResult2 string, err error) {
		mock := &MockRepeatedIdsFn_mock{Mock: m}
		return mock.Fn(sParam1, sParam2, bParam)
	}
}

func (m *MockRepeatedIdsFn_mock) Fn(sParam1, sParam2 string, bParam bool) (sResult1, sResult2 string, err error) {
	params := MockRepeatedIdsFn_params{
		SParam1: sParam1,
		SParam2: sParam2,
		BParam:  bParam,
	}
	var results *MockRepeatedIdsFn_resultMgr
	for _, resultsByParams := range m.Mock.ResultsByParams {
		var sParam1Used string
		if resultsByParams.AnyParams&(1<<0) == 0 {
			sParam1Used = sParam1
		}
		var sParam2Used string
		if resultsByParams.AnyParams&(1<<1) == 0 {
			sParam2Used = sParam2
		}
		var bParamUsed bool
		if resultsByParams.AnyParams&(1<<2) == 0 {
			bParamUsed = bParam
		}
		paramsKey := MockRepeatedIdsFn_paramsKey{
			SParam1: sParam1Used,
			SParam2: sParam2Used,
			BParam:  bParamUsed,
		}
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Mock.Config.Expectation == moq.Strict {
			m.Mock.Scene.MoqT.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= len(results.Results) {
		if !results.AnyTimes {
			if m.Mock.Config.Expectation == moq.Strict {
				m.Mock.Scene.MoqT.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = len(results.Results) - 1
	}

	result := results.Results[i]
	if result.Moq_Sequence != 0 {
		sequence := m.Mock.Scene.NextMockSequence()
		if result.Moq_Sequence != sequence {
			m.Mock.Scene.MoqT.Fatalf("Call sequence does not match %#v", params)
		}
	}

	sResult1 = result.SResult1
	sResult2 = result.SResult2
	err = result.Err
	return
}

func (m *MockRepeatedIdsFn) OnCall(sParam1, sParam2 string, bParam bool) *MockRepeatedIdsFn_fnRecorder {
	return &MockRepeatedIdsFn_fnRecorder{
		Params: MockRepeatedIdsFn_params{
			SParam1: sParam1,
			SParam2: sParam2,
			BParam:  bParam,
		},
		ParamsKey: MockRepeatedIdsFn_paramsKey{
			SParam1: sParam1,
			SParam2: sParam2,
			BParam:  bParam,
		},
		Sequence: m.Config.Sequence == moq.SeqDefaultOn,
		Mock:     m,
	}
}

func (r *MockRepeatedIdsFn_fnRecorder) AnySParam1() *MockRepeatedIdsFn_fnRecorder {
	if r.Results != nil {
		r.Mock.Scene.MoqT.Fatalf("Any functions must be called prior to returning results, parameters: %#v", r.Params)
		return nil
	}
	r.AnyParams |= 1 << 0
	return r
}

func (r *MockRepeatedIdsFn_fnRecorder) AnySParam2() *MockRepeatedIdsFn_fnRecorder {
	if r.Results != nil {
		r.Mock.Scene.MoqT.Fatalf("Any functions must be called prior to returning results, parameters: %#v", r.Params)
		return nil
	}
	r.AnyParams |= 1 << 1
	return r
}

func (r *MockRepeatedIdsFn_fnRecorder) AnyBParam() *MockRepeatedIdsFn_fnRecorder {
	if r.Results != nil {
		r.Mock.Scene.MoqT.Fatalf("Any functions must be called prior to returning results, parameters: %#v", r.Params)
		return nil
	}
	r.AnyParams |= 1 << 2
	return r
}

func (r *MockRepeatedIdsFn_fnRecorder) Seq() *MockRepeatedIdsFn_fnRecorder {
	if r.Results != nil {
		r.Mock.Scene.MoqT.Fatalf("Seq must be called prior to returning results, parameters: %#v", r.Params)
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MockRepeatedIdsFn_fnRecorder) NoSeq() *MockRepeatedIdsFn_fnRecorder {
	if r.Results != nil {
		r.Mock.Scene.MoqT.Fatalf("NoSeq must be called prior to returning results, parameters: %#v", r.Params)
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MockRepeatedIdsFn_fnRecorder) ReturnResults(sResult1, sResult2 string, err error) *MockRepeatedIdsFn_fnRecorder {
	if r.Results == nil {
		anyCount := bits.OnesCount64(r.AnyParams)
		insertAt := -1
		var results *MockRepeatedIdsFn_resultsByParams
		for n, res := range r.Mock.ResultsByParams {
			if res.AnyParams == r.AnyParams {
				results = &res
				break
			}
			if res.AnyCount > anyCount {
				insertAt = n
			}
		}
		if results == nil {
			results = &MockRepeatedIdsFn_resultsByParams{
				AnyCount:  anyCount,
				AnyParams: r.AnyParams,
				Results:   map[MockRepeatedIdsFn_paramsKey]*MockRepeatedIdsFn_resultMgr{},
			}
			r.Mock.ResultsByParams = append(r.Mock.ResultsByParams, *results)
			if insertAt != -1 && insertAt+1 < len(r.Mock.ResultsByParams) {
				copy(r.Mock.ResultsByParams[insertAt+1:], r.Mock.ResultsByParams[insertAt:0])
				r.Mock.ResultsByParams[insertAt] = *results
			}
		}

		var sParam1Used string
		if r.AnyParams&(1<<0) == 0 {
			sParam1Used = r.ParamsKey.SParam1
		}
		var sParam2Used string
		if r.AnyParams&(1<<1) == 0 {
			sParam2Used = r.ParamsKey.SParam2
		}
		var bParamUsed bool
		if r.AnyParams&(1<<2) == 0 {
			bParamUsed = r.ParamsKey.BParam
		}
		paramsKey := MockRepeatedIdsFn_paramsKey{
			SParam1: sParam1Used,
			SParam2: sParam2Used,
			BParam:  bParamUsed,
		}

		if _, ok := results.Results[paramsKey]; ok {
			r.Mock.Scene.MoqT.Fatalf("Expectations already recorded for mock with parameters %#v", r.Params)
			return nil
		}

		r.Results = &MockRepeatedIdsFn_resultMgr{
			Params:   r.Params,
			Results:  []*MockRepeatedIdsFn_results{},
			Index:    0,
			AnyTimes: false,
		}
		results.Results[paramsKey] = r.Results
	}

	var sequence uint32
	if r.Sequence {
		sequence = r.Mock.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, &MockRepeatedIdsFn_results{
		SResult1:     sResult1,
		SResult2:     sResult2,
		Err:          err,
		Moq_Sequence: sequence,
	})
	return r
}

func (r *MockRepeatedIdsFn_fnRecorder) Times(count int) *MockRepeatedIdsFn_fnRecorder {
	if r.Results == nil {
		r.Mock.Scene.MoqT.Fatalf("Return must be called before calling Times")
		return nil
	}
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < count-1; n++ {
		if last.Moq_Sequence != 0 {
			last = &MockRepeatedIdsFn_results{
				SResult1:     last.SResult1,
				SResult2:     last.SResult2,
				Err:          last.Err,
				Moq_Sequence: r.Mock.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (r *MockRepeatedIdsFn_fnRecorder) AnyTimes() {
	if r.Results == nil {
		r.Mock.Scene.MoqT.Fatalf("Return must be called before calling AnyTimes")
		return
	}
	r.Results.AnyTimes = true
}

// Reset resets the state of the mock
func (m *MockRepeatedIdsFn) Reset() { m.ResultsByParams = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *MockRepeatedIdsFn) AssertExpectationsMet() {
	for _, res := range m.ResultsByParams {
		for _, results := range res.Results {
			missing := len(results.Results) - int(atomic.LoadUint32(&results.Index))
			if missing == 1 && results.AnyTimes == true {
				continue
			}
			if missing > 0 {
				m.Scene.MoqT.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.Params)
			}
		}
	}
}
