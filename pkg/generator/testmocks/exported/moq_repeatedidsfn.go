// Code generated by Moqueries - https://github.com/myshkin5/moqueries - DO NOT EDIT!

package exported

import (
	"sync/atomic"

	"github.com/myshkin5/moqueries/pkg/generator/testmocks"
	"github.com/myshkin5/moqueries/pkg/testing"
)

// MockRepeatedIdsFn holds the state of a mock of the RepeatedIdsFn type
type MockRepeatedIdsFn struct {
	T               testing.MoqT
	ResultsByParams map[MockRepeatedIdsFn_params]*MockRepeatedIdsFn_resultMgr
	Params          chan MockRepeatedIdsFn_params
}

// MockRepeatedIdsFn_mock isolates the mock interface of the RepeatedIdsFn type
type MockRepeatedIdsFn_mock struct {
	Mock *MockRepeatedIdsFn
}

// MockRepeatedIdsFn_recorder isolates the recorder interface of the RepeatedIdsFn type
type MockRepeatedIdsFn_recorder struct {
	Mock *MockRepeatedIdsFn
}

// MockRepeatedIdsFn_params holds the params of the RepeatedIdsFn type
type MockRepeatedIdsFn_params struct {
	SParam1, SParam2 string
	BParam           bool
}

// MockRepeatedIdsFn_resultMgr manages multiple results and the state of the RepeatedIdsFn type
type MockRepeatedIdsFn_resultMgr struct {
	Results  []*MockRepeatedIdsFn_results
	Index    uint32
	AnyTimes bool
}

// MockRepeatedIdsFn_results holds the results of the RepeatedIdsFn type
type MockRepeatedIdsFn_results struct {
	SResult1, SResult2 string
	Err                error
}

// MockRepeatedIdsFn_fnRecorder routes recorded function calls to the MockRepeatedIdsFn mock
type MockRepeatedIdsFn_fnRecorder struct {
	Params  MockRepeatedIdsFn_params
	Results *MockRepeatedIdsFn_resultMgr
	Mock    *MockRepeatedIdsFn
}

// NewMockRepeatedIdsFn creates a new mock of the RepeatedIdsFn type
func NewMockRepeatedIdsFn(t testing.MoqT) *MockRepeatedIdsFn {
	return &MockRepeatedIdsFn{
		T:               t,
		ResultsByParams: map[MockRepeatedIdsFn_params]*MockRepeatedIdsFn_resultMgr{},
		Params:          make(chan MockRepeatedIdsFn_params, 100),
	}
}

// Mock returns the mock implementation of the RepeatedIdsFn type
func (m *MockRepeatedIdsFn) Mock() testmocks.RepeatedIdsFn {
	return func(sParam1, sParam2 string, bParam bool) (sResult1, sResult2 string, err error) {
		mock := &MockRepeatedIdsFn_mock{Mock: m}
		return mock.Fn(sParam1, sParam2, bParam)
	}
}

func (m *MockRepeatedIdsFn_mock) Fn(sParam1, sParam2 string, bParam bool) (sResult1, sResult2 string, err error) {
	params := MockRepeatedIdsFn_params{
		SParam1: sParam1,
		SParam2: sParam2,
		BParam:  bParam,
	}
	m.Mock.Params <- params
	results, ok := m.Mock.ResultsByParams[params]
	if ok {
		i := int(atomic.AddUint32(&results.Index, 1)) - 1
		if i >= len(results.Results) {
			if !results.AnyTimes {
				m.Mock.T.Fatalf("Too many calls to mock with parameters %#v", params)
				return
			}
			i = len(results.Results) - 1
		}
		result := results.Results[i]
		sResult1 = result.SResult1
		sResult2 = result.SResult2
		err = result.Err
	}
	return sResult1, sResult2, err
}

func (m *MockRepeatedIdsFn) OnCall(sParam1, sParam2 string, bParam bool) *MockRepeatedIdsFn_fnRecorder {
	return &MockRepeatedIdsFn_fnRecorder{
		Params: MockRepeatedIdsFn_params{
			SParam1: sParam1,
			SParam2: sParam2,
			BParam:  bParam,
		},
		Mock: m,
	}
}

func (r *MockRepeatedIdsFn_fnRecorder) ReturnResults(sResult1, sResult2 string, err error) *MockRepeatedIdsFn_fnRecorder {
	if r.Results == nil {
		if _, ok := r.Mock.ResultsByParams[r.Params]; ok {
			r.Mock.T.Fatalf("Expectations already recorded for mock with parameters %#v", r.Params)
			return nil
		}

		r.Results = &MockRepeatedIdsFn_resultMgr{Results: []*MockRepeatedIdsFn_results{}, Index: 0, AnyTimes: false}
		r.Mock.ResultsByParams[r.Params] = r.Results
	}
	r.Results.Results = append(r.Results.Results, &MockRepeatedIdsFn_results{
		SResult1: sResult1,
		SResult2: sResult2,
		Err:      err,
	})
	return r
}

func (r *MockRepeatedIdsFn_fnRecorder) Times(count int) *MockRepeatedIdsFn_fnRecorder {
	if r.Results == nil {
		r.Mock.T.Fatalf("Return must be called before calling Times")
		return nil
	}
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < count-1; n++ {
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (r *MockRepeatedIdsFn_fnRecorder) AnyTimes() {
	if r.Results == nil {
		r.Mock.T.Fatalf("Return must be called before calling AnyTimes")
		return
	}
	r.Results.AnyTimes = true
}
