// Code generated by Moqueries - https://github.com/myshkin5/moqueries - DO NOT EDIT!

package testmocks_test

import (
	"math/bits"
	"sync/atomic"

	"github.com/myshkin5/moqueries/pkg/hash"
	"github.com/myshkin5/moqueries/pkg/moq"
)

// mockUsual holds the state of a mock of the Usual type
type mockUsual struct {
	scene                       *moq.Scene
	config                      moq.MockConfig
	resultsByParams_Usual       []mockUsual_Usual_resultsByParams
	resultsByParams_NoNames     []mockUsual_NoNames_resultsByParams
	resultsByParams_NoResults   []mockUsual_NoResults_resultsByParams
	resultsByParams_NoParams    []mockUsual_NoParams_resultsByParams
	resultsByParams_Nothing     []mockUsual_Nothing_resultsByParams
	resultsByParams_Variadic    []mockUsual_Variadic_resultsByParams
	resultsByParams_RepeatedIds []mockUsual_RepeatedIds_resultsByParams
}

// mockUsual_mock isolates the mock interface of the Usual type
type mockUsual_mock struct {
	mock *mockUsual
}

// mockUsual_recorder isolates the recorder interface of the Usual type
type mockUsual_recorder struct {
	mock *mockUsual
}

// mockUsual_Usual_params holds the params of the Usual type
type mockUsual_Usual_params struct {
	sParam string
	bParam bool
}

// mockUsual_Usual_paramsKey holds the map key params of the Usual type
type mockUsual_Usual_paramsKey struct {
	sParam string
	bParam bool
}

// mockUsual_Usual_resultsByParams contains the results for a given set of parameters for the Usual type
type mockUsual_Usual_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[mockUsual_Usual_paramsKey]*mockUsual_Usual_resultMgr
}

// mockUsual_Usual_resultMgr manages multiple results and the state of the Usual type
type mockUsual_Usual_resultMgr struct {
	params   mockUsual_Usual_params
	results  []*mockUsual_Usual_results
	index    uint32
	anyTimes bool
}

// mockUsual_Usual_results holds the results of the Usual type
type mockUsual_Usual_results struct {
	sResult      string
	err          error
	moq_sequence uint32
}

// mockUsual_Usual_fnRecorder routes recorded function calls to the mockUsual mock
type mockUsual_Usual_fnRecorder struct {
	params    mockUsual_Usual_params
	paramsKey mockUsual_Usual_paramsKey
	anyParams uint64
	sequence  bool
	results   *mockUsual_Usual_resultMgr
	mock      *mockUsual
}

// mockUsual_NoNames_params holds the params of the Usual type
type mockUsual_NoNames_params struct {
	param1 string
	param2 bool
}

// mockUsual_NoNames_paramsKey holds the map key params of the Usual type
type mockUsual_NoNames_paramsKey struct {
	param1 string
	param2 bool
}

// mockUsual_NoNames_resultsByParams contains the results for a given set of parameters for the Usual type
type mockUsual_NoNames_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[mockUsual_NoNames_paramsKey]*mockUsual_NoNames_resultMgr
}

// mockUsual_NoNames_resultMgr manages multiple results and the state of the Usual type
type mockUsual_NoNames_resultMgr struct {
	params   mockUsual_NoNames_params
	results  []*mockUsual_NoNames_results
	index    uint32
	anyTimes bool
}

// mockUsual_NoNames_results holds the results of the Usual type
type mockUsual_NoNames_results struct {
	result1      string
	result2      error
	moq_sequence uint32
}

// mockUsual_NoNames_fnRecorder routes recorded function calls to the mockUsual mock
type mockUsual_NoNames_fnRecorder struct {
	params    mockUsual_NoNames_params
	paramsKey mockUsual_NoNames_paramsKey
	anyParams uint64
	sequence  bool
	results   *mockUsual_NoNames_resultMgr
	mock      *mockUsual
}

// mockUsual_NoResults_params holds the params of the Usual type
type mockUsual_NoResults_params struct {
	sParam string
	bParam bool
}

// mockUsual_NoResults_paramsKey holds the map key params of the Usual type
type mockUsual_NoResults_paramsKey struct {
	sParam string
	bParam bool
}

// mockUsual_NoResults_resultsByParams contains the results for a given set of parameters for the Usual type
type mockUsual_NoResults_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[mockUsual_NoResults_paramsKey]*mockUsual_NoResults_resultMgr
}

// mockUsual_NoResults_resultMgr manages multiple results and the state of the Usual type
type mockUsual_NoResults_resultMgr struct {
	params   mockUsual_NoResults_params
	results  []*mockUsual_NoResults_results
	index    uint32
	anyTimes bool
}

// mockUsual_NoResults_results holds the results of the Usual type
type mockUsual_NoResults_results struct {
	moq_sequence uint32
}

// mockUsual_NoResults_fnRecorder routes recorded function calls to the mockUsual mock
type mockUsual_NoResults_fnRecorder struct {
	params    mockUsual_NoResults_params
	paramsKey mockUsual_NoResults_paramsKey
	anyParams uint64
	sequence  bool
	results   *mockUsual_NoResults_resultMgr
	mock      *mockUsual
}

// mockUsual_NoParams_params holds the params of the Usual type
type mockUsual_NoParams_params struct{}

// mockUsual_NoParams_paramsKey holds the map key params of the Usual type
type mockUsual_NoParams_paramsKey struct{}

// mockUsual_NoParams_resultsByParams contains the results for a given set of parameters for the Usual type
type mockUsual_NoParams_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[mockUsual_NoParams_paramsKey]*mockUsual_NoParams_resultMgr
}

// mockUsual_NoParams_resultMgr manages multiple results and the state of the Usual type
type mockUsual_NoParams_resultMgr struct {
	params   mockUsual_NoParams_params
	results  []*mockUsual_NoParams_results
	index    uint32
	anyTimes bool
}

// mockUsual_NoParams_results holds the results of the Usual type
type mockUsual_NoParams_results struct {
	sResult      string
	err          error
	moq_sequence uint32
}

// mockUsual_NoParams_fnRecorder routes recorded function calls to the mockUsual mock
type mockUsual_NoParams_fnRecorder struct {
	params    mockUsual_NoParams_params
	paramsKey mockUsual_NoParams_paramsKey
	anyParams uint64
	sequence  bool
	results   *mockUsual_NoParams_resultMgr
	mock      *mockUsual
}

// mockUsual_Nothing_params holds the params of the Usual type
type mockUsual_Nothing_params struct{}

// mockUsual_Nothing_paramsKey holds the map key params of the Usual type
type mockUsual_Nothing_paramsKey struct{}

// mockUsual_Nothing_resultsByParams contains the results for a given set of parameters for the Usual type
type mockUsual_Nothing_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[mockUsual_Nothing_paramsKey]*mockUsual_Nothing_resultMgr
}

// mockUsual_Nothing_resultMgr manages multiple results and the state of the Usual type
type mockUsual_Nothing_resultMgr struct {
	params   mockUsual_Nothing_params
	results  []*mockUsual_Nothing_results
	index    uint32
	anyTimes bool
}

// mockUsual_Nothing_results holds the results of the Usual type
type mockUsual_Nothing_results struct {
	moq_sequence uint32
}

// mockUsual_Nothing_fnRecorder routes recorded function calls to the mockUsual mock
type mockUsual_Nothing_fnRecorder struct {
	params    mockUsual_Nothing_params
	paramsKey mockUsual_Nothing_paramsKey
	anyParams uint64
	sequence  bool
	results   *mockUsual_Nothing_resultMgr
	mock      *mockUsual
}

// mockUsual_Variadic_params holds the params of the Usual type
type mockUsual_Variadic_params struct {
	other bool
	args  []string
}

// mockUsual_Variadic_paramsKey holds the map key params of the Usual type
type mockUsual_Variadic_paramsKey struct {
	other bool
	args  hash.Hash
}

// mockUsual_Variadic_resultsByParams contains the results for a given set of parameters for the Usual type
type mockUsual_Variadic_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[mockUsual_Variadic_paramsKey]*mockUsual_Variadic_resultMgr
}

// mockUsual_Variadic_resultMgr manages multiple results and the state of the Usual type
type mockUsual_Variadic_resultMgr struct {
	params   mockUsual_Variadic_params
	results  []*mockUsual_Variadic_results
	index    uint32
	anyTimes bool
}

// mockUsual_Variadic_results holds the results of the Usual type
type mockUsual_Variadic_results struct {
	sResult      string
	err          error
	moq_sequence uint32
}

// mockUsual_Variadic_fnRecorder routes recorded function calls to the mockUsual mock
type mockUsual_Variadic_fnRecorder struct {
	params    mockUsual_Variadic_params
	paramsKey mockUsual_Variadic_paramsKey
	anyParams uint64
	sequence  bool
	results   *mockUsual_Variadic_resultMgr
	mock      *mockUsual
}

// mockUsual_RepeatedIds_params holds the params of the Usual type
type mockUsual_RepeatedIds_params struct {
	sParam1, sParam2 string
	bParam           bool
}

// mockUsual_RepeatedIds_paramsKey holds the map key params of the Usual type
type mockUsual_RepeatedIds_paramsKey struct {
	sParam1, sParam2 string
	bParam           bool
}

// mockUsual_RepeatedIds_resultsByParams contains the results for a given set of parameters for the Usual type
type mockUsual_RepeatedIds_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[mockUsual_RepeatedIds_paramsKey]*mockUsual_RepeatedIds_resultMgr
}

// mockUsual_RepeatedIds_resultMgr manages multiple results and the state of the Usual type
type mockUsual_RepeatedIds_resultMgr struct {
	params   mockUsual_RepeatedIds_params
	results  []*mockUsual_RepeatedIds_results
	index    uint32
	anyTimes bool
}

// mockUsual_RepeatedIds_results holds the results of the Usual type
type mockUsual_RepeatedIds_results struct {
	sResult1, sResult2 string
	err                error
	moq_sequence       uint32
}

// mockUsual_RepeatedIds_fnRecorder routes recorded function calls to the mockUsual mock
type mockUsual_RepeatedIds_fnRecorder struct {
	params    mockUsual_RepeatedIds_params
	paramsKey mockUsual_RepeatedIds_paramsKey
	anyParams uint64
	sequence  bool
	results   *mockUsual_RepeatedIds_resultMgr
	mock      *mockUsual
}

// newMockUsual creates a new mock of the Usual type
func newMockUsual(scene *moq.Scene, config *moq.MockConfig) *mockUsual {
	if config == nil {
		config = &moq.MockConfig{}
	}
	m := &mockUsual{
		scene:  scene,
		config: *config,
	}
	scene.AddMock(m)
	return m
}

// mock returns the mock implementation of the Usual type
func (m *mockUsual) mock() *mockUsual_mock {
	return &mockUsual_mock{
		mock: m,
	}
}

func (m *mockUsual_mock) Usual(sParam string, bParam bool) (sResult string, err error) {
	params := mockUsual_Usual_params{
		sParam: sParam,
		bParam: bParam,
	}
	var results *mockUsual_Usual_resultMgr
	for _, resultsByParams := range m.mock.resultsByParams_Usual {
		var sParamUsed string
		if resultsByParams.anyParams&(1<<0) == 0 {
			sParamUsed = sParam
		}
		var bParamUsed bool
		if resultsByParams.anyParams&(1<<1) == 0 {
			bParamUsed = bParam
		}
		paramsKey := mockUsual_Usual_paramsKey{
			sParam: sParamUsed,
			bParam: bParamUsed,
		}
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.mock.config.Expectation == moq.Strict {
			m.mock.scene.MoqT.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= len(results.results) {
		if !results.anyTimes {
			if m.mock.config.Expectation == moq.Strict {
				m.mock.scene.MoqT.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = len(results.results) - 1
	}

	result := results.results[i]
	if result.moq_sequence != 0 {
		sequence := m.mock.scene.NextMockSequence()
		if (!results.anyTimes && result.moq_sequence != sequence) || result.moq_sequence > sequence {
			m.mock.scene.MoqT.Fatalf("Call sequence does not match %#v", params)
		}
	}

	sResult = result.sResult
	err = result.err
	return
}

func (m *mockUsual_mock) NoNames(param1 string, param2 bool) (result1 string, result2 error) {
	params := mockUsual_NoNames_params{
		param1: param1,
		param2: param2,
	}
	var results *mockUsual_NoNames_resultMgr
	for _, resultsByParams := range m.mock.resultsByParams_NoNames {
		var param1Used string
		if resultsByParams.anyParams&(1<<0) == 0 {
			param1Used = param1
		}
		var param2Used bool
		if resultsByParams.anyParams&(1<<1) == 0 {
			param2Used = param2
		}
		paramsKey := mockUsual_NoNames_paramsKey{
			param1: param1Used,
			param2: param2Used,
		}
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.mock.config.Expectation == moq.Strict {
			m.mock.scene.MoqT.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= len(results.results) {
		if !results.anyTimes {
			if m.mock.config.Expectation == moq.Strict {
				m.mock.scene.MoqT.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = len(results.results) - 1
	}

	result := results.results[i]
	if result.moq_sequence != 0 {
		sequence := m.mock.scene.NextMockSequence()
		if (!results.anyTimes && result.moq_sequence != sequence) || result.moq_sequence > sequence {
			m.mock.scene.MoqT.Fatalf("Call sequence does not match %#v", params)
		}
	}

	result1 = result.result1
	result2 = result.result2
	return
}

func (m *mockUsual_mock) NoResults(sParam string, bParam bool) {
	params := mockUsual_NoResults_params{
		sParam: sParam,
		bParam: bParam,
	}
	var results *mockUsual_NoResults_resultMgr
	for _, resultsByParams := range m.mock.resultsByParams_NoResults {
		var sParamUsed string
		if resultsByParams.anyParams&(1<<0) == 0 {
			sParamUsed = sParam
		}
		var bParamUsed bool
		if resultsByParams.anyParams&(1<<1) == 0 {
			bParamUsed = bParam
		}
		paramsKey := mockUsual_NoResults_paramsKey{
			sParam: sParamUsed,
			bParam: bParamUsed,
		}
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.mock.config.Expectation == moq.Strict {
			m.mock.scene.MoqT.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= len(results.results) {
		if !results.anyTimes {
			if m.mock.config.Expectation == moq.Strict {
				m.mock.scene.MoqT.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = len(results.results) - 1
	}

	result := results.results[i]
	if result.moq_sequence != 0 {
		sequence := m.mock.scene.NextMockSequence()
		if (!results.anyTimes && result.moq_sequence != sequence) || result.moq_sequence > sequence {
			m.mock.scene.MoqT.Fatalf("Call sequence does not match %#v", params)
		}
	}

	return
}

func (m *mockUsual_mock) NoParams() (sResult string, err error) {
	params := mockUsual_NoParams_params{}
	var results *mockUsual_NoParams_resultMgr
	for _, resultsByParams := range m.mock.resultsByParams_NoParams {
		paramsKey := mockUsual_NoParams_paramsKey{}
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.mock.config.Expectation == moq.Strict {
			m.mock.scene.MoqT.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= len(results.results) {
		if !results.anyTimes {
			if m.mock.config.Expectation == moq.Strict {
				m.mock.scene.MoqT.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = len(results.results) - 1
	}

	result := results.results[i]
	if result.moq_sequence != 0 {
		sequence := m.mock.scene.NextMockSequence()
		if (!results.anyTimes && result.moq_sequence != sequence) || result.moq_sequence > sequence {
			m.mock.scene.MoqT.Fatalf("Call sequence does not match %#v", params)
		}
	}

	sResult = result.sResult
	err = result.err
	return
}

func (m *mockUsual_mock) Nothing() {
	params := mockUsual_Nothing_params{}
	var results *mockUsual_Nothing_resultMgr
	for _, resultsByParams := range m.mock.resultsByParams_Nothing {
		paramsKey := mockUsual_Nothing_paramsKey{}
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.mock.config.Expectation == moq.Strict {
			m.mock.scene.MoqT.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= len(results.results) {
		if !results.anyTimes {
			if m.mock.config.Expectation == moq.Strict {
				m.mock.scene.MoqT.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = len(results.results) - 1
	}

	result := results.results[i]
	if result.moq_sequence != 0 {
		sequence := m.mock.scene.NextMockSequence()
		if (!results.anyTimes && result.moq_sequence != sequence) || result.moq_sequence > sequence {
			m.mock.scene.MoqT.Fatalf("Call sequence does not match %#v", params)
		}
	}

	return
}

func (m *mockUsual_mock) Variadic(other bool, args ...string) (sResult string, err error) {
	params := mockUsual_Variadic_params{
		other: other,
		args:  args,
	}
	var results *mockUsual_Variadic_resultMgr
	for _, resultsByParams := range m.mock.resultsByParams_Variadic {
		var otherUsed bool
		if resultsByParams.anyParams&(1<<0) == 0 {
			otherUsed = other
		}
		var argsUsed hash.Hash
		if resultsByParams.anyParams&(1<<1) == 0 {
			argsUsed = hash.DeepHash(args)
		}
		paramsKey := mockUsual_Variadic_paramsKey{
			other: otherUsed,
			args:  argsUsed,
		}
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.mock.config.Expectation == moq.Strict {
			m.mock.scene.MoqT.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= len(results.results) {
		if !results.anyTimes {
			if m.mock.config.Expectation == moq.Strict {
				m.mock.scene.MoqT.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = len(results.results) - 1
	}

	result := results.results[i]
	if result.moq_sequence != 0 {
		sequence := m.mock.scene.NextMockSequence()
		if (!results.anyTimes && result.moq_sequence != sequence) || result.moq_sequence > sequence {
			m.mock.scene.MoqT.Fatalf("Call sequence does not match %#v", params)
		}
	}

	sResult = result.sResult
	err = result.err
	return
}

func (m *mockUsual_mock) RepeatedIds(sParam1, sParam2 string, bParam bool) (sResult1, sResult2 string, err error) {
	params := mockUsual_RepeatedIds_params{
		sParam1: sParam1,
		sParam2: sParam2,
		bParam:  bParam,
	}
	var results *mockUsual_RepeatedIds_resultMgr
	for _, resultsByParams := range m.mock.resultsByParams_RepeatedIds {
		var sParam1Used string
		if resultsByParams.anyParams&(1<<0) == 0 {
			sParam1Used = sParam1
		}
		var sParam2Used string
		if resultsByParams.anyParams&(1<<1) == 0 {
			sParam2Used = sParam2
		}
		var bParamUsed bool
		if resultsByParams.anyParams&(1<<2) == 0 {
			bParamUsed = bParam
		}
		paramsKey := mockUsual_RepeatedIds_paramsKey{
			sParam1: sParam1Used,
			sParam2: sParam2Used,
			bParam:  bParamUsed,
		}
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.mock.config.Expectation == moq.Strict {
			m.mock.scene.MoqT.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= len(results.results) {
		if !results.anyTimes {
			if m.mock.config.Expectation == moq.Strict {
				m.mock.scene.MoqT.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = len(results.results) - 1
	}

	result := results.results[i]
	if result.moq_sequence != 0 {
		sequence := m.mock.scene.NextMockSequence()
		if (!results.anyTimes && result.moq_sequence != sequence) || result.moq_sequence > sequence {
			m.mock.scene.MoqT.Fatalf("Call sequence does not match %#v", params)
		}
	}

	sResult1 = result.sResult1
	sResult2 = result.sResult2
	err = result.err
	return
}

// onCall returns the recorder implementation of the Usual type
func (m *mockUsual) onCall() *mockUsual_recorder {
	return &mockUsual_recorder{
		mock: m,
	}
}

func (m *mockUsual_recorder) Usual(sParam string, bParam bool) *mockUsual_Usual_fnRecorder {
	return &mockUsual_Usual_fnRecorder{
		params: mockUsual_Usual_params{
			sParam: sParam,
			bParam: bParam,
		},
		paramsKey: mockUsual_Usual_paramsKey{
			sParam: sParam,
			bParam: bParam,
		},
		sequence: m.mock.config.Sequence == moq.SeqDefaultOn,
		mock:     m.mock,
	}
}

func (r *mockUsual_Usual_fnRecorder) anySParam() *mockUsual_Usual_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("Any functions must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.anyParams |= 1 << 0
	return r
}

func (r *mockUsual_Usual_fnRecorder) anyBParam() *mockUsual_Usual_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("Any functions must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.anyParams |= 1 << 1
	return r
}

func (r *mockUsual_Usual_fnRecorder) seq() *mockUsual_Usual_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("seq must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.sequence = true
	return r
}

func (r *mockUsual_Usual_fnRecorder) noSeq() *mockUsual_Usual_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("noSeq must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.sequence = false
	return r
}

func (r *mockUsual_Usual_fnRecorder) returnResults(sResult string, err error) *mockUsual_Usual_fnRecorder {
	if r.results == nil {
		anyCount := bits.OnesCount64(r.anyParams)
		insertAt := -1
		var results *mockUsual_Usual_resultsByParams
		for n, res := range r.mock.resultsByParams_Usual {
			if res.anyParams == r.anyParams {
				results = &res
				break
			}
			if res.anyCount > anyCount {
				insertAt = n
			}
		}
		if results == nil {
			results = &mockUsual_Usual_resultsByParams{
				anyCount:  anyCount,
				anyParams: r.anyParams,
				results:   map[mockUsual_Usual_paramsKey]*mockUsual_Usual_resultMgr{},
			}
			r.mock.resultsByParams_Usual = append(r.mock.resultsByParams_Usual, *results)
			if insertAt != -1 && insertAt+1 < len(r.mock.resultsByParams_Usual) {
				copy(r.mock.resultsByParams_Usual[insertAt+1:], r.mock.resultsByParams_Usual[insertAt:0])
				r.mock.resultsByParams_Usual[insertAt] = *results
			}
		}

		var sParamUsed string
		if r.anyParams&(1<<0) == 0 {
			sParamUsed = r.paramsKey.sParam
		}
		var bParamUsed bool
		if r.anyParams&(1<<1) == 0 {
			bParamUsed = r.paramsKey.bParam
		}
		paramsKey := mockUsual_Usual_paramsKey{
			sParam: sParamUsed,
			bParam: bParamUsed,
		}

		var ok bool
		r.results, ok = results.results[paramsKey]
		if !ok {
			r.results = &mockUsual_Usual_resultMgr{
				params:   r.params,
				results:  []*mockUsual_Usual_results{},
				index:    0,
				anyTimes: false,
			}
			results.results[paramsKey] = r.results
		}
	}

	var sequence uint32
	if r.sequence {
		sequence = r.mock.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, &mockUsual_Usual_results{
		sResult:      sResult,
		err:          err,
		moq_sequence: sequence,
	})
	return r
}

func (r *mockUsual_Usual_fnRecorder) times(count int) *mockUsual_Usual_fnRecorder {
	if r.results == nil {
		r.mock.scene.MoqT.Fatalf("Return must be called before calling Times")
		return nil
	}
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < count-1; n++ {
		if last.moq_sequence != 0 {
			last = &mockUsual_Usual_results{
				sResult:      last.sResult,
				err:          last.err,
				moq_sequence: r.mock.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (r *mockUsual_Usual_fnRecorder) anyTimes() {
	if r.results == nil {
		r.mock.scene.MoqT.Fatalf("Return must be called before calling AnyTimes")
		return
	}
	r.results.anyTimes = true
}

func (m *mockUsual_recorder) NoNames(param1 string, param2 bool) *mockUsual_NoNames_fnRecorder {
	return &mockUsual_NoNames_fnRecorder{
		params: mockUsual_NoNames_params{
			param1: param1,
			param2: param2,
		},
		paramsKey: mockUsual_NoNames_paramsKey{
			param1: param1,
			param2: param2,
		},
		sequence: m.mock.config.Sequence == moq.SeqDefaultOn,
		mock:     m.mock,
	}
}

func (r *mockUsual_NoNames_fnRecorder) anyParam1() *mockUsual_NoNames_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("Any functions must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.anyParams |= 1 << 0
	return r
}

func (r *mockUsual_NoNames_fnRecorder) anyParam2() *mockUsual_NoNames_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("Any functions must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.anyParams |= 1 << 1
	return r
}

func (r *mockUsual_NoNames_fnRecorder) seq() *mockUsual_NoNames_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("seq must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.sequence = true
	return r
}

func (r *mockUsual_NoNames_fnRecorder) noSeq() *mockUsual_NoNames_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("noSeq must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.sequence = false
	return r
}

func (r *mockUsual_NoNames_fnRecorder) returnResults(result1 string, result2 error) *mockUsual_NoNames_fnRecorder {
	if r.results == nil {
		anyCount := bits.OnesCount64(r.anyParams)
		insertAt := -1
		var results *mockUsual_NoNames_resultsByParams
		for n, res := range r.mock.resultsByParams_NoNames {
			if res.anyParams == r.anyParams {
				results = &res
				break
			}
			if res.anyCount > anyCount {
				insertAt = n
			}
		}
		if results == nil {
			results = &mockUsual_NoNames_resultsByParams{
				anyCount:  anyCount,
				anyParams: r.anyParams,
				results:   map[mockUsual_NoNames_paramsKey]*mockUsual_NoNames_resultMgr{},
			}
			r.mock.resultsByParams_NoNames = append(r.mock.resultsByParams_NoNames, *results)
			if insertAt != -1 && insertAt+1 < len(r.mock.resultsByParams_NoNames) {
				copy(r.mock.resultsByParams_NoNames[insertAt+1:], r.mock.resultsByParams_NoNames[insertAt:0])
				r.mock.resultsByParams_NoNames[insertAt] = *results
			}
		}

		var param1Used string
		if r.anyParams&(1<<0) == 0 {
			param1Used = r.paramsKey.param1
		}
		var param2Used bool
		if r.anyParams&(1<<1) == 0 {
			param2Used = r.paramsKey.param2
		}
		paramsKey := mockUsual_NoNames_paramsKey{
			param1: param1Used,
			param2: param2Used,
		}

		var ok bool
		r.results, ok = results.results[paramsKey]
		if !ok {
			r.results = &mockUsual_NoNames_resultMgr{
				params:   r.params,
				results:  []*mockUsual_NoNames_results{},
				index:    0,
				anyTimes: false,
			}
			results.results[paramsKey] = r.results
		}
	}

	var sequence uint32
	if r.sequence {
		sequence = r.mock.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, &mockUsual_NoNames_results{
		result1:      result1,
		result2:      result2,
		moq_sequence: sequence,
	})
	return r
}

func (r *mockUsual_NoNames_fnRecorder) times(count int) *mockUsual_NoNames_fnRecorder {
	if r.results == nil {
		r.mock.scene.MoqT.Fatalf("Return must be called before calling Times")
		return nil
	}
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < count-1; n++ {
		if last.moq_sequence != 0 {
			last = &mockUsual_NoNames_results{
				result1:      last.result1,
				result2:      last.result2,
				moq_sequence: r.mock.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (r *mockUsual_NoNames_fnRecorder) anyTimes() {
	if r.results == nil {
		r.mock.scene.MoqT.Fatalf("Return must be called before calling AnyTimes")
		return
	}
	r.results.anyTimes = true
}

func (m *mockUsual_recorder) NoResults(sParam string, bParam bool) *mockUsual_NoResults_fnRecorder {
	return &mockUsual_NoResults_fnRecorder{
		params: mockUsual_NoResults_params{
			sParam: sParam,
			bParam: bParam,
		},
		paramsKey: mockUsual_NoResults_paramsKey{
			sParam: sParam,
			bParam: bParam,
		},
		sequence: m.mock.config.Sequence == moq.SeqDefaultOn,
		mock:     m.mock,
	}
}

func (r *mockUsual_NoResults_fnRecorder) anySParam() *mockUsual_NoResults_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("Any functions must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.anyParams |= 1 << 0
	return r
}

func (r *mockUsual_NoResults_fnRecorder) anyBParam() *mockUsual_NoResults_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("Any functions must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.anyParams |= 1 << 1
	return r
}

func (r *mockUsual_NoResults_fnRecorder) seq() *mockUsual_NoResults_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("seq must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.sequence = true
	return r
}

func (r *mockUsual_NoResults_fnRecorder) noSeq() *mockUsual_NoResults_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("noSeq must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.sequence = false
	return r
}

func (r *mockUsual_NoResults_fnRecorder) returnResults() *mockUsual_NoResults_fnRecorder {
	if r.results == nil {
		anyCount := bits.OnesCount64(r.anyParams)
		insertAt := -1
		var results *mockUsual_NoResults_resultsByParams
		for n, res := range r.mock.resultsByParams_NoResults {
			if res.anyParams == r.anyParams {
				results = &res
				break
			}
			if res.anyCount > anyCount {
				insertAt = n
			}
		}
		if results == nil {
			results = &mockUsual_NoResults_resultsByParams{
				anyCount:  anyCount,
				anyParams: r.anyParams,
				results:   map[mockUsual_NoResults_paramsKey]*mockUsual_NoResults_resultMgr{},
			}
			r.mock.resultsByParams_NoResults = append(r.mock.resultsByParams_NoResults, *results)
			if insertAt != -1 && insertAt+1 < len(r.mock.resultsByParams_NoResults) {
				copy(r.mock.resultsByParams_NoResults[insertAt+1:], r.mock.resultsByParams_NoResults[insertAt:0])
				r.mock.resultsByParams_NoResults[insertAt] = *results
			}
		}

		var sParamUsed string
		if r.anyParams&(1<<0) == 0 {
			sParamUsed = r.paramsKey.sParam
		}
		var bParamUsed bool
		if r.anyParams&(1<<1) == 0 {
			bParamUsed = r.paramsKey.bParam
		}
		paramsKey := mockUsual_NoResults_paramsKey{
			sParam: sParamUsed,
			bParam: bParamUsed,
		}

		var ok bool
		r.results, ok = results.results[paramsKey]
		if !ok {
			r.results = &mockUsual_NoResults_resultMgr{
				params:   r.params,
				results:  []*mockUsual_NoResults_results{},
				index:    0,
				anyTimes: false,
			}
			results.results[paramsKey] = r.results
		}
	}

	var sequence uint32
	if r.sequence {
		sequence = r.mock.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, &mockUsual_NoResults_results{moq_sequence: sequence})
	return r
}

func (r *mockUsual_NoResults_fnRecorder) times(count int) *mockUsual_NoResults_fnRecorder {
	if r.results == nil {
		r.mock.scene.MoqT.Fatalf("Return must be called before calling Times")
		return nil
	}
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < count-1; n++ {
		if last.moq_sequence != 0 {
			last = &mockUsual_NoResults_results{moq_sequence: r.mock.scene.NextRecorderSequence()}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (r *mockUsual_NoResults_fnRecorder) anyTimes() {
	if r.results == nil {
		r.mock.scene.MoqT.Fatalf("Return must be called before calling AnyTimes")
		return
	}
	r.results.anyTimes = true
}

func (m *mockUsual_recorder) NoParams() *mockUsual_NoParams_fnRecorder {
	return &mockUsual_NoParams_fnRecorder{
		params:    mockUsual_NoParams_params{},
		paramsKey: mockUsual_NoParams_paramsKey{},
		sequence:  m.mock.config.Sequence == moq.SeqDefaultOn,
		mock:      m.mock,
	}
}

func (r *mockUsual_NoParams_fnRecorder) seq() *mockUsual_NoParams_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("seq must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.sequence = true
	return r
}

func (r *mockUsual_NoParams_fnRecorder) noSeq() *mockUsual_NoParams_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("noSeq must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.sequence = false
	return r
}

func (r *mockUsual_NoParams_fnRecorder) returnResults(sResult string, err error) *mockUsual_NoParams_fnRecorder {
	if r.results == nil {
		anyCount := bits.OnesCount64(r.anyParams)
		insertAt := -1
		var results *mockUsual_NoParams_resultsByParams
		for n, res := range r.mock.resultsByParams_NoParams {
			if res.anyParams == r.anyParams {
				results = &res
				break
			}
			if res.anyCount > anyCount {
				insertAt = n
			}
		}
		if results == nil {
			results = &mockUsual_NoParams_resultsByParams{
				anyCount:  anyCount,
				anyParams: r.anyParams,
				results:   map[mockUsual_NoParams_paramsKey]*mockUsual_NoParams_resultMgr{},
			}
			r.mock.resultsByParams_NoParams = append(r.mock.resultsByParams_NoParams, *results)
			if insertAt != -1 && insertAt+1 < len(r.mock.resultsByParams_NoParams) {
				copy(r.mock.resultsByParams_NoParams[insertAt+1:], r.mock.resultsByParams_NoParams[insertAt:0])
				r.mock.resultsByParams_NoParams[insertAt] = *results
			}
		}

		paramsKey := mockUsual_NoParams_paramsKey{}

		var ok bool
		r.results, ok = results.results[paramsKey]
		if !ok {
			r.results = &mockUsual_NoParams_resultMgr{
				params:   r.params,
				results:  []*mockUsual_NoParams_results{},
				index:    0,
				anyTimes: false,
			}
			results.results[paramsKey] = r.results
		}
	}

	var sequence uint32
	if r.sequence {
		sequence = r.mock.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, &mockUsual_NoParams_results{
		sResult:      sResult,
		err:          err,
		moq_sequence: sequence,
	})
	return r
}

func (r *mockUsual_NoParams_fnRecorder) times(count int) *mockUsual_NoParams_fnRecorder {
	if r.results == nil {
		r.mock.scene.MoqT.Fatalf("Return must be called before calling Times")
		return nil
	}
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < count-1; n++ {
		if last.moq_sequence != 0 {
			last = &mockUsual_NoParams_results{
				sResult:      last.sResult,
				err:          last.err,
				moq_sequence: r.mock.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (r *mockUsual_NoParams_fnRecorder) anyTimes() {
	if r.results == nil {
		r.mock.scene.MoqT.Fatalf("Return must be called before calling AnyTimes")
		return
	}
	r.results.anyTimes = true
}

func (m *mockUsual_recorder) Nothing() *mockUsual_Nothing_fnRecorder {
	return &mockUsual_Nothing_fnRecorder{
		params:    mockUsual_Nothing_params{},
		paramsKey: mockUsual_Nothing_paramsKey{},
		sequence:  m.mock.config.Sequence == moq.SeqDefaultOn,
		mock:      m.mock,
	}
}

func (r *mockUsual_Nothing_fnRecorder) seq() *mockUsual_Nothing_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("seq must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.sequence = true
	return r
}

func (r *mockUsual_Nothing_fnRecorder) noSeq() *mockUsual_Nothing_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("noSeq must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.sequence = false
	return r
}

func (r *mockUsual_Nothing_fnRecorder) returnResults() *mockUsual_Nothing_fnRecorder {
	if r.results == nil {
		anyCount := bits.OnesCount64(r.anyParams)
		insertAt := -1
		var results *mockUsual_Nothing_resultsByParams
		for n, res := range r.mock.resultsByParams_Nothing {
			if res.anyParams == r.anyParams {
				results = &res
				break
			}
			if res.anyCount > anyCount {
				insertAt = n
			}
		}
		if results == nil {
			results = &mockUsual_Nothing_resultsByParams{
				anyCount:  anyCount,
				anyParams: r.anyParams,
				results:   map[mockUsual_Nothing_paramsKey]*mockUsual_Nothing_resultMgr{},
			}
			r.mock.resultsByParams_Nothing = append(r.mock.resultsByParams_Nothing, *results)
			if insertAt != -1 && insertAt+1 < len(r.mock.resultsByParams_Nothing) {
				copy(r.mock.resultsByParams_Nothing[insertAt+1:], r.mock.resultsByParams_Nothing[insertAt:0])
				r.mock.resultsByParams_Nothing[insertAt] = *results
			}
		}

		paramsKey := mockUsual_Nothing_paramsKey{}

		var ok bool
		r.results, ok = results.results[paramsKey]
		if !ok {
			r.results = &mockUsual_Nothing_resultMgr{
				params:   r.params,
				results:  []*mockUsual_Nothing_results{},
				index:    0,
				anyTimes: false,
			}
			results.results[paramsKey] = r.results
		}
	}

	var sequence uint32
	if r.sequence {
		sequence = r.mock.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, &mockUsual_Nothing_results{moq_sequence: sequence})
	return r
}

func (r *mockUsual_Nothing_fnRecorder) times(count int) *mockUsual_Nothing_fnRecorder {
	if r.results == nil {
		r.mock.scene.MoqT.Fatalf("Return must be called before calling Times")
		return nil
	}
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < count-1; n++ {
		if last.moq_sequence != 0 {
			last = &mockUsual_Nothing_results{moq_sequence: r.mock.scene.NextRecorderSequence()}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (r *mockUsual_Nothing_fnRecorder) anyTimes() {
	if r.results == nil {
		r.mock.scene.MoqT.Fatalf("Return must be called before calling AnyTimes")
		return
	}
	r.results.anyTimes = true
}

func (m *mockUsual_recorder) Variadic(other bool, args ...string) *mockUsual_Variadic_fnRecorder {
	return &mockUsual_Variadic_fnRecorder{
		params: mockUsual_Variadic_params{
			other: other,
			args:  args,
		},
		paramsKey: mockUsual_Variadic_paramsKey{
			other: other,
			args:  hash.DeepHash(args),
		},
		sequence: m.mock.config.Sequence == moq.SeqDefaultOn,
		mock:     m.mock,
	}
}

func (r *mockUsual_Variadic_fnRecorder) anyOther() *mockUsual_Variadic_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("Any functions must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.anyParams |= 1 << 0
	return r
}

func (r *mockUsual_Variadic_fnRecorder) anyArgs() *mockUsual_Variadic_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("Any functions must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.anyParams |= 1 << 1
	return r
}

func (r *mockUsual_Variadic_fnRecorder) seq() *mockUsual_Variadic_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("seq must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.sequence = true
	return r
}

func (r *mockUsual_Variadic_fnRecorder) noSeq() *mockUsual_Variadic_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("noSeq must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.sequence = false
	return r
}

func (r *mockUsual_Variadic_fnRecorder) returnResults(sResult string, err error) *mockUsual_Variadic_fnRecorder {
	if r.results == nil {
		anyCount := bits.OnesCount64(r.anyParams)
		insertAt := -1
		var results *mockUsual_Variadic_resultsByParams
		for n, res := range r.mock.resultsByParams_Variadic {
			if res.anyParams == r.anyParams {
				results = &res
				break
			}
			if res.anyCount > anyCount {
				insertAt = n
			}
		}
		if results == nil {
			results = &mockUsual_Variadic_resultsByParams{
				anyCount:  anyCount,
				anyParams: r.anyParams,
				results:   map[mockUsual_Variadic_paramsKey]*mockUsual_Variadic_resultMgr{},
			}
			r.mock.resultsByParams_Variadic = append(r.mock.resultsByParams_Variadic, *results)
			if insertAt != -1 && insertAt+1 < len(r.mock.resultsByParams_Variadic) {
				copy(r.mock.resultsByParams_Variadic[insertAt+1:], r.mock.resultsByParams_Variadic[insertAt:0])
				r.mock.resultsByParams_Variadic[insertAt] = *results
			}
		}

		var otherUsed bool
		if r.anyParams&(1<<0) == 0 {
			otherUsed = r.paramsKey.other
		}
		var argsUsed hash.Hash
		if r.anyParams&(1<<1) == 0 {
			argsUsed = r.paramsKey.args
		}
		paramsKey := mockUsual_Variadic_paramsKey{
			other: otherUsed,
			args:  argsUsed,
		}

		var ok bool
		r.results, ok = results.results[paramsKey]
		if !ok {
			r.results = &mockUsual_Variadic_resultMgr{
				params:   r.params,
				results:  []*mockUsual_Variadic_results{},
				index:    0,
				anyTimes: false,
			}
			results.results[paramsKey] = r.results
		}
	}

	var sequence uint32
	if r.sequence {
		sequence = r.mock.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, &mockUsual_Variadic_results{
		sResult:      sResult,
		err:          err,
		moq_sequence: sequence,
	})
	return r
}

func (r *mockUsual_Variadic_fnRecorder) times(count int) *mockUsual_Variadic_fnRecorder {
	if r.results == nil {
		r.mock.scene.MoqT.Fatalf("Return must be called before calling Times")
		return nil
	}
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < count-1; n++ {
		if last.moq_sequence != 0 {
			last = &mockUsual_Variadic_results{
				sResult:      last.sResult,
				err:          last.err,
				moq_sequence: r.mock.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (r *mockUsual_Variadic_fnRecorder) anyTimes() {
	if r.results == nil {
		r.mock.scene.MoqT.Fatalf("Return must be called before calling AnyTimes")
		return
	}
	r.results.anyTimes = true
}

func (m *mockUsual_recorder) RepeatedIds(sParam1, sParam2 string, bParam bool) *mockUsual_RepeatedIds_fnRecorder {
	return &mockUsual_RepeatedIds_fnRecorder{
		params: mockUsual_RepeatedIds_params{
			sParam1: sParam1,
			sParam2: sParam2,
			bParam:  bParam,
		},
		paramsKey: mockUsual_RepeatedIds_paramsKey{
			sParam1: sParam1,
			sParam2: sParam2,
			bParam:  bParam,
		},
		sequence: m.mock.config.Sequence == moq.SeqDefaultOn,
		mock:     m.mock,
	}
}

func (r *mockUsual_RepeatedIds_fnRecorder) anySParam1() *mockUsual_RepeatedIds_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("Any functions must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.anyParams |= 1 << 0
	return r
}

func (r *mockUsual_RepeatedIds_fnRecorder) anySParam2() *mockUsual_RepeatedIds_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("Any functions must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.anyParams |= 1 << 1
	return r
}

func (r *mockUsual_RepeatedIds_fnRecorder) anyBParam() *mockUsual_RepeatedIds_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("Any functions must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.anyParams |= 1 << 2
	return r
}

func (r *mockUsual_RepeatedIds_fnRecorder) seq() *mockUsual_RepeatedIds_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("seq must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.sequence = true
	return r
}

func (r *mockUsual_RepeatedIds_fnRecorder) noSeq() *mockUsual_RepeatedIds_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("noSeq must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.sequence = false
	return r
}

func (r *mockUsual_RepeatedIds_fnRecorder) returnResults(sResult1, sResult2 string, err error) *mockUsual_RepeatedIds_fnRecorder {
	if r.results == nil {
		anyCount := bits.OnesCount64(r.anyParams)
		insertAt := -1
		var results *mockUsual_RepeatedIds_resultsByParams
		for n, res := range r.mock.resultsByParams_RepeatedIds {
			if res.anyParams == r.anyParams {
				results = &res
				break
			}
			if res.anyCount > anyCount {
				insertAt = n
			}
		}
		if results == nil {
			results = &mockUsual_RepeatedIds_resultsByParams{
				anyCount:  anyCount,
				anyParams: r.anyParams,
				results:   map[mockUsual_RepeatedIds_paramsKey]*mockUsual_RepeatedIds_resultMgr{},
			}
			r.mock.resultsByParams_RepeatedIds = append(r.mock.resultsByParams_RepeatedIds, *results)
			if insertAt != -1 && insertAt+1 < len(r.mock.resultsByParams_RepeatedIds) {
				copy(r.mock.resultsByParams_RepeatedIds[insertAt+1:], r.mock.resultsByParams_RepeatedIds[insertAt:0])
				r.mock.resultsByParams_RepeatedIds[insertAt] = *results
			}
		}

		var sParam1Used string
		if r.anyParams&(1<<0) == 0 {
			sParam1Used = r.paramsKey.sParam1
		}
		var sParam2Used string
		if r.anyParams&(1<<1) == 0 {
			sParam2Used = r.paramsKey.sParam2
		}
		var bParamUsed bool
		if r.anyParams&(1<<2) == 0 {
			bParamUsed = r.paramsKey.bParam
		}
		paramsKey := mockUsual_RepeatedIds_paramsKey{
			sParam1: sParam1Used,
			sParam2: sParam2Used,
			bParam:  bParamUsed,
		}

		var ok bool
		r.results, ok = results.results[paramsKey]
		if !ok {
			r.results = &mockUsual_RepeatedIds_resultMgr{
				params:   r.params,
				results:  []*mockUsual_RepeatedIds_results{},
				index:    0,
				anyTimes: false,
			}
			results.results[paramsKey] = r.results
		}
	}

	var sequence uint32
	if r.sequence {
		sequence = r.mock.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, &mockUsual_RepeatedIds_results{
		sResult1:     sResult1,
		sResult2:     sResult2,
		err:          err,
		moq_sequence: sequence,
	})
	return r
}

func (r *mockUsual_RepeatedIds_fnRecorder) times(count int) *mockUsual_RepeatedIds_fnRecorder {
	if r.results == nil {
		r.mock.scene.MoqT.Fatalf("Return must be called before calling Times")
		return nil
	}
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < count-1; n++ {
		if last.moq_sequence != 0 {
			last = &mockUsual_RepeatedIds_results{
				sResult1:     last.sResult1,
				sResult2:     last.sResult2,
				err:          last.err,
				moq_sequence: r.mock.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (r *mockUsual_RepeatedIds_fnRecorder) anyTimes() {
	if r.results == nil {
		r.mock.scene.MoqT.Fatalf("Return must be called before calling AnyTimes")
		return
	}
	r.results.anyTimes = true
}

// Reset resets the state of the mock
func (m *mockUsual) Reset() {
	m.resultsByParams_Usual = nil
	m.resultsByParams_NoNames = nil
	m.resultsByParams_NoResults = nil
	m.resultsByParams_NoParams = nil
	m.resultsByParams_Nothing = nil
	m.resultsByParams_Variadic = nil
	m.resultsByParams_RepeatedIds = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *mockUsual) AssertExpectationsMet() {
	for _, res := range m.resultsByParams_Usual {
		for _, results := range res.results {
			missing := len(results.results) - int(atomic.LoadUint32(&results.index))
			if missing == 1 && results.anyTimes == true {
				continue
			}
			if missing > 0 {
				m.scene.MoqT.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.params)
			}
		}
	}
	for _, res := range m.resultsByParams_NoNames {
		for _, results := range res.results {
			missing := len(results.results) - int(atomic.LoadUint32(&results.index))
			if missing == 1 && results.anyTimes == true {
				continue
			}
			if missing > 0 {
				m.scene.MoqT.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.params)
			}
		}
	}
	for _, res := range m.resultsByParams_NoResults {
		for _, results := range res.results {
			missing := len(results.results) - int(atomic.LoadUint32(&results.index))
			if missing == 1 && results.anyTimes == true {
				continue
			}
			if missing > 0 {
				m.scene.MoqT.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.params)
			}
		}
	}
	for _, res := range m.resultsByParams_NoParams {
		for _, results := range res.results {
			missing := len(results.results) - int(atomic.LoadUint32(&results.index))
			if missing == 1 && results.anyTimes == true {
				continue
			}
			if missing > 0 {
				m.scene.MoqT.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.params)
			}
		}
	}
	for _, res := range m.resultsByParams_Nothing {
		for _, results := range res.results {
			missing := len(results.results) - int(atomic.LoadUint32(&results.index))
			if missing == 1 && results.anyTimes == true {
				continue
			}
			if missing > 0 {
				m.scene.MoqT.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.params)
			}
		}
	}
	for _, res := range m.resultsByParams_Variadic {
		for _, results := range res.results {
			missing := len(results.results) - int(atomic.LoadUint32(&results.index))
			if missing == 1 && results.anyTimes == true {
				continue
			}
			if missing > 0 {
				m.scene.MoqT.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.params)
			}
		}
	}
	for _, res := range m.resultsByParams_RepeatedIds {
		for _, results := range res.results {
			missing := len(results.results) - int(atomic.LoadUint32(&results.index))
			if missing == 1 && results.anyTimes == true {
				continue
			}
			if missing > 0 {
				m.scene.MoqT.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.params)
			}
		}
	}
}
