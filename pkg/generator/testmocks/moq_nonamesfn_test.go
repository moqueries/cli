// Code generated by Moqueries - https://github.com/myshkin5/moqueries - DO NOT EDIT!

package testmocks_test

import (
	"math/bits"
	"sync/atomic"

	"github.com/myshkin5/moqueries/pkg/generator/testmocks"
	"github.com/myshkin5/moqueries/pkg/moq"
)

// mockNoNamesFn holds the state of a mock of the NoNamesFn type
type mockNoNamesFn struct {
	scene           *moq.Scene
	config          moq.MockConfig
	resultsByParams []mockNoNamesFn_resultsByParams
}

// mockNoNamesFn_mock isolates the mock interface of the NoNamesFn type
type mockNoNamesFn_mock struct {
	mock *mockNoNamesFn
}

// mockNoNamesFn_params holds the params of the NoNamesFn type
type mockNoNamesFn_params struct {
	param1 string
	param2 bool
}

// mockNoNamesFn_paramsKey holds the map key params of the NoNamesFn type
type mockNoNamesFn_paramsKey struct {
	param1 string
	param2 bool
}

// mockNoNamesFn_resultsByParams contains the results for a given set of parameters for the NoNamesFn type
type mockNoNamesFn_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[mockNoNamesFn_paramsKey]*mockNoNamesFn_resultMgr
}

// mockNoNamesFn_resultMgr manages multiple results and the state of the NoNamesFn type
type mockNoNamesFn_resultMgr struct {
	params   mockNoNamesFn_params
	results  []*mockNoNamesFn_results
	index    uint32
	anyTimes bool
}

// mockNoNamesFn_results holds the results of the NoNamesFn type
type mockNoNamesFn_results struct {
	result1      string
	result2      error
	moq_sequence uint32
}

// mockNoNamesFn_fnRecorder routes recorded function calls to the mockNoNamesFn mock
type mockNoNamesFn_fnRecorder struct {
	params    mockNoNamesFn_params
	paramsKey mockNoNamesFn_paramsKey
	anyParams uint64
	sequence  bool
	results   *mockNoNamesFn_resultMgr
	mock      *mockNoNamesFn
}

// newMockNoNamesFn creates a new mock of the NoNamesFn type
func newMockNoNamesFn(scene *moq.Scene, config *moq.MockConfig) *mockNoNamesFn {
	if config == nil {
		config = &moq.MockConfig{}
	}
	m := &mockNoNamesFn{
		scene:  scene,
		config: *config,
	}
	scene.AddMock(m)
	return m
}

// mock returns the mock implementation of the NoNamesFn type
func (m *mockNoNamesFn) mock() testmocks.NoNamesFn {
	return func(param1 string, param2 bool) (string, error) {
		mock := &mockNoNamesFn_mock{mock: m}
		return mock.fn(param1, param2)
	}
}

func (m *mockNoNamesFn_mock) fn(param1 string, param2 bool) (result1 string, result2 error) {
	params := mockNoNamesFn_params{
		param1: param1,
		param2: param2,
	}
	var results *mockNoNamesFn_resultMgr
	for _, resultsByParams := range m.mock.resultsByParams {
		var param1Used string
		if resultsByParams.anyParams&(1<<0) == 0 {
			param1Used = param1
		}
		var param2Used bool
		if resultsByParams.anyParams&(1<<1) == 0 {
			param2Used = param2
		}
		paramsKey := mockNoNamesFn_paramsKey{
			param1: param1Used,
			param2: param2Used,
		}
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.mock.config.Expectation == moq.Strict {
			m.mock.scene.MoqT.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= len(results.results) {
		if !results.anyTimes {
			if m.mock.config.Expectation == moq.Strict {
				m.mock.scene.MoqT.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = len(results.results) - 1
	}

	result := results.results[i]
	if result.moq_sequence != 0 {
		sequence := m.mock.scene.NextMockSequence()
		if result.moq_sequence != sequence {
			m.mock.scene.MoqT.Fatalf("Call sequence does not match %#v", params)
		}
	}

	result1 = result.result1
	result2 = result.result2
	return
}

func (m *mockNoNamesFn) onCall(param1 string, param2 bool) *mockNoNamesFn_fnRecorder {
	return &mockNoNamesFn_fnRecorder{
		params: mockNoNamesFn_params{
			param1: param1,
			param2: param2,
		},
		paramsKey: mockNoNamesFn_paramsKey{
			param1: param1,
			param2: param2,
		},
		sequence: m.config.Sequence == moq.SeqDefaultOn,
		mock:     m,
	}
}

func (r *mockNoNamesFn_fnRecorder) anyParam1() *mockNoNamesFn_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("Any functions must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.anyParams |= 1 << 0
	return r
}

func (r *mockNoNamesFn_fnRecorder) anyParam2() *mockNoNamesFn_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("Any functions must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.anyParams |= 1 << 1
	return r
}

func (r *mockNoNamesFn_fnRecorder) seq() *mockNoNamesFn_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("seq must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.sequence = true
	return r
}

func (r *mockNoNamesFn_fnRecorder) noSeq() *mockNoNamesFn_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("noSeq must be called prior to returning results, parameters: %#v", r.params)
		return nil
	}
	r.sequence = false
	return r
}

func (r *mockNoNamesFn_fnRecorder) returnResults(result1 string, result2 error) *mockNoNamesFn_fnRecorder {
	if r.results == nil {
		anyCount := bits.OnesCount64(r.anyParams)
		insertAt := -1
		var results *mockNoNamesFn_resultsByParams
		for n, res := range r.mock.resultsByParams {
			if res.anyParams == r.anyParams {
				results = &res
				break
			}
			if res.anyCount > anyCount {
				insertAt = n
			}
		}
		if results == nil {
			results = &mockNoNamesFn_resultsByParams{
				anyCount:  anyCount,
				anyParams: r.anyParams,
				results:   map[mockNoNamesFn_paramsKey]*mockNoNamesFn_resultMgr{},
			}
			r.mock.resultsByParams = append(r.mock.resultsByParams, *results)
			if insertAt != -1 && insertAt+1 < len(r.mock.resultsByParams) {
				copy(r.mock.resultsByParams[insertAt+1:], r.mock.resultsByParams[insertAt:0])
				r.mock.resultsByParams[insertAt] = *results
			}
		}

		var param1Used string
		if r.anyParams&(1<<0) == 0 {
			param1Used = r.paramsKey.param1
		}
		var param2Used bool
		if r.anyParams&(1<<1) == 0 {
			param2Used = r.paramsKey.param2
		}
		paramsKey := mockNoNamesFn_paramsKey{
			param1: param1Used,
			param2: param2Used,
		}

		if _, ok := results.results[paramsKey]; ok {
			r.mock.scene.MoqT.Fatalf("Expectations already recorded for mock with parameters %#v", r.params)
			return nil
		}

		r.results = &mockNoNamesFn_resultMgr{
			params:   r.params,
			results:  []*mockNoNamesFn_results{},
			index:    0,
			anyTimes: false,
		}
		results.results[paramsKey] = r.results
	}

	var sequence uint32
	if r.sequence {
		sequence = r.mock.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, &mockNoNamesFn_results{
		result1:      result1,
		result2:      result2,
		moq_sequence: sequence,
	})
	return r
}

func (r *mockNoNamesFn_fnRecorder) times(count int) *mockNoNamesFn_fnRecorder {
	if r.results == nil {
		r.mock.scene.MoqT.Fatalf("Return must be called before calling Times")
		return nil
	}
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < count-1; n++ {
		if last.moq_sequence != 0 {
			last = &mockNoNamesFn_results{
				result1:      last.result1,
				result2:      last.result2,
				moq_sequence: r.mock.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (r *mockNoNamesFn_fnRecorder) anyTimes() {
	if r.results == nil {
		r.mock.scene.MoqT.Fatalf("Return must be called before calling AnyTimes")
		return
	}
	r.results.anyTimes = true
}

// Reset resets the state of the mock
func (m *mockNoNamesFn) Reset() { m.resultsByParams = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *mockNoNamesFn) AssertExpectationsMet() {
	for _, res := range m.resultsByParams {
		for _, results := range res.results {
			missing := len(results.results) - int(atomic.LoadUint32(&results.index))
			if missing == 1 && results.anyTimes == true {
				continue
			}
			if missing > 0 {
				m.scene.MoqT.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.params)
			}
		}
	}
}
