// Code generated by Moqueries - https://github.com/myshkin5/moqueries - DO NOT EDIT!

package testmocks_test

import (
	"sync/atomic"

	"github.com/myshkin5/moqueries/pkg/generator/testmocks"
	"github.com/myshkin5/moqueries/pkg/testing"
)

// mockNothingFn holds the state of a mock of the NothingFn type
type mockNothingFn struct {
	t               testing.MoqT
	resultsByParams map[mockNothingFn_params]*mockNothingFn_resultMgr
	params          chan mockNothingFn_params
}

// mockNothingFn_mock isolates the mock interface of the NothingFn type
type mockNothingFn_mock struct {
	mock *mockNothingFn
}

// mockNothingFn_recorder isolates the recorder interface of the NothingFn type
type mockNothingFn_recorder struct {
	mock *mockNothingFn
}

// mockNothingFn_params holds the params of the NothingFn type
type mockNothingFn_params struct{}

// mockNothingFn_resultMgr manages multiple results and the state of the NothingFn type
type mockNothingFn_resultMgr struct {
	results  []*mockNothingFn_results
	index    uint32
	anyTimes bool
}

// mockNothingFn_results holds the results of the NothingFn type
type mockNothingFn_results struct {
}

// mockNothingFn_fnRecorder routes recorded function calls to the mockNothingFn mock
type mockNothingFn_fnRecorder struct {
	params  mockNothingFn_params
	results *mockNothingFn_resultMgr
	mock    *mockNothingFn
}

// newMockNothingFn creates a new mock of the NothingFn type
func newMockNothingFn(t testing.MoqT) *mockNothingFn {
	return &mockNothingFn{
		t:               t,
		resultsByParams: map[mockNothingFn_params]*mockNothingFn_resultMgr{},
		params:          make(chan mockNothingFn_params, 100),
	}
}

// mock returns the mock implementation of the NothingFn type
func (m *mockNothingFn) mock() testmocks.NothingFn {
	return func() { mock := &mockNothingFn_mock{mock: m}; mock.fn() }
}

func (m *mockNothingFn_mock) fn() {
	params := mockNothingFn_params{}
	m.mock.params <- params
	results, ok := m.mock.resultsByParams[params]
	if ok {
		i := int(atomic.AddUint32(&results.index, 1)) - 1
		if i >= len(results.results) {
			if !results.anyTimes {
				m.mock.t.Fatalf("Too many calls to mock with parameters %#v", params)
				return
			}
			i = len(results.results) - 1
		}
	}
	return
}

func (m *mockNothingFn) onCall() *mockNothingFn_fnRecorder {
	return &mockNothingFn_fnRecorder{
		params: mockNothingFn_params{},
		mock:   m,
	}
}

func (r *mockNothingFn_fnRecorder) returnResults() *mockNothingFn_fnRecorder {
	if r.results == nil {
		if _, ok := r.mock.resultsByParams[r.params]; ok {
			r.mock.t.Fatalf("Expectations already recorded for mock with parameters %#v", r.params)
			return nil
		}

		r.results = &mockNothingFn_resultMgr{results: []*mockNothingFn_results{}, index: 0, anyTimes: false}
		r.mock.resultsByParams[r.params] = r.results
	}
	r.results.results = append(r.results.results, &mockNothingFn_results{})
	return r
}

func (r *mockNothingFn_fnRecorder) times(count int) *mockNothingFn_fnRecorder {
	if r.results == nil {
		r.mock.t.Fatalf("Return must be called before calling Times")
		return nil
	}
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < count-1; n++ {
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (r *mockNothingFn_fnRecorder) anyTimes() {
	if r.results == nil {
		r.mock.t.Fatalf("Return must be called before calling AnyTimes")
		return
	}
	r.results.anyTimes = true
}
