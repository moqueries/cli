// Code generated by Moqueries - https://github.com/myshkin5/moqueries - DO NOT EDIT!

package testmocks_test

import (
	"sync/atomic"

	"github.com/myshkin5/moqueries/pkg/generator/testmocks"
	"github.com/myshkin5/moqueries/pkg/testing"
)

// mockRepeatedIdsFn holds the state of a mock of the RepeatedIdsFn type
type mockRepeatedIdsFn struct {
	t               testing.MoqT
	resultsByParams map[mockRepeatedIdsFn_params]*mockRepeatedIdsFn_resultMgr
	params          chan mockRepeatedIdsFn_params
}

// mockRepeatedIdsFn_mock isolates the mock interface of the RepeatedIdsFn type
type mockRepeatedIdsFn_mock struct {
	mock *mockRepeatedIdsFn
}

// mockRepeatedIdsFn_recorder isolates the recorder interface of the RepeatedIdsFn type
type mockRepeatedIdsFn_recorder struct {
	mock *mockRepeatedIdsFn
}

// mockRepeatedIdsFn_params holds the params of the RepeatedIdsFn type
type mockRepeatedIdsFn_params struct {
	sParam1, sParam2 string
	bParam           bool
}

// mockRepeatedIdsFn_resultMgr manages multiple results and the state of the RepeatedIdsFn type
type mockRepeatedIdsFn_resultMgr struct {
	results  []*mockRepeatedIdsFn_results
	index    uint32
	anyTimes bool
}

// mockRepeatedIdsFn_results holds the results of the RepeatedIdsFn type
type mockRepeatedIdsFn_results struct {
	sResult1, sResult2 string
	err                error
}

// mockRepeatedIdsFn_fnRecorder routes recorded function calls to the mockRepeatedIdsFn mock
type mockRepeatedIdsFn_fnRecorder struct {
	params  mockRepeatedIdsFn_params
	results *mockRepeatedIdsFn_resultMgr
	mock    *mockRepeatedIdsFn
}

// newMockRepeatedIdsFn creates a new mock of the RepeatedIdsFn type
func newMockRepeatedIdsFn(t testing.MoqT) *mockRepeatedIdsFn {
	return &mockRepeatedIdsFn{
		t:               t,
		resultsByParams: map[mockRepeatedIdsFn_params]*mockRepeatedIdsFn_resultMgr{},
		params:          make(chan mockRepeatedIdsFn_params, 100),
	}
}

// mock returns the mock implementation of the RepeatedIdsFn type
func (m *mockRepeatedIdsFn) mock() testmocks.RepeatedIdsFn {
	return func(sParam1, sParam2 string, bParam bool) (sResult1, sResult2 string, err error) {
		mock := &mockRepeatedIdsFn_mock{mock: m}
		return mock.fn(sParam1, sParam2, bParam)
	}
}

func (m *mockRepeatedIdsFn_mock) fn(sParam1, sParam2 string, bParam bool) (sResult1, sResult2 string, err error) {
	params := mockRepeatedIdsFn_params{
		sParam1: sParam1,
		sParam2: sParam2,
		bParam:  bParam,
	}
	m.mock.params <- params
	results, ok := m.mock.resultsByParams[params]
	if ok {
		i := int(atomic.AddUint32(&results.index, 1)) - 1
		if i >= len(results.results) {
			if !results.anyTimes {
				m.mock.t.Fatalf("Too many calls to mock with parameters %#v", params)
				return
			}
			i = len(results.results) - 1
		}
		result := results.results[i]
		sResult1 = result.sResult1
		sResult2 = result.sResult2
		err = result.err
	}
	return sResult1, sResult2, err
}

func (m *mockRepeatedIdsFn) onCall(sParam1, sParam2 string, bParam bool) *mockRepeatedIdsFn_fnRecorder {
	return &mockRepeatedIdsFn_fnRecorder{
		params: mockRepeatedIdsFn_params{
			sParam1: sParam1,
			sParam2: sParam2,
			bParam:  bParam,
		},
		mock: m,
	}
}

func (r *mockRepeatedIdsFn_fnRecorder) returnResults(sResult1, sResult2 string, err error) *mockRepeatedIdsFn_fnRecorder {
	if r.results == nil {
		if _, ok := r.mock.resultsByParams[r.params]; ok {
			r.mock.t.Fatalf("Expectations already recorded for mock with parameters %#v", r.params)
			return nil
		}

		r.results = &mockRepeatedIdsFn_resultMgr{results: []*mockRepeatedIdsFn_results{}, index: 0, anyTimes: false}
		r.mock.resultsByParams[r.params] = r.results
	}
	r.results.results = append(r.results.results, &mockRepeatedIdsFn_results{
		sResult1: sResult1,
		sResult2: sResult2,
		err:      err,
	})
	return r
}

func (r *mockRepeatedIdsFn_fnRecorder) times(count int) *mockRepeatedIdsFn_fnRecorder {
	if r.results == nil {
		r.mock.t.Fatalf("Return must be called before calling Times")
		return nil
	}
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < count-1; n++ {
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (r *mockRepeatedIdsFn_fnRecorder) anyTimes() {
	if r.results == nil {
		r.mock.t.Fatalf("Return must be called before calling AnyTimes")
		return
	}
	r.results.anyTimes = true
}
