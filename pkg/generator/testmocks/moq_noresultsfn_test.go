// Code generated by Moqueries - https://github.com/myshkin5/moqueries - DO NOT EDIT!

package testmocks_test

import (
	"sync/atomic"

	"github.com/myshkin5/moqueries/pkg/generator/testmocks"
	"github.com/myshkin5/moqueries/pkg/testing"
)

// mockNoResultsFn holds the state of a mock of the NoResultsFn type
type mockNoResultsFn struct {
	t               testing.MoqT
	resultsByParams map[mockNoResultsFn_params]*mockNoResultsFn_resultMgr
	params          chan mockNoResultsFn_params
}

// mockNoResultsFn_mock isolates the mock interface of the NoResultsFn type
type mockNoResultsFn_mock struct {
	mock *mockNoResultsFn
}

// mockNoResultsFn_recorder isolates the recorder interface of the NoResultsFn type
type mockNoResultsFn_recorder struct {
	mock *mockNoResultsFn
}

// mockNoResultsFn_params holds the params of the NoResultsFn type
type mockNoResultsFn_params struct {
	sParam string
	bParam bool
}

// mockNoResultsFn_resultMgr manages multiple results and the state of the NoResultsFn type
type mockNoResultsFn_resultMgr struct {
	results  []*mockNoResultsFn_results
	index    uint32
	anyTimes bool
}

// mockNoResultsFn_results holds the results of the NoResultsFn type
type mockNoResultsFn_results struct {
}

// mockNoResultsFn_fnRecorder routes recorded function calls to the mockNoResultsFn mock
type mockNoResultsFn_fnRecorder struct {
	params  mockNoResultsFn_params
	results *mockNoResultsFn_resultMgr
	mock    *mockNoResultsFn
}

// newMockNoResultsFn creates a new mock of the NoResultsFn type
func newMockNoResultsFn(t testing.MoqT) *mockNoResultsFn {
	return &mockNoResultsFn{
		t:               t,
		resultsByParams: map[mockNoResultsFn_params]*mockNoResultsFn_resultMgr{},
		params:          make(chan mockNoResultsFn_params, 100),
	}
}

// mock returns the mock implementation of the NoResultsFn type
func (m *mockNoResultsFn) mock() testmocks.NoResultsFn {
	return func(sParam string, bParam bool) { mock := &mockNoResultsFn_mock{mock: m}; mock.fn(sParam, bParam) }
}

func (m *mockNoResultsFn_mock) fn(sParam string, bParam bool) {
	params := mockNoResultsFn_params{
		sParam: sParam,
		bParam: bParam,
	}
	m.mock.params <- params
	results, ok := m.mock.resultsByParams[params]
	if ok {
		i := int(atomic.AddUint32(&results.index, 1)) - 1
		if i >= len(results.results) {
			if !results.anyTimes {
				m.mock.t.Fatalf("Too many calls to mock with parameters %#v", params)
				return
			}
			i = len(results.results) - 1
		}
	}
	return
}

func (m *mockNoResultsFn) onCall(sParam string, bParam bool) *mockNoResultsFn_fnRecorder {
	return &mockNoResultsFn_fnRecorder{
		params: mockNoResultsFn_params{
			sParam: sParam,
			bParam: bParam,
		},
		mock: m,
	}
}

func (r *mockNoResultsFn_fnRecorder) returnResults() *mockNoResultsFn_fnRecorder {
	if r.results == nil {
		if _, ok := r.mock.resultsByParams[r.params]; ok {
			r.mock.t.Fatalf("Expectations already recorded for mock with parameters %#v", r.params)
			return nil
		}

		r.results = &mockNoResultsFn_resultMgr{results: []*mockNoResultsFn_results{}, index: 0, anyTimes: false}
		r.mock.resultsByParams[r.params] = r.results
	}
	r.results.results = append(r.results.results, &mockNoResultsFn_results{})
	return r
}

func (r *mockNoResultsFn_fnRecorder) times(count int) *mockNoResultsFn_fnRecorder {
	if r.results == nil {
		r.mock.t.Fatalf("Return must be called before calling Times")
		return nil
	}
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < count-1; n++ {
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (r *mockNoResultsFn_fnRecorder) anyTimes() {
	if r.results == nil {
		r.mock.t.Fatalf("Return must be called before calling AnyTimes")
		return
	}
	r.results.anyTimes = true
}
