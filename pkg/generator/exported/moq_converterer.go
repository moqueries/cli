// Code generated by Moqueries - https://github.com/myshkin5/moqueries - DO NOT EDIT!

package exported

import (
	"github.com/dave/dst"
	"github.com/myshkin5/moqueries/pkg/generator"
	"github.com/myshkin5/moqueries/pkg/hash"
)

// MockConverterer holds the state of a mock of the Converterer type
type MockConverterer struct {
	ResultsByParams_BaseStruct        map[MockConverterer_BaseStruct_params]MockConverterer_BaseStruct_results
	Params_BaseStruct                 chan MockConverterer_BaseStruct_params
	ResultsByParams_IsolationStruct   map[MockConverterer_IsolationStruct_params]MockConverterer_IsolationStruct_results
	Params_IsolationStruct            chan MockConverterer_IsolationStruct_params
	ResultsByParams_MethodStructs     map[MockConverterer_MethodStructs_params]MockConverterer_MethodStructs_results
	Params_MethodStructs              chan MockConverterer_MethodStructs_params
	ResultsByParams_NewFunc           map[MockConverterer_NewFunc_params]MockConverterer_NewFunc_results
	Params_NewFunc                    chan MockConverterer_NewFunc_params
	ResultsByParams_IsolationAccessor map[MockConverterer_IsolationAccessor_params]MockConverterer_IsolationAccessor_results
	Params_IsolationAccessor          chan MockConverterer_IsolationAccessor_params
	ResultsByParams_FuncClosure       map[MockConverterer_FuncClosure_params]MockConverterer_FuncClosure_results
	Params_FuncClosure                chan MockConverterer_FuncClosure_params
	ResultsByParams_MockMethod        map[MockConverterer_MockMethod_params]MockConverterer_MockMethod_results
	Params_MockMethod                 chan MockConverterer_MockMethod_params
	ResultsByParams_RecorderMethods   map[MockConverterer_RecorderMethods_params]MockConverterer_RecorderMethods_results
	Params_RecorderMethods            chan MockConverterer_RecorderMethods_params
}

// MockConverterer_mock isolates the mock interface of the Converterer type
type MockConverterer_mock struct {
	Mock *MockConverterer
}

// MockConverterer_recorder isolates the recorder interface of the Converterer type
type MockConverterer_recorder struct {
	Mock *MockConverterer
}

// MockConverterer_BaseStruct_params holds the params of the Converterer type
type MockConverterer_BaseStruct_params struct {
	TypeSpec *dst.TypeSpec
	Funcs    hash.Hash
}

// MockConverterer_BaseStruct_results holds the results of the Converterer type
type MockConverterer_BaseStruct_results struct{ StructDecl *dst.GenDecl }

// MockConverterer_BaseStruct_fnRecorder routes recorded function calls to the MockConverterer mock
type MockConverterer_BaseStruct_fnRecorder struct {
	Params MockConverterer_BaseStruct_params
	Mock   *MockConverterer
}

// MockConverterer_IsolationStruct_params holds the params of the Converterer type
type MockConverterer_IsolationStruct_params struct{ TypeName, Suffix string }

// MockConverterer_IsolationStruct_results holds the results of the Converterer type
type MockConverterer_IsolationStruct_results struct{ StructDecl *dst.GenDecl }

// MockConverterer_IsolationStruct_fnRecorder routes recorded function calls to the MockConverterer mock
type MockConverterer_IsolationStruct_fnRecorder struct {
	Params MockConverterer_IsolationStruct_params
	Mock   *MockConverterer
}

// MockConverterer_MethodStructs_params holds the params of the Converterer type
type MockConverterer_MethodStructs_params struct {
	TypeSpec *dst.TypeSpec
	Fn       generator.Func
}

// MockConverterer_MethodStructs_results holds the results of the Converterer type
type MockConverterer_MethodStructs_results struct{ StructDecls []dst.Decl }

// MockConverterer_MethodStructs_fnRecorder routes recorded function calls to the MockConverterer mock
type MockConverterer_MethodStructs_fnRecorder struct {
	Params MockConverterer_MethodStructs_params
	Mock   *MockConverterer
}

// MockConverterer_NewFunc_params holds the params of the Converterer type
type MockConverterer_NewFunc_params struct {
	TypeSpec *dst.TypeSpec
	Funcs    hash.Hash
}

// MockConverterer_NewFunc_results holds the results of the Converterer type
type MockConverterer_NewFunc_results struct{ FuncDecl *dst.FuncDecl }

// MockConverterer_NewFunc_fnRecorder routes recorded function calls to the MockConverterer mock
type MockConverterer_NewFunc_fnRecorder struct {
	Params MockConverterer_NewFunc_params
	Mock   *MockConverterer
}

// MockConverterer_IsolationAccessor_params holds the params of the Converterer type
type MockConverterer_IsolationAccessor_params struct{ TypeName, Suffix, FnName string }

// MockConverterer_IsolationAccessor_results holds the results of the Converterer type
type MockConverterer_IsolationAccessor_results struct{ FuncDecl *dst.FuncDecl }

// MockConverterer_IsolationAccessor_fnRecorder routes recorded function calls to the MockConverterer mock
type MockConverterer_IsolationAccessor_fnRecorder struct {
	Params MockConverterer_IsolationAccessor_params
	Mock   *MockConverterer
}

// MockConverterer_FuncClosure_params holds the params of the Converterer type
type MockConverterer_FuncClosure_params struct {
	TypeName, PkgPath string
	Fn                generator.Func
}

// MockConverterer_FuncClosure_results holds the results of the Converterer type
type MockConverterer_FuncClosure_results struct{ FuncDecl *dst.FuncDecl }

// MockConverterer_FuncClosure_fnRecorder routes recorded function calls to the MockConverterer mock
type MockConverterer_FuncClosure_fnRecorder struct {
	Params MockConverterer_FuncClosure_params
	Mock   *MockConverterer
}

// MockConverterer_MockMethod_params holds the params of the Converterer type
type MockConverterer_MockMethod_params struct {
	TypeName string
	Fn       generator.Func
}

// MockConverterer_MockMethod_results holds the results of the Converterer type
type MockConverterer_MockMethod_results struct{ FuncDecl *dst.FuncDecl }

// MockConverterer_MockMethod_fnRecorder routes recorded function calls to the MockConverterer mock
type MockConverterer_MockMethod_fnRecorder struct {
	Params MockConverterer_MockMethod_params
	Mock   *MockConverterer
}

// MockConverterer_RecorderMethods_params holds the params of the Converterer type
type MockConverterer_RecorderMethods_params struct {
	TypeName string
	Fn       generator.Func
}

// MockConverterer_RecorderMethods_results holds the results of the Converterer type
type MockConverterer_RecorderMethods_results struct{ FuncDecls []dst.Decl }

// MockConverterer_RecorderMethods_fnRecorder routes recorded function calls to the MockConverterer mock
type MockConverterer_RecorderMethods_fnRecorder struct {
	Params MockConverterer_RecorderMethods_params
	Mock   *MockConverterer
}

// NewMockConverterer creates a new mock of the Converterer type
func NewMockConverterer() *MockConverterer {
	return &MockConverterer{
		ResultsByParams_BaseStruct:        map[MockConverterer_BaseStruct_params]MockConverterer_BaseStruct_results{},
		Params_BaseStruct:                 make(chan MockConverterer_BaseStruct_params, 100),
		ResultsByParams_IsolationStruct:   map[MockConverterer_IsolationStruct_params]MockConverterer_IsolationStruct_results{},
		Params_IsolationStruct:            make(chan MockConverterer_IsolationStruct_params, 100),
		ResultsByParams_MethodStructs:     map[MockConverterer_MethodStructs_params]MockConverterer_MethodStructs_results{},
		Params_MethodStructs:              make(chan MockConverterer_MethodStructs_params, 100),
		ResultsByParams_NewFunc:           map[MockConverterer_NewFunc_params]MockConverterer_NewFunc_results{},
		Params_NewFunc:                    make(chan MockConverterer_NewFunc_params, 100),
		ResultsByParams_IsolationAccessor: map[MockConverterer_IsolationAccessor_params]MockConverterer_IsolationAccessor_results{},
		Params_IsolationAccessor:          make(chan MockConverterer_IsolationAccessor_params, 100),
		ResultsByParams_FuncClosure:       map[MockConverterer_FuncClosure_params]MockConverterer_FuncClosure_results{},
		Params_FuncClosure:                make(chan MockConverterer_FuncClosure_params, 100),
		ResultsByParams_MockMethod:        map[MockConverterer_MockMethod_params]MockConverterer_MockMethod_results{},
		Params_MockMethod:                 make(chan MockConverterer_MockMethod_params, 100),
		ResultsByParams_RecorderMethods:   map[MockConverterer_RecorderMethods_params]MockConverterer_RecorderMethods_results{},
		Params_RecorderMethods:            make(chan MockConverterer_RecorderMethods_params, 100),
	}
}

// Mock returns the mock implementation of the Converterer type
func (m *MockConverterer) Mock() *MockConverterer_mock {
	return &MockConverterer_mock{
		Mock: m,
	}
}

func (m *MockConverterer_mock) BaseStruct(typeSpec *dst.TypeSpec, funcs []generator.Func) (structDecl *dst.GenDecl) {
	params := MockConverterer_BaseStruct_params{
		TypeSpec: typeSpec,
		Funcs:    hash.DeepHash(funcs),
	}
	m.Mock.Params_BaseStruct <- params
	results, ok := m.Mock.ResultsByParams_BaseStruct[params]
	if ok {
		structDecl = results.StructDecl
	}
	return structDecl
}

func (m *MockConverterer_mock) IsolationStruct(typeName, suffix string) (structDecl *dst.GenDecl) {
	params := MockConverterer_IsolationStruct_params{
		TypeName: typeName,
		Suffix:   suffix,
	}
	m.Mock.Params_IsolationStruct <- params
	results, ok := m.Mock.ResultsByParams_IsolationStruct[params]
	if ok {
		structDecl = results.StructDecl
	}
	return structDecl
}

func (m *MockConverterer_mock) MethodStructs(typeSpec *dst.TypeSpec, fn generator.Func) (structDecls []dst.Decl) {
	params := MockConverterer_MethodStructs_params{
		TypeSpec: typeSpec,
		Fn:       fn,
	}
	m.Mock.Params_MethodStructs <- params
	results, ok := m.Mock.ResultsByParams_MethodStructs[params]
	if ok {
		structDecls = results.StructDecls
	}
	return structDecls
}

func (m *MockConverterer_mock) NewFunc(typeSpec *dst.TypeSpec, funcs []generator.Func) (funcDecl *dst.FuncDecl) {
	params := MockConverterer_NewFunc_params{
		TypeSpec: typeSpec,
		Funcs:    hash.DeepHash(funcs),
	}
	m.Mock.Params_NewFunc <- params
	results, ok := m.Mock.ResultsByParams_NewFunc[params]
	if ok {
		funcDecl = results.FuncDecl
	}
	return funcDecl
}

func (m *MockConverterer_mock) IsolationAccessor(typeName, suffix, fnName string) (funcDecl *dst.FuncDecl) {
	params := MockConverterer_IsolationAccessor_params{
		TypeName: typeName,
		Suffix:   suffix,
		FnName:   fnName,
	}
	m.Mock.Params_IsolationAccessor <- params
	results, ok := m.Mock.ResultsByParams_IsolationAccessor[params]
	if ok {
		funcDecl = results.FuncDecl
	}
	return funcDecl
}

func (m *MockConverterer_mock) FuncClosure(typeName, pkgPath string, fn generator.Func) (funcDecl *dst.FuncDecl) {
	params := MockConverterer_FuncClosure_params{
		TypeName: typeName,
		PkgPath:  pkgPath,
		Fn:       fn,
	}
	m.Mock.Params_FuncClosure <- params
	results, ok := m.Mock.ResultsByParams_FuncClosure[params]
	if ok {
		funcDecl = results.FuncDecl
	}
	return funcDecl
}

func (m *MockConverterer_mock) MockMethod(typeName string, fn generator.Func) (funcDecl *dst.FuncDecl) {
	params := MockConverterer_MockMethod_params{
		TypeName: typeName,
		Fn:       fn,
	}
	m.Mock.Params_MockMethod <- params
	results, ok := m.Mock.ResultsByParams_MockMethod[params]
	if ok {
		funcDecl = results.FuncDecl
	}
	return funcDecl
}

func (m *MockConverterer_mock) RecorderMethods(typeName string, fn generator.Func) (funcDecls []dst.Decl) {
	params := MockConverterer_RecorderMethods_params{
		TypeName: typeName,
		Fn:       fn,
	}
	m.Mock.Params_RecorderMethods <- params
	results, ok := m.Mock.ResultsByParams_RecorderMethods[params]
	if ok {
		funcDecls = results.FuncDecls
	}
	return funcDecls
}

// OnCall returns the recorder implementation of the Converterer type
func (m *MockConverterer) OnCall() *MockConverterer_recorder {
	return &MockConverterer_recorder{
		Mock: m,
	}
}

func (m *MockConverterer_recorder) BaseStruct(typeSpec *dst.TypeSpec, funcs []generator.Func) *MockConverterer_BaseStruct_fnRecorder {
	return &MockConverterer_BaseStruct_fnRecorder{
		Params: MockConverterer_BaseStruct_params{
			TypeSpec: typeSpec,
			Funcs:    hash.DeepHash(funcs),
		},
		Mock: m.Mock,
	}
}

func (r *MockConverterer_BaseStruct_fnRecorder) Ret(structDecl *dst.GenDecl) {
	r.Mock.ResultsByParams_BaseStruct[r.Params] = MockConverterer_BaseStruct_results{
		StructDecl: structDecl,
	}
}

func (m *MockConverterer_recorder) IsolationStruct(typeName, suffix string) *MockConverterer_IsolationStruct_fnRecorder {
	return &MockConverterer_IsolationStruct_fnRecorder{
		Params: MockConverterer_IsolationStruct_params{
			TypeName: typeName,
			Suffix:   suffix,
		},
		Mock: m.Mock,
	}
}

func (r *MockConverterer_IsolationStruct_fnRecorder) Ret(structDecl *dst.GenDecl) {
	r.Mock.ResultsByParams_IsolationStruct[r.Params] = MockConverterer_IsolationStruct_results{
		StructDecl: structDecl,
	}
}

func (m *MockConverterer_recorder) MethodStructs(typeSpec *dst.TypeSpec, fn generator.Func) *MockConverterer_MethodStructs_fnRecorder {
	return &MockConverterer_MethodStructs_fnRecorder{
		Params: MockConverterer_MethodStructs_params{
			TypeSpec: typeSpec,
			Fn:       fn,
		},
		Mock: m.Mock,
	}
}

func (r *MockConverterer_MethodStructs_fnRecorder) Ret(structDecls []dst.Decl) {
	r.Mock.ResultsByParams_MethodStructs[r.Params] = MockConverterer_MethodStructs_results{
		StructDecls: structDecls,
	}
}

func (m *MockConverterer_recorder) NewFunc(typeSpec *dst.TypeSpec, funcs []generator.Func) *MockConverterer_NewFunc_fnRecorder {
	return &MockConverterer_NewFunc_fnRecorder{
		Params: MockConverterer_NewFunc_params{
			TypeSpec: typeSpec,
			Funcs:    hash.DeepHash(funcs),
		},
		Mock: m.Mock,
	}
}

func (r *MockConverterer_NewFunc_fnRecorder) Ret(funcDecl *dst.FuncDecl) {
	r.Mock.ResultsByParams_NewFunc[r.Params] = MockConverterer_NewFunc_results{
		FuncDecl: funcDecl,
	}
}

func (m *MockConverterer_recorder) IsolationAccessor(typeName, suffix, fnName string) *MockConverterer_IsolationAccessor_fnRecorder {
	return &MockConverterer_IsolationAccessor_fnRecorder{
		Params: MockConverterer_IsolationAccessor_params{
			TypeName: typeName,
			Suffix:   suffix,
			FnName:   fnName,
		},
		Mock: m.Mock,
	}
}

func (r *MockConverterer_IsolationAccessor_fnRecorder) Ret(funcDecl *dst.FuncDecl) {
	r.Mock.ResultsByParams_IsolationAccessor[r.Params] = MockConverterer_IsolationAccessor_results{
		FuncDecl: funcDecl,
	}
}

func (m *MockConverterer_recorder) FuncClosure(typeName, pkgPath string, fn generator.Func) *MockConverterer_FuncClosure_fnRecorder {
	return &MockConverterer_FuncClosure_fnRecorder{
		Params: MockConverterer_FuncClosure_params{
			TypeName: typeName,
			PkgPath:  pkgPath,
			Fn:       fn,
		},
		Mock: m.Mock,
	}
}

func (r *MockConverterer_FuncClosure_fnRecorder) Ret(funcDecl *dst.FuncDecl) {
	r.Mock.ResultsByParams_FuncClosure[r.Params] = MockConverterer_FuncClosure_results{
		FuncDecl: funcDecl,
	}
}

func (m *MockConverterer_recorder) MockMethod(typeName string, fn generator.Func) *MockConverterer_MockMethod_fnRecorder {
	return &MockConverterer_MockMethod_fnRecorder{
		Params: MockConverterer_MockMethod_params{
			TypeName: typeName,
			Fn:       fn,
		},
		Mock: m.Mock,
	}
}

func (r *MockConverterer_MockMethod_fnRecorder) Ret(funcDecl *dst.FuncDecl) {
	r.Mock.ResultsByParams_MockMethod[r.Params] = MockConverterer_MockMethod_results{
		FuncDecl: funcDecl,
	}
}

func (m *MockConverterer_recorder) RecorderMethods(typeName string, fn generator.Func) *MockConverterer_RecorderMethods_fnRecorder {
	return &MockConverterer_RecorderMethods_fnRecorder{
		Params: MockConverterer_RecorderMethods_params{
			TypeName: typeName,
			Fn:       fn,
		},
		Mock: m.Mock,
	}
}

func (r *MockConverterer_RecorderMethods_fnRecorder) Ret(funcDecls []dst.Decl) {
	r.Mock.ResultsByParams_RecorderMethods[r.Params] = MockConverterer_RecorderMethods_results{
		FuncDecls: funcDecls,
	}
}
