// Code generated by Moqueries - https://github.com/myshkin5/moqueries - DO NOT EDIT!

package generator_test

import (
	"github.com/dave/dst"
	"github.com/myshkin5/moqueries/pkg/generator"
	"github.com/myshkin5/moqueries/pkg/hash"
)

// mockConverterer holds the state of a mock of the Converterer type
type mockConverterer struct {
	resultsByParams_BaseStruct        map[mockConverterer_BaseStruct_params]mockConverterer_BaseStruct_results
	params_BaseStruct                 chan mockConverterer_BaseStruct_params
	resultsByParams_ParamResultStruct map[mockConverterer_ParamResultStruct_params]mockConverterer_ParamResultStruct_results
	params_ParamResultStruct          chan mockConverterer_ParamResultStruct_params
	resultsByParams_NewMockFn         map[mockConverterer_NewMockFn_params]mockConverterer_NewMockFn_results
	params_NewMockFn                  chan mockConverterer_NewMockFn_params
	resultsByParams_Method            map[mockConverterer_Method_params]mockConverterer_Method_results
	params_Method                     chan mockConverterer_Method_params
	resultsByParams_FuncClosure       map[mockConverterer_FuncClosure_params]mockConverterer_FuncClosure_results
	params_FuncClosure                chan mockConverterer_FuncClosure_params
}

// mockConverterer_BaseStruct_params holds the params of the Converterer type
type mockConverterer_BaseStruct_params struct {
	typeSpec *dst.TypeSpec
	funcs    hash.Hash
}

// mockConverterer_BaseStruct_results holds the results of the Converterer type
type mockConverterer_BaseStruct_results struct{ structDecl *dst.GenDecl }

// mockConverterer_ParamResultStruct_params holds the params of the Converterer type
type mockConverterer_ParamResultStruct_params struct {
	typeName, prefix, label string
	fieldList               *dst.FieldList
	comparable              bool
}

// mockConverterer_ParamResultStruct_results holds the results of the Converterer type
type mockConverterer_ParamResultStruct_results struct{ structDecl *dst.GenDecl }

// mockConverterer_NewMockFn_params holds the params of the Converterer type
type mockConverterer_NewMockFn_params struct {
	typeSpec *dst.TypeSpec
	funcs    hash.Hash
}

// mockConverterer_NewMockFn_results holds the results of the Converterer type
type mockConverterer_NewMockFn_results struct{ funcDecl *dst.FuncDecl }

// mockConverterer_Method_params holds the params of the Converterer type
type mockConverterer_Method_params struct {
	typeName string
	fn       generator.Func
}

// mockConverterer_Method_results holds the results of the Converterer type
type mockConverterer_Method_results struct{ funcDecl *dst.FuncDecl }

// mockConverterer_FuncClosure_params holds the params of the Converterer type
type mockConverterer_FuncClosure_params struct {
	typeName, pkgPath string
	fn                generator.Func
}

// mockConverterer_FuncClosure_results holds the results of the Converterer type
type mockConverterer_FuncClosure_results struct{ funcDecl *dst.FuncDecl }

// newMockConverterer creates a new mock of the Converterer type
func newMockConverterer() *mockConverterer {
	return &mockConverterer{
		resultsByParams_BaseStruct:        map[mockConverterer_BaseStruct_params]mockConverterer_BaseStruct_results{},
		params_BaseStruct:                 make(chan mockConverterer_BaseStruct_params, 100),
		resultsByParams_ParamResultStruct: map[mockConverterer_ParamResultStruct_params]mockConverterer_ParamResultStruct_results{},
		params_ParamResultStruct:          make(chan mockConverterer_ParamResultStruct_params, 100),
		resultsByParams_NewMockFn:         map[mockConverterer_NewMockFn_params]mockConverterer_NewMockFn_results{},
		params_NewMockFn:                  make(chan mockConverterer_NewMockFn_params, 100),
		resultsByParams_Method:            map[mockConverterer_Method_params]mockConverterer_Method_results{},
		params_Method:                     make(chan mockConverterer_Method_params, 100),
		resultsByParams_FuncClosure:       map[mockConverterer_FuncClosure_params]mockConverterer_FuncClosure_results{},
		params_FuncClosure:                make(chan mockConverterer_FuncClosure_params, 100),
	}
}

func (m *mockConverterer) BaseStruct(typeSpec *dst.TypeSpec, funcs []generator.Func) (structDecl *dst.GenDecl) {
	params := mockConverterer_BaseStruct_params{
		typeSpec: typeSpec,
		funcs:    hash.DeepHash(funcs),
	}
	m.params_BaseStruct <- params
	results, ok := m.resultsByParams_BaseStruct[params]
	if ok {
		structDecl = results.structDecl
	}
	return structDecl
}

func (m *mockConverterer) ParamResultStruct(
	typeName, prefix, label string, fieldList *dst.FieldList, comparable bool) (structDecl *dst.GenDecl) {
	params := mockConverterer_ParamResultStruct_params{
		typeName:   typeName,
		prefix:     prefix,
		label:      label,
		fieldList:  fieldList,
		comparable: comparable,
	}
	m.params_ParamResultStruct <- params
	results, ok := m.resultsByParams_ParamResultStruct[params]
	if ok {
		structDecl = results.structDecl
	}
	return structDecl
}

func (m *mockConverterer) NewMockFn(typeSpec *dst.TypeSpec, funcs []generator.Func) (funcDecl *dst.FuncDecl) {
	params := mockConverterer_NewMockFn_params{
		typeSpec: typeSpec,
		funcs:    hash.DeepHash(funcs),
	}
	m.params_NewMockFn <- params
	results, ok := m.resultsByParams_NewMockFn[params]
	if ok {
		funcDecl = results.funcDecl
	}
	return funcDecl
}

func (m *mockConverterer) Method(typeName string, fn generator.Func) (funcDecl *dst.FuncDecl) {
	params := mockConverterer_Method_params{
		typeName: typeName,
		fn:       fn,
	}
	m.params_Method <- params
	results, ok := m.resultsByParams_Method[params]
	if ok {
		funcDecl = results.funcDecl
	}
	return funcDecl
}

func (m *mockConverterer) FuncClosure(typeName, pkgPath string, fn generator.Func) (funcDecl *dst.FuncDecl) {
	params := mockConverterer_FuncClosure_params{
		typeName: typeName,
		pkgPath:  pkgPath,
		fn:       fn,
	}
	m.params_FuncClosure <- params
	results, ok := m.resultsByParams_FuncClosure[params]
	if ok {
		funcDecl = results.funcDecl
	}
	return funcDecl
}
