// Code generated by Moqueries - https://github.com/myshkin5/moqueries - DO NOT EDIT!

package generator_test

import (
	"github.com/dave/dst"
	"github.com/myshkin5/moqueries/pkg/generator"
)

// mockLoadTypesFn holds the state of a mock of the LoadTypesFn type
type mockLoadTypesFn struct {
	resultsByParams map[mockLoadTypesFn_params]mockLoadTypesFn_results
	params          chan mockLoadTypesFn_params
}

// mockLoadTypesFn_params holds the params of the LoadTypesFn type
type mockLoadTypesFn_params struct{ pkg string }

// mockLoadTypesFn_results holds the results of the LoadTypesFn type
type mockLoadTypesFn_results struct {
	typeSpecs []*dst.TypeSpec
	pkgPath   string
	err       error
}

// newMockLoadTypesFn creates a new mock of the LoadTypesFn type
func newMockLoadTypesFn() *mockLoadTypesFn {
	return &mockLoadTypesFn{
		resultsByParams: map[mockLoadTypesFn_params]mockLoadTypesFn_results{},
		params:          make(chan mockLoadTypesFn_params, 100),
	}
}

func (m *mockLoadTypesFn) fn() generator.LoadTypesFn {
	return func(pkg string) (typeSpecs []*dst.TypeSpec, pkgPath string, err error) {
		params := mockLoadTypesFn_params{
			pkg: pkg,
		}
		m.params <- params
		results, ok := m.resultsByParams[params]
		if ok {
			typeSpecs = results.typeSpecs
			pkgPath = results.pkgPath
			err = results.err
		}
		return typeSpecs, pkgPath, err
	}
}
