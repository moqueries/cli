// Code generated by Moqueries - https://github.com/myshkin5/moqueries - DO NOT EDIT!

package moq

import (
	"math/bits"
	"sync/atomic"

	"github.com/myshkin5/moqueries/hash"
)

// MoqT holds the state of a moq of the T type
type MoqT struct {
	Scene                  *Scene
	Config                 Config
	ResultsByParams_Errorf []MoqT_Errorf_resultsByParams
	ResultsByParams_Fatalf []MoqT_Fatalf_resultsByParams
}

// MoqT_mock isolates the mock interface of the T type
type MoqT_mock struct {
	Moq *MoqT
}

// MoqT_recorder isolates the recorder interface of the T type
type MoqT_recorder struct {
	Moq *MoqT
}

// MoqT_Errorf_params holds the params of the T type
type MoqT_Errorf_params struct {
	Format string
	Args   []interface{}
}

// MoqT_Errorf_paramsKey holds the map key params of the T type
type MoqT_Errorf_paramsKey struct {
	Format string
	Args   hash.Hash
}

// MoqT_Errorf_resultsByParams contains the results for a given set of parameters for the T type
type MoqT_Errorf_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqT_Errorf_paramsKey]*MoqT_Errorf_results
}

// MoqT_Errorf_doFn defines the type of function needed when calling AndDo for the T type
type MoqT_Errorf_doFn func(format string, args ...interface{})

// MoqT_Errorf_doReturnFn defines the type of function needed when calling DoReturnResults for the T type
type MoqT_Errorf_doReturnFn func(format string, args ...interface{})

// MoqT_Errorf_results holds the results of the T type
type MoqT_Errorf_results struct {
	Params  MoqT_Errorf_params
	Results []struct {
		Values *struct {
		}
		Sequence   uint32
		DoFn       MoqT_Errorf_doFn
		DoReturnFn MoqT_Errorf_doReturnFn
	}
	Index    uint32
	AnyTimes bool
}

// MoqT_Errorf_fnRecorder routes recorded function calls to the MoqT moq
type MoqT_Errorf_fnRecorder struct {
	Params    MoqT_Errorf_params
	ParamsKey MoqT_Errorf_paramsKey
	AnyParams uint64
	Sequence  bool
	Results   *MoqT_Errorf_results
	Moq       *MoqT
}

// MoqT_Errorf_anyParams isolates the any params functions of the T type
type MoqT_Errorf_anyParams struct {
	Recorder *MoqT_Errorf_fnRecorder
}

// MoqT_Fatalf_params holds the params of the T type
type MoqT_Fatalf_params struct {
	Format string
	Args   []interface{}
}

// MoqT_Fatalf_paramsKey holds the map key params of the T type
type MoqT_Fatalf_paramsKey struct {
	Format string
	Args   hash.Hash
}

// MoqT_Fatalf_resultsByParams contains the results for a given set of parameters for the T type
type MoqT_Fatalf_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqT_Fatalf_paramsKey]*MoqT_Fatalf_results
}

// MoqT_Fatalf_doFn defines the type of function needed when calling AndDo for the T type
type MoqT_Fatalf_doFn func(format string, args ...interface{})

// MoqT_Fatalf_doReturnFn defines the type of function needed when calling DoReturnResults for the T type
type MoqT_Fatalf_doReturnFn func(format string, args ...interface{})

// MoqT_Fatalf_results holds the results of the T type
type MoqT_Fatalf_results struct {
	Params  MoqT_Fatalf_params
	Results []struct {
		Values *struct {
		}
		Sequence   uint32
		DoFn       MoqT_Fatalf_doFn
		DoReturnFn MoqT_Fatalf_doReturnFn
	}
	Index    uint32
	AnyTimes bool
}

// MoqT_Fatalf_fnRecorder routes recorded function calls to the MoqT moq
type MoqT_Fatalf_fnRecorder struct {
	Params    MoqT_Fatalf_params
	ParamsKey MoqT_Fatalf_paramsKey
	AnyParams uint64
	Sequence  bool
	Results   *MoqT_Fatalf_results
	Moq       *MoqT
}

// MoqT_Fatalf_anyParams isolates the any params functions of the T type
type MoqT_Fatalf_anyParams struct {
	Recorder *MoqT_Fatalf_fnRecorder
}

// NewMoqT creates a new moq of the T type
func NewMoqT(scene *Scene, config *Config) *MoqT {
	if config == nil {
		config = &Config{}
	}
	m := &MoqT{
		Scene:  scene,
		Config: *config,
	}
	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the T type
func (m *MoqT) Mock() *MoqT_mock {
	return &MoqT_mock{
		Moq: m,
	}
}

func (m *MoqT_mock) Errorf(format string, args ...interface{}) {
	params := MoqT_Errorf_params{
		Format: format,
		Args:   args,
	}
	var results *MoqT_Errorf_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Errorf {
		var formatUsed string
		if resultsByParams.AnyParams&(1<<0) == 0 {
			formatUsed = format
		}
		var argsUsed hash.Hash
		if resultsByParams.AnyParams&(1<<1) == 0 {
			argsUsed = hash.DeepHash(args)
		}
		paramsKey := MoqT_Errorf_paramsKey{
			Format: formatUsed,
			Args:   argsUsed,
		}
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= len(results.Results) {
		if !results.AnyTimes {
			if m.Moq.Config.Expectation == Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = len(results.Results) - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match %#v", params)
		}
	}

	if result.DoFn != nil {
		result.DoFn(format, args...)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(format, args...)
	}
	return
}

func (m *MoqT_mock) Fatalf(format string, args ...interface{}) {
	params := MoqT_Fatalf_params{
		Format: format,
		Args:   args,
	}
	var results *MoqT_Fatalf_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Fatalf {
		var formatUsed string
		if resultsByParams.AnyParams&(1<<0) == 0 {
			formatUsed = format
		}
		var argsUsed hash.Hash
		if resultsByParams.AnyParams&(1<<1) == 0 {
			argsUsed = hash.DeepHash(args)
		}
		paramsKey := MoqT_Fatalf_paramsKey{
			Format: formatUsed,
			Args:   argsUsed,
		}
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= len(results.Results) {
		if !results.AnyTimes {
			if m.Moq.Config.Expectation == Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = len(results.Results) - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match %#v", params)
		}
	}

	if result.DoFn != nil {
		result.DoFn(format, args...)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(format, args...)
	}
	return
}

// OnCall returns the recorder implementation of the T type
func (m *MoqT) OnCall() *MoqT_recorder {
	return &MoqT_recorder{
		Moq: m,
	}
}

func (m *MoqT_recorder) Errorf(format string, args ...interface{}) *MoqT_Errorf_fnRecorder {
	return &MoqT_Errorf_fnRecorder{
		Params: MoqT_Errorf_params{
			Format: format,
			Args:   args,
		},
		ParamsKey: MoqT_Errorf_paramsKey{
			Format: format,
			Args:   hash.DeepHash(args),
		},
		Sequence: m.Moq.Config.Sequence == SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqT_Errorf_fnRecorder) Any() *MoqT_Errorf_anyParams {
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, parameters: %#v", r.Params)
		return nil
	}
	return &MoqT_Errorf_anyParams{Recorder: r}
}

func (a *MoqT_Errorf_anyParams) Format() *MoqT_Errorf_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqT_Errorf_anyParams) Args() *MoqT_Errorf_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqT_Errorf_fnRecorder) Seq() *MoqT_Errorf_fnRecorder {
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, parameters: %#v", r.Params)
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqT_Errorf_fnRecorder) NoSeq() *MoqT_Errorf_fnRecorder {
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, parameters: %#v", r.Params)
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqT_Errorf_fnRecorder) ReturnResults() *MoqT_Errorf_fnRecorder {
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
		}
		Sequence   uint32
		DoFn       MoqT_Errorf_doFn
		DoReturnFn MoqT_Errorf_doReturnFn
	}{
		Values: &struct {
		}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqT_Errorf_fnRecorder) AndDo(fn MoqT_Errorf_doFn) *MoqT_Errorf_fnRecorder {
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqT_Errorf_fnRecorder) DoReturnResults(fn MoqT_Errorf_doReturnFn) *MoqT_Errorf_fnRecorder {
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
		}
		Sequence   uint32
		DoFn       MoqT_Errorf_doFn
		DoReturnFn MoqT_Errorf_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqT_Errorf_fnRecorder) FindResults() {
	if r.Results == nil {
		anyCount := bits.OnesCount64(r.AnyParams)
		insertAt := -1
		var results *MoqT_Errorf_resultsByParams
		for n, res := range r.Moq.ResultsByParams_Errorf {
			if res.AnyParams == r.AnyParams {
				results = &res
				break
			}
			if res.AnyCount > anyCount {
				insertAt = n
			}
		}
		if results == nil {
			results = &MoqT_Errorf_resultsByParams{
				AnyCount:  anyCount,
				AnyParams: r.AnyParams,
				Results:   map[MoqT_Errorf_paramsKey]*MoqT_Errorf_results{},
			}
			r.Moq.ResultsByParams_Errorf = append(r.Moq.ResultsByParams_Errorf, *results)
			if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Errorf) {
				copy(r.Moq.ResultsByParams_Errorf[insertAt+1:], r.Moq.ResultsByParams_Errorf[insertAt:0])
				r.Moq.ResultsByParams_Errorf[insertAt] = *results
			}
		}

		var formatUsed string
		if r.AnyParams&(1<<0) == 0 {
			formatUsed = r.ParamsKey.Format
		}
		var argsUsed hash.Hash
		if r.AnyParams&(1<<1) == 0 {
			argsUsed = r.ParamsKey.Args
		}
		paramsKey := MoqT_Errorf_paramsKey{
			Format: formatUsed,
			Args:   argsUsed,
		}

		var ok bool
		r.Results, ok = results.Results[paramsKey]
		if !ok {
			r.Results = &MoqT_Errorf_results{
				Params:   r.Params,
				Results:  nil,
				Index:    0,
				AnyTimes: false,
			}
			results.Results[paramsKey] = r.Results
		}
	}
}

func (r *MoqT_Errorf_fnRecorder) Times(count int) *MoqT_Errorf_fnRecorder {
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Times")
		return nil
	}
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < count-1; n++ {
		if last.Sequence != 0 {
			last = struct {
				Values *struct {
				}
				Sequence   uint32
				DoFn       MoqT_Errorf_doFn
				DoReturnFn MoqT_Errorf_doReturnFn
			}{
				Values: &struct {
				}{},
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (r *MoqT_Errorf_fnRecorder) AnyTimes() {
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling AnyTimes")
		return
	}
	r.Results.AnyTimes = true
}

func (m *MoqT_recorder) Fatalf(format string, args ...interface{}) *MoqT_Fatalf_fnRecorder {
	return &MoqT_Fatalf_fnRecorder{
		Params: MoqT_Fatalf_params{
			Format: format,
			Args:   args,
		},
		ParamsKey: MoqT_Fatalf_paramsKey{
			Format: format,
			Args:   hash.DeepHash(args),
		},
		Sequence: m.Moq.Config.Sequence == SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqT_Fatalf_fnRecorder) Any() *MoqT_Fatalf_anyParams {
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, parameters: %#v", r.Params)
		return nil
	}
	return &MoqT_Fatalf_anyParams{Recorder: r}
}

func (a *MoqT_Fatalf_anyParams) Format() *MoqT_Fatalf_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqT_Fatalf_anyParams) Args() *MoqT_Fatalf_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqT_Fatalf_fnRecorder) Seq() *MoqT_Fatalf_fnRecorder {
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, parameters: %#v", r.Params)
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqT_Fatalf_fnRecorder) NoSeq() *MoqT_Fatalf_fnRecorder {
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, parameters: %#v", r.Params)
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqT_Fatalf_fnRecorder) ReturnResults() *MoqT_Fatalf_fnRecorder {
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
		}
		Sequence   uint32
		DoFn       MoqT_Fatalf_doFn
		DoReturnFn MoqT_Fatalf_doReturnFn
	}{
		Values: &struct {
		}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqT_Fatalf_fnRecorder) AndDo(fn MoqT_Fatalf_doFn) *MoqT_Fatalf_fnRecorder {
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqT_Fatalf_fnRecorder) DoReturnResults(fn MoqT_Fatalf_doReturnFn) *MoqT_Fatalf_fnRecorder {
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
		}
		Sequence   uint32
		DoFn       MoqT_Fatalf_doFn
		DoReturnFn MoqT_Fatalf_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqT_Fatalf_fnRecorder) FindResults() {
	if r.Results == nil {
		anyCount := bits.OnesCount64(r.AnyParams)
		insertAt := -1
		var results *MoqT_Fatalf_resultsByParams
		for n, res := range r.Moq.ResultsByParams_Fatalf {
			if res.AnyParams == r.AnyParams {
				results = &res
				break
			}
			if res.AnyCount > anyCount {
				insertAt = n
			}
		}
		if results == nil {
			results = &MoqT_Fatalf_resultsByParams{
				AnyCount:  anyCount,
				AnyParams: r.AnyParams,
				Results:   map[MoqT_Fatalf_paramsKey]*MoqT_Fatalf_results{},
			}
			r.Moq.ResultsByParams_Fatalf = append(r.Moq.ResultsByParams_Fatalf, *results)
			if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Fatalf) {
				copy(r.Moq.ResultsByParams_Fatalf[insertAt+1:], r.Moq.ResultsByParams_Fatalf[insertAt:0])
				r.Moq.ResultsByParams_Fatalf[insertAt] = *results
			}
		}

		var formatUsed string
		if r.AnyParams&(1<<0) == 0 {
			formatUsed = r.ParamsKey.Format
		}
		var argsUsed hash.Hash
		if r.AnyParams&(1<<1) == 0 {
			argsUsed = r.ParamsKey.Args
		}
		paramsKey := MoqT_Fatalf_paramsKey{
			Format: formatUsed,
			Args:   argsUsed,
		}

		var ok bool
		r.Results, ok = results.Results[paramsKey]
		if !ok {
			r.Results = &MoqT_Fatalf_results{
				Params:   r.Params,
				Results:  nil,
				Index:    0,
				AnyTimes: false,
			}
			results.Results[paramsKey] = r.Results
		}
	}
}

func (r *MoqT_Fatalf_fnRecorder) Times(count int) *MoqT_Fatalf_fnRecorder {
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Times")
		return nil
	}
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < count-1; n++ {
		if last.Sequence != 0 {
			last = struct {
				Values *struct {
				}
				Sequence   uint32
				DoFn       MoqT_Fatalf_doFn
				DoReturnFn MoqT_Fatalf_doReturnFn
			}{
				Values: &struct {
				}{},
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (r *MoqT_Fatalf_fnRecorder) AnyTimes() {
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling AnyTimes")
		return
	}
	r.Results.AnyTimes = true
}

// Reset resets the state of the moq
func (m *MoqT) Reset() { m.ResultsByParams_Errorf = nil; m.ResultsByParams_Fatalf = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqT) AssertExpectationsMet() {
	for _, res := range m.ResultsByParams_Errorf {
		for _, results := range res.Results {
			missing := len(results.Results) - int(atomic.LoadUint32(&results.Index))
			if missing == 1 && results.AnyTimes == true {
				continue
			}
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.Params)
			}
		}
	}
	for _, res := range m.ResultsByParams_Fatalf {
		for _, results := range res.Results {
			missing := len(results.Results) - int(atomic.LoadUint32(&results.Index))
			if missing == 1 && results.AnyTimes == true {
				continue
			}
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.Params)
			}
		}
	}
}
