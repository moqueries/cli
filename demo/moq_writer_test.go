// Code generated by Moqueries - https://github.com/myshkin5/moqueries - DO NOT EDIT!

package demo_test

import (
	"fmt"
	"io"
	"math/bits"
	"sync/atomic"

	"github.com/myshkin5/moqueries/hash"
	"github.com/myshkin5/moqueries/moq"
)

// The following type assertion assures that io.Writer is mocked completely
var _ io.Writer = (*moqWriter_mock)(nil)

// moqWriter holds the state of a moq of the Writer type
type moqWriter struct {
	scene  *moq.Scene
	config moq.Config
	moq    *moqWriter_mock

	resultsByParams_Write []moqWriter_Write_resultsByParams

	runtime struct {
		parameterIndexing struct {
			Write struct {
				p moq.ParamIndexing
			}
		}
	}
	// moqWriter_mock isolates the mock interface of the Writer type
}

type moqWriter_mock struct {
	moq *moqWriter
}

// moqWriter_recorder isolates the recorder interface of the Writer type
type moqWriter_recorder struct {
	moq *moqWriter
}

// moqWriter_Write_params holds the params of the Writer type
type moqWriter_Write_params struct{ p []byte }

// moqWriter_Write_paramsKey holds the map key params of the Writer type
type moqWriter_Write_paramsKey struct {
	params struct{}
	hashes struct{ p hash.Hash }
}

// moqWriter_Write_resultsByParams contains the results for a given set of
// parameters for the Writer type
type moqWriter_Write_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqWriter_Write_paramsKey]*moqWriter_Write_results
}

// moqWriter_Write_doFn defines the type of function needed when calling andDo
// for the Writer type
type moqWriter_Write_doFn func(p []byte)

// moqWriter_Write_doReturnFn defines the type of function needed when calling
// doReturnResults for the Writer type
type moqWriter_Write_doReturnFn func(p []byte) (n int, err error)

// moqWriter_Write_results holds the results of the Writer type
type moqWriter_Write_results struct {
	params  moqWriter_Write_params
	results []struct {
		values *struct {
			n   int
			err error
		}
		sequence   uint32
		doFn       moqWriter_Write_doFn
		doReturnFn moqWriter_Write_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqWriter_Write_fnRecorder routes recorded function calls to the moqWriter
// moq
type moqWriter_Write_fnRecorder struct {
	params    moqWriter_Write_params
	anyParams uint64
	sequence  bool
	results   *moqWriter_Write_results
	moq       *moqWriter
}

// moqWriter_Write_anyParams isolates the any params functions of the Writer
// type
type moqWriter_Write_anyParams struct {
	recorder *moqWriter_Write_fnRecorder
}

// newMoqWriter creates a new moq of the Writer type
func newMoqWriter(scene *moq.Scene, config *moq.Config) *moqWriter {
	if config == nil {
		config = &moq.Config{}
	}
	m := &moqWriter{
		scene:  scene,
		config: *config,
		moq:    &moqWriter_mock{},

		runtime: struct {
			parameterIndexing struct {
				Write struct {
					p moq.ParamIndexing
				}
			}
		}{parameterIndexing: struct {
			Write struct {
				p moq.ParamIndexing
			}
		}{
			Write: struct {
				p moq.ParamIndexing
			}{
				p: moq.ParamIndexByHash,
			},
		}},
	}
	m.moq.moq = m

	scene.AddMoq(m)
	return m
}

// mock returns the mock implementation of the Writer type
func (m *moqWriter) mock() *moqWriter_mock { return m.moq }

func (m *moqWriter_mock) Write(p []byte) (n int, err error) {
	m.moq.scene.T.Helper()
	params := moqWriter_Write_params{
		p: p,
	}
	var results *moqWriter_Write_results
	for _, resultsByParams := range m.moq.resultsByParams_Write {
		paramsKey := m.moq.paramsKey_Write(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call to %s", m.moq.prettyParams_Write(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to %s", m.moq.prettyParams_Write(params))
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match call to %s", m.moq.prettyParams_Write(params))
		}
	}

	if result.doFn != nil {
		result.doFn(p)
	}

	if result.values != nil {
		n = result.values.n
		err = result.values.err
	}
	if result.doReturnFn != nil {
		n, err = result.doReturnFn(p)
	}
	return
}

// onCall returns the recorder implementation of the Writer type
func (m *moqWriter) onCall() *moqWriter_recorder {
	return &moqWriter_recorder{
		moq: m,
	}
}

func (m *moqWriter_recorder) Write(p []byte) *moqWriter_Write_fnRecorder {
	return &moqWriter_Write_fnRecorder{
		params: moqWriter_Write_params{
			p: p,
		},
		sequence: m.moq.config.Sequence == moq.SeqDefaultOn,
		moq:      m.moq,
	}
}

func (r *moqWriter_Write_fnRecorder) any() *moqWriter_Write_anyParams {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_Write(r.params))
		return nil
	}
	return &moqWriter_Write_anyParams{recorder: r}
}

func (a *moqWriter_Write_anyParams) p() *moqWriter_Write_fnRecorder {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (r *moqWriter_Write_fnRecorder) seq() *moqWriter_Write_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_Write(r.params))
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqWriter_Write_fnRecorder) noSeq() *moqWriter_Write_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_Write(r.params))
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqWriter_Write_fnRecorder) returnResults(n int, err error) *moqWriter_Write_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			n   int
			err error
		}
		sequence   uint32
		doFn       moqWriter_Write_doFn
		doReturnFn moqWriter_Write_doReturnFn
	}{
		values: &struct {
			n   int
			err error
		}{
			n:   n,
			err: err,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqWriter_Write_fnRecorder) andDo(fn moqWriter_Write_doFn) *moqWriter_Write_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqWriter_Write_fnRecorder) doReturnResults(fn moqWriter_Write_doReturnFn) *moqWriter_Write_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			n   int
			err error
		}
		sequence   uint32
		doFn       moqWriter_Write_doFn
		doReturnFn moqWriter_Write_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqWriter_Write_fnRecorder) findResults() {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqWriter_Write_resultsByParams
	for n, res := range r.moq.resultsByParams_Write {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqWriter_Write_resultsByParams{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqWriter_Write_paramsKey]*moqWriter_Write_results{},
		}
		r.moq.resultsByParams_Write = append(r.moq.resultsByParams_Write, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams_Write) {
			copy(r.moq.resultsByParams_Write[insertAt+1:], r.moq.resultsByParams_Write[insertAt:0])
			r.moq.resultsByParams_Write[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey_Write(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqWriter_Write_results{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqWriter_Write_fnRecorder) repeat(repeaters ...moq.Repeater) *moqWriter_Write_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values *struct {
					n   int
					err error
				}
				sequence   uint32
				doFn       moqWriter_Write_doFn
				doReturnFn moqWriter_Write_doReturnFn
			}{
				values:   last.values,
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqWriter) prettyParams_Write(params moqWriter_Write_params) string {
	return fmt.Sprintf("Write(%#v)", params.p)
}

func (m *moqWriter) paramsKey_Write(params moqWriter_Write_params, anyParams uint64) moqWriter_Write_paramsKey {
	m.scene.T.Helper()
	var pUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.Write.p == moq.ParamIndexByValue {
			m.scene.T.Fatalf("The p parameter of the Write function can't be indexed by value")
		}
		pUsedHash = hash.DeepHash(params.p)
	}
	return moqWriter_Write_paramsKey{
		params: struct{}{},
		hashes: struct{ p hash.Hash }{
			p: pUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *moqWriter) Reset() { m.resultsByParams_Write = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *moqWriter) AssertExpectationsMet() {
	m.scene.T.Helper()
	for _, res := range m.resultsByParams_Write {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.prettyParams_Write(results.params))
			}
		}
	}
}
