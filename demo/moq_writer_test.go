// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT.

package demo_test

import (
	"fmt"
	"io"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/impl"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that io.Writer is mocked completely
var _ io.Writer = (*moqWriter_mock)(nil)

// moqWriter holds the state of a moq of the Writer type
type moqWriter struct {
	moq *moqWriter_mock

	moq_Write *impl.Moq[
		*moqWriter_Write_adaptor,
		moqWriter_Write_params,
		moqWriter_Write_paramsKey,
		moqWriter_Write_results,
	]

	runtime moqWriter_runtime
}

// moqWriter_mock isolates the mock interface of the Writer type
type moqWriter_mock struct {
	moq *moqWriter
}

// moqWriter_recorder isolates the recorder interface of the Writer type
type moqWriter_recorder struct {
	moq *moqWriter
}

// moqWriter_runtime holds runtime configuration for the Writer type
type moqWriter_runtime struct {
	parameterIndexing struct {
		Write moqWriter_Write_paramIndexing
	}
}

// moqWriter_Write_adaptor adapts moqWriter as needed by the runtime
type moqWriter_Write_adaptor struct {
	moq *moqWriter
}

// moqWriter_Write_params holds the params of the Writer type
type moqWriter_Write_params struct{ p []byte }

// moqWriter_Write_paramsKey holds the map key params of the Writer type
type moqWriter_Write_paramsKey struct {
	params struct{}
	hashes struct{ p hash.Hash }
}

// moqWriter_Write_results holds the results of the Writer type
type moqWriter_Write_results struct {
	n   int
	err error
}

// moqWriter_Write_paramIndexing holds the parameter indexing runtime
// configuration for the Writer type
type moqWriter_Write_paramIndexing struct {
	p moq.ParamIndexing
}

// moqWriter_Write_doFn defines the type of function needed when calling andDo
// for the Writer type
type moqWriter_Write_doFn func(p []byte)

// moqWriter_Write_doReturnFn defines the type of function needed when calling
// doReturnResults for the Writer type
type moqWriter_Write_doReturnFn func(p []byte) (n int, err error)

// moqWriter_Write_recorder routes recorded function calls to the moqWriter moq
type moqWriter_Write_recorder struct {
	recorder *impl.Recorder[
		*moqWriter_Write_adaptor,
		moqWriter_Write_params,
		moqWriter_Write_paramsKey,
		moqWriter_Write_results,
	]
}

// moqWriter_Write_anyParams isolates the any params functions of the Writer
// type
type moqWriter_Write_anyParams struct {
	recorder *moqWriter_Write_recorder
}

// newMoqWriter creates a new moq of the Writer type
func newMoqWriter(scene *moq.Scene, config *moq.Config) *moqWriter {
	adaptor1 := &moqWriter_Write_adaptor{}
	m := &moqWriter{
		moq: &moqWriter_mock{},

		moq_Write: impl.NewMoq[
			*moqWriter_Write_adaptor,
			moqWriter_Write_params,
			moqWriter_Write_paramsKey,
			moqWriter_Write_results,
		](scene, adaptor1, config),

		runtime: moqWriter_runtime{parameterIndexing: struct {
			Write moqWriter_Write_paramIndexing
		}{
			Write: moqWriter_Write_paramIndexing{
				p: moq.ParamIndexByHash,
			},
		}},
	}
	m.moq.moq = m

	adaptor1.moq = m

	scene.AddMoq(m)
	return m
}

// mock returns the mock implementation of the Writer type
func (m *moqWriter) mock() *moqWriter_mock { return m.moq }

func (m *moqWriter_mock) Write(p []byte) (int, error) {
	m.moq.moq_Write.Scene.T.Helper()
	params := moqWriter_Write_params{
		p: p,
	}

	var result1 int
	var result2 error
	if result := m.moq.moq_Write.Function(params); result != nil {
		result1 = result.n
		result2 = result.err
	}
	return result1, result2
}

// onCall returns the recorder implementation of the Writer type
func (m *moqWriter) onCall() *moqWriter_recorder {
	return &moqWriter_recorder{
		moq: m,
	}
}

func (m *moqWriter_recorder) Write(p []byte) *moqWriter_Write_recorder {
	return &moqWriter_Write_recorder{
		recorder: m.moq.moq_Write.OnCall(moqWriter_Write_params{
			p: p,
		}),
	}
}

func (r *moqWriter_Write_recorder) any() *moqWriter_Write_anyParams {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.IsAnyPermitted(false) {
		return nil
	}
	return &moqWriter_Write_anyParams{recorder: r}
}

func (a *moqWriter_Write_anyParams) p() *moqWriter_Write_recorder {
	a.recorder.recorder.AnyParam(1)
	return a.recorder
}

func (r *moqWriter_Write_recorder) seq() *moqWriter_Write_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.Seq(true, "seq", false) {
		return nil
	}
	return r
}

func (r *moqWriter_Write_recorder) noSeq() *moqWriter_Write_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.Seq(false, "noSeq", false) {
		return nil
	}
	return r
}

func (r *moqWriter_Write_recorder) returnResults(n int, err error) *moqWriter_Write_recorder {
	r.recorder.Moq.Scene.T.Helper()
	r.recorder.ReturnResults(moqWriter_Write_results{
		n:   n,
		err: err,
	})
	return r
}

func (r *moqWriter_Write_recorder) andDo(fn moqWriter_Write_doFn) *moqWriter_Write_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.AndDo(func(params moqWriter_Write_params) {
		fn(params.p)
	}, false) {
		return nil
	}
	return r
}

func (r *moqWriter_Write_recorder) doReturnResults(fn moqWriter_Write_doReturnFn) *moqWriter_Write_recorder {
	r.recorder.Moq.Scene.T.Helper()
	r.recorder.DoReturnResults(func(params moqWriter_Write_params) *moqWriter_Write_results {
		n, err := fn(params.p)
		return &moqWriter_Write_results{
			n:   n,
			err: err,
		}
	})
	return r
}

func (r *moqWriter_Write_recorder) repeat(repeaters ...moq.Repeater) *moqWriter_Write_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.Repeat(repeaters, false) {
		return nil
	}
	return r
}

func (*moqWriter_Write_adaptor) PrettyParams(params moqWriter_Write_params) string {
	return fmt.Sprintf("Write(%#v)", params.p)
}

func (a *moqWriter_Write_adaptor) ParamsKey(params moqWriter_Write_params, anyParams uint64) moqWriter_Write_paramsKey {
	a.moq.moq_Write.Scene.T.Helper()
	pUsedHash := impl.HashOnlyParamKey(a.moq.moq_Write.Scene.T,
		params.p, "p", 1, a.moq.runtime.parameterIndexing.Write.p, anyParams)
	return moqWriter_Write_paramsKey{
		params: struct{}{},
		hashes: struct{ p hash.Hash }{
			p: pUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *moqWriter) Reset() {
	m.moq_Write.Reset()
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *moqWriter) AssertExpectationsMet() {
	m.moq_Write.Scene.T.Helper()
	m.moq_Write.AssertExpectationsMet()
}
