// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT.

package internal_test

import (
	"fmt"
	"io"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/impl"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that io.ReadCloser is mocked completely
var _ io.ReadCloser = (*moqReadCloser_mock)(nil)

// moqReadCloser holds the state of a moq of the ReadCloser type
type moqReadCloser struct {
	moq *moqReadCloser_mock

	moq_Read *impl.Moq[
		*moqReadCloser_Read_adaptor,
		moqReadCloser_Read_params,
		moqReadCloser_Read_paramsKey,
		moqReadCloser_Read_results,
	]
	moq_Close *impl.Moq[
		*moqReadCloser_Close_adaptor,
		moqReadCloser_Close_params,
		moqReadCloser_Close_paramsKey,
		moqReadCloser_Close_results,
	]

	runtime moqReadCloser_runtime
}

// moqReadCloser_mock isolates the mock interface of the ReadCloser type
type moqReadCloser_mock struct {
	moq *moqReadCloser
}

// moqReadCloser_recorder isolates the recorder interface of the ReadCloser
// type
type moqReadCloser_recorder struct {
	moq *moqReadCloser
}

// moqReadCloser_runtime holds runtime configuration for the ReadCloser type
type moqReadCloser_runtime struct {
	parameterIndexing struct {
		Read  moqReadCloser_Read_paramIndexing
		Close moqReadCloser_Close_paramIndexing
	}
}

// moqReadCloser_Read_adaptor adapts moqReadCloser as needed by the runtime
type moqReadCloser_Read_adaptor struct {
	moq *moqReadCloser
}

// moqReadCloser_Read_params holds the params of the ReadCloser type
type moqReadCloser_Read_params struct{ p []byte }

// moqReadCloser_Read_paramsKey holds the map key params of the ReadCloser type
type moqReadCloser_Read_paramsKey struct {
	params struct{}
	hashes struct{ p hash.Hash }
}

// moqReadCloser_Read_results holds the results of the ReadCloser type
type moqReadCloser_Read_results struct {
	n   int
	err error
}

// moqReadCloser_Read_paramIndexing holds the parameter indexing runtime
// configuration for the ReadCloser type
type moqReadCloser_Read_paramIndexing struct {
	p moq.ParamIndexing
}

// moqReadCloser_Read_doFn defines the type of function needed when calling
// andDo for the ReadCloser type
type moqReadCloser_Read_doFn func(p []byte)

// moqReadCloser_Read_doReturnFn defines the type of function needed when
// calling doReturnResults for the ReadCloser type
type moqReadCloser_Read_doReturnFn func(p []byte) (n int, err error)

// moqReadCloser_Read_recorder routes recorded function calls to the
// moqReadCloser moq
type moqReadCloser_Read_recorder struct {
	recorder *impl.Recorder[
		*moqReadCloser_Read_adaptor,
		moqReadCloser_Read_params,
		moqReadCloser_Read_paramsKey,
		moqReadCloser_Read_results,
	]
}

// moqReadCloser_Read_anyParams isolates the any params functions of the
// ReadCloser type
type moqReadCloser_Read_anyParams struct {
	recorder *moqReadCloser_Read_recorder
}

// moqReadCloser_Close_adaptor adapts moqReadCloser as needed by the runtime
type moqReadCloser_Close_adaptor struct {
	moq *moqReadCloser
}

// moqReadCloser_Close_params holds the params of the ReadCloser type
type moqReadCloser_Close_params struct{}

// moqReadCloser_Close_paramsKey holds the map key params of the ReadCloser
// type
type moqReadCloser_Close_paramsKey struct {
	params struct{}
	hashes struct{}
}

// moqReadCloser_Close_results holds the results of the ReadCloser type
type moqReadCloser_Close_results struct {
	result1 error
}

// moqReadCloser_Close_paramIndexing holds the parameter indexing runtime
// configuration for the ReadCloser type
type moqReadCloser_Close_paramIndexing struct{}

// moqReadCloser_Close_doFn defines the type of function needed when calling
// andDo for the ReadCloser type
type moqReadCloser_Close_doFn func()

// moqReadCloser_Close_doReturnFn defines the type of function needed when
// calling doReturnResults for the ReadCloser type
type moqReadCloser_Close_doReturnFn func() error

// moqReadCloser_Close_recorder routes recorded function calls to the
// moqReadCloser moq
type moqReadCloser_Close_recorder struct {
	recorder *impl.Recorder[
		*moqReadCloser_Close_adaptor,
		moqReadCloser_Close_params,
		moqReadCloser_Close_paramsKey,
		moqReadCloser_Close_results,
	]
}

// moqReadCloser_Close_anyParams isolates the any params functions of the
// ReadCloser type
type moqReadCloser_Close_anyParams struct {
	recorder *moqReadCloser_Close_recorder
}

// newMoqReadCloser creates a new moq of the ReadCloser type
func newMoqReadCloser(scene *moq.Scene, config *moq.Config) *moqReadCloser {
	adaptor1 := &moqReadCloser_Read_adaptor{}
	adaptor2 := &moqReadCloser_Close_adaptor{}
	m := &moqReadCloser{
		moq: &moqReadCloser_mock{},

		moq_Read: impl.NewMoq[
			*moqReadCloser_Read_adaptor,
			moqReadCloser_Read_params,
			moqReadCloser_Read_paramsKey,
			moqReadCloser_Read_results,
		](scene, adaptor1, config),
		moq_Close: impl.NewMoq[
			*moqReadCloser_Close_adaptor,
			moqReadCloser_Close_params,
			moqReadCloser_Close_paramsKey,
			moqReadCloser_Close_results,
		](scene, adaptor2, config),

		runtime: moqReadCloser_runtime{parameterIndexing: struct {
			Read  moqReadCloser_Read_paramIndexing
			Close moqReadCloser_Close_paramIndexing
		}{
			Read: moqReadCloser_Read_paramIndexing{
				p: moq.ParamIndexByHash,
			},
			Close: moqReadCloser_Close_paramIndexing{},
		}},
	}
	m.moq.moq = m

	adaptor1.moq = m
	adaptor2.moq = m

	scene.AddMoq(m)
	return m
}

// mock returns the mock implementation of the ReadCloser type
func (m *moqReadCloser) mock() *moqReadCloser_mock { return m.moq }

func (m *moqReadCloser_mock) Read(p []byte) (int, error) {
	m.moq.moq_Read.Scene.T.Helper()
	params := moqReadCloser_Read_params{
		p: p,
	}

	var result1 int
	var result2 error
	if result := m.moq.moq_Read.Function(params); result != nil {
		result1 = result.n
		result2 = result.err
	}
	return result1, result2
}

func (m *moqReadCloser_mock) Close() error {
	m.moq.moq_Close.Scene.T.Helper()
	params := moqReadCloser_Close_params{}

	var result1 error
	if result := m.moq.moq_Close.Function(params); result != nil {
		result1 = result.result1
	}
	return result1
}

// onCall returns the recorder implementation of the ReadCloser type
func (m *moqReadCloser) onCall() *moqReadCloser_recorder {
	return &moqReadCloser_recorder{
		moq: m,
	}
}

func (m *moqReadCloser_recorder) Read(p []byte) *moqReadCloser_Read_recorder {
	return &moqReadCloser_Read_recorder{
		recorder: m.moq.moq_Read.OnCall(moqReadCloser_Read_params{
			p: p,
		}),
	}
}

func (r *moqReadCloser_Read_recorder) any() *moqReadCloser_Read_anyParams {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.IsAnyPermitted(false) {
		return nil
	}
	return &moqReadCloser_Read_anyParams{recorder: r}
}

func (a *moqReadCloser_Read_anyParams) p() *moqReadCloser_Read_recorder {
	a.recorder.recorder.AnyParam(1)
	return a.recorder
}

func (r *moqReadCloser_Read_recorder) seq() *moqReadCloser_Read_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.Seq(true, "seq", false) {
		return nil
	}
	return r
}

func (r *moqReadCloser_Read_recorder) noSeq() *moqReadCloser_Read_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.Seq(false, "noSeq", false) {
		return nil
	}
	return r
}

func (r *moqReadCloser_Read_recorder) returnResults(n int, err error) *moqReadCloser_Read_recorder {
	r.recorder.Moq.Scene.T.Helper()
	r.recorder.ReturnResults(moqReadCloser_Read_results{
		n:   n,
		err: err,
	})
	return r
}

func (r *moqReadCloser_Read_recorder) andDo(fn moqReadCloser_Read_doFn) *moqReadCloser_Read_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.AndDo(func(params moqReadCloser_Read_params) {
		fn(params.p)
	}, false) {
		return nil
	}
	return r
}

func (r *moqReadCloser_Read_recorder) doReturnResults(fn moqReadCloser_Read_doReturnFn) *moqReadCloser_Read_recorder {
	r.recorder.Moq.Scene.T.Helper()
	r.recorder.DoReturnResults(func(params moqReadCloser_Read_params) *moqReadCloser_Read_results {
		n, err := fn(params.p)
		return &moqReadCloser_Read_results{
			n:   n,
			err: err,
		}
	})
	return r
}

func (r *moqReadCloser_Read_recorder) repeat(repeaters ...moq.Repeater) *moqReadCloser_Read_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.Repeat(repeaters, false) {
		return nil
	}
	return r
}

func (*moqReadCloser_Read_adaptor) PrettyParams(params moqReadCloser_Read_params) string {
	return fmt.Sprintf("Read(%#v)", params.p)
}

func (a *moqReadCloser_Read_adaptor) ParamsKey(params moqReadCloser_Read_params, anyParams uint64) moqReadCloser_Read_paramsKey {
	a.moq.moq_Read.Scene.T.Helper()
	pUsedHash := impl.HashOnlyParamKey(a.moq.moq_Read.Scene.T,
		params.p, "p", 1, a.moq.runtime.parameterIndexing.Read.p, anyParams)
	return moqReadCloser_Read_paramsKey{
		params: struct{}{},
		hashes: struct{ p hash.Hash }{
			p: pUsedHash,
		},
	}
}

func (m *moqReadCloser_recorder) Close() *moqReadCloser_Close_recorder {
	return &moqReadCloser_Close_recorder{
		recorder: m.moq.moq_Close.OnCall(moqReadCloser_Close_params{}),
	}
}

func (r *moqReadCloser_Close_recorder) any() *moqReadCloser_Close_anyParams {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.IsAnyPermitted(false) {
		return nil
	}
	return &moqReadCloser_Close_anyParams{recorder: r}
}

func (r *moqReadCloser_Close_recorder) seq() *moqReadCloser_Close_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.Seq(true, "seq", false) {
		return nil
	}
	return r
}

func (r *moqReadCloser_Close_recorder) noSeq() *moqReadCloser_Close_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.Seq(false, "noSeq", false) {
		return nil
	}
	return r
}

func (r *moqReadCloser_Close_recorder) returnResults(result1 error) *moqReadCloser_Close_recorder {
	r.recorder.Moq.Scene.T.Helper()
	r.recorder.ReturnResults(moqReadCloser_Close_results{
		result1: result1,
	})
	return r
}

func (r *moqReadCloser_Close_recorder) andDo(fn moqReadCloser_Close_doFn) *moqReadCloser_Close_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.AndDo(func(params moqReadCloser_Close_params) {
		fn()
	}, false) {
		return nil
	}
	return r
}

func (r *moqReadCloser_Close_recorder) doReturnResults(fn moqReadCloser_Close_doReturnFn) *moqReadCloser_Close_recorder {
	r.recorder.Moq.Scene.T.Helper()
	r.recorder.DoReturnResults(func(params moqReadCloser_Close_params) *moqReadCloser_Close_results {
		result1 := fn()
		return &moqReadCloser_Close_results{
			result1: result1,
		}
	})
	return r
}

func (r *moqReadCloser_Close_recorder) repeat(repeaters ...moq.Repeater) *moqReadCloser_Close_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.Repeat(repeaters, false) {
		return nil
	}
	return r
}

func (*moqReadCloser_Close_adaptor) PrettyParams(params moqReadCloser_Close_params) string {
	return fmt.Sprintf("Close()")
}

func (a *moqReadCloser_Close_adaptor) ParamsKey(params moqReadCloser_Close_params, anyParams uint64) moqReadCloser_Close_paramsKey {
	a.moq.moq_Close.Scene.T.Helper()
	return moqReadCloser_Close_paramsKey{
		params: struct{}{},
		hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *moqReadCloser) Reset() {
	m.moq_Read.Reset()
	m.moq_Close.Reset()
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *moqReadCloser) AssertExpectationsMet() {
	m.moq_Read.Scene.T.Helper()
	m.moq_Read.AssertExpectationsMet()
	m.moq_Close.AssertExpectationsMet()
}
