// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT.

package internal_test

import (
	"fmt"
	"io"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/impl"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that io.WriteCloser is mocked
// completely
var _ io.WriteCloser = (*moqWriteCloser_mock)(nil)

// moqWriteCloser holds the state of a moq of the WriteCloser type
type moqWriteCloser struct {
	moq *moqWriteCloser_mock

	moq_Write *impl.Moq[
		*moqWriteCloser_Write_adaptor,
		moqWriteCloser_Write_params,
		moqWriteCloser_Write_paramsKey,
		moqWriteCloser_Write_results,
	]
	moq_Close *impl.Moq[
		*moqWriteCloser_Close_adaptor,
		moqWriteCloser_Close_params,
		moqWriteCloser_Close_paramsKey,
		moqWriteCloser_Close_results,
	]

	runtime moqWriteCloser_runtime
}

// moqWriteCloser_mock isolates the mock interface of the WriteCloser type
type moqWriteCloser_mock struct {
	moq *moqWriteCloser
}

// moqWriteCloser_recorder isolates the recorder interface of the WriteCloser
// type
type moqWriteCloser_recorder struct {
	moq *moqWriteCloser
}

// moqWriteCloser_runtime holds runtime configuration for the WriteCloser type
type moqWriteCloser_runtime struct {
	parameterIndexing struct {
		Write moqWriteCloser_Write_paramIndexing
		Close moqWriteCloser_Close_paramIndexing
	}
}

// moqWriteCloser_Write_adaptor adapts moqWriteCloser as needed by the runtime
type moqWriteCloser_Write_adaptor struct {
	moq *moqWriteCloser
}

// moqWriteCloser_Write_params holds the params of the WriteCloser type
type moqWriteCloser_Write_params struct{ p []byte }

// moqWriteCloser_Write_paramsKey holds the map key params of the WriteCloser
// type
type moqWriteCloser_Write_paramsKey struct {
	params struct{}
	hashes struct{ p hash.Hash }
}

// moqWriteCloser_Write_results holds the results of the WriteCloser type
type moqWriteCloser_Write_results struct {
	n   int
	err error
}

// moqWriteCloser_Write_paramIndexing holds the parameter indexing runtime
// configuration for the WriteCloser type
type moqWriteCloser_Write_paramIndexing struct {
	p moq.ParamIndexing
}

// moqWriteCloser_Write_doFn defines the type of function needed when calling
// andDo for the WriteCloser type
type moqWriteCloser_Write_doFn func(p []byte)

// moqWriteCloser_Write_doReturnFn defines the type of function needed when
// calling doReturnResults for the WriteCloser type
type moqWriteCloser_Write_doReturnFn func(p []byte) (n int, err error)

// moqWriteCloser_Write_recorder routes recorded function calls to the
// moqWriteCloser moq
type moqWriteCloser_Write_recorder struct {
	recorder *impl.Recorder[
		*moqWriteCloser_Write_adaptor,
		moqWriteCloser_Write_params,
		moqWriteCloser_Write_paramsKey,
		moqWriteCloser_Write_results,
	]
}

// moqWriteCloser_Write_anyParams isolates the any params functions of the
// WriteCloser type
type moqWriteCloser_Write_anyParams struct {
	recorder *moqWriteCloser_Write_recorder
}

// moqWriteCloser_Close_adaptor adapts moqWriteCloser as needed by the runtime
type moqWriteCloser_Close_adaptor struct {
	moq *moqWriteCloser
}

// moqWriteCloser_Close_params holds the params of the WriteCloser type
type moqWriteCloser_Close_params struct{}

// moqWriteCloser_Close_paramsKey holds the map key params of the WriteCloser
// type
type moqWriteCloser_Close_paramsKey struct {
	params struct{}
	hashes struct{}
}

// moqWriteCloser_Close_results holds the results of the WriteCloser type
type moqWriteCloser_Close_results struct {
	result1 error
}

// moqWriteCloser_Close_paramIndexing holds the parameter indexing runtime
// configuration for the WriteCloser type
type moqWriteCloser_Close_paramIndexing struct{}

// moqWriteCloser_Close_doFn defines the type of function needed when calling
// andDo for the WriteCloser type
type moqWriteCloser_Close_doFn func()

// moqWriteCloser_Close_doReturnFn defines the type of function needed when
// calling doReturnResults for the WriteCloser type
type moqWriteCloser_Close_doReturnFn func() error

// moqWriteCloser_Close_recorder routes recorded function calls to the
// moqWriteCloser moq
type moqWriteCloser_Close_recorder struct {
	recorder *impl.Recorder[
		*moqWriteCloser_Close_adaptor,
		moqWriteCloser_Close_params,
		moqWriteCloser_Close_paramsKey,
		moqWriteCloser_Close_results,
	]
}

// moqWriteCloser_Close_anyParams isolates the any params functions of the
// WriteCloser type
type moqWriteCloser_Close_anyParams struct {
	recorder *moqWriteCloser_Close_recorder
}

// newMoqWriteCloser creates a new moq of the WriteCloser type
func newMoqWriteCloser(scene *moq.Scene, config *moq.Config) *moqWriteCloser {
	adaptor1 := &moqWriteCloser_Write_adaptor{}
	adaptor2 := &moqWriteCloser_Close_adaptor{}
	m := &moqWriteCloser{
		moq: &moqWriteCloser_mock{},

		moq_Write: impl.NewMoq[
			*moqWriteCloser_Write_adaptor,
			moqWriteCloser_Write_params,
			moqWriteCloser_Write_paramsKey,
			moqWriteCloser_Write_results,
		](scene, adaptor1, config),
		moq_Close: impl.NewMoq[
			*moqWriteCloser_Close_adaptor,
			moqWriteCloser_Close_params,
			moqWriteCloser_Close_paramsKey,
			moqWriteCloser_Close_results,
		](scene, adaptor2, config),

		runtime: moqWriteCloser_runtime{parameterIndexing: struct {
			Write moqWriteCloser_Write_paramIndexing
			Close moqWriteCloser_Close_paramIndexing
		}{
			Write: moqWriteCloser_Write_paramIndexing{
				p: moq.ParamIndexByHash,
			},
			Close: moqWriteCloser_Close_paramIndexing{},
		}},
	}
	m.moq.moq = m

	adaptor1.moq = m
	adaptor2.moq = m

	scene.AddMoq(m)
	return m
}

// mock returns the mock implementation of the WriteCloser type
func (m *moqWriteCloser) mock() *moqWriteCloser_mock { return m.moq }

func (m *moqWriteCloser_mock) Write(p []byte) (int, error) {
	m.moq.moq_Write.Scene.T.Helper()
	params := moqWriteCloser_Write_params{
		p: p,
	}

	var result1 int
	var result2 error
	if result := m.moq.moq_Write.Function(params); result != nil {
		result1 = result.n
		result2 = result.err
	}
	return result1, result2
}

func (m *moqWriteCloser_mock) Close() error {
	m.moq.moq_Close.Scene.T.Helper()
	params := moqWriteCloser_Close_params{}

	var result1 error
	if result := m.moq.moq_Close.Function(params); result != nil {
		result1 = result.result1
	}
	return result1
}

// onCall returns the recorder implementation of the WriteCloser type
func (m *moqWriteCloser) onCall() *moqWriteCloser_recorder {
	return &moqWriteCloser_recorder{
		moq: m,
	}
}

func (m *moqWriteCloser_recorder) Write(p []byte) *moqWriteCloser_Write_recorder {
	return &moqWriteCloser_Write_recorder{
		recorder: m.moq.moq_Write.OnCall(moqWriteCloser_Write_params{
			p: p,
		}),
	}
}

func (r *moqWriteCloser_Write_recorder) any() *moqWriteCloser_Write_anyParams {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.IsAnyPermitted(false) {
		return nil
	}
	return &moqWriteCloser_Write_anyParams{recorder: r}
}

func (a *moqWriteCloser_Write_anyParams) p() *moqWriteCloser_Write_recorder {
	a.recorder.recorder.AnyParam(1)
	return a.recorder
}

func (r *moqWriteCloser_Write_recorder) seq() *moqWriteCloser_Write_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.Seq(true, "seq", false) {
		return nil
	}
	return r
}

func (r *moqWriteCloser_Write_recorder) noSeq() *moqWriteCloser_Write_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.Seq(false, "noSeq", false) {
		return nil
	}
	return r
}

func (r *moqWriteCloser_Write_recorder) returnResults(n int, err error) *moqWriteCloser_Write_recorder {
	r.recorder.Moq.Scene.T.Helper()
	r.recorder.ReturnResults(moqWriteCloser_Write_results{
		n:   n,
		err: err,
	})
	return r
}

func (r *moqWriteCloser_Write_recorder) andDo(fn moqWriteCloser_Write_doFn) *moqWriteCloser_Write_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.AndDo(func(params moqWriteCloser_Write_params) {
		fn(params.p)
	}, false) {
		return nil
	}
	return r
}

func (r *moqWriteCloser_Write_recorder) doReturnResults(fn moqWriteCloser_Write_doReturnFn) *moqWriteCloser_Write_recorder {
	r.recorder.Moq.Scene.T.Helper()
	r.recorder.DoReturnResults(func(params moqWriteCloser_Write_params) *moqWriteCloser_Write_results {
		n, err := fn(params.p)
		return &moqWriteCloser_Write_results{
			n:   n,
			err: err,
		}
	})
	return r
}

func (r *moqWriteCloser_Write_recorder) repeat(repeaters ...moq.Repeater) *moqWriteCloser_Write_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.Repeat(repeaters, false) {
		return nil
	}
	return r
}

func (*moqWriteCloser_Write_adaptor) PrettyParams(params moqWriteCloser_Write_params) string {
	return fmt.Sprintf("Write(%#v)", params.p)
}

func (a *moqWriteCloser_Write_adaptor) ParamsKey(params moqWriteCloser_Write_params, anyParams uint64) moqWriteCloser_Write_paramsKey {
	a.moq.moq_Write.Scene.T.Helper()
	pUsedHash := impl.HashOnlyParamKey(a.moq.moq_Write.Scene.T,
		params.p, "p", 1, a.moq.runtime.parameterIndexing.Write.p, anyParams)
	return moqWriteCloser_Write_paramsKey{
		params: struct{}{},
		hashes: struct{ p hash.Hash }{
			p: pUsedHash,
		},
	}
}

func (m *moqWriteCloser_recorder) Close() *moqWriteCloser_Close_recorder {
	return &moqWriteCloser_Close_recorder{
		recorder: m.moq.moq_Close.OnCall(moqWriteCloser_Close_params{}),
	}
}

func (r *moqWriteCloser_Close_recorder) any() *moqWriteCloser_Close_anyParams {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.IsAnyPermitted(false) {
		return nil
	}
	return &moqWriteCloser_Close_anyParams{recorder: r}
}

func (r *moqWriteCloser_Close_recorder) seq() *moqWriteCloser_Close_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.Seq(true, "seq", false) {
		return nil
	}
	return r
}

func (r *moqWriteCloser_Close_recorder) noSeq() *moqWriteCloser_Close_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.Seq(false, "noSeq", false) {
		return nil
	}
	return r
}

func (r *moqWriteCloser_Close_recorder) returnResults(result1 error) *moqWriteCloser_Close_recorder {
	r.recorder.Moq.Scene.T.Helper()
	r.recorder.ReturnResults(moqWriteCloser_Close_results{
		result1: result1,
	})
	return r
}

func (r *moqWriteCloser_Close_recorder) andDo(fn moqWriteCloser_Close_doFn) *moqWriteCloser_Close_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.AndDo(func(params moqWriteCloser_Close_params) {
		fn()
	}, false) {
		return nil
	}
	return r
}

func (r *moqWriteCloser_Close_recorder) doReturnResults(fn moqWriteCloser_Close_doReturnFn) *moqWriteCloser_Close_recorder {
	r.recorder.Moq.Scene.T.Helper()
	r.recorder.DoReturnResults(func(params moqWriteCloser_Close_params) *moqWriteCloser_Close_results {
		result1 := fn()
		return &moqWriteCloser_Close_results{
			result1: result1,
		}
	})
	return r
}

func (r *moqWriteCloser_Close_recorder) repeat(repeaters ...moq.Repeater) *moqWriteCloser_Close_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.Repeat(repeaters, false) {
		return nil
	}
	return r
}

func (*moqWriteCloser_Close_adaptor) PrettyParams(params moqWriteCloser_Close_params) string {
	return fmt.Sprintf("Close()")
}

func (a *moqWriteCloser_Close_adaptor) ParamsKey(params moqWriteCloser_Close_params, anyParams uint64) moqWriteCloser_Close_paramsKey {
	a.moq.moq_Close.Scene.T.Helper()
	return moqWriteCloser_Close_paramsKey{
		params: struct{}{},
		hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *moqWriteCloser) Reset() {
	m.moq_Write.Reset()
	m.moq_Close.Reset()
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *moqWriteCloser) AssertExpectationsMet() {
	m.moq_Write.Scene.T.Helper()
	m.moq_Write.AssertExpectationsMet()
	m.moq_Close.AssertExpectationsMet()
}
