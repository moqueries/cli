// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT.

package internal_test

import (
	"fmt"
	"io"

	"moqueries.org/cli/bulk/internal"
	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/impl"
	"moqueries.org/runtime/moq"
)

// moqOpenFn holds the state of a moq of the OpenFn type
type moqOpenFn struct {
	moq *impl.Moq[
		*moqOpenFn_adaptor,
		moqOpenFn_params,
		moqOpenFn_paramsKey,
		moqOpenFn_results,
	]

	runtime moqOpenFn_runtime
}

// moqOpenFn_runtime holds runtime configuration for the OpenFn type
type moqOpenFn_runtime struct {
	parameterIndexing moqOpenFn_paramIndexing
}

// moqOpenFn_adaptor adapts moqOpenFn as needed by the runtime
type moqOpenFn_adaptor struct {
	moq *moqOpenFn
}

// moqOpenFn_params holds the params of the OpenFn type
type moqOpenFn_params struct{ name string }

// moqOpenFn_paramsKey holds the map key params of the OpenFn type
type moqOpenFn_paramsKey struct {
	params struct{ name string }
	hashes struct{ name hash.Hash }
}

// moqOpenFn_results holds the results of the OpenFn type
type moqOpenFn_results struct {
	file io.ReadCloser
	err  error
}

// moqOpenFn_paramIndexing holds the parameter indexing runtime configuration
// for the OpenFn type
type moqOpenFn_paramIndexing struct {
	name moq.ParamIndexing
}

// moqOpenFn_doFn defines the type of function needed when calling andDo for
// the OpenFn type
type moqOpenFn_doFn func(name string)

// moqOpenFn_doReturnFn defines the type of function needed when calling
// doReturnResults for the OpenFn type
type moqOpenFn_doReturnFn func(name string) (file io.ReadCloser, err error)

// moqOpenFn_recorder routes recorded function calls to the moqOpenFn moq
type moqOpenFn_recorder struct {
	recorder *impl.Recorder[
		*moqOpenFn_adaptor,
		moqOpenFn_params,
		moqOpenFn_paramsKey,
		moqOpenFn_results,
	]
}

// moqOpenFn_anyParams isolates the any params functions of the OpenFn type
type moqOpenFn_anyParams struct {
	recorder *moqOpenFn_recorder
}

// newMoqOpenFn creates a new moq of the OpenFn type
func newMoqOpenFn(scene *moq.Scene, config *moq.Config) *moqOpenFn {
	adaptor1 := &moqOpenFn_adaptor{}
	m := &moqOpenFn{
		moq: impl.NewMoq[
			*moqOpenFn_adaptor,
			moqOpenFn_params,
			moqOpenFn_paramsKey,
			moqOpenFn_results,
		](scene, adaptor1, config),

		runtime: moqOpenFn_runtime{parameterIndexing: moqOpenFn_paramIndexing{
			name: moq.ParamIndexByValue,
		}},
	}
	adaptor1.moq = m

	scene.AddMoq(m)
	return m
}

// mock returns the moq implementation of the OpenFn type
func (m *moqOpenFn) mock() internal.OpenFn {
	return func(name string) (io.ReadCloser, error) {
		m.moq.Scene.T.Helper()
		params := moqOpenFn_params{
			name: name,
		}

		var result1 io.ReadCloser
		var result2 error
		if result := m.moq.Function(params); result != nil {
			result1 = result.file
			result2 = result.err
		}
		return result1, result2
	}
}

func (m *moqOpenFn) onCall(name string) *moqOpenFn_recorder {
	return &moqOpenFn_recorder{
		recorder: m.moq.OnCall(moqOpenFn_params{
			name: name,
		}),
	}
}

func (r *moqOpenFn_recorder) any() *moqOpenFn_anyParams {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.IsAnyPermitted(false) {
		return nil
	}
	return &moqOpenFn_anyParams{recorder: r}
}

func (a *moqOpenFn_anyParams) name() *moqOpenFn_recorder {
	a.recorder.recorder.AnyParam(1)
	return a.recorder
}

func (r *moqOpenFn_recorder) seq() *moqOpenFn_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.Seq(true, "seq", false) {
		return nil
	}
	return r
}

func (r *moqOpenFn_recorder) noSeq() *moqOpenFn_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.Seq(false, "noSeq", false) {
		return nil
	}
	return r
}

func (r *moqOpenFn_recorder) returnResults(file io.ReadCloser, err error) *moqOpenFn_recorder {
	r.recorder.Moq.Scene.T.Helper()
	r.recorder.ReturnResults(moqOpenFn_results{
		file: file,
		err:  err,
	})
	return r
}

func (r *moqOpenFn_recorder) andDo(fn moqOpenFn_doFn) *moqOpenFn_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.AndDo(func(params moqOpenFn_params) {
		fn(params.name)
	}, false) {
		return nil
	}
	return r
}

func (r *moqOpenFn_recorder) doReturnResults(fn moqOpenFn_doReturnFn) *moqOpenFn_recorder {
	r.recorder.Moq.Scene.T.Helper()
	r.recorder.DoReturnResults(func(params moqOpenFn_params) *moqOpenFn_results {
		file, err := fn(params.name)
		return &moqOpenFn_results{
			file: file,
			err:  err,
		}
	})
	return r
}

func (r *moqOpenFn_recorder) repeat(repeaters ...moq.Repeater) *moqOpenFn_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.Repeat(repeaters, false) {
		return nil
	}
	return r
}

func (*moqOpenFn_adaptor) PrettyParams(params moqOpenFn_params) string {
	return fmt.Sprintf("OpenFn(%#v)", params.name)
}

func (a *moqOpenFn_adaptor) ParamsKey(params moqOpenFn_params, anyParams uint64) moqOpenFn_paramsKey {
	a.moq.moq.Scene.T.Helper()
	nameUsed, nameUsedHash := impl.ParamKey(
		params.name, 1, a.moq.runtime.parameterIndexing.name, anyParams)
	return moqOpenFn_paramsKey{
		params: struct{ name string }{
			name: nameUsed,
		},
		hashes: struct{ name hash.Hash }{
			name: nameUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *moqOpenFn) Reset() {
	m.moq.Reset()
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *moqOpenFn) AssertExpectationsMet() {
	m.moq.Scene.T.Helper()
	m.moq.AssertExpectationsMet()
}
