// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT.

package internal_test

import (
	"fmt"

	"moqueries.org/cli/bulk/internal"
	"moqueries.org/cli/generator"
	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/impl"
	"moqueries.org/runtime/moq"
)

// moqGenerateFn holds the state of a moq of the GenerateFn type
type moqGenerateFn struct {
	moq *impl.Moq[
		*moqGenerateFn_adaptor,
		moqGenerateFn_params,
		moqGenerateFn_paramsKey,
		moqGenerateFn_results,
	]

	runtime moqGenerateFn_runtime
}

// moqGenerateFn_runtime holds runtime configuration for the GenerateFn type
type moqGenerateFn_runtime struct {
	parameterIndexing moqGenerateFn_paramIndexing
}

// moqGenerateFn_adaptor adapts moqGenerateFn as needed by the runtime
type moqGenerateFn_adaptor struct {
	moq *moqGenerateFn
}

// moqGenerateFn_params holds the params of the GenerateFn type
type moqGenerateFn_params struct{ reqs []generator.GenerateRequest }

// moqGenerateFn_paramsKey holds the map key params of the GenerateFn type
type moqGenerateFn_paramsKey struct {
	params struct{}
	hashes struct{ reqs hash.Hash }
}

// moqGenerateFn_results holds the results of the GenerateFn type
type moqGenerateFn_results struct {
	result1 error
}

// moqGenerateFn_paramIndexing holds the parameter indexing runtime
// configuration for the GenerateFn type
type moqGenerateFn_paramIndexing struct {
	reqs moq.ParamIndexing
}

// moqGenerateFn_doFn defines the type of function needed when calling andDo
// for the GenerateFn type
type moqGenerateFn_doFn func(reqs ...generator.GenerateRequest)

// moqGenerateFn_doReturnFn defines the type of function needed when calling
// doReturnResults for the GenerateFn type
type moqGenerateFn_doReturnFn func(reqs ...generator.GenerateRequest) error

// moqGenerateFn_recorder routes recorded function calls to the moqGenerateFn
// moq
type moqGenerateFn_recorder struct {
	recorder *impl.Recorder[
		*moqGenerateFn_adaptor,
		moqGenerateFn_params,
		moqGenerateFn_paramsKey,
		moqGenerateFn_results,
	]
}

// moqGenerateFn_anyParams isolates the any params functions of the GenerateFn
// type
type moqGenerateFn_anyParams struct {
	recorder *moqGenerateFn_recorder
}

// newMoqGenerateFn creates a new moq of the GenerateFn type
func newMoqGenerateFn(scene *moq.Scene, config *moq.Config) *moqGenerateFn {
	adaptor1 := &moqGenerateFn_adaptor{}
	m := &moqGenerateFn{
		moq: impl.NewMoq[
			*moqGenerateFn_adaptor,
			moqGenerateFn_params,
			moqGenerateFn_paramsKey,
			moqGenerateFn_results,
		](scene, adaptor1, config),

		runtime: moqGenerateFn_runtime{parameterIndexing: moqGenerateFn_paramIndexing{
			reqs: moq.ParamIndexByHash,
		}},
	}
	adaptor1.moq = m

	scene.AddMoq(m)
	return m
}

// mock returns the moq implementation of the GenerateFn type
func (m *moqGenerateFn) mock() internal.GenerateFn {
	return func(reqs ...generator.GenerateRequest) error {
		m.moq.Scene.T.Helper()
		params := moqGenerateFn_params{
			reqs: reqs,
		}

		var result1 error
		if result := m.moq.Function(params); result != nil {
			result1 = result.result1
		}
		return result1
	}
}

func (m *moqGenerateFn) onCall(reqs ...generator.GenerateRequest) *moqGenerateFn_recorder {
	return &moqGenerateFn_recorder{
		recorder: m.moq.OnCall(moqGenerateFn_params{
			reqs: reqs,
		}),
	}
}

func (r *moqGenerateFn_recorder) any() *moqGenerateFn_anyParams {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.IsAnyPermitted(false) {
		return nil
	}
	return &moqGenerateFn_anyParams{recorder: r}
}

func (a *moqGenerateFn_anyParams) reqs() *moqGenerateFn_recorder {
	a.recorder.recorder.AnyParam(1)
	return a.recorder
}

func (r *moqGenerateFn_recorder) seq() *moqGenerateFn_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.Seq(true, "seq", false) {
		return nil
	}
	return r
}

func (r *moqGenerateFn_recorder) noSeq() *moqGenerateFn_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.Seq(false, "noSeq", false) {
		return nil
	}
	return r
}

func (r *moqGenerateFn_recorder) returnResults(result1 error) *moqGenerateFn_recorder {
	r.recorder.Moq.Scene.T.Helper()
	r.recorder.ReturnResults(moqGenerateFn_results{
		result1: result1,
	})
	return r
}

func (r *moqGenerateFn_recorder) andDo(fn moqGenerateFn_doFn) *moqGenerateFn_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.AndDo(func(params moqGenerateFn_params) {
		fn(params.reqs...)
	}, false) {
		return nil
	}
	return r
}

func (r *moqGenerateFn_recorder) doReturnResults(fn moqGenerateFn_doReturnFn) *moqGenerateFn_recorder {
	r.recorder.Moq.Scene.T.Helper()
	r.recorder.DoReturnResults(func(params moqGenerateFn_params) *moqGenerateFn_results {
		result1 := fn(params.reqs...)
		return &moqGenerateFn_results{
			result1: result1,
		}
	})
	return r
}

func (r *moqGenerateFn_recorder) repeat(repeaters ...moq.Repeater) *moqGenerateFn_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.Repeat(repeaters, false) {
		return nil
	}
	return r
}

func (*moqGenerateFn_adaptor) PrettyParams(params moqGenerateFn_params) string {
	return fmt.Sprintf("GenerateFn(%#v)", params.reqs)
}

func (a *moqGenerateFn_adaptor) ParamsKey(params moqGenerateFn_params, anyParams uint64) moqGenerateFn_paramsKey {
	a.moq.moq.Scene.T.Helper()
	reqsUsedHash := impl.HashOnlyParamKey(a.moq.moq.Scene.T,
		params.reqs, "reqs", 1, a.moq.runtime.parameterIndexing.reqs, anyParams)
	return moqGenerateFn_paramsKey{
		params: struct{}{},
		hashes: struct{ reqs hash.Hash }{
			reqs: reqsUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *moqGenerateFn) Reset() {
	m.moq.Reset()
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *moqGenerateFn) AssertExpectationsMet() {
	m.moq.Scene.T.Helper()
	m.moq.AssertExpectationsMet()
}
