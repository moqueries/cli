// Code generated by Moqueries - https://github.com/myshkin5/moqueries - DO NOT EDIT!

package internal_test

import (
	"fmt"
	"math/bits"
	"sync/atomic"

	"github.com/myshkin5/moqueries/hash"
	"github.com/myshkin5/moqueries/moq"
)

// moqReadWriteSeekCloser holds the state of a moq of the ReadWriteSeekCloser type
type moqReadWriteSeekCloser struct {
	scene  *moq.Scene
	config moq.Config
	moq    *moqReadWriteSeekCloser_mock

	resultsByParams_Read  []moqReadWriteSeekCloser_Read_resultsByParams
	resultsByParams_Write []moqReadWriteSeekCloser_Write_resultsByParams
	resultsByParams_Seek  []moqReadWriteSeekCloser_Seek_resultsByParams
	resultsByParams_Close []moqReadWriteSeekCloser_Close_resultsByParams

	runtime struct {
		parameterIndexing struct {
			Read struct {
				p moq.ParamIndexing
			}
			Write struct {
				p moq.ParamIndexing
			}
			Seek struct {
				offset moq.ParamIndexing
				whence moq.ParamIndexing
			}
			Close struct{}
		}
	}
}

// moqReadWriteSeekCloser_mock isolates the mock interface of the ReadWriteSeekCloser type
type moqReadWriteSeekCloser_mock struct {
	moq *moqReadWriteSeekCloser
}

// moqReadWriteSeekCloser_recorder isolates the recorder interface of the ReadWriteSeekCloser type
type moqReadWriteSeekCloser_recorder struct {
	moq *moqReadWriteSeekCloser
}

// moqReadWriteSeekCloser_Read_params holds the params of the ReadWriteSeekCloser type
type moqReadWriteSeekCloser_Read_params struct{ p []byte }

// moqReadWriteSeekCloser_Read_paramsKey holds the map key params of the ReadWriteSeekCloser type
type moqReadWriteSeekCloser_Read_paramsKey struct {
	params struct{}
	hashes struct{ p hash.Hash }
}

// moqReadWriteSeekCloser_Read_resultsByParams contains the results for a given set of parameters for the ReadWriteSeekCloser type
type moqReadWriteSeekCloser_Read_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqReadWriteSeekCloser_Read_paramsKey]*moqReadWriteSeekCloser_Read_results
}

// moqReadWriteSeekCloser_Read_doFn defines the type of function needed when calling andDo for the ReadWriteSeekCloser type
type moqReadWriteSeekCloser_Read_doFn func(p []byte)

// moqReadWriteSeekCloser_Read_doReturnFn defines the type of function needed when calling doReturnResults for the ReadWriteSeekCloser type
type moqReadWriteSeekCloser_Read_doReturnFn func(p []byte) (n int, err error)

// moqReadWriteSeekCloser_Read_results holds the results of the ReadWriteSeekCloser type
type moqReadWriteSeekCloser_Read_results struct {
	params  moqReadWriteSeekCloser_Read_params
	results []struct {
		values *struct {
			n   int
			err error
		}
		sequence   uint32
		doFn       moqReadWriteSeekCloser_Read_doFn
		doReturnFn moqReadWriteSeekCloser_Read_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqReadWriteSeekCloser_Read_fnRecorder routes recorded function calls to the moqReadWriteSeekCloser moq
type moqReadWriteSeekCloser_Read_fnRecorder struct {
	params    moqReadWriteSeekCloser_Read_params
	anyParams uint64
	sequence  bool
	results   *moqReadWriteSeekCloser_Read_results
	moq       *moqReadWriteSeekCloser
}

// moqReadWriteSeekCloser_Read_anyParams isolates the any params functions of the ReadWriteSeekCloser type
type moqReadWriteSeekCloser_Read_anyParams struct {
	recorder *moqReadWriteSeekCloser_Read_fnRecorder
}

// moqReadWriteSeekCloser_Write_params holds the params of the ReadWriteSeekCloser type
type moqReadWriteSeekCloser_Write_params struct{ p []byte }

// moqReadWriteSeekCloser_Write_paramsKey holds the map key params of the ReadWriteSeekCloser type
type moqReadWriteSeekCloser_Write_paramsKey struct {
	params struct{}
	hashes struct{ p hash.Hash }
}

// moqReadWriteSeekCloser_Write_resultsByParams contains the results for a given set of parameters for the ReadWriteSeekCloser type
type moqReadWriteSeekCloser_Write_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqReadWriteSeekCloser_Write_paramsKey]*moqReadWriteSeekCloser_Write_results
}

// moqReadWriteSeekCloser_Write_doFn defines the type of function needed when calling andDo for the ReadWriteSeekCloser type
type moqReadWriteSeekCloser_Write_doFn func(p []byte)

// moqReadWriteSeekCloser_Write_doReturnFn defines the type of function needed when calling doReturnResults for the ReadWriteSeekCloser type
type moqReadWriteSeekCloser_Write_doReturnFn func(p []byte) (n int, err error)

// moqReadWriteSeekCloser_Write_results holds the results of the ReadWriteSeekCloser type
type moqReadWriteSeekCloser_Write_results struct {
	params  moqReadWriteSeekCloser_Write_params
	results []struct {
		values *struct {
			n   int
			err error
		}
		sequence   uint32
		doFn       moqReadWriteSeekCloser_Write_doFn
		doReturnFn moqReadWriteSeekCloser_Write_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqReadWriteSeekCloser_Write_fnRecorder routes recorded function calls to the moqReadWriteSeekCloser moq
type moqReadWriteSeekCloser_Write_fnRecorder struct {
	params    moqReadWriteSeekCloser_Write_params
	anyParams uint64
	sequence  bool
	results   *moqReadWriteSeekCloser_Write_results
	moq       *moqReadWriteSeekCloser
}

// moqReadWriteSeekCloser_Write_anyParams isolates the any params functions of the ReadWriteSeekCloser type
type moqReadWriteSeekCloser_Write_anyParams struct {
	recorder *moqReadWriteSeekCloser_Write_fnRecorder
}

// moqReadWriteSeekCloser_Seek_params holds the params of the ReadWriteSeekCloser type
type moqReadWriteSeekCloser_Seek_params struct {
	offset int64
	whence int
}

// moqReadWriteSeekCloser_Seek_paramsKey holds the map key params of the ReadWriteSeekCloser type
type moqReadWriteSeekCloser_Seek_paramsKey struct {
	params struct {
		offset int64
		whence int
	}
	hashes struct {
		offset hash.Hash
		whence hash.Hash
	}
}

// moqReadWriteSeekCloser_Seek_resultsByParams contains the results for a given set of parameters for the ReadWriteSeekCloser type
type moqReadWriteSeekCloser_Seek_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqReadWriteSeekCloser_Seek_paramsKey]*moqReadWriteSeekCloser_Seek_results
}

// moqReadWriteSeekCloser_Seek_doFn defines the type of function needed when calling andDo for the ReadWriteSeekCloser type
type moqReadWriteSeekCloser_Seek_doFn func(offset int64, whence int)

// moqReadWriteSeekCloser_Seek_doReturnFn defines the type of function needed when calling doReturnResults for the ReadWriteSeekCloser type
type moqReadWriteSeekCloser_Seek_doReturnFn func(offset int64, whence int) (int64, error)

// moqReadWriteSeekCloser_Seek_results holds the results of the ReadWriteSeekCloser type
type moqReadWriteSeekCloser_Seek_results struct {
	params  moqReadWriteSeekCloser_Seek_params
	results []struct {
		values *struct {
			result1 int64
			result2 error
		}
		sequence   uint32
		doFn       moqReadWriteSeekCloser_Seek_doFn
		doReturnFn moqReadWriteSeekCloser_Seek_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqReadWriteSeekCloser_Seek_fnRecorder routes recorded function calls to the moqReadWriteSeekCloser moq
type moqReadWriteSeekCloser_Seek_fnRecorder struct {
	params    moqReadWriteSeekCloser_Seek_params
	anyParams uint64
	sequence  bool
	results   *moqReadWriteSeekCloser_Seek_results
	moq       *moqReadWriteSeekCloser
}

// moqReadWriteSeekCloser_Seek_anyParams isolates the any params functions of the ReadWriteSeekCloser type
type moqReadWriteSeekCloser_Seek_anyParams struct {
	recorder *moqReadWriteSeekCloser_Seek_fnRecorder
}

// moqReadWriteSeekCloser_Close_params holds the params of the ReadWriteSeekCloser type
type moqReadWriteSeekCloser_Close_params struct{}

// moqReadWriteSeekCloser_Close_paramsKey holds the map key params of the ReadWriteSeekCloser type
type moqReadWriteSeekCloser_Close_paramsKey struct {
	params struct{}
	hashes struct{}
}

// moqReadWriteSeekCloser_Close_resultsByParams contains the results for a given set of parameters for the ReadWriteSeekCloser type
type moqReadWriteSeekCloser_Close_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqReadWriteSeekCloser_Close_paramsKey]*moqReadWriteSeekCloser_Close_results
}

// moqReadWriteSeekCloser_Close_doFn defines the type of function needed when calling andDo for the ReadWriteSeekCloser type
type moqReadWriteSeekCloser_Close_doFn func()

// moqReadWriteSeekCloser_Close_doReturnFn defines the type of function needed when calling doReturnResults for the ReadWriteSeekCloser type
type moqReadWriteSeekCloser_Close_doReturnFn func() error

// moqReadWriteSeekCloser_Close_results holds the results of the ReadWriteSeekCloser type
type moqReadWriteSeekCloser_Close_results struct {
	params  moqReadWriteSeekCloser_Close_params
	results []struct {
		values *struct {
			result1 error
		}
		sequence   uint32
		doFn       moqReadWriteSeekCloser_Close_doFn
		doReturnFn moqReadWriteSeekCloser_Close_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqReadWriteSeekCloser_Close_fnRecorder routes recorded function calls to the moqReadWriteSeekCloser moq
type moqReadWriteSeekCloser_Close_fnRecorder struct {
	params    moqReadWriteSeekCloser_Close_params
	anyParams uint64
	sequence  bool
	results   *moqReadWriteSeekCloser_Close_results
	moq       *moqReadWriteSeekCloser
}

// moqReadWriteSeekCloser_Close_anyParams isolates the any params functions of the ReadWriteSeekCloser type
type moqReadWriteSeekCloser_Close_anyParams struct {
	recorder *moqReadWriteSeekCloser_Close_fnRecorder
}

// newMoqReadWriteSeekCloser creates a new moq of the ReadWriteSeekCloser type
func newMoqReadWriteSeekCloser(scene *moq.Scene, config *moq.Config) *moqReadWriteSeekCloser {
	if config == nil {
		config = &moq.Config{}
	}
	m := &moqReadWriteSeekCloser{
		scene:  scene,
		config: *config,
		moq:    &moqReadWriteSeekCloser_mock{},

		runtime: struct {
			parameterIndexing struct {
				Read struct {
					p moq.ParamIndexing
				}
				Write struct {
					p moq.ParamIndexing
				}
				Seek struct {
					offset moq.ParamIndexing
					whence moq.ParamIndexing
				}
				Close struct{}
			}
		}{parameterIndexing: struct {
			Read struct {
				p moq.ParamIndexing
			}
			Write struct {
				p moq.ParamIndexing
			}
			Seek struct {
				offset moq.ParamIndexing
				whence moq.ParamIndexing
			}
			Close struct{}
		}{
			Read: struct {
				p moq.ParamIndexing
			}{
				p: moq.ParamIndexByHash,
			},
			Write: struct {
				p moq.ParamIndexing
			}{
				p: moq.ParamIndexByHash,
			},
			Seek: struct {
				offset moq.ParamIndexing
				whence moq.ParamIndexing
			}{
				offset: moq.ParamIndexByValue,
				whence: moq.ParamIndexByValue,
			},
			Close: struct{}{},
		}},
	}
	m.moq.moq = m

	scene.AddMoq(m)
	return m
}

// mock returns the mock implementation of the ReadWriteSeekCloser type
func (m *moqReadWriteSeekCloser) mock() *moqReadWriteSeekCloser_mock { return m.moq }

func (m *moqReadWriteSeekCloser_mock) Read(p []byte) (n int, err error) {
	m.moq.scene.T.Helper()
	params := moqReadWriteSeekCloser_Read_params{
		p: p,
	}
	var results *moqReadWriteSeekCloser_Read_results
	for _, resultsByParams := range m.moq.resultsByParams_Read {
		paramsKey := m.moq.paramsKey_Read(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call to %s", m.moq.prettyParams_Read(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to %s", m.moq.prettyParams_Read(params))
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match call to %s", m.moq.prettyParams_Read(params))
		}
	}

	if result.doFn != nil {
		result.doFn(p)
	}

	if result.values != nil {
		n = result.values.n
		err = result.values.err
	}
	if result.doReturnFn != nil {
		n, err = result.doReturnFn(p)
	}
	return
}

func (m *moqReadWriteSeekCloser_mock) Write(p []byte) (n int, err error) {
	m.moq.scene.T.Helper()
	params := moqReadWriteSeekCloser_Write_params{
		p: p,
	}
	var results *moqReadWriteSeekCloser_Write_results
	for _, resultsByParams := range m.moq.resultsByParams_Write {
		paramsKey := m.moq.paramsKey_Write(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call to %s", m.moq.prettyParams_Write(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to %s", m.moq.prettyParams_Write(params))
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match call to %s", m.moq.prettyParams_Write(params))
		}
	}

	if result.doFn != nil {
		result.doFn(p)
	}

	if result.values != nil {
		n = result.values.n
		err = result.values.err
	}
	if result.doReturnFn != nil {
		n, err = result.doReturnFn(p)
	}
	return
}

func (m *moqReadWriteSeekCloser_mock) Seek(offset int64, whence int) (result1 int64, result2 error) {
	m.moq.scene.T.Helper()
	params := moqReadWriteSeekCloser_Seek_params{
		offset: offset,
		whence: whence,
	}
	var results *moqReadWriteSeekCloser_Seek_results
	for _, resultsByParams := range m.moq.resultsByParams_Seek {
		paramsKey := m.moq.paramsKey_Seek(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call to %s", m.moq.prettyParams_Seek(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to %s", m.moq.prettyParams_Seek(params))
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match call to %s", m.moq.prettyParams_Seek(params))
		}
	}

	if result.doFn != nil {
		result.doFn(offset, whence)
	}

	if result.values != nil {
		result1 = result.values.result1
		result2 = result.values.result2
	}
	if result.doReturnFn != nil {
		result1, result2 = result.doReturnFn(offset, whence)
	}
	return
}

func (m *moqReadWriteSeekCloser_mock) Close() (result1 error) {
	m.moq.scene.T.Helper()
	params := moqReadWriteSeekCloser_Close_params{}
	var results *moqReadWriteSeekCloser_Close_results
	for _, resultsByParams := range m.moq.resultsByParams_Close {
		paramsKey := m.moq.paramsKey_Close(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call to %s", m.moq.prettyParams_Close(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to %s", m.moq.prettyParams_Close(params))
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match call to %s", m.moq.prettyParams_Close(params))
		}
	}

	if result.doFn != nil {
		result.doFn()
	}

	if result.values != nil {
		result1 = result.values.result1
	}
	if result.doReturnFn != nil {
		result1 = result.doReturnFn()
	}
	return
}

// onCall returns the recorder implementation of the ReadWriteSeekCloser type
func (m *moqReadWriteSeekCloser) onCall() *moqReadWriteSeekCloser_recorder {
	return &moqReadWriteSeekCloser_recorder{
		moq: m,
	}
}

func (m *moqReadWriteSeekCloser_recorder) Read(p []byte) *moqReadWriteSeekCloser_Read_fnRecorder {
	return &moqReadWriteSeekCloser_Read_fnRecorder{
		params: moqReadWriteSeekCloser_Read_params{
			p: p,
		},
		sequence: m.moq.config.Sequence == moq.SeqDefaultOn,
		moq:      m.moq,
	}
}

func (r *moqReadWriteSeekCloser_Read_fnRecorder) any() *moqReadWriteSeekCloser_Read_anyParams {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_Read(r.params))
		return nil
	}
	return &moqReadWriteSeekCloser_Read_anyParams{recorder: r}
}

func (a *moqReadWriteSeekCloser_Read_anyParams) p() *moqReadWriteSeekCloser_Read_fnRecorder {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (r *moqReadWriteSeekCloser_Read_fnRecorder) seq() *moqReadWriteSeekCloser_Read_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_Read(r.params))
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqReadWriteSeekCloser_Read_fnRecorder) noSeq() *moqReadWriteSeekCloser_Read_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_Read(r.params))
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqReadWriteSeekCloser_Read_fnRecorder) returnResults(n int, err error) *moqReadWriteSeekCloser_Read_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			n   int
			err error
		}
		sequence   uint32
		doFn       moqReadWriteSeekCloser_Read_doFn
		doReturnFn moqReadWriteSeekCloser_Read_doReturnFn
	}{
		values: &struct {
			n   int
			err error
		}{
			n:   n,
			err: err,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqReadWriteSeekCloser_Read_fnRecorder) andDo(fn moqReadWriteSeekCloser_Read_doFn) *moqReadWriteSeekCloser_Read_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqReadWriteSeekCloser_Read_fnRecorder) doReturnResults(fn moqReadWriteSeekCloser_Read_doReturnFn) *moqReadWriteSeekCloser_Read_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			n   int
			err error
		}
		sequence   uint32
		doFn       moqReadWriteSeekCloser_Read_doFn
		doReturnFn moqReadWriteSeekCloser_Read_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqReadWriteSeekCloser_Read_fnRecorder) findResults() {
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqReadWriteSeekCloser_Read_resultsByParams
	for n, res := range r.moq.resultsByParams_Read {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqReadWriteSeekCloser_Read_resultsByParams{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqReadWriteSeekCloser_Read_paramsKey]*moqReadWriteSeekCloser_Read_results{},
		}
		r.moq.resultsByParams_Read = append(r.moq.resultsByParams_Read, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams_Read) {
			copy(r.moq.resultsByParams_Read[insertAt+1:], r.moq.resultsByParams_Read[insertAt:0])
			r.moq.resultsByParams_Read[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey_Read(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqReadWriteSeekCloser_Read_results{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqReadWriteSeekCloser_Read_fnRecorder) repeat(repeaters ...moq.Repeater) *moqReadWriteSeekCloser_Read_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values *struct {
					n   int
					err error
				}
				sequence   uint32
				doFn       moqReadWriteSeekCloser_Read_doFn
				doReturnFn moqReadWriteSeekCloser_Read_doReturnFn
			}{
				values:   last.values,
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqReadWriteSeekCloser) prettyParams_Read(params moqReadWriteSeekCloser_Read_params) string {
	return fmt.Sprintf("Read(%#v)", params.p)
}

func (m *moqReadWriteSeekCloser) paramsKey_Read(params moqReadWriteSeekCloser_Read_params, anyParams uint64) moqReadWriteSeekCloser_Read_paramsKey {
	var pUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.Read.p == moq.ParamIndexByValue {
			m.scene.T.Fatalf("The p parameter of the Read function can't be indexed by value")
		}
		pUsedHash = hash.DeepHash(params.p)
	}
	return moqReadWriteSeekCloser_Read_paramsKey{
		params: struct{}{},
		hashes: struct{ p hash.Hash }{
			p: pUsedHash,
		},
	}
}

func (m *moqReadWriteSeekCloser_recorder) Write(p []byte) *moqReadWriteSeekCloser_Write_fnRecorder {
	return &moqReadWriteSeekCloser_Write_fnRecorder{
		params: moqReadWriteSeekCloser_Write_params{
			p: p,
		},
		sequence: m.moq.config.Sequence == moq.SeqDefaultOn,
		moq:      m.moq,
	}
}

func (r *moqReadWriteSeekCloser_Write_fnRecorder) any() *moqReadWriteSeekCloser_Write_anyParams {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_Write(r.params))
		return nil
	}
	return &moqReadWriteSeekCloser_Write_anyParams{recorder: r}
}

func (a *moqReadWriteSeekCloser_Write_anyParams) p() *moqReadWriteSeekCloser_Write_fnRecorder {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (r *moqReadWriteSeekCloser_Write_fnRecorder) seq() *moqReadWriteSeekCloser_Write_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_Write(r.params))
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqReadWriteSeekCloser_Write_fnRecorder) noSeq() *moqReadWriteSeekCloser_Write_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_Write(r.params))
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqReadWriteSeekCloser_Write_fnRecorder) returnResults(n int, err error) *moqReadWriteSeekCloser_Write_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			n   int
			err error
		}
		sequence   uint32
		doFn       moqReadWriteSeekCloser_Write_doFn
		doReturnFn moqReadWriteSeekCloser_Write_doReturnFn
	}{
		values: &struct {
			n   int
			err error
		}{
			n:   n,
			err: err,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqReadWriteSeekCloser_Write_fnRecorder) andDo(fn moqReadWriteSeekCloser_Write_doFn) *moqReadWriteSeekCloser_Write_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqReadWriteSeekCloser_Write_fnRecorder) doReturnResults(fn moqReadWriteSeekCloser_Write_doReturnFn) *moqReadWriteSeekCloser_Write_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			n   int
			err error
		}
		sequence   uint32
		doFn       moqReadWriteSeekCloser_Write_doFn
		doReturnFn moqReadWriteSeekCloser_Write_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqReadWriteSeekCloser_Write_fnRecorder) findResults() {
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqReadWriteSeekCloser_Write_resultsByParams
	for n, res := range r.moq.resultsByParams_Write {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqReadWriteSeekCloser_Write_resultsByParams{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqReadWriteSeekCloser_Write_paramsKey]*moqReadWriteSeekCloser_Write_results{},
		}
		r.moq.resultsByParams_Write = append(r.moq.resultsByParams_Write, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams_Write) {
			copy(r.moq.resultsByParams_Write[insertAt+1:], r.moq.resultsByParams_Write[insertAt:0])
			r.moq.resultsByParams_Write[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey_Write(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqReadWriteSeekCloser_Write_results{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqReadWriteSeekCloser_Write_fnRecorder) repeat(repeaters ...moq.Repeater) *moqReadWriteSeekCloser_Write_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values *struct {
					n   int
					err error
				}
				sequence   uint32
				doFn       moqReadWriteSeekCloser_Write_doFn
				doReturnFn moqReadWriteSeekCloser_Write_doReturnFn
			}{
				values:   last.values,
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqReadWriteSeekCloser) prettyParams_Write(params moqReadWriteSeekCloser_Write_params) string {
	return fmt.Sprintf("Write(%#v)", params.p)
}

func (m *moqReadWriteSeekCloser) paramsKey_Write(params moqReadWriteSeekCloser_Write_params, anyParams uint64) moqReadWriteSeekCloser_Write_paramsKey {
	var pUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.Write.p == moq.ParamIndexByValue {
			m.scene.T.Fatalf("The p parameter of the Write function can't be indexed by value")
		}
		pUsedHash = hash.DeepHash(params.p)
	}
	return moqReadWriteSeekCloser_Write_paramsKey{
		params: struct{}{},
		hashes: struct{ p hash.Hash }{
			p: pUsedHash,
		},
	}
}

func (m *moqReadWriteSeekCloser_recorder) Seek(offset int64, whence int) *moqReadWriteSeekCloser_Seek_fnRecorder {
	return &moqReadWriteSeekCloser_Seek_fnRecorder{
		params: moqReadWriteSeekCloser_Seek_params{
			offset: offset,
			whence: whence,
		},
		sequence: m.moq.config.Sequence == moq.SeqDefaultOn,
		moq:      m.moq,
	}
}

func (r *moqReadWriteSeekCloser_Seek_fnRecorder) any() *moqReadWriteSeekCloser_Seek_anyParams {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_Seek(r.params))
		return nil
	}
	return &moqReadWriteSeekCloser_Seek_anyParams{recorder: r}
}

func (a *moqReadWriteSeekCloser_Seek_anyParams) offset() *moqReadWriteSeekCloser_Seek_fnRecorder {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (a *moqReadWriteSeekCloser_Seek_anyParams) whence() *moqReadWriteSeekCloser_Seek_fnRecorder {
	a.recorder.anyParams |= 1 << 1
	return a.recorder
}

func (r *moqReadWriteSeekCloser_Seek_fnRecorder) seq() *moqReadWriteSeekCloser_Seek_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_Seek(r.params))
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqReadWriteSeekCloser_Seek_fnRecorder) noSeq() *moqReadWriteSeekCloser_Seek_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_Seek(r.params))
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqReadWriteSeekCloser_Seek_fnRecorder) returnResults(result1 int64, result2 error) *moqReadWriteSeekCloser_Seek_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 int64
			result2 error
		}
		sequence   uint32
		doFn       moqReadWriteSeekCloser_Seek_doFn
		doReturnFn moqReadWriteSeekCloser_Seek_doReturnFn
	}{
		values: &struct {
			result1 int64
			result2 error
		}{
			result1: result1,
			result2: result2,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqReadWriteSeekCloser_Seek_fnRecorder) andDo(fn moqReadWriteSeekCloser_Seek_doFn) *moqReadWriteSeekCloser_Seek_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqReadWriteSeekCloser_Seek_fnRecorder) doReturnResults(fn moqReadWriteSeekCloser_Seek_doReturnFn) *moqReadWriteSeekCloser_Seek_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 int64
			result2 error
		}
		sequence   uint32
		doFn       moqReadWriteSeekCloser_Seek_doFn
		doReturnFn moqReadWriteSeekCloser_Seek_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqReadWriteSeekCloser_Seek_fnRecorder) findResults() {
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqReadWriteSeekCloser_Seek_resultsByParams
	for n, res := range r.moq.resultsByParams_Seek {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqReadWriteSeekCloser_Seek_resultsByParams{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqReadWriteSeekCloser_Seek_paramsKey]*moqReadWriteSeekCloser_Seek_results{},
		}
		r.moq.resultsByParams_Seek = append(r.moq.resultsByParams_Seek, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams_Seek) {
			copy(r.moq.resultsByParams_Seek[insertAt+1:], r.moq.resultsByParams_Seek[insertAt:0])
			r.moq.resultsByParams_Seek[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey_Seek(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqReadWriteSeekCloser_Seek_results{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqReadWriteSeekCloser_Seek_fnRecorder) repeat(repeaters ...moq.Repeater) *moqReadWriteSeekCloser_Seek_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values *struct {
					result1 int64
					result2 error
				}
				sequence   uint32
				doFn       moqReadWriteSeekCloser_Seek_doFn
				doReturnFn moqReadWriteSeekCloser_Seek_doReturnFn
			}{
				values:   last.values,
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqReadWriteSeekCloser) prettyParams_Seek(params moqReadWriteSeekCloser_Seek_params) string {
	return fmt.Sprintf("Seek(%#v, %#v)", params.offset, params.whence)
}

func (m *moqReadWriteSeekCloser) paramsKey_Seek(params moqReadWriteSeekCloser_Seek_params, anyParams uint64) moqReadWriteSeekCloser_Seek_paramsKey {
	var offsetUsed int64
	var offsetUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.Seek.offset == moq.ParamIndexByValue {
			offsetUsed = params.offset
		} else {
			offsetUsedHash = hash.DeepHash(params.offset)
		}
	}
	var whenceUsed int
	var whenceUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.runtime.parameterIndexing.Seek.whence == moq.ParamIndexByValue {
			whenceUsed = params.whence
		} else {
			whenceUsedHash = hash.DeepHash(params.whence)
		}
	}
	return moqReadWriteSeekCloser_Seek_paramsKey{
		params: struct {
			offset int64
			whence int
		}{
			offset: offsetUsed,
			whence: whenceUsed,
		},
		hashes: struct {
			offset hash.Hash
			whence hash.Hash
		}{
			offset: offsetUsedHash,
			whence: whenceUsedHash,
		},
	}
}

func (m *moqReadWriteSeekCloser_recorder) Close() *moqReadWriteSeekCloser_Close_fnRecorder {
	return &moqReadWriteSeekCloser_Close_fnRecorder{
		params:   moqReadWriteSeekCloser_Close_params{},
		sequence: m.moq.config.Sequence == moq.SeqDefaultOn,
		moq:      m.moq,
	}
}

func (r *moqReadWriteSeekCloser_Close_fnRecorder) any() *moqReadWriteSeekCloser_Close_anyParams {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_Close(r.params))
		return nil
	}
	return &moqReadWriteSeekCloser_Close_anyParams{recorder: r}
}

func (r *moqReadWriteSeekCloser_Close_fnRecorder) seq() *moqReadWriteSeekCloser_Close_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_Close(r.params))
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqReadWriteSeekCloser_Close_fnRecorder) noSeq() *moqReadWriteSeekCloser_Close_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_Close(r.params))
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqReadWriteSeekCloser_Close_fnRecorder) returnResults(result1 error) *moqReadWriteSeekCloser_Close_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 error
		}
		sequence   uint32
		doFn       moqReadWriteSeekCloser_Close_doFn
		doReturnFn moqReadWriteSeekCloser_Close_doReturnFn
	}{
		values: &struct {
			result1 error
		}{
			result1: result1,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqReadWriteSeekCloser_Close_fnRecorder) andDo(fn moqReadWriteSeekCloser_Close_doFn) *moqReadWriteSeekCloser_Close_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqReadWriteSeekCloser_Close_fnRecorder) doReturnResults(fn moqReadWriteSeekCloser_Close_doReturnFn) *moqReadWriteSeekCloser_Close_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 error
		}
		sequence   uint32
		doFn       moqReadWriteSeekCloser_Close_doFn
		doReturnFn moqReadWriteSeekCloser_Close_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqReadWriteSeekCloser_Close_fnRecorder) findResults() {
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqReadWriteSeekCloser_Close_resultsByParams
	for n, res := range r.moq.resultsByParams_Close {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqReadWriteSeekCloser_Close_resultsByParams{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqReadWriteSeekCloser_Close_paramsKey]*moqReadWriteSeekCloser_Close_results{},
		}
		r.moq.resultsByParams_Close = append(r.moq.resultsByParams_Close, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams_Close) {
			copy(r.moq.resultsByParams_Close[insertAt+1:], r.moq.resultsByParams_Close[insertAt:0])
			r.moq.resultsByParams_Close[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey_Close(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqReadWriteSeekCloser_Close_results{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqReadWriteSeekCloser_Close_fnRecorder) repeat(repeaters ...moq.Repeater) *moqReadWriteSeekCloser_Close_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values *struct {
					result1 error
				}
				sequence   uint32
				doFn       moqReadWriteSeekCloser_Close_doFn
				doReturnFn moqReadWriteSeekCloser_Close_doReturnFn
			}{
				values:   last.values,
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqReadWriteSeekCloser) prettyParams_Close(params moqReadWriteSeekCloser_Close_params) string {
	return fmt.Sprintf("Close()")
}

func (m *moqReadWriteSeekCloser) paramsKey_Close(params moqReadWriteSeekCloser_Close_params, anyParams uint64) moqReadWriteSeekCloser_Close_paramsKey {
	return moqReadWriteSeekCloser_Close_paramsKey{
		params: struct{}{},
		hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *moqReadWriteSeekCloser) Reset() {
	m.resultsByParams_Read = nil
	m.resultsByParams_Write = nil
	m.resultsByParams_Seek = nil
	m.resultsByParams_Close = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *moqReadWriteSeekCloser) AssertExpectationsMet() {
	m.scene.T.Helper()
	for _, res := range m.resultsByParams_Read {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.prettyParams_Read(results.params))
			}
		}
	}
	for _, res := range m.resultsByParams_Write {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.prettyParams_Write(results.params))
			}
		}
	}
	for _, res := range m.resultsByParams_Seek {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.prettyParams_Seek(results.params))
			}
		}
	}
	for _, res := range m.resultsByParams_Close {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.prettyParams_Close(results.params))
			}
		}
	}
}
