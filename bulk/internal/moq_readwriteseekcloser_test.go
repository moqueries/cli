// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT.

package internal_test

import (
	"fmt"

	"moqueries.org/cli/bulk/internal"
	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/impl"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that internal.ReadWriteSeekCloser is
// mocked completely
var _ internal.ReadWriteSeekCloser = (*moqReadWriteSeekCloser_mock)(nil)

// moqReadWriteSeekCloser holds the state of a moq of the ReadWriteSeekCloser
// type
type moqReadWriteSeekCloser struct {
	moq *moqReadWriteSeekCloser_mock

	moq_Read *impl.Moq[
		*moqReadWriteSeekCloser_Read_adaptor,
		moqReadWriteSeekCloser_Read_params,
		moqReadWriteSeekCloser_Read_paramsKey,
		moqReadWriteSeekCloser_Read_results,
	]
	moq_Write *impl.Moq[
		*moqReadWriteSeekCloser_Write_adaptor,
		moqReadWriteSeekCloser_Write_params,
		moqReadWriteSeekCloser_Write_paramsKey,
		moqReadWriteSeekCloser_Write_results,
	]
	moq_Seek *impl.Moq[
		*moqReadWriteSeekCloser_Seek_adaptor,
		moqReadWriteSeekCloser_Seek_params,
		moqReadWriteSeekCloser_Seek_paramsKey,
		moqReadWriteSeekCloser_Seek_results,
	]
	moq_Close *impl.Moq[
		*moqReadWriteSeekCloser_Close_adaptor,
		moqReadWriteSeekCloser_Close_params,
		moqReadWriteSeekCloser_Close_paramsKey,
		moqReadWriteSeekCloser_Close_results,
	]

	runtime moqReadWriteSeekCloser_runtime
}

// moqReadWriteSeekCloser_mock isolates the mock interface of the
// ReadWriteSeekCloser type
type moqReadWriteSeekCloser_mock struct {
	moq *moqReadWriteSeekCloser
}

// moqReadWriteSeekCloser_recorder isolates the recorder interface of the
// ReadWriteSeekCloser type
type moqReadWriteSeekCloser_recorder struct {
	moq *moqReadWriteSeekCloser
}

// moqReadWriteSeekCloser_runtime holds runtime configuration for the
// ReadWriteSeekCloser type
type moqReadWriteSeekCloser_runtime struct {
	parameterIndexing struct {
		Read  moqReadWriteSeekCloser_Read_paramIndexing
		Write moqReadWriteSeekCloser_Write_paramIndexing
		Seek  moqReadWriteSeekCloser_Seek_paramIndexing
		Close moqReadWriteSeekCloser_Close_paramIndexing
	}
}

// moqReadWriteSeekCloser_Read_adaptor adapts moqReadWriteSeekCloser as needed
// by the runtime
type moqReadWriteSeekCloser_Read_adaptor struct {
	moq *moqReadWriteSeekCloser
}

// moqReadWriteSeekCloser_Read_params holds the params of the
// ReadWriteSeekCloser type
type moqReadWriteSeekCloser_Read_params struct{ p []byte }

// moqReadWriteSeekCloser_Read_paramsKey holds the map key params of the
// ReadWriteSeekCloser type
type moqReadWriteSeekCloser_Read_paramsKey struct {
	params struct{}
	hashes struct{ p hash.Hash }
}

// moqReadWriteSeekCloser_Read_results holds the results of the
// ReadWriteSeekCloser type
type moqReadWriteSeekCloser_Read_results struct {
	n   int
	err error
}

// moqReadWriteSeekCloser_Read_paramIndexing holds the parameter indexing
// runtime configuration for the ReadWriteSeekCloser type
type moqReadWriteSeekCloser_Read_paramIndexing struct {
	p moq.ParamIndexing
}

// moqReadWriteSeekCloser_Read_doFn defines the type of function needed when
// calling andDo for the ReadWriteSeekCloser type
type moqReadWriteSeekCloser_Read_doFn func(p []byte)

// moqReadWriteSeekCloser_Read_doReturnFn defines the type of function needed
// when calling doReturnResults for the ReadWriteSeekCloser type
type moqReadWriteSeekCloser_Read_doReturnFn func(p []byte) (n int, err error)

// moqReadWriteSeekCloser_Read_recorder routes recorded function calls to the
// moqReadWriteSeekCloser moq
type moqReadWriteSeekCloser_Read_recorder struct {
	recorder *impl.Recorder[
		*moqReadWriteSeekCloser_Read_adaptor,
		moqReadWriteSeekCloser_Read_params,
		moqReadWriteSeekCloser_Read_paramsKey,
		moqReadWriteSeekCloser_Read_results,
	]
}

// moqReadWriteSeekCloser_Read_anyParams isolates the any params functions of
// the ReadWriteSeekCloser type
type moqReadWriteSeekCloser_Read_anyParams struct {
	recorder *moqReadWriteSeekCloser_Read_recorder
}

// moqReadWriteSeekCloser_Write_adaptor adapts moqReadWriteSeekCloser as needed
// by the runtime
type moqReadWriteSeekCloser_Write_adaptor struct {
	moq *moqReadWriteSeekCloser
}

// moqReadWriteSeekCloser_Write_params holds the params of the
// ReadWriteSeekCloser type
type moqReadWriteSeekCloser_Write_params struct{ p []byte }

// moqReadWriteSeekCloser_Write_paramsKey holds the map key params of the
// ReadWriteSeekCloser type
type moqReadWriteSeekCloser_Write_paramsKey struct {
	params struct{}
	hashes struct{ p hash.Hash }
}

// moqReadWriteSeekCloser_Write_results holds the results of the
// ReadWriteSeekCloser type
type moqReadWriteSeekCloser_Write_results struct {
	n   int
	err error
}

// moqReadWriteSeekCloser_Write_paramIndexing holds the parameter indexing
// runtime configuration for the ReadWriteSeekCloser type
type moqReadWriteSeekCloser_Write_paramIndexing struct {
	p moq.ParamIndexing
}

// moqReadWriteSeekCloser_Write_doFn defines the type of function needed when
// calling andDo for the ReadWriteSeekCloser type
type moqReadWriteSeekCloser_Write_doFn func(p []byte)

// moqReadWriteSeekCloser_Write_doReturnFn defines the type of function needed
// when calling doReturnResults for the ReadWriteSeekCloser type
type moqReadWriteSeekCloser_Write_doReturnFn func(p []byte) (n int, err error)

// moqReadWriteSeekCloser_Write_recorder routes recorded function calls to the
// moqReadWriteSeekCloser moq
type moqReadWriteSeekCloser_Write_recorder struct {
	recorder *impl.Recorder[
		*moqReadWriteSeekCloser_Write_adaptor,
		moqReadWriteSeekCloser_Write_params,
		moqReadWriteSeekCloser_Write_paramsKey,
		moqReadWriteSeekCloser_Write_results,
	]
}

// moqReadWriteSeekCloser_Write_anyParams isolates the any params functions of
// the ReadWriteSeekCloser type
type moqReadWriteSeekCloser_Write_anyParams struct {
	recorder *moqReadWriteSeekCloser_Write_recorder
}

// moqReadWriteSeekCloser_Seek_adaptor adapts moqReadWriteSeekCloser as needed
// by the runtime
type moqReadWriteSeekCloser_Seek_adaptor struct {
	moq *moqReadWriteSeekCloser
}

// moqReadWriteSeekCloser_Seek_params holds the params of the
// ReadWriteSeekCloser type
type moqReadWriteSeekCloser_Seek_params struct {
	offset int64
	whence int
}

// moqReadWriteSeekCloser_Seek_paramsKey holds the map key params of the
// ReadWriteSeekCloser type
type moqReadWriteSeekCloser_Seek_paramsKey struct {
	params struct {
		offset int64
		whence int
	}
	hashes struct {
		offset hash.Hash
		whence hash.Hash
	}
}

// moqReadWriteSeekCloser_Seek_results holds the results of the
// ReadWriteSeekCloser type
type moqReadWriteSeekCloser_Seek_results struct {
	result1 int64
	result2 error
}

// moqReadWriteSeekCloser_Seek_paramIndexing holds the parameter indexing
// runtime configuration for the ReadWriteSeekCloser type
type moqReadWriteSeekCloser_Seek_paramIndexing struct {
	offset moq.ParamIndexing
	whence moq.ParamIndexing
}

// moqReadWriteSeekCloser_Seek_doFn defines the type of function needed when
// calling andDo for the ReadWriteSeekCloser type
type moqReadWriteSeekCloser_Seek_doFn func(offset int64, whence int)

// moqReadWriteSeekCloser_Seek_doReturnFn defines the type of function needed
// when calling doReturnResults for the ReadWriteSeekCloser type
type moqReadWriteSeekCloser_Seek_doReturnFn func(offset int64, whence int) (int64, error)

// moqReadWriteSeekCloser_Seek_recorder routes recorded function calls to the
// moqReadWriteSeekCloser moq
type moqReadWriteSeekCloser_Seek_recorder struct {
	recorder *impl.Recorder[
		*moqReadWriteSeekCloser_Seek_adaptor,
		moqReadWriteSeekCloser_Seek_params,
		moqReadWriteSeekCloser_Seek_paramsKey,
		moqReadWriteSeekCloser_Seek_results,
	]
}

// moqReadWriteSeekCloser_Seek_anyParams isolates the any params functions of
// the ReadWriteSeekCloser type
type moqReadWriteSeekCloser_Seek_anyParams struct {
	recorder *moqReadWriteSeekCloser_Seek_recorder
}

// moqReadWriteSeekCloser_Close_adaptor adapts moqReadWriteSeekCloser as needed
// by the runtime
type moqReadWriteSeekCloser_Close_adaptor struct {
	moq *moqReadWriteSeekCloser
}

// moqReadWriteSeekCloser_Close_params holds the params of the
// ReadWriteSeekCloser type
type moqReadWriteSeekCloser_Close_params struct{}

// moqReadWriteSeekCloser_Close_paramsKey holds the map key params of the
// ReadWriteSeekCloser type
type moqReadWriteSeekCloser_Close_paramsKey struct {
	params struct{}
	hashes struct{}
}

// moqReadWriteSeekCloser_Close_results holds the results of the
// ReadWriteSeekCloser type
type moqReadWriteSeekCloser_Close_results struct {
	result1 error
}

// moqReadWriteSeekCloser_Close_paramIndexing holds the parameter indexing
// runtime configuration for the ReadWriteSeekCloser type
type moqReadWriteSeekCloser_Close_paramIndexing struct{}

// moqReadWriteSeekCloser_Close_doFn defines the type of function needed when
// calling andDo for the ReadWriteSeekCloser type
type moqReadWriteSeekCloser_Close_doFn func()

// moqReadWriteSeekCloser_Close_doReturnFn defines the type of function needed
// when calling doReturnResults for the ReadWriteSeekCloser type
type moqReadWriteSeekCloser_Close_doReturnFn func() error

// moqReadWriteSeekCloser_Close_recorder routes recorded function calls to the
// moqReadWriteSeekCloser moq
type moqReadWriteSeekCloser_Close_recorder struct {
	recorder *impl.Recorder[
		*moqReadWriteSeekCloser_Close_adaptor,
		moqReadWriteSeekCloser_Close_params,
		moqReadWriteSeekCloser_Close_paramsKey,
		moqReadWriteSeekCloser_Close_results,
	]
}

// moqReadWriteSeekCloser_Close_anyParams isolates the any params functions of
// the ReadWriteSeekCloser type
type moqReadWriteSeekCloser_Close_anyParams struct {
	recorder *moqReadWriteSeekCloser_Close_recorder
}

// newMoqReadWriteSeekCloser creates a new moq of the ReadWriteSeekCloser type
func newMoqReadWriteSeekCloser(scene *moq.Scene, config *moq.Config) *moqReadWriteSeekCloser {
	adaptor1 := &moqReadWriteSeekCloser_Read_adaptor{}
	adaptor2 := &moqReadWriteSeekCloser_Write_adaptor{}
	adaptor3 := &moqReadWriteSeekCloser_Seek_adaptor{}
	adaptor4 := &moqReadWriteSeekCloser_Close_adaptor{}
	m := &moqReadWriteSeekCloser{
		moq: &moqReadWriteSeekCloser_mock{},

		moq_Read: impl.NewMoq[
			*moqReadWriteSeekCloser_Read_adaptor,
			moqReadWriteSeekCloser_Read_params,
			moqReadWriteSeekCloser_Read_paramsKey,
			moqReadWriteSeekCloser_Read_results,
		](scene, adaptor1, config),
		moq_Write: impl.NewMoq[
			*moqReadWriteSeekCloser_Write_adaptor,
			moqReadWriteSeekCloser_Write_params,
			moqReadWriteSeekCloser_Write_paramsKey,
			moqReadWriteSeekCloser_Write_results,
		](scene, adaptor2, config),
		moq_Seek: impl.NewMoq[
			*moqReadWriteSeekCloser_Seek_adaptor,
			moqReadWriteSeekCloser_Seek_params,
			moqReadWriteSeekCloser_Seek_paramsKey,
			moqReadWriteSeekCloser_Seek_results,
		](scene, adaptor3, config),
		moq_Close: impl.NewMoq[
			*moqReadWriteSeekCloser_Close_adaptor,
			moqReadWriteSeekCloser_Close_params,
			moqReadWriteSeekCloser_Close_paramsKey,
			moqReadWriteSeekCloser_Close_results,
		](scene, adaptor4, config),

		runtime: moqReadWriteSeekCloser_runtime{parameterIndexing: struct {
			Read  moqReadWriteSeekCloser_Read_paramIndexing
			Write moqReadWriteSeekCloser_Write_paramIndexing
			Seek  moqReadWriteSeekCloser_Seek_paramIndexing
			Close moqReadWriteSeekCloser_Close_paramIndexing
		}{
			Read: moqReadWriteSeekCloser_Read_paramIndexing{
				p: moq.ParamIndexByHash,
			},
			Write: moqReadWriteSeekCloser_Write_paramIndexing{
				p: moq.ParamIndexByHash,
			},
			Seek: moqReadWriteSeekCloser_Seek_paramIndexing{
				offset: moq.ParamIndexByValue,
				whence: moq.ParamIndexByValue,
			},
			Close: moqReadWriteSeekCloser_Close_paramIndexing{},
		}},
	}
	m.moq.moq = m

	adaptor1.moq = m
	adaptor2.moq = m
	adaptor3.moq = m
	adaptor4.moq = m

	scene.AddMoq(m)
	return m
}

// mock returns the mock implementation of the ReadWriteSeekCloser type
func (m *moqReadWriteSeekCloser) mock() *moqReadWriteSeekCloser_mock { return m.moq }

func (m *moqReadWriteSeekCloser_mock) Read(p []byte) (int, error) {
	m.moq.moq_Read.Scene.T.Helper()
	params := moqReadWriteSeekCloser_Read_params{
		p: p,
	}

	var result1 int
	var result2 error
	if result := m.moq.moq_Read.Function(params); result != nil {
		result1 = result.n
		result2 = result.err
	}
	return result1, result2
}

func (m *moqReadWriteSeekCloser_mock) Write(p []byte) (int, error) {
	m.moq.moq_Write.Scene.T.Helper()
	params := moqReadWriteSeekCloser_Write_params{
		p: p,
	}

	var result1 int
	var result2 error
	if result := m.moq.moq_Write.Function(params); result != nil {
		result1 = result.n
		result2 = result.err
	}
	return result1, result2
}

func (m *moqReadWriteSeekCloser_mock) Seek(offset int64, whence int) (int64, error) {
	m.moq.moq_Seek.Scene.T.Helper()
	params := moqReadWriteSeekCloser_Seek_params{
		offset: offset,
		whence: whence,
	}

	var result1 int64
	var result2 error
	if result := m.moq.moq_Seek.Function(params); result != nil {
		result1 = result.result1
		result2 = result.result2
	}
	return result1, result2
}

func (m *moqReadWriteSeekCloser_mock) Close() error {
	m.moq.moq_Close.Scene.T.Helper()
	params := moqReadWriteSeekCloser_Close_params{}

	var result1 error
	if result := m.moq.moq_Close.Function(params); result != nil {
		result1 = result.result1
	}
	return result1
}

// onCall returns the recorder implementation of the ReadWriteSeekCloser type
func (m *moqReadWriteSeekCloser) onCall() *moqReadWriteSeekCloser_recorder {
	return &moqReadWriteSeekCloser_recorder{
		moq: m,
	}
}

func (m *moqReadWriteSeekCloser_recorder) Read(p []byte) *moqReadWriteSeekCloser_Read_recorder {
	return &moqReadWriteSeekCloser_Read_recorder{
		recorder: m.moq.moq_Read.OnCall(moqReadWriteSeekCloser_Read_params{
			p: p,
		}),
	}
}

func (r *moqReadWriteSeekCloser_Read_recorder) any() *moqReadWriteSeekCloser_Read_anyParams {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.IsAnyPermitted(false) {
		return nil
	}
	return &moqReadWriteSeekCloser_Read_anyParams{recorder: r}
}

func (a *moqReadWriteSeekCloser_Read_anyParams) p() *moqReadWriteSeekCloser_Read_recorder {
	a.recorder.recorder.AnyParam(1)
	return a.recorder
}

func (r *moqReadWriteSeekCloser_Read_recorder) seq() *moqReadWriteSeekCloser_Read_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.Seq(true, "seq", false) {
		return nil
	}
	return r
}

func (r *moqReadWriteSeekCloser_Read_recorder) noSeq() *moqReadWriteSeekCloser_Read_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.Seq(false, "noSeq", false) {
		return nil
	}
	return r
}

func (r *moqReadWriteSeekCloser_Read_recorder) returnResults(n int, err error) *moqReadWriteSeekCloser_Read_recorder {
	r.recorder.Moq.Scene.T.Helper()
	r.recorder.ReturnResults(moqReadWriteSeekCloser_Read_results{
		n:   n,
		err: err,
	})
	return r
}

func (r *moqReadWriteSeekCloser_Read_recorder) andDo(fn moqReadWriteSeekCloser_Read_doFn) *moqReadWriteSeekCloser_Read_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.AndDo(func(params moqReadWriteSeekCloser_Read_params) {
		fn(params.p)
	}, false) {
		return nil
	}
	return r
}

func (r *moqReadWriteSeekCloser_Read_recorder) doReturnResults(fn moqReadWriteSeekCloser_Read_doReturnFn) *moqReadWriteSeekCloser_Read_recorder {
	r.recorder.Moq.Scene.T.Helper()
	r.recorder.DoReturnResults(func(params moqReadWriteSeekCloser_Read_params) *moqReadWriteSeekCloser_Read_results {
		n, err := fn(params.p)
		return &moqReadWriteSeekCloser_Read_results{
			n:   n,
			err: err,
		}
	})
	return r
}

func (r *moqReadWriteSeekCloser_Read_recorder) repeat(repeaters ...moq.Repeater) *moqReadWriteSeekCloser_Read_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.Repeat(repeaters, false) {
		return nil
	}
	return r
}

func (*moqReadWriteSeekCloser_Read_adaptor) PrettyParams(params moqReadWriteSeekCloser_Read_params) string {
	return fmt.Sprintf("Read(%#v)", params.p)
}

func (a *moqReadWriteSeekCloser_Read_adaptor) ParamsKey(params moqReadWriteSeekCloser_Read_params, anyParams uint64) moqReadWriteSeekCloser_Read_paramsKey {
	a.moq.moq_Read.Scene.T.Helper()
	pUsedHash := impl.HashOnlyParamKey(a.moq.moq_Read.Scene.T,
		params.p, "p", 1, a.moq.runtime.parameterIndexing.Read.p, anyParams)
	return moqReadWriteSeekCloser_Read_paramsKey{
		params: struct{}{},
		hashes: struct{ p hash.Hash }{
			p: pUsedHash,
		},
	}
}

func (m *moqReadWriteSeekCloser_recorder) Write(p []byte) *moqReadWriteSeekCloser_Write_recorder {
	return &moqReadWriteSeekCloser_Write_recorder{
		recorder: m.moq.moq_Write.OnCall(moqReadWriteSeekCloser_Write_params{
			p: p,
		}),
	}
}

func (r *moqReadWriteSeekCloser_Write_recorder) any() *moqReadWriteSeekCloser_Write_anyParams {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.IsAnyPermitted(false) {
		return nil
	}
	return &moqReadWriteSeekCloser_Write_anyParams{recorder: r}
}

func (a *moqReadWriteSeekCloser_Write_anyParams) p() *moqReadWriteSeekCloser_Write_recorder {
	a.recorder.recorder.AnyParam(1)
	return a.recorder
}

func (r *moqReadWriteSeekCloser_Write_recorder) seq() *moqReadWriteSeekCloser_Write_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.Seq(true, "seq", false) {
		return nil
	}
	return r
}

func (r *moqReadWriteSeekCloser_Write_recorder) noSeq() *moqReadWriteSeekCloser_Write_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.Seq(false, "noSeq", false) {
		return nil
	}
	return r
}

func (r *moqReadWriteSeekCloser_Write_recorder) returnResults(n int, err error) *moqReadWriteSeekCloser_Write_recorder {
	r.recorder.Moq.Scene.T.Helper()
	r.recorder.ReturnResults(moqReadWriteSeekCloser_Write_results{
		n:   n,
		err: err,
	})
	return r
}

func (r *moqReadWriteSeekCloser_Write_recorder) andDo(fn moqReadWriteSeekCloser_Write_doFn) *moqReadWriteSeekCloser_Write_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.AndDo(func(params moqReadWriteSeekCloser_Write_params) {
		fn(params.p)
	}, false) {
		return nil
	}
	return r
}

func (r *moqReadWriteSeekCloser_Write_recorder) doReturnResults(fn moqReadWriteSeekCloser_Write_doReturnFn) *moqReadWriteSeekCloser_Write_recorder {
	r.recorder.Moq.Scene.T.Helper()
	r.recorder.DoReturnResults(func(params moqReadWriteSeekCloser_Write_params) *moqReadWriteSeekCloser_Write_results {
		n, err := fn(params.p)
		return &moqReadWriteSeekCloser_Write_results{
			n:   n,
			err: err,
		}
	})
	return r
}

func (r *moqReadWriteSeekCloser_Write_recorder) repeat(repeaters ...moq.Repeater) *moqReadWriteSeekCloser_Write_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.Repeat(repeaters, false) {
		return nil
	}
	return r
}

func (*moqReadWriteSeekCloser_Write_adaptor) PrettyParams(params moqReadWriteSeekCloser_Write_params) string {
	return fmt.Sprintf("Write(%#v)", params.p)
}

func (a *moqReadWriteSeekCloser_Write_adaptor) ParamsKey(params moqReadWriteSeekCloser_Write_params, anyParams uint64) moqReadWriteSeekCloser_Write_paramsKey {
	a.moq.moq_Write.Scene.T.Helper()
	pUsedHash := impl.HashOnlyParamKey(a.moq.moq_Write.Scene.T,
		params.p, "p", 1, a.moq.runtime.parameterIndexing.Write.p, anyParams)
	return moqReadWriteSeekCloser_Write_paramsKey{
		params: struct{}{},
		hashes: struct{ p hash.Hash }{
			p: pUsedHash,
		},
	}
}

func (m *moqReadWriteSeekCloser_recorder) Seek(offset int64, whence int) *moqReadWriteSeekCloser_Seek_recorder {
	return &moqReadWriteSeekCloser_Seek_recorder{
		recorder: m.moq.moq_Seek.OnCall(moqReadWriteSeekCloser_Seek_params{
			offset: offset,
			whence: whence,
		}),
	}
}

func (r *moqReadWriteSeekCloser_Seek_recorder) any() *moqReadWriteSeekCloser_Seek_anyParams {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.IsAnyPermitted(false) {
		return nil
	}
	return &moqReadWriteSeekCloser_Seek_anyParams{recorder: r}
}

func (a *moqReadWriteSeekCloser_Seek_anyParams) offset() *moqReadWriteSeekCloser_Seek_recorder {
	a.recorder.recorder.AnyParam(1)
	return a.recorder
}

func (a *moqReadWriteSeekCloser_Seek_anyParams) whence() *moqReadWriteSeekCloser_Seek_recorder {
	a.recorder.recorder.AnyParam(2)
	return a.recorder
}

func (r *moqReadWriteSeekCloser_Seek_recorder) seq() *moqReadWriteSeekCloser_Seek_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.Seq(true, "seq", false) {
		return nil
	}
	return r
}

func (r *moqReadWriteSeekCloser_Seek_recorder) noSeq() *moqReadWriteSeekCloser_Seek_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.Seq(false, "noSeq", false) {
		return nil
	}
	return r
}

func (r *moqReadWriteSeekCloser_Seek_recorder) returnResults(result1 int64, result2 error) *moqReadWriteSeekCloser_Seek_recorder {
	r.recorder.Moq.Scene.T.Helper()
	r.recorder.ReturnResults(moqReadWriteSeekCloser_Seek_results{
		result1: result1,
		result2: result2,
	})
	return r
}

func (r *moqReadWriteSeekCloser_Seek_recorder) andDo(fn moqReadWriteSeekCloser_Seek_doFn) *moqReadWriteSeekCloser_Seek_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.AndDo(func(params moqReadWriteSeekCloser_Seek_params) {
		fn(params.offset, params.whence)
	}, false) {
		return nil
	}
	return r
}

func (r *moqReadWriteSeekCloser_Seek_recorder) doReturnResults(fn moqReadWriteSeekCloser_Seek_doReturnFn) *moqReadWriteSeekCloser_Seek_recorder {
	r.recorder.Moq.Scene.T.Helper()
	r.recorder.DoReturnResults(func(params moqReadWriteSeekCloser_Seek_params) *moqReadWriteSeekCloser_Seek_results {
		result1, result2 := fn(params.offset, params.whence)
		return &moqReadWriteSeekCloser_Seek_results{
			result1: result1,
			result2: result2,
		}
	})
	return r
}

func (r *moqReadWriteSeekCloser_Seek_recorder) repeat(repeaters ...moq.Repeater) *moqReadWriteSeekCloser_Seek_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.Repeat(repeaters, false) {
		return nil
	}
	return r
}

func (*moqReadWriteSeekCloser_Seek_adaptor) PrettyParams(params moqReadWriteSeekCloser_Seek_params) string {
	return fmt.Sprintf("Seek(%#v, %#v)", params.offset, params.whence)
}

func (a *moqReadWriteSeekCloser_Seek_adaptor) ParamsKey(params moqReadWriteSeekCloser_Seek_params, anyParams uint64) moqReadWriteSeekCloser_Seek_paramsKey {
	a.moq.moq_Seek.Scene.T.Helper()
	offsetUsed, offsetUsedHash := impl.ParamKey(
		params.offset, 1, a.moq.runtime.parameterIndexing.Seek.offset, anyParams)
	whenceUsed, whenceUsedHash := impl.ParamKey(
		params.whence, 2, a.moq.runtime.parameterIndexing.Seek.whence, anyParams)
	return moqReadWriteSeekCloser_Seek_paramsKey{
		params: struct {
			offset int64
			whence int
		}{
			offset: offsetUsed,
			whence: whenceUsed,
		},
		hashes: struct {
			offset hash.Hash
			whence hash.Hash
		}{
			offset: offsetUsedHash,
			whence: whenceUsedHash,
		},
	}
}

func (m *moqReadWriteSeekCloser_recorder) Close() *moqReadWriteSeekCloser_Close_recorder {
	return &moqReadWriteSeekCloser_Close_recorder{
		recorder: m.moq.moq_Close.OnCall(moqReadWriteSeekCloser_Close_params{}),
	}
}

func (r *moqReadWriteSeekCloser_Close_recorder) any() *moqReadWriteSeekCloser_Close_anyParams {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.IsAnyPermitted(false) {
		return nil
	}
	return &moqReadWriteSeekCloser_Close_anyParams{recorder: r}
}

func (r *moqReadWriteSeekCloser_Close_recorder) seq() *moqReadWriteSeekCloser_Close_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.Seq(true, "seq", false) {
		return nil
	}
	return r
}

func (r *moqReadWriteSeekCloser_Close_recorder) noSeq() *moqReadWriteSeekCloser_Close_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.Seq(false, "noSeq", false) {
		return nil
	}
	return r
}

func (r *moqReadWriteSeekCloser_Close_recorder) returnResults(result1 error) *moqReadWriteSeekCloser_Close_recorder {
	r.recorder.Moq.Scene.T.Helper()
	r.recorder.ReturnResults(moqReadWriteSeekCloser_Close_results{
		result1: result1,
	})
	return r
}

func (r *moqReadWriteSeekCloser_Close_recorder) andDo(fn moqReadWriteSeekCloser_Close_doFn) *moqReadWriteSeekCloser_Close_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.AndDo(func(params moqReadWriteSeekCloser_Close_params) {
		fn()
	}, false) {
		return nil
	}
	return r
}

func (r *moqReadWriteSeekCloser_Close_recorder) doReturnResults(fn moqReadWriteSeekCloser_Close_doReturnFn) *moqReadWriteSeekCloser_Close_recorder {
	r.recorder.Moq.Scene.T.Helper()
	r.recorder.DoReturnResults(func(params moqReadWriteSeekCloser_Close_params) *moqReadWriteSeekCloser_Close_results {
		result1 := fn()
		return &moqReadWriteSeekCloser_Close_results{
			result1: result1,
		}
	})
	return r
}

func (r *moqReadWriteSeekCloser_Close_recorder) repeat(repeaters ...moq.Repeater) *moqReadWriteSeekCloser_Close_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.Repeat(repeaters, false) {
		return nil
	}
	return r
}

func (*moqReadWriteSeekCloser_Close_adaptor) PrettyParams(params moqReadWriteSeekCloser_Close_params) string {
	return fmt.Sprintf("Close()")
}

func (a *moqReadWriteSeekCloser_Close_adaptor) ParamsKey(params moqReadWriteSeekCloser_Close_params, anyParams uint64) moqReadWriteSeekCloser_Close_paramsKey {
	a.moq.moq_Close.Scene.T.Helper()
	return moqReadWriteSeekCloser_Close_paramsKey{
		params: struct{}{},
		hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *moqReadWriteSeekCloser) Reset() {
	m.moq_Read.Reset()
	m.moq_Write.Reset()
	m.moq_Seek.Reset()
	m.moq_Close.Reset()
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *moqReadWriteSeekCloser) AssertExpectationsMet() {
	m.moq_Read.Scene.T.Helper()
	m.moq_Read.AssertExpectationsMet()
	m.moq_Write.AssertExpectationsMet()
	m.moq_Seek.AssertExpectationsMet()
	m.moq_Close.AssertExpectationsMet()
}
