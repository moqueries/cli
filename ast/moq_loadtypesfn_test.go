// Code generated by Moqueries - https://github.com/myshkin5/moqueries - DO NOT EDIT!

package ast_test

import (
	"math/bits"
	"sync/atomic"

	"github.com/dave/dst"
	"github.com/myshkin5/moqueries/ast"
	"github.com/myshkin5/moqueries/hash"
	"github.com/myshkin5/moqueries/moq"
)

// moqLoadTypesFn holds the state of a moq of the LoadTypesFn type
type moqLoadTypesFn struct {
	scene  *moq.Scene
	config moq.Config
	moq    *moqLoadTypesFn_mock

	resultsByParams []moqLoadTypesFn_resultsByParams

	runtime struct {
		parameterIndexing struct {
			pkg           moq.ParamIndexing
			loadTestTypes moq.ParamIndexing
		}
	}
}

// moqLoadTypesFn_mock isolates the mock interface of the LoadTypesFn type
type moqLoadTypesFn_mock struct {
	moq *moqLoadTypesFn
}

// moqLoadTypesFn_params holds the params of the LoadTypesFn type
type moqLoadTypesFn_params struct {
	pkg           string
	loadTestTypes bool
}

// moqLoadTypesFn_paramsKey holds the map key params of the LoadTypesFn type
type moqLoadTypesFn_paramsKey struct {
	params struct {
		pkg           string
		loadTestTypes bool
	}
	hashes struct {
		pkg           hash.Hash
		loadTestTypes hash.Hash
	}
}

// moqLoadTypesFn_resultsByParams contains the results for a given set of parameters for the LoadTypesFn type
type moqLoadTypesFn_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqLoadTypesFn_paramsKey]*moqLoadTypesFn_results
}

// moqLoadTypesFn_doFn defines the type of function needed when calling andDo for the LoadTypesFn type
type moqLoadTypesFn_doFn func(pkg string, loadTestTypes bool)

// moqLoadTypesFn_doReturnFn defines the type of function needed when calling doReturnResults for the LoadTypesFn type
type moqLoadTypesFn_doReturnFn func(pkg string, loadTestTypes bool) (
	typeSpecs []*dst.TypeSpec, pkgPath string, err error)

// moqLoadTypesFn_results holds the results of the LoadTypesFn type
type moqLoadTypesFn_results struct {
	params  moqLoadTypesFn_params
	results []struct {
		values *struct {
			typeSpecs []*dst.TypeSpec
			pkgPath   string
			err       error
		}
		sequence   uint32
		doFn       moqLoadTypesFn_doFn
		doReturnFn moqLoadTypesFn_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqLoadTypesFn_fnRecorder routes recorded function calls to the moqLoadTypesFn moq
type moqLoadTypesFn_fnRecorder struct {
	params    moqLoadTypesFn_params
	anyParams uint64
	sequence  bool
	results   *moqLoadTypesFn_results
	moq       *moqLoadTypesFn
}

// moqLoadTypesFn_anyParams isolates the any params functions of the LoadTypesFn type
type moqLoadTypesFn_anyParams struct {
	recorder *moqLoadTypesFn_fnRecorder
}

// newMoqLoadTypesFn creates a new moq of the LoadTypesFn type
func newMoqLoadTypesFn(scene *moq.Scene, config *moq.Config) *moqLoadTypesFn {
	if config == nil {
		config = &moq.Config{}
	}
	m := &moqLoadTypesFn{
		scene:  scene,
		config: *config,
		moq:    &moqLoadTypesFn_mock{},

		runtime: struct {
			parameterIndexing struct {
				pkg           moq.ParamIndexing
				loadTestTypes moq.ParamIndexing
			}
		}{parameterIndexing: struct {
			pkg           moq.ParamIndexing
			loadTestTypes moq.ParamIndexing
		}{
			pkg:           moq.ParamIndexByValue,
			loadTestTypes: moq.ParamIndexByValue,
		}},
	}
	m.moq.moq = m

	scene.AddMoq(m)
	return m
}

// mock returns the moq implementation of the LoadTypesFn type
func (m *moqLoadTypesFn) mock() ast.LoadTypesFn {
	return func(pkg string, loadTestTypes bool) (
		_ []*dst.TypeSpec, _ string, _ error) {
		moq := &moqLoadTypesFn_mock{moq: m}
		return moq.fn(pkg, loadTestTypes)
	}
}

func (m *moqLoadTypesFn_mock) fn(pkg string, loadTestTypes bool) (
	typeSpecs []*dst.TypeSpec, pkgPath string, err error) {
	params := moqLoadTypesFn_params{
		pkg:           pkg,
		loadTestTypes: loadTestTypes,
	}
	var results *moqLoadTypesFn_results
	for _, resultsByParams := range m.moq.resultsByParams {
		paramsKey := m.moq.paramsKey(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match %#v", params)
		}
	}

	if result.doFn != nil {
		result.doFn(pkg, loadTestTypes)
	}

	if result.values != nil {
		typeSpecs = result.values.typeSpecs
		pkgPath = result.values.pkgPath
		err = result.values.err
	}
	if result.doReturnFn != nil {
		typeSpecs, pkgPath, err = result.doReturnFn(pkg, loadTestTypes)
	}
	return
}

func (m *moqLoadTypesFn) onCall(pkg string, loadTestTypes bool) *moqLoadTypesFn_fnRecorder {
	return &moqLoadTypesFn_fnRecorder{
		params: moqLoadTypesFn_params{
			pkg:           pkg,
			loadTestTypes: loadTestTypes,
		},
		sequence: m.config.Sequence == moq.SeqDefaultOn,
		moq:      m,
	}
}

func (r *moqLoadTypesFn_fnRecorder) any() *moqLoadTypesFn_anyParams {
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	return &moqLoadTypesFn_anyParams{recorder: r}
}

func (a *moqLoadTypesFn_anyParams) pkg() *moqLoadTypesFn_fnRecorder {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (a *moqLoadTypesFn_anyParams) loadTestTypes() *moqLoadTypesFn_fnRecorder {
	a.recorder.anyParams |= 1 << 1
	return a.recorder
}

func (r *moqLoadTypesFn_fnRecorder) seq() *moqLoadTypesFn_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqLoadTypesFn_fnRecorder) noSeq() *moqLoadTypesFn_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqLoadTypesFn_fnRecorder) returnResults(
	typeSpecs []*dst.TypeSpec, pkgPath string, err error) *moqLoadTypesFn_fnRecorder {
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			typeSpecs []*dst.TypeSpec
			pkgPath   string
			err       error
		}
		sequence   uint32
		doFn       moqLoadTypesFn_doFn
		doReturnFn moqLoadTypesFn_doReturnFn
	}{
		values: &struct {
			typeSpecs []*dst.TypeSpec
			pkgPath   string
			err       error
		}{
			typeSpecs: typeSpecs,
			pkgPath:   pkgPath,
			err:       err,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqLoadTypesFn_fnRecorder) andDo(fn moqLoadTypesFn_doFn) *moqLoadTypesFn_fnRecorder {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqLoadTypesFn_fnRecorder) doReturnResults(fn moqLoadTypesFn_doReturnFn) *moqLoadTypesFn_fnRecorder {
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			typeSpecs []*dst.TypeSpec
			pkgPath   string
			err       error
		}
		sequence   uint32
		doFn       moqLoadTypesFn_doFn
		doReturnFn moqLoadTypesFn_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqLoadTypesFn_fnRecorder) findResults() {
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqLoadTypesFn_resultsByParams
	for n, res := range r.moq.resultsByParams {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqLoadTypesFn_resultsByParams{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqLoadTypesFn_paramsKey]*moqLoadTypesFn_results{},
		}
		r.moq.resultsByParams = append(r.moq.resultsByParams, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams) {
			copy(r.moq.resultsByParams[insertAt+1:], r.moq.resultsByParams[insertAt:0])
			r.moq.resultsByParams[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqLoadTypesFn_results{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqLoadTypesFn_fnRecorder) repeat(repeaters ...moq.Repeater) *moqLoadTypesFn_fnRecorder {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values *struct {
					typeSpecs []*dst.TypeSpec
					pkgPath   string
					err       error
				}
				sequence   uint32
				doFn       moqLoadTypesFn_doFn
				doReturnFn moqLoadTypesFn_doReturnFn
			}{
				values: &struct {
					typeSpecs []*dst.TypeSpec
					pkgPath   string
					err       error
				}{
					typeSpecs: last.values.typeSpecs,
					pkgPath:   last.values.pkgPath,
					err:       last.values.err,
				},
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqLoadTypesFn) paramsKey(params moqLoadTypesFn_params, anyParams uint64) moqLoadTypesFn_paramsKey {
	var pkgUsed string
	var pkgUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.pkg == moq.ParamIndexByValue {
			pkgUsed = params.pkg
		} else {
			pkgUsedHash = hash.DeepHash(params.pkg)
		}
	}
	var loadTestTypesUsed bool
	var loadTestTypesUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.runtime.parameterIndexing.loadTestTypes == moq.ParamIndexByValue {
			loadTestTypesUsed = params.loadTestTypes
		} else {
			loadTestTypesUsedHash = hash.DeepHash(params.loadTestTypes)
		}
	}
	return moqLoadTypesFn_paramsKey{
		params: struct {
			pkg           string
			loadTestTypes bool
		}{
			pkg:           pkgUsed,
			loadTestTypes: loadTestTypesUsed,
		},
		hashes: struct {
			pkg           hash.Hash
			loadTestTypes hash.Hash
		}{
			pkg:           pkgUsedHash,
			loadTestTypes: loadTestTypesUsedHash,
		}}
}

// Reset resets the state of the moq
func (m *moqLoadTypesFn) Reset() { m.resultsByParams = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *moqLoadTypesFn) AssertExpectationsMet() {
	for _, res := range m.resultsByParams {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.params)
			}
		}
	}
}
