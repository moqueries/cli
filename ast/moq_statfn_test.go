// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT.

package ast_test

import (
	"fmt"
	"os"

	"moqueries.org/cli/ast"
	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/impl"
	"moqueries.org/runtime/moq"
)

// moqStatFn holds the state of a moq of the StatFn type
type moqStatFn struct {
	moq *impl.Moq[
		*moqStatFn_adaptor,
		moqStatFn_params,
		moqStatFn_paramsKey,
		moqStatFn_results,
	]

	runtime moqStatFn_runtime
}

// moqStatFn_runtime holds runtime configuration for the StatFn type
type moqStatFn_runtime struct {
	parameterIndexing moqStatFn_paramIndexing
}

// moqStatFn_adaptor adapts moqStatFn as needed by the runtime
type moqStatFn_adaptor struct {
	moq *moqStatFn
}

// moqStatFn_params holds the params of the StatFn type
type moqStatFn_params struct{ name string }

// moqStatFn_paramsKey holds the map key params of the StatFn type
type moqStatFn_paramsKey struct {
	params struct{ name string }
	hashes struct{ name hash.Hash }
}

// moqStatFn_results holds the results of the StatFn type
type moqStatFn_results struct {
	result1 os.FileInfo
	result2 error
}

// moqStatFn_paramIndexing holds the parameter indexing runtime configuration
// for the StatFn type
type moqStatFn_paramIndexing struct {
	name moq.ParamIndexing
}

// moqStatFn_doFn defines the type of function needed when calling andDo for
// the StatFn type
type moqStatFn_doFn func(name string)

// moqStatFn_doReturnFn defines the type of function needed when calling
// doReturnResults for the StatFn type
type moqStatFn_doReturnFn func(name string) (os.FileInfo, error)

// moqStatFn_recorder routes recorded function calls to the moqStatFn moq
type moqStatFn_recorder struct {
	recorder *impl.Recorder[
		*moqStatFn_adaptor,
		moqStatFn_params,
		moqStatFn_paramsKey,
		moqStatFn_results,
	]
}

// moqStatFn_anyParams isolates the any params functions of the StatFn type
type moqStatFn_anyParams struct {
	recorder *moqStatFn_recorder
}

// newMoqStatFn creates a new moq of the StatFn type
func newMoqStatFn(scene *moq.Scene, config *moq.Config) *moqStatFn {
	adaptor1 := &moqStatFn_adaptor{}
	m := &moqStatFn{
		moq: impl.NewMoq[
			*moqStatFn_adaptor,
			moqStatFn_params,
			moqStatFn_paramsKey,
			moqStatFn_results,
		](scene, adaptor1, config),

		runtime: moqStatFn_runtime{parameterIndexing: moqStatFn_paramIndexing{
			name: moq.ParamIndexByValue,
		}},
	}
	adaptor1.moq = m

	scene.AddMoq(m)
	return m
}

// mock returns the moq implementation of the StatFn type
func (m *moqStatFn) mock() ast.StatFn {
	return func(name string) (os.FileInfo, error) {
		m.moq.Scene.T.Helper()
		params := moqStatFn_params{
			name: name,
		}

		var result1 os.FileInfo
		var result2 error
		if result := m.moq.Function(params); result != nil {
			result1 = result.result1
			result2 = result.result2
		}
		return result1, result2
	}
}

func (m *moqStatFn) onCall(name string) *moqStatFn_recorder {
	return &moqStatFn_recorder{
		recorder: m.moq.OnCall(moqStatFn_params{
			name: name,
		}),
	}
}

func (r *moqStatFn_recorder) any() *moqStatFn_anyParams {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.IsAnyPermitted(false) {
		return nil
	}
	return &moqStatFn_anyParams{recorder: r}
}

func (a *moqStatFn_anyParams) name() *moqStatFn_recorder {
	a.recorder.recorder.AnyParam(1)
	return a.recorder
}

func (r *moqStatFn_recorder) seq() *moqStatFn_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.Seq(true, "seq", false) {
		return nil
	}
	return r
}

func (r *moqStatFn_recorder) noSeq() *moqStatFn_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.Seq(false, "noSeq", false) {
		return nil
	}
	return r
}

func (r *moqStatFn_recorder) returnResults(result1 os.FileInfo, result2 error) *moqStatFn_recorder {
	r.recorder.Moq.Scene.T.Helper()
	r.recorder.ReturnResults(moqStatFn_results{
		result1: result1,
		result2: result2,
	})
	return r
}

func (r *moqStatFn_recorder) andDo(fn moqStatFn_doFn) *moqStatFn_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.AndDo(func(params moqStatFn_params) {
		fn(params.name)
	}, false) {
		return nil
	}
	return r
}

func (r *moqStatFn_recorder) doReturnResults(fn moqStatFn_doReturnFn) *moqStatFn_recorder {
	r.recorder.Moq.Scene.T.Helper()
	r.recorder.DoReturnResults(func(params moqStatFn_params) *moqStatFn_results {
		result1, result2 := fn(params.name)
		return &moqStatFn_results{
			result1: result1,
			result2: result2,
		}
	})
	return r
}

func (r *moqStatFn_recorder) repeat(repeaters ...moq.Repeater) *moqStatFn_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.Repeat(repeaters, false) {
		return nil
	}
	return r
}

func (*moqStatFn_adaptor) PrettyParams(params moqStatFn_params) string {
	return fmt.Sprintf("StatFn(%#v)", params.name)
}

func (a *moqStatFn_adaptor) ParamsKey(params moqStatFn_params, anyParams uint64) moqStatFn_paramsKey {
	a.moq.moq.Scene.T.Helper()
	nameUsed, nameUsedHash := impl.ParamKey(
		params.name, 1, a.moq.runtime.parameterIndexing.name, anyParams)
	return moqStatFn_paramsKey{
		params: struct{ name string }{
			name: nameUsed,
		},
		hashes: struct{ name hash.Hash }{
			name: nameUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *moqStatFn) Reset() {
	m.moq.Reset()
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *moqStatFn) AssertExpectationsMet() {
	m.moq.Scene.T.Helper()
	m.moq.AssertExpectationsMet()
}
