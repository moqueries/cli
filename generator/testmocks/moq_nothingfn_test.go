// Code generated by Moqueries - https://github.com/myshkin5/moqueries - DO NOT EDIT!

package testmocks_test

import (
	"math/bits"
	"sync/atomic"

	"github.com/myshkin5/moqueries/generator/testmocks"
	"github.com/myshkin5/moqueries/moq"
)

// mockNothingFn holds the state of a mock of the NothingFn type
type mockNothingFn struct {
	scene           *moq.Scene
	config          moq.MockConfig
	resultsByParams []mockNothingFn_resultsByParams
}

// mockNothingFn_mock isolates the mock interface of the NothingFn type
type mockNothingFn_mock struct {
	mock *mockNothingFn
}

// mockNothingFn_params holds the params of the NothingFn type
type mockNothingFn_params struct{}

// mockNothingFn_paramsKey holds the map key params of the NothingFn type
type mockNothingFn_paramsKey struct{}

// mockNothingFn_resultsByParams contains the results for a given set of parameters for the NothingFn type
type mockNothingFn_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[mockNothingFn_paramsKey]*mockNothingFn_results
}

// mockNothingFn_doFn defines the type of function needed when calling andDo for the NothingFn type
type mockNothingFn_doFn func()

// mockNothingFn_doReturnFn defines the type of function needed when calling doReturnResults for the NothingFn type
type mockNothingFn_doReturnFn func()

// mockNothingFn_results holds the results of the NothingFn type
type mockNothingFn_results struct {
	params  mockNothingFn_params
	results []struct {
		values *struct {
		}
		sequence   uint32
		doFn       mockNothingFn_doFn
		doReturnFn mockNothingFn_doReturnFn
	}
	index    uint32
	anyTimes bool
}

// mockNothingFn_fnRecorder routes recorded function calls to the mockNothingFn mock
type mockNothingFn_fnRecorder struct {
	params    mockNothingFn_params
	paramsKey mockNothingFn_paramsKey
	anyParams uint64
	sequence  bool
	results   *mockNothingFn_results
	mock      *mockNothingFn
}

// newMockNothingFn creates a new mock of the NothingFn type
func newMockNothingFn(scene *moq.Scene, config *moq.MockConfig) *mockNothingFn {
	if config == nil {
		config = &moq.MockConfig{}
	}
	m := &mockNothingFn{
		scene:  scene,
		config: *config,
	}
	scene.AddMock(m)
	return m
}

// mock returns the mock implementation of the NothingFn type
func (m *mockNothingFn) mock() testmocks.NothingFn {
	return func() { mock := &mockNothingFn_mock{mock: m}; mock.fn() }
}

func (m *mockNothingFn_mock) fn() {
	params := mockNothingFn_params{}
	var results *mockNothingFn_results
	for _, resultsByParams := range m.mock.resultsByParams {
		paramsKey := mockNothingFn_paramsKey{}
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.mock.config.Expectation == moq.Strict {
			m.mock.scene.MoqT.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= len(results.results) {
		if !results.anyTimes {
			if m.mock.config.Expectation == moq.Strict {
				m.mock.scene.MoqT.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = len(results.results) - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.mock.scene.NextMockSequence()
		if (!results.anyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.mock.scene.MoqT.Fatalf("Call sequence does not match %#v", params)
		}
	}

	if result.doFn != nil {
		result.doFn()
	}

	if result.doReturnFn != nil {
		result.doReturnFn()
	}
	return
}

func (m *mockNothingFn) onCall() *mockNothingFn_fnRecorder {
	return &mockNothingFn_fnRecorder{
		params:    mockNothingFn_params{},
		paramsKey: mockNothingFn_paramsKey{},
		sequence:  m.config.Sequence == moq.SeqDefaultOn,
		mock:      m,
	}
}

func (r *mockNothingFn_fnRecorder) seq() *mockNothingFn_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("seq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = true
	return r
}

func (r *mockNothingFn_fnRecorder) noSeq() *mockNothingFn_fnRecorder {
	if r.results != nil {
		r.mock.scene.MoqT.Fatalf("noSeq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = false
	return r
}

func (r *mockNothingFn_fnRecorder) returnResults() *mockNothingFn_fnRecorder {
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.mock.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
		}
		sequence   uint32
		doFn       mockNothingFn_doFn
		doReturnFn mockNothingFn_doReturnFn
	}{
		values: &struct {
		}{},
		sequence: sequence,
	})
	return r
}

func (r *mockNothingFn_fnRecorder) andDo(fn mockNothingFn_doFn) *mockNothingFn_fnRecorder {
	if r.results == nil {
		r.mock.scene.MoqT.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *mockNothingFn_fnRecorder) doReturnResults(fn mockNothingFn_doReturnFn) *mockNothingFn_fnRecorder {
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.mock.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
		}
		sequence   uint32
		doFn       mockNothingFn_doFn
		doReturnFn mockNothingFn_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *mockNothingFn_fnRecorder) findResults() {
	if r.results == nil {
		anyCount := bits.OnesCount64(r.anyParams)
		insertAt := -1
		var results *mockNothingFn_resultsByParams
		for n, res := range r.mock.resultsByParams {
			if res.anyParams == r.anyParams {
				results = &res
				break
			}
			if res.anyCount > anyCount {
				insertAt = n
			}
		}
		if results == nil {
			results = &mockNothingFn_resultsByParams{
				anyCount:  anyCount,
				anyParams: r.anyParams,
				results:   map[mockNothingFn_paramsKey]*mockNothingFn_results{},
			}
			r.mock.resultsByParams = append(r.mock.resultsByParams, *results)
			if insertAt != -1 && insertAt+1 < len(r.mock.resultsByParams) {
				copy(r.mock.resultsByParams[insertAt+1:], r.mock.resultsByParams[insertAt:0])
				r.mock.resultsByParams[insertAt] = *results
			}
		}

		paramsKey := mockNothingFn_paramsKey{}

		var ok bool
		r.results, ok = results.results[paramsKey]
		if !ok {
			r.results = &mockNothingFn_results{
				params:   r.params,
				results:  nil,
				index:    0,
				anyTimes: false,
			}
			results.results[paramsKey] = r.results
		}
	}
}

func (r *mockNothingFn_fnRecorder) times(count int) *mockNothingFn_fnRecorder {
	if r.results == nil {
		r.mock.scene.MoqT.Fatalf("returnResults or doReturnResults must be called before calling times")
		return nil
	}
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < count-1; n++ {
		if last.sequence != 0 {
			last = struct {
				values *struct {
				}
				sequence   uint32
				doFn       mockNothingFn_doFn
				doReturnFn mockNothingFn_doReturnFn
			}{
				values: &struct {
				}{},
				sequence: r.mock.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (r *mockNothingFn_fnRecorder) anyTimes() {
	if r.results == nil {
		r.mock.scene.MoqT.Fatalf("returnResults or doReturnResults must be called before calling anyTimes")
		return
	}
	r.results.anyTimes = true
}

// Reset resets the state of the mock
func (m *mockNothingFn) Reset() { m.resultsByParams = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *mockNothingFn) AssertExpectationsMet() {
	for _, res := range m.resultsByParams {
		for _, results := range res.results {
			missing := len(results.results) - int(atomic.LoadUint32(&results.index))
			if missing == 1 && results.anyTimes == true {
				continue
			}
			if missing > 0 {
				m.scene.MoqT.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.params)
			}
		}
	}
}
