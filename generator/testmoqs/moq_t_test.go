// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT.

package testmoqs_test

import (
	"fmt"

	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/impl"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that moq.T is mocked completely
var _ moq.T = (*moqT_mock)(nil)

// moqT holds the state of a moq of the T type
type moqT struct {
	moq *moqT_mock

	moq_Errorf *impl.Moq[
		*moqT_Errorf_adaptor,
		moqT_Errorf_params,
		moqT_Errorf_paramsKey,
		moqT_Errorf_results,
	]
	moq_Fatalf *impl.Moq[
		*moqT_Fatalf_adaptor,
		moqT_Fatalf_params,
		moqT_Fatalf_paramsKey,
		moqT_Fatalf_results,
	]
	moq_Helper *impl.Moq[
		*moqT_Helper_adaptor,
		moqT_Helper_params,
		moqT_Helper_paramsKey,
		moqT_Helper_results,
	]

	runtime moqT_runtime
}

// moqT_mock isolates the mock interface of the T type
type moqT_mock struct {
	moq *moqT
}

// moqT_recorder isolates the recorder interface of the T type
type moqT_recorder struct {
	moq *moqT
}

// moqT_runtime holds runtime configuration for the T type
type moqT_runtime struct {
	parameterIndexing struct {
		Errorf moqT_Errorf_paramIndexing
		Fatalf moqT_Fatalf_paramIndexing
		Helper moqT_Helper_paramIndexing
	}
}

// moqT_Errorf_adaptor adapts moqT as needed by the runtime
type moqT_Errorf_adaptor struct {
	moq *moqT
}

// moqT_Errorf_params holds the params of the T type
type moqT_Errorf_params struct {
	format string
	args   []interface{}
}

// moqT_Errorf_paramsKey holds the map key params of the T type
type moqT_Errorf_paramsKey struct {
	params struct{ format string }
	hashes struct {
		format hash.Hash
		args   hash.Hash
	}
}

// moqT_Errorf_results holds the results of the T type
type moqT_Errorf_results struct{}

// moqT_Errorf_paramIndexing holds the parameter indexing runtime configuration
// for the T type
type moqT_Errorf_paramIndexing struct {
	format moq.ParamIndexing
	args   moq.ParamIndexing
}

// moqT_Errorf_doFn defines the type of function needed when calling andDo for
// the T type
type moqT_Errorf_doFn func(format string, args ...interface{})

// moqT_Errorf_doReturnFn defines the type of function needed when calling
// doReturnResults for the T type
type moqT_Errorf_doReturnFn func(format string, args ...interface{})

// moqT_Errorf_recorder routes recorded function calls to the moqT moq
type moqT_Errorf_recorder struct {
	recorder *impl.Recorder[
		*moqT_Errorf_adaptor,
		moqT_Errorf_params,
		moqT_Errorf_paramsKey,
		moqT_Errorf_results,
	]
}

// moqT_Errorf_anyParams isolates the any params functions of the T type
type moqT_Errorf_anyParams struct {
	recorder *moqT_Errorf_recorder
}

// moqT_Fatalf_adaptor adapts moqT as needed by the runtime
type moqT_Fatalf_adaptor struct {
	moq *moqT
}

// moqT_Fatalf_params holds the params of the T type
type moqT_Fatalf_params struct {
	format string
	args   []interface{}
}

// moqT_Fatalf_paramsKey holds the map key params of the T type
type moqT_Fatalf_paramsKey struct {
	params struct{ format string }
	hashes struct {
		format hash.Hash
		args   hash.Hash
	}
}

// moqT_Fatalf_results holds the results of the T type
type moqT_Fatalf_results struct{}

// moqT_Fatalf_paramIndexing holds the parameter indexing runtime configuration
// for the T type
type moqT_Fatalf_paramIndexing struct {
	format moq.ParamIndexing
	args   moq.ParamIndexing
}

// moqT_Fatalf_doFn defines the type of function needed when calling andDo for
// the T type
type moqT_Fatalf_doFn func(format string, args ...interface{})

// moqT_Fatalf_doReturnFn defines the type of function needed when calling
// doReturnResults for the T type
type moqT_Fatalf_doReturnFn func(format string, args ...interface{})

// moqT_Fatalf_recorder routes recorded function calls to the moqT moq
type moqT_Fatalf_recorder struct {
	recorder *impl.Recorder[
		*moqT_Fatalf_adaptor,
		moqT_Fatalf_params,
		moqT_Fatalf_paramsKey,
		moqT_Fatalf_results,
	]
}

// moqT_Fatalf_anyParams isolates the any params functions of the T type
type moqT_Fatalf_anyParams struct {
	recorder *moqT_Fatalf_recorder
}

// moqT_Helper_adaptor adapts moqT as needed by the runtime
type moqT_Helper_adaptor struct {
	moq *moqT
}

// moqT_Helper_params holds the params of the T type
type moqT_Helper_params struct{}

// moqT_Helper_paramsKey holds the map key params of the T type
type moqT_Helper_paramsKey struct {
	params struct{}
	hashes struct{}
}

// moqT_Helper_results holds the results of the T type
type moqT_Helper_results struct{}

// moqT_Helper_paramIndexing holds the parameter indexing runtime configuration
// for the T type
type moqT_Helper_paramIndexing struct{}

// moqT_Helper_doFn defines the type of function needed when calling andDo for
// the T type
type moqT_Helper_doFn func()

// moqT_Helper_doReturnFn defines the type of function needed when calling
// doReturnResults for the T type
type moqT_Helper_doReturnFn func()

// moqT_Helper_recorder routes recorded function calls to the moqT moq
type moqT_Helper_recorder struct {
	recorder *impl.Recorder[
		*moqT_Helper_adaptor,
		moqT_Helper_params,
		moqT_Helper_paramsKey,
		moqT_Helper_results,
	]
}

// moqT_Helper_anyParams isolates the any params functions of the T type
type moqT_Helper_anyParams struct {
	recorder *moqT_Helper_recorder
}

// newMoqT creates a new moq of the T type
func newMoqT(scene *moq.Scene, config *moq.Config) *moqT {
	adaptor1 := &moqT_Errorf_adaptor{}
	adaptor2 := &moqT_Fatalf_adaptor{}
	adaptor3 := &moqT_Helper_adaptor{}
	m := &moqT{
		moq: &moqT_mock{},

		moq_Errorf: impl.NewMoq[
			*moqT_Errorf_adaptor,
			moqT_Errorf_params,
			moqT_Errorf_paramsKey,
			moqT_Errorf_results,
		](scene, adaptor1, config),
		moq_Fatalf: impl.NewMoq[
			*moqT_Fatalf_adaptor,
			moqT_Fatalf_params,
			moqT_Fatalf_paramsKey,
			moqT_Fatalf_results,
		](scene, adaptor2, config),
		moq_Helper: impl.NewMoq[
			*moqT_Helper_adaptor,
			moqT_Helper_params,
			moqT_Helper_paramsKey,
			moqT_Helper_results,
		](scene, adaptor3, config),

		runtime: moqT_runtime{parameterIndexing: struct {
			Errorf moqT_Errorf_paramIndexing
			Fatalf moqT_Fatalf_paramIndexing
			Helper moqT_Helper_paramIndexing
		}{
			Errorf: moqT_Errorf_paramIndexing{
				format: moq.ParamIndexByValue,
				args:   moq.ParamIndexByHash,
			},
			Fatalf: moqT_Fatalf_paramIndexing{
				format: moq.ParamIndexByValue,
				args:   moq.ParamIndexByHash,
			},
			Helper: moqT_Helper_paramIndexing{},
		}},
	}
	m.moq.moq = m

	adaptor1.moq = m
	adaptor2.moq = m
	adaptor3.moq = m

	scene.AddMoq(m)
	return m
}

// mock returns the mock implementation of the T type
func (m *moqT) mock() *moqT_mock { return m.moq }

func (m *moqT_mock) Errorf(format string, args ...interface{}) {
	m.moq.moq_Errorf.Scene.T.Helper()
	params := moqT_Errorf_params{
		format: format,
		args:   args,
	}

	m.moq.moq_Errorf.Function(params)
}

func (m *moqT_mock) Fatalf(format string, args ...interface{}) {
	m.moq.moq_Fatalf.Scene.T.Helper()
	params := moqT_Fatalf_params{
		format: format,
		args:   args,
	}

	m.moq.moq_Fatalf.Function(params)
}

func (m *moqT_mock) Helper() {
	m.moq.moq_Helper.Scene.T.Helper()
	params := moqT_Helper_params{}

	m.moq.moq_Helper.Function(params)
}

// onCall returns the recorder implementation of the T type
func (m *moqT) onCall() *moqT_recorder {
	return &moqT_recorder{
		moq: m,
	}
}

func (m *moqT_recorder) Errorf(format string, args ...interface{}) *moqT_Errorf_recorder {
	return &moqT_Errorf_recorder{
		recorder: m.moq.moq_Errorf.OnCall(moqT_Errorf_params{
			format: format,
			args:   args,
		}),
	}
}

func (r *moqT_Errorf_recorder) any() *moqT_Errorf_anyParams {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.IsAnyPermitted(false) {
		return nil
	}
	return &moqT_Errorf_anyParams{recorder: r}
}

func (a *moqT_Errorf_anyParams) format() *moqT_Errorf_recorder {
	a.recorder.recorder.AnyParam(1)
	return a.recorder
}

func (a *moqT_Errorf_anyParams) args() *moqT_Errorf_recorder {
	a.recorder.recorder.AnyParam(2)
	return a.recorder
}

func (r *moqT_Errorf_recorder) seq() *moqT_Errorf_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.Seq(true, "seq", false) {
		return nil
	}
	return r
}

func (r *moqT_Errorf_recorder) noSeq() *moqT_Errorf_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.Seq(false, "noSeq", false) {
		return nil
	}
	return r
}

func (r *moqT_Errorf_recorder) returnResults() *moqT_Errorf_recorder {
	r.recorder.Moq.Scene.T.Helper()
	r.recorder.ReturnResults(moqT_Errorf_results{})
	return r
}

func (r *moqT_Errorf_recorder) andDo(fn moqT_Errorf_doFn) *moqT_Errorf_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.AndDo(func(params moqT_Errorf_params) {
		fn(params.format, params.args...)
	}, false) {
		return nil
	}
	return r
}

func (r *moqT_Errorf_recorder) doReturnResults(fn moqT_Errorf_doReturnFn) *moqT_Errorf_recorder {
	r.recorder.Moq.Scene.T.Helper()
	r.recorder.DoReturnResults(func(params moqT_Errorf_params) *moqT_Errorf_results {
		fn(params.format, params.args...)
		return &moqT_Errorf_results{}
	})
	return r
}

func (r *moqT_Errorf_recorder) repeat(repeaters ...moq.Repeater) *moqT_Errorf_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.Repeat(repeaters, false) {
		return nil
	}
	return r
}

func (*moqT_Errorf_adaptor) PrettyParams(params moqT_Errorf_params) string {
	return fmt.Sprintf("Errorf(%#v, %#v)", params.format, params.args)
}

func (a *moqT_Errorf_adaptor) ParamsKey(params moqT_Errorf_params, anyParams uint64) moqT_Errorf_paramsKey {
	a.moq.moq_Errorf.Scene.T.Helper()
	formatUsed, formatUsedHash := impl.ParamKey(
		params.format, 1, a.moq.runtime.parameterIndexing.Errorf.format, anyParams)
	argsUsedHash := impl.HashOnlyParamKey(a.moq.moq_Errorf.Scene.T,
		params.args, "args", 2, a.moq.runtime.parameterIndexing.Errorf.args, anyParams)
	return moqT_Errorf_paramsKey{
		params: struct{ format string }{
			format: formatUsed,
		},
		hashes: struct {
			format hash.Hash
			args   hash.Hash
		}{
			format: formatUsedHash,
			args:   argsUsedHash,
		},
	}
}

func (m *moqT_recorder) Fatalf(format string, args ...interface{}) *moqT_Fatalf_recorder {
	return &moqT_Fatalf_recorder{
		recorder: m.moq.moq_Fatalf.OnCall(moqT_Fatalf_params{
			format: format,
			args:   args,
		}),
	}
}

func (r *moqT_Fatalf_recorder) any() *moqT_Fatalf_anyParams {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.IsAnyPermitted(false) {
		return nil
	}
	return &moqT_Fatalf_anyParams{recorder: r}
}

func (a *moqT_Fatalf_anyParams) format() *moqT_Fatalf_recorder {
	a.recorder.recorder.AnyParam(1)
	return a.recorder
}

func (a *moqT_Fatalf_anyParams) args() *moqT_Fatalf_recorder {
	a.recorder.recorder.AnyParam(2)
	return a.recorder
}

func (r *moqT_Fatalf_recorder) seq() *moqT_Fatalf_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.Seq(true, "seq", false) {
		return nil
	}
	return r
}

func (r *moqT_Fatalf_recorder) noSeq() *moqT_Fatalf_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.Seq(false, "noSeq", false) {
		return nil
	}
	return r
}

func (r *moqT_Fatalf_recorder) returnResults() *moqT_Fatalf_recorder {
	r.recorder.Moq.Scene.T.Helper()
	r.recorder.ReturnResults(moqT_Fatalf_results{})
	return r
}

func (r *moqT_Fatalf_recorder) andDo(fn moqT_Fatalf_doFn) *moqT_Fatalf_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.AndDo(func(params moqT_Fatalf_params) {
		fn(params.format, params.args...)
	}, false) {
		return nil
	}
	return r
}

func (r *moqT_Fatalf_recorder) doReturnResults(fn moqT_Fatalf_doReturnFn) *moqT_Fatalf_recorder {
	r.recorder.Moq.Scene.T.Helper()
	r.recorder.DoReturnResults(func(params moqT_Fatalf_params) *moqT_Fatalf_results {
		fn(params.format, params.args...)
		return &moqT_Fatalf_results{}
	})
	return r
}

func (r *moqT_Fatalf_recorder) repeat(repeaters ...moq.Repeater) *moqT_Fatalf_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.Repeat(repeaters, false) {
		return nil
	}
	return r
}

func (*moqT_Fatalf_adaptor) PrettyParams(params moqT_Fatalf_params) string {
	return fmt.Sprintf("Fatalf(%#v, %#v)", params.format, params.args)
}

func (a *moqT_Fatalf_adaptor) ParamsKey(params moqT_Fatalf_params, anyParams uint64) moqT_Fatalf_paramsKey {
	a.moq.moq_Fatalf.Scene.T.Helper()
	formatUsed, formatUsedHash := impl.ParamKey(
		params.format, 1, a.moq.runtime.parameterIndexing.Fatalf.format, anyParams)
	argsUsedHash := impl.HashOnlyParamKey(a.moq.moq_Fatalf.Scene.T,
		params.args, "args", 2, a.moq.runtime.parameterIndexing.Fatalf.args, anyParams)
	return moqT_Fatalf_paramsKey{
		params: struct{ format string }{
			format: formatUsed,
		},
		hashes: struct {
			format hash.Hash
			args   hash.Hash
		}{
			format: formatUsedHash,
			args:   argsUsedHash,
		},
	}
}

func (m *moqT_recorder) Helper() *moqT_Helper_recorder {
	return &moqT_Helper_recorder{
		recorder: m.moq.moq_Helper.OnCall(moqT_Helper_params{}),
	}
}

func (r *moqT_Helper_recorder) any() *moqT_Helper_anyParams {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.IsAnyPermitted(false) {
		return nil
	}
	return &moqT_Helper_anyParams{recorder: r}
}

func (r *moqT_Helper_recorder) seq() *moqT_Helper_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.Seq(true, "seq", false) {
		return nil
	}
	return r
}

func (r *moqT_Helper_recorder) noSeq() *moqT_Helper_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.Seq(false, "noSeq", false) {
		return nil
	}
	return r
}

func (r *moqT_Helper_recorder) returnResults() *moqT_Helper_recorder {
	r.recorder.Moq.Scene.T.Helper()
	r.recorder.ReturnResults(moqT_Helper_results{})
	return r
}

func (r *moqT_Helper_recorder) andDo(fn moqT_Helper_doFn) *moqT_Helper_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.AndDo(func(params moqT_Helper_params) {
		fn()
	}, false) {
		return nil
	}
	return r
}

func (r *moqT_Helper_recorder) doReturnResults(fn moqT_Helper_doReturnFn) *moqT_Helper_recorder {
	r.recorder.Moq.Scene.T.Helper()
	r.recorder.DoReturnResults(func(params moqT_Helper_params) *moqT_Helper_results {
		fn()
		return &moqT_Helper_results{}
	})
	return r
}

func (r *moqT_Helper_recorder) repeat(repeaters ...moq.Repeater) *moqT_Helper_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.Repeat(repeaters, false) {
		return nil
	}
	return r
}

func (*moqT_Helper_adaptor) PrettyParams(params moqT_Helper_params) string {
	return fmt.Sprintf("Helper()")
}

func (a *moqT_Helper_adaptor) ParamsKey(params moqT_Helper_params, anyParams uint64) moqT_Helper_paramsKey {
	a.moq.moq_Helper.Scene.T.Helper()
	return moqT_Helper_paramsKey{
		params: struct{}{},
		hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *moqT) Reset() {
	m.moq_Errorf.Reset()
	m.moq_Fatalf.Reset()
	m.moq_Helper.Reset()
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *moqT) AssertExpectationsMet() {
	m.moq_Errorf.Scene.T.Helper()
	m.moq_Errorf.AssertExpectationsMet()
	m.moq_Fatalf.AssertExpectationsMet()
	m.moq_Helper.AssertExpectationsMet()
}
