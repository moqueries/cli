// Code generated by Moqueries - https://github.com/myshkin5/moqueries - DO NOT EDIT!

package testmoqs_test

import (
	"math/bits"
	"sync/atomic"

	"github.com/myshkin5/moqueries/generator/testmoqs"
	"github.com/myshkin5/moqueries/hash"
	"github.com/myshkin5/moqueries/moq"
)

// moqPassByReferenceFn holds the state of a moq of the PassByReferenceFn type
type moqPassByReferenceFn struct {
	scene  *moq.Scene
	config moq.Config
	moq    *moqPassByReferenceFn_mock

	resultsByParams []moqPassByReferenceFn_resultsByParams

	runtime struct {
		parameterIndexing struct {
			p moq.ParamIndexing
		}
	}
}

// moqPassByReferenceFn_mock isolates the mock interface of the PassByReferenceFn type
type moqPassByReferenceFn_mock struct {
	moq *moqPassByReferenceFn
}

// moqPassByReferenceFn_params holds the params of the PassByReferenceFn type
type moqPassByReferenceFn_params struct {
	p *testmoqs.PassByReferenceParams
}

// moqPassByReferenceFn_paramsKey holds the map key params of the PassByReferenceFn type
type moqPassByReferenceFn_paramsKey struct {
	params struct {
		p *testmoqs.PassByReferenceParams
	}
	hashes struct{ p hash.Hash }
}

// moqPassByReferenceFn_resultsByParams contains the results for a given set of parameters for the PassByReferenceFn type
type moqPassByReferenceFn_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqPassByReferenceFn_paramsKey]*moqPassByReferenceFn_results
}

// moqPassByReferenceFn_doFn defines the type of function needed when calling andDo for the PassByReferenceFn type
type moqPassByReferenceFn_doFn func(p *testmoqs.PassByReferenceParams)

// moqPassByReferenceFn_doReturnFn defines the type of function needed when calling doReturnResults for the PassByReferenceFn type
type moqPassByReferenceFn_doReturnFn func(p *testmoqs.PassByReferenceParams) (sResult string, err error)

// moqPassByReferenceFn_results holds the results of the PassByReferenceFn type
type moqPassByReferenceFn_results struct {
	params  moqPassByReferenceFn_params
	results []struct {
		values *struct {
			sResult string
			err     error
		}
		sequence   uint32
		doFn       moqPassByReferenceFn_doFn
		doReturnFn moqPassByReferenceFn_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqPassByReferenceFn_fnRecorder routes recorded function calls to the moqPassByReferenceFn moq
type moqPassByReferenceFn_fnRecorder struct {
	params    moqPassByReferenceFn_params
	anyParams uint64
	sequence  bool
	results   *moqPassByReferenceFn_results
	moq       *moqPassByReferenceFn
}

// moqPassByReferenceFn_anyParams isolates the any params functions of the PassByReferenceFn type
type moqPassByReferenceFn_anyParams struct {
	recorder *moqPassByReferenceFn_fnRecorder
}

// newMoqPassByReferenceFn creates a new moq of the PassByReferenceFn type
func newMoqPassByReferenceFn(scene *moq.Scene, config *moq.Config) *moqPassByReferenceFn {
	if config == nil {
		config = &moq.Config{}
	}
	m := &moqPassByReferenceFn{
		scene:  scene,
		config: *config,
		moq:    &moqPassByReferenceFn_mock{},

		runtime: struct {
			parameterIndexing struct {
				p moq.ParamIndexing
			}
		}{parameterIndexing: struct {
			p moq.ParamIndexing
		}{
			p: moq.ParamIndexByHash,
		}},
	}
	m.moq.moq = m

	scene.AddMoq(m)
	return m
}

// mock returns the moq implementation of the PassByReferenceFn type
func (m *moqPassByReferenceFn) mock() testmoqs.PassByReferenceFn {
	return func(p *testmoqs.PassByReferenceParams) (_ string, _ error) {
		moq := &moqPassByReferenceFn_mock{moq: m}
		return moq.fn(p)
	}
}

func (m *moqPassByReferenceFn_mock) fn(p *testmoqs.PassByReferenceParams) (sResult string, err error) {
	params := moqPassByReferenceFn_params{
		p: p,
	}
	var results *moqPassByReferenceFn_results
	for _, resultsByParams := range m.moq.resultsByParams {
		paramsKey := m.moq.paramsKey(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match %#v", params)
		}
	}

	if result.doFn != nil {
		result.doFn(p)
	}

	if result.values != nil {
		sResult = result.values.sResult
		err = result.values.err
	}
	if result.doReturnFn != nil {
		sResult, err = result.doReturnFn(p)
	}
	return
}

func (m *moqPassByReferenceFn) onCall(p *testmoqs.PassByReferenceParams) *moqPassByReferenceFn_fnRecorder {
	return &moqPassByReferenceFn_fnRecorder{
		params: moqPassByReferenceFn_params{
			p: p,
		},
		sequence: m.config.Sequence == moq.SeqDefaultOn,
		moq:      m,
	}
}

func (r *moqPassByReferenceFn_fnRecorder) any() *moqPassByReferenceFn_anyParams {
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	return &moqPassByReferenceFn_anyParams{recorder: r}
}

func (a *moqPassByReferenceFn_anyParams) p() *moqPassByReferenceFn_fnRecorder {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (r *moqPassByReferenceFn_fnRecorder) seq() *moqPassByReferenceFn_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqPassByReferenceFn_fnRecorder) noSeq() *moqPassByReferenceFn_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqPassByReferenceFn_fnRecorder) returnResults(sResult string, err error) *moqPassByReferenceFn_fnRecorder {
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			sResult string
			err     error
		}
		sequence   uint32
		doFn       moqPassByReferenceFn_doFn
		doReturnFn moqPassByReferenceFn_doReturnFn
	}{
		values: &struct {
			sResult string
			err     error
		}{
			sResult: sResult,
			err:     err,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqPassByReferenceFn_fnRecorder) andDo(fn moqPassByReferenceFn_doFn) *moqPassByReferenceFn_fnRecorder {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqPassByReferenceFn_fnRecorder) doReturnResults(fn moqPassByReferenceFn_doReturnFn) *moqPassByReferenceFn_fnRecorder {
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			sResult string
			err     error
		}
		sequence   uint32
		doFn       moqPassByReferenceFn_doFn
		doReturnFn moqPassByReferenceFn_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqPassByReferenceFn_fnRecorder) findResults() {
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqPassByReferenceFn_resultsByParams
	for n, res := range r.moq.resultsByParams {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqPassByReferenceFn_resultsByParams{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqPassByReferenceFn_paramsKey]*moqPassByReferenceFn_results{},
		}
		r.moq.resultsByParams = append(r.moq.resultsByParams, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams) {
			copy(r.moq.resultsByParams[insertAt+1:], r.moq.resultsByParams[insertAt:0])
			r.moq.resultsByParams[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqPassByReferenceFn_results{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqPassByReferenceFn_fnRecorder) repeat(repeaters ...moq.Repeater) *moqPassByReferenceFn_fnRecorder {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values *struct {
					sResult string
					err     error
				}
				sequence   uint32
				doFn       moqPassByReferenceFn_doFn
				doReturnFn moqPassByReferenceFn_doReturnFn
			}{
				values: &struct {
					sResult string
					err     error
				}{
					sResult: last.values.sResult,
					err:     last.values.err,
				},
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqPassByReferenceFn) paramsKey(params moqPassByReferenceFn_params, anyParams uint64) moqPassByReferenceFn_paramsKey {
	var pUsed *testmoqs.PassByReferenceParams
	var pUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.p == moq.ParamIndexByValue {
			pUsed = params.p
		} else {
			pUsedHash = hash.DeepHash(params.p)
		}
	}
	return moqPassByReferenceFn_paramsKey{
		params: struct {
			p *testmoqs.PassByReferenceParams
		}{
			p: pUsed,
		},
		hashes: struct{ p hash.Hash }{
			p: pUsedHash,
		}}
}

// Reset resets the state of the moq
func (m *moqPassByReferenceFn) Reset() { m.resultsByParams = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *moqPassByReferenceFn) AssertExpectationsMet() {
	for _, res := range m.resultsByParams {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.params)
			}
		}
	}
}
