// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package testmoqs_test

import (
	"fmt"
	"io"
	"math/bits"
	"sync/atomic"

	"moqueries.org/cli/generator/testmoqs"
	"moqueries.org/cli/generator/testmoqs/other"
	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// moqUsualFn holds the state of a moq of the UsualFn type
type moqUsualFn struct {
	scene  *moq.Scene
	config moq.Config
	moq    *moqUsualFn_mock

	resultsByParams []moqUsualFn_resultsByParams

	runtime struct {
		parameterIndexing struct {
			sParam moq.ParamIndexing
			bParam moq.ParamIndexing
		}
	}
}

// moqUsualFn_mock isolates the mock interface of the UsualFn type
type moqUsualFn_mock struct {
	moq *moqUsualFn
}

// moqUsualFn_params holds the params of the UsualFn type
type moqUsualFn_params struct {
	sParam string
	bParam bool
}

// moqUsualFn_paramsKey holds the map key params of the UsualFn type
type moqUsualFn_paramsKey struct {
	params struct {
		sParam string
		bParam bool
	}
	hashes struct {
		sParam hash.Hash
		bParam hash.Hash
	}
}

// moqUsualFn_resultsByParams contains the results for a given set of
// parameters for the UsualFn type
type moqUsualFn_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqUsualFn_paramsKey]*moqUsualFn_results
}

// moqUsualFn_doFn defines the type of function needed when calling andDo for
// the UsualFn type
type moqUsualFn_doFn func(sParam string, bParam bool)

// moqUsualFn_doReturnFn defines the type of function needed when calling
// doReturnResults for the UsualFn type
type moqUsualFn_doReturnFn func(sParam string, bParam bool) (sResult string, err error)

// moqUsualFn_results holds the results of the UsualFn type
type moqUsualFn_results struct {
	params  moqUsualFn_params
	results []struct {
		values *struct {
			sResult string
			err     error
		}
		sequence   uint32
		doFn       moqUsualFn_doFn
		doReturnFn moqUsualFn_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqUsualFn_fnRecorder routes recorded function calls to the moqUsualFn moq
type moqUsualFn_fnRecorder struct {
	params    moqUsualFn_params
	anyParams uint64
	sequence  bool
	results   *moqUsualFn_results
	moq       *moqUsualFn
}

// moqUsualFn_anyParams isolates the any params functions of the UsualFn type
type moqUsualFn_anyParams struct {
	recorder *moqUsualFn_fnRecorder
}

// newMoqUsualFn creates a new moq of the UsualFn type
func newMoqUsualFn(scene *moq.Scene, config *moq.Config) *moqUsualFn {
	if config == nil {
		config = &moq.Config{}
	}
	m := &moqUsualFn{
		scene:  scene,
		config: *config,
		moq:    &moqUsualFn_mock{},

		runtime: struct {
			parameterIndexing struct {
				sParam moq.ParamIndexing
				bParam moq.ParamIndexing
			}
		}{parameterIndexing: struct {
			sParam moq.ParamIndexing
			bParam moq.ParamIndexing
		}{
			sParam: moq.ParamIndexByValue,
			bParam: moq.ParamIndexByValue,
		}},
	}
	m.moq.moq = m

	scene.AddMoq(m)
	return m
}

// mock returns the moq implementation of the UsualFn type
func (m *moqUsualFn) mock() testmoqs.UsualFn {
	return func(sParam string, bParam bool) (_ string, _ error) {
		m.scene.T.Helper()
		moq := &moqUsualFn_mock{moq: m}
		return moq.fn(sParam, bParam)
	}
}

func (m *moqUsualFn_mock) fn(sParam string, bParam bool) (sResult string, err error) {
	m.moq.scene.T.Helper()
	params := moqUsualFn_params{
		sParam: sParam,
		bParam: bParam,
	}
	var results *moqUsualFn_results
	for _, resultsByParams := range m.moq.resultsByParams {
		paramsKey := m.moq.paramsKey(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call to %s", m.moq.prettyParams(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to %s", m.moq.prettyParams(params))
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match call to %s", m.moq.prettyParams(params))
		}
	}

	if result.doFn != nil {
		result.doFn(sParam, bParam)
	}

	if result.values != nil {
		sResult = result.values.sResult
		err = result.values.err
	}
	if result.doReturnFn != nil {
		sResult, err = result.doReturnFn(sParam, bParam)
	}
	return
}

func (m *moqUsualFn) onCall(sParam string, bParam bool) *moqUsualFn_fnRecorder {
	return &moqUsualFn_fnRecorder{
		params: moqUsualFn_params{
			sParam: sParam,
			bParam: bParam,
		},
		sequence: m.config.Sequence == moq.SeqDefaultOn,
		moq:      m,
	}
}

func (r *moqUsualFn_fnRecorder) any() *moqUsualFn_anyParams {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	return &moqUsualFn_anyParams{recorder: r}
}

func (a *moqUsualFn_anyParams) sParam() *moqUsualFn_fnRecorder {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (a *moqUsualFn_anyParams) bParam() *moqUsualFn_fnRecorder {
	a.recorder.anyParams |= 1 << 1
	return a.recorder
}

func (r *moqUsualFn_fnRecorder) seq() *moqUsualFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqUsualFn_fnRecorder) noSeq() *moqUsualFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqUsualFn_fnRecorder) returnResults(sResult string, err error) *moqUsualFn_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			sResult string
			err     error
		}
		sequence   uint32
		doFn       moqUsualFn_doFn
		doReturnFn moqUsualFn_doReturnFn
	}{
		values: &struct {
			sResult string
			err     error
		}{
			sResult: sResult,
			err:     err,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqUsualFn_fnRecorder) andDo(fn moqUsualFn_doFn) *moqUsualFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqUsualFn_fnRecorder) doReturnResults(fn moqUsualFn_doReturnFn) *moqUsualFn_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			sResult string
			err     error
		}
		sequence   uint32
		doFn       moqUsualFn_doFn
		doReturnFn moqUsualFn_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqUsualFn_fnRecorder) findResults() {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqUsualFn_resultsByParams
	for n, res := range r.moq.resultsByParams {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqUsualFn_resultsByParams{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqUsualFn_paramsKey]*moqUsualFn_results{},
		}
		r.moq.resultsByParams = append(r.moq.resultsByParams, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams) {
			copy(r.moq.resultsByParams[insertAt+1:], r.moq.resultsByParams[insertAt:0])
			r.moq.resultsByParams[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqUsualFn_results{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqUsualFn_fnRecorder) repeat(repeaters ...moq.Repeater) *moqUsualFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values *struct {
					sResult string
					err     error
				}
				sequence   uint32
				doFn       moqUsualFn_doFn
				doReturnFn moqUsualFn_doReturnFn
			}{
				values:   last.values,
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqUsualFn) prettyParams(params moqUsualFn_params) string {
	return fmt.Sprintf("UsualFn(%#v, %#v)", params.sParam, params.bParam)
}

func (m *moqUsualFn) paramsKey(params moqUsualFn_params, anyParams uint64) moqUsualFn_paramsKey {
	m.scene.T.Helper()
	var sParamUsed string
	var sParamUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.sParam == moq.ParamIndexByValue {
			sParamUsed = params.sParam
		} else {
			sParamUsedHash = hash.DeepHash(params.sParam)
		}
	}
	var bParamUsed bool
	var bParamUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.runtime.parameterIndexing.bParam == moq.ParamIndexByValue {
			bParamUsed = params.bParam
		} else {
			bParamUsedHash = hash.DeepHash(params.bParam)
		}
	}
	return moqUsualFn_paramsKey{
		params: struct {
			sParam string
			bParam bool
		}{
			sParam: sParamUsed,
			bParam: bParamUsed,
		},
		hashes: struct {
			sParam hash.Hash
			bParam hash.Hash
		}{
			sParam: sParamUsedHash,
			bParam: bParamUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *moqUsualFn) Reset() { m.resultsByParams = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *moqUsualFn) AssertExpectationsMet() {
	m.scene.T.Helper()
	for _, res := range m.resultsByParams {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.prettyParams(results.params))
			}
		}
	}
}

// moqNoNamesFn holds the state of a moq of the NoNamesFn type
type moqNoNamesFn struct {
	scene  *moq.Scene
	config moq.Config
	moq    *moqNoNamesFn_mock

	resultsByParams []moqNoNamesFn_resultsByParams

	runtime struct {
		parameterIndexing struct {
			param1 moq.ParamIndexing
			param2 moq.ParamIndexing
		}
	}
}

// moqNoNamesFn_mock isolates the mock interface of the NoNamesFn type
type moqNoNamesFn_mock struct {
	moq *moqNoNamesFn
}

// moqNoNamesFn_params holds the params of the NoNamesFn type
type moqNoNamesFn_params struct {
	param1 string
	param2 bool
}

// moqNoNamesFn_paramsKey holds the map key params of the NoNamesFn type
type moqNoNamesFn_paramsKey struct {
	params struct {
		param1 string
		param2 bool
	}
	hashes struct {
		param1 hash.Hash
		param2 hash.Hash
	}
}

// moqNoNamesFn_resultsByParams contains the results for a given set of
// parameters for the NoNamesFn type
type moqNoNamesFn_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqNoNamesFn_paramsKey]*moqNoNamesFn_results
}

// moqNoNamesFn_doFn defines the type of function needed when calling andDo for
// the NoNamesFn type
type moqNoNamesFn_doFn func(string, bool)

// moqNoNamesFn_doReturnFn defines the type of function needed when calling
// doReturnResults for the NoNamesFn type
type moqNoNamesFn_doReturnFn func(string, bool) (string, error)

// moqNoNamesFn_results holds the results of the NoNamesFn type
type moqNoNamesFn_results struct {
	params  moqNoNamesFn_params
	results []struct {
		values *struct {
			result1 string
			result2 error
		}
		sequence   uint32
		doFn       moqNoNamesFn_doFn
		doReturnFn moqNoNamesFn_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqNoNamesFn_fnRecorder routes recorded function calls to the moqNoNamesFn
// moq
type moqNoNamesFn_fnRecorder struct {
	params    moqNoNamesFn_params
	anyParams uint64
	sequence  bool
	results   *moqNoNamesFn_results
	moq       *moqNoNamesFn
}

// moqNoNamesFn_anyParams isolates the any params functions of the NoNamesFn
// type
type moqNoNamesFn_anyParams struct {
	recorder *moqNoNamesFn_fnRecorder
}

// newMoqNoNamesFn creates a new moq of the NoNamesFn type
func newMoqNoNamesFn(scene *moq.Scene, config *moq.Config) *moqNoNamesFn {
	if config == nil {
		config = &moq.Config{}
	}
	m := &moqNoNamesFn{
		scene:  scene,
		config: *config,
		moq:    &moqNoNamesFn_mock{},

		runtime: struct {
			parameterIndexing struct {
				param1 moq.ParamIndexing
				param2 moq.ParamIndexing
			}
		}{parameterIndexing: struct {
			param1 moq.ParamIndexing
			param2 moq.ParamIndexing
		}{
			param1: moq.ParamIndexByValue,
			param2: moq.ParamIndexByValue,
		}},
	}
	m.moq.moq = m

	scene.AddMoq(m)
	return m
}

// mock returns the moq implementation of the NoNamesFn type
func (m *moqNoNamesFn) mock() testmoqs.NoNamesFn {
	return func(param1 string, param2 bool) (string, error) {
		m.scene.T.Helper()
		moq := &moqNoNamesFn_mock{moq: m}
		return moq.fn(param1, param2)
	}
}

func (m *moqNoNamesFn_mock) fn(param1 string, param2 bool) (result1 string, result2 error) {
	m.moq.scene.T.Helper()
	params := moqNoNamesFn_params{
		param1: param1,
		param2: param2,
	}
	var results *moqNoNamesFn_results
	for _, resultsByParams := range m.moq.resultsByParams {
		paramsKey := m.moq.paramsKey(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call to %s", m.moq.prettyParams(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to %s", m.moq.prettyParams(params))
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match call to %s", m.moq.prettyParams(params))
		}
	}

	if result.doFn != nil {
		result.doFn(param1, param2)
	}

	if result.values != nil {
		result1 = result.values.result1
		result2 = result.values.result2
	}
	if result.doReturnFn != nil {
		result1, result2 = result.doReturnFn(param1, param2)
	}
	return
}

func (m *moqNoNamesFn) onCall(param1 string, param2 bool) *moqNoNamesFn_fnRecorder {
	return &moqNoNamesFn_fnRecorder{
		params: moqNoNamesFn_params{
			param1: param1,
			param2: param2,
		},
		sequence: m.config.Sequence == moq.SeqDefaultOn,
		moq:      m,
	}
}

func (r *moqNoNamesFn_fnRecorder) any() *moqNoNamesFn_anyParams {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	return &moqNoNamesFn_anyParams{recorder: r}
}

func (a *moqNoNamesFn_anyParams) param1() *moqNoNamesFn_fnRecorder {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (a *moqNoNamesFn_anyParams) param2() *moqNoNamesFn_fnRecorder {
	a.recorder.anyParams |= 1 << 1
	return a.recorder
}

func (r *moqNoNamesFn_fnRecorder) seq() *moqNoNamesFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqNoNamesFn_fnRecorder) noSeq() *moqNoNamesFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqNoNamesFn_fnRecorder) returnResults(result1 string, result2 error) *moqNoNamesFn_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 string
			result2 error
		}
		sequence   uint32
		doFn       moqNoNamesFn_doFn
		doReturnFn moqNoNamesFn_doReturnFn
	}{
		values: &struct {
			result1 string
			result2 error
		}{
			result1: result1,
			result2: result2,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqNoNamesFn_fnRecorder) andDo(fn moqNoNamesFn_doFn) *moqNoNamesFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqNoNamesFn_fnRecorder) doReturnResults(fn moqNoNamesFn_doReturnFn) *moqNoNamesFn_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 string
			result2 error
		}
		sequence   uint32
		doFn       moqNoNamesFn_doFn
		doReturnFn moqNoNamesFn_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqNoNamesFn_fnRecorder) findResults() {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqNoNamesFn_resultsByParams
	for n, res := range r.moq.resultsByParams {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqNoNamesFn_resultsByParams{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqNoNamesFn_paramsKey]*moqNoNamesFn_results{},
		}
		r.moq.resultsByParams = append(r.moq.resultsByParams, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams) {
			copy(r.moq.resultsByParams[insertAt+1:], r.moq.resultsByParams[insertAt:0])
			r.moq.resultsByParams[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqNoNamesFn_results{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqNoNamesFn_fnRecorder) repeat(repeaters ...moq.Repeater) *moqNoNamesFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values *struct {
					result1 string
					result2 error
				}
				sequence   uint32
				doFn       moqNoNamesFn_doFn
				doReturnFn moqNoNamesFn_doReturnFn
			}{
				values:   last.values,
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqNoNamesFn) prettyParams(params moqNoNamesFn_params) string {
	return fmt.Sprintf("NoNamesFn(%#v, %#v)", params.param1, params.param2)
}

func (m *moqNoNamesFn) paramsKey(params moqNoNamesFn_params, anyParams uint64) moqNoNamesFn_paramsKey {
	m.scene.T.Helper()
	var param1Used string
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.param1 == moq.ParamIndexByValue {
			param1Used = params.param1
		} else {
			param1UsedHash = hash.DeepHash(params.param1)
		}
	}
	var param2Used bool
	var param2UsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.runtime.parameterIndexing.param2 == moq.ParamIndexByValue {
			param2Used = params.param2
		} else {
			param2UsedHash = hash.DeepHash(params.param2)
		}
	}
	return moqNoNamesFn_paramsKey{
		params: struct {
			param1 string
			param2 bool
		}{
			param1: param1Used,
			param2: param2Used,
		},
		hashes: struct {
			param1 hash.Hash
			param2 hash.Hash
		}{
			param1: param1UsedHash,
			param2: param2UsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *moqNoNamesFn) Reset() { m.resultsByParams = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *moqNoNamesFn) AssertExpectationsMet() {
	m.scene.T.Helper()
	for _, res := range m.resultsByParams {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.prettyParams(results.params))
			}
		}
	}
}

// moqNoResultsFn holds the state of a moq of the NoResultsFn type
type moqNoResultsFn struct {
	scene  *moq.Scene
	config moq.Config
	moq    *moqNoResultsFn_mock

	resultsByParams []moqNoResultsFn_resultsByParams

	runtime struct {
		parameterIndexing struct {
			sParam moq.ParamIndexing
			bParam moq.ParamIndexing
		}
	}
}

// moqNoResultsFn_mock isolates the mock interface of the NoResultsFn type
type moqNoResultsFn_mock struct {
	moq *moqNoResultsFn
}

// moqNoResultsFn_params holds the params of the NoResultsFn type
type moqNoResultsFn_params struct {
	sParam string
	bParam bool
}

// moqNoResultsFn_paramsKey holds the map key params of the NoResultsFn type
type moqNoResultsFn_paramsKey struct {
	params struct {
		sParam string
		bParam bool
	}
	hashes struct {
		sParam hash.Hash
		bParam hash.Hash
	}
}

// moqNoResultsFn_resultsByParams contains the results for a given set of
// parameters for the NoResultsFn type
type moqNoResultsFn_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqNoResultsFn_paramsKey]*moqNoResultsFn_results
}

// moqNoResultsFn_doFn defines the type of function needed when calling andDo
// for the NoResultsFn type
type moqNoResultsFn_doFn func(sParam string, bParam bool)

// moqNoResultsFn_doReturnFn defines the type of function needed when calling
// doReturnResults for the NoResultsFn type
type moqNoResultsFn_doReturnFn func(sParam string, bParam bool)

// moqNoResultsFn_results holds the results of the NoResultsFn type
type moqNoResultsFn_results struct {
	params  moqNoResultsFn_params
	results []struct {
		values     *struct{}
		sequence   uint32
		doFn       moqNoResultsFn_doFn
		doReturnFn moqNoResultsFn_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqNoResultsFn_fnRecorder routes recorded function calls to the
// moqNoResultsFn moq
type moqNoResultsFn_fnRecorder struct {
	params    moqNoResultsFn_params
	anyParams uint64
	sequence  bool
	results   *moqNoResultsFn_results
	moq       *moqNoResultsFn
}

// moqNoResultsFn_anyParams isolates the any params functions of the
// NoResultsFn type
type moqNoResultsFn_anyParams struct {
	recorder *moqNoResultsFn_fnRecorder
}

// newMoqNoResultsFn creates a new moq of the NoResultsFn type
func newMoqNoResultsFn(scene *moq.Scene, config *moq.Config) *moqNoResultsFn {
	if config == nil {
		config = &moq.Config{}
	}
	m := &moqNoResultsFn{
		scene:  scene,
		config: *config,
		moq:    &moqNoResultsFn_mock{},

		runtime: struct {
			parameterIndexing struct {
				sParam moq.ParamIndexing
				bParam moq.ParamIndexing
			}
		}{parameterIndexing: struct {
			sParam moq.ParamIndexing
			bParam moq.ParamIndexing
		}{
			sParam: moq.ParamIndexByValue,
			bParam: moq.ParamIndexByValue,
		}},
	}
	m.moq.moq = m

	scene.AddMoq(m)
	return m
}

// mock returns the moq implementation of the NoResultsFn type
func (m *moqNoResultsFn) mock() testmoqs.NoResultsFn {
	return func(sParam string, bParam bool) {
		m.scene.T.Helper()
		moq := &moqNoResultsFn_mock{moq: m}
		moq.fn(sParam, bParam)
	}
}

func (m *moqNoResultsFn_mock) fn(sParam string, bParam bool) {
	m.moq.scene.T.Helper()
	params := moqNoResultsFn_params{
		sParam: sParam,
		bParam: bParam,
	}
	var results *moqNoResultsFn_results
	for _, resultsByParams := range m.moq.resultsByParams {
		paramsKey := m.moq.paramsKey(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call to %s", m.moq.prettyParams(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to %s", m.moq.prettyParams(params))
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match call to %s", m.moq.prettyParams(params))
		}
	}

	if result.doFn != nil {
		result.doFn(sParam, bParam)
	}

	if result.doReturnFn != nil {
		result.doReturnFn(sParam, bParam)
	}
	return
}

func (m *moqNoResultsFn) onCall(sParam string, bParam bool) *moqNoResultsFn_fnRecorder {
	return &moqNoResultsFn_fnRecorder{
		params: moqNoResultsFn_params{
			sParam: sParam,
			bParam: bParam,
		},
		sequence: m.config.Sequence == moq.SeqDefaultOn,
		moq:      m,
	}
}

func (r *moqNoResultsFn_fnRecorder) any() *moqNoResultsFn_anyParams {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	return &moqNoResultsFn_anyParams{recorder: r}
}

func (a *moqNoResultsFn_anyParams) sParam() *moqNoResultsFn_fnRecorder {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (a *moqNoResultsFn_anyParams) bParam() *moqNoResultsFn_fnRecorder {
	a.recorder.anyParams |= 1 << 1
	return a.recorder
}

func (r *moqNoResultsFn_fnRecorder) seq() *moqNoResultsFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqNoResultsFn_fnRecorder) noSeq() *moqNoResultsFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqNoResultsFn_fnRecorder) returnResults() *moqNoResultsFn_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values     *struct{}
		sequence   uint32
		doFn       moqNoResultsFn_doFn
		doReturnFn moqNoResultsFn_doReturnFn
	}{
		values:   &struct{}{},
		sequence: sequence,
	})
	return r
}

func (r *moqNoResultsFn_fnRecorder) andDo(fn moqNoResultsFn_doFn) *moqNoResultsFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqNoResultsFn_fnRecorder) doReturnResults(fn moqNoResultsFn_doReturnFn) *moqNoResultsFn_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values     *struct{}
		sequence   uint32
		doFn       moqNoResultsFn_doFn
		doReturnFn moqNoResultsFn_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqNoResultsFn_fnRecorder) findResults() {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqNoResultsFn_resultsByParams
	for n, res := range r.moq.resultsByParams {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqNoResultsFn_resultsByParams{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqNoResultsFn_paramsKey]*moqNoResultsFn_results{},
		}
		r.moq.resultsByParams = append(r.moq.resultsByParams, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams) {
			copy(r.moq.resultsByParams[insertAt+1:], r.moq.resultsByParams[insertAt:0])
			r.moq.resultsByParams[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqNoResultsFn_results{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqNoResultsFn_fnRecorder) repeat(repeaters ...moq.Repeater) *moqNoResultsFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values     *struct{}
				sequence   uint32
				doFn       moqNoResultsFn_doFn
				doReturnFn moqNoResultsFn_doReturnFn
			}{
				values:   last.values,
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqNoResultsFn) prettyParams(params moqNoResultsFn_params) string {
	return fmt.Sprintf("NoResultsFn(%#v, %#v)", params.sParam, params.bParam)
}

func (m *moqNoResultsFn) paramsKey(params moqNoResultsFn_params, anyParams uint64) moqNoResultsFn_paramsKey {
	m.scene.T.Helper()
	var sParamUsed string
	var sParamUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.sParam == moq.ParamIndexByValue {
			sParamUsed = params.sParam
		} else {
			sParamUsedHash = hash.DeepHash(params.sParam)
		}
	}
	var bParamUsed bool
	var bParamUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.runtime.parameterIndexing.bParam == moq.ParamIndexByValue {
			bParamUsed = params.bParam
		} else {
			bParamUsedHash = hash.DeepHash(params.bParam)
		}
	}
	return moqNoResultsFn_paramsKey{
		params: struct {
			sParam string
			bParam bool
		}{
			sParam: sParamUsed,
			bParam: bParamUsed,
		},
		hashes: struct {
			sParam hash.Hash
			bParam hash.Hash
		}{
			sParam: sParamUsedHash,
			bParam: bParamUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *moqNoResultsFn) Reset() { m.resultsByParams = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *moqNoResultsFn) AssertExpectationsMet() {
	m.scene.T.Helper()
	for _, res := range m.resultsByParams {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.prettyParams(results.params))
			}
		}
	}
}

// moqNoParamsFn holds the state of a moq of the NoParamsFn type
type moqNoParamsFn struct {
	scene  *moq.Scene
	config moq.Config
	moq    *moqNoParamsFn_mock

	resultsByParams []moqNoParamsFn_resultsByParams

	runtime struct {
		parameterIndexing struct{}
	}
}

// moqNoParamsFn_mock isolates the mock interface of the NoParamsFn type
type moqNoParamsFn_mock struct {
	moq *moqNoParamsFn
}

// moqNoParamsFn_params holds the params of the NoParamsFn type
type moqNoParamsFn_params struct{}

// moqNoParamsFn_paramsKey holds the map key params of the NoParamsFn type
type moqNoParamsFn_paramsKey struct {
	params struct{}
	hashes struct{}
}

// moqNoParamsFn_resultsByParams contains the results for a given set of
// parameters for the NoParamsFn type
type moqNoParamsFn_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqNoParamsFn_paramsKey]*moqNoParamsFn_results
}

// moqNoParamsFn_doFn defines the type of function needed when calling andDo
// for the NoParamsFn type
type moqNoParamsFn_doFn func()

// moqNoParamsFn_doReturnFn defines the type of function needed when calling
// doReturnResults for the NoParamsFn type
type moqNoParamsFn_doReturnFn func() (sResult string, err error)

// moqNoParamsFn_results holds the results of the NoParamsFn type
type moqNoParamsFn_results struct {
	params  moqNoParamsFn_params
	results []struct {
		values *struct {
			sResult string
			err     error
		}
		sequence   uint32
		doFn       moqNoParamsFn_doFn
		doReturnFn moqNoParamsFn_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqNoParamsFn_fnRecorder routes recorded function calls to the moqNoParamsFn
// moq
type moqNoParamsFn_fnRecorder struct {
	params    moqNoParamsFn_params
	anyParams uint64
	sequence  bool
	results   *moqNoParamsFn_results
	moq       *moqNoParamsFn
}

// moqNoParamsFn_anyParams isolates the any params functions of the NoParamsFn
// type
type moqNoParamsFn_anyParams struct {
	recorder *moqNoParamsFn_fnRecorder
}

// newMoqNoParamsFn creates a new moq of the NoParamsFn type
func newMoqNoParamsFn(scene *moq.Scene, config *moq.Config) *moqNoParamsFn {
	if config == nil {
		config = &moq.Config{}
	}
	m := &moqNoParamsFn{
		scene:  scene,
		config: *config,
		moq:    &moqNoParamsFn_mock{},

		runtime: struct {
			parameterIndexing struct{}
		}{parameterIndexing: struct{}{}},
	}
	m.moq.moq = m

	scene.AddMoq(m)
	return m
}

// mock returns the moq implementation of the NoParamsFn type
func (m *moqNoParamsFn) mock() testmoqs.NoParamsFn {
	return func() (_ string, _ error) { m.scene.T.Helper(); moq := &moqNoParamsFn_mock{moq: m}; return moq.fn() }
}

func (m *moqNoParamsFn_mock) fn() (sResult string, err error) {
	m.moq.scene.T.Helper()
	params := moqNoParamsFn_params{}
	var results *moqNoParamsFn_results
	for _, resultsByParams := range m.moq.resultsByParams {
		paramsKey := m.moq.paramsKey(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call to %s", m.moq.prettyParams(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to %s", m.moq.prettyParams(params))
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match call to %s", m.moq.prettyParams(params))
		}
	}

	if result.doFn != nil {
		result.doFn()
	}

	if result.values != nil {
		sResult = result.values.sResult
		err = result.values.err
	}
	if result.doReturnFn != nil {
		sResult, err = result.doReturnFn()
	}
	return
}

func (m *moqNoParamsFn) onCall() *moqNoParamsFn_fnRecorder {
	return &moqNoParamsFn_fnRecorder{
		params:   moqNoParamsFn_params{},
		sequence: m.config.Sequence == moq.SeqDefaultOn,
		moq:      m,
	}
}

func (r *moqNoParamsFn_fnRecorder) any() *moqNoParamsFn_anyParams {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	return &moqNoParamsFn_anyParams{recorder: r}
}

func (r *moqNoParamsFn_fnRecorder) seq() *moqNoParamsFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqNoParamsFn_fnRecorder) noSeq() *moqNoParamsFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqNoParamsFn_fnRecorder) returnResults(sResult string, err error) *moqNoParamsFn_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			sResult string
			err     error
		}
		sequence   uint32
		doFn       moqNoParamsFn_doFn
		doReturnFn moqNoParamsFn_doReturnFn
	}{
		values: &struct {
			sResult string
			err     error
		}{
			sResult: sResult,
			err:     err,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqNoParamsFn_fnRecorder) andDo(fn moqNoParamsFn_doFn) *moqNoParamsFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqNoParamsFn_fnRecorder) doReturnResults(fn moqNoParamsFn_doReturnFn) *moqNoParamsFn_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			sResult string
			err     error
		}
		sequence   uint32
		doFn       moqNoParamsFn_doFn
		doReturnFn moqNoParamsFn_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqNoParamsFn_fnRecorder) findResults() {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqNoParamsFn_resultsByParams
	for n, res := range r.moq.resultsByParams {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqNoParamsFn_resultsByParams{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqNoParamsFn_paramsKey]*moqNoParamsFn_results{},
		}
		r.moq.resultsByParams = append(r.moq.resultsByParams, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams) {
			copy(r.moq.resultsByParams[insertAt+1:], r.moq.resultsByParams[insertAt:0])
			r.moq.resultsByParams[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqNoParamsFn_results{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqNoParamsFn_fnRecorder) repeat(repeaters ...moq.Repeater) *moqNoParamsFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values *struct {
					sResult string
					err     error
				}
				sequence   uint32
				doFn       moqNoParamsFn_doFn
				doReturnFn moqNoParamsFn_doReturnFn
			}{
				values:   last.values,
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqNoParamsFn) prettyParams(params moqNoParamsFn_params) string {
	return fmt.Sprintf("NoParamsFn()")
}

func (m *moqNoParamsFn) paramsKey(params moqNoParamsFn_params, anyParams uint64) moqNoParamsFn_paramsKey {
	m.scene.T.Helper()
	return moqNoParamsFn_paramsKey{
		params: struct{}{},
		hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *moqNoParamsFn) Reset() { m.resultsByParams = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *moqNoParamsFn) AssertExpectationsMet() {
	m.scene.T.Helper()
	for _, res := range m.resultsByParams {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.prettyParams(results.params))
			}
		}
	}
}

// moqNothingFn holds the state of a moq of the NothingFn type
type moqNothingFn struct {
	scene  *moq.Scene
	config moq.Config
	moq    *moqNothingFn_mock

	resultsByParams []moqNothingFn_resultsByParams

	runtime struct {
		parameterIndexing struct{}
	}
}

// moqNothingFn_mock isolates the mock interface of the NothingFn type
type moqNothingFn_mock struct {
	moq *moqNothingFn
}

// moqNothingFn_params holds the params of the NothingFn type
type moqNothingFn_params struct{}

// moqNothingFn_paramsKey holds the map key params of the NothingFn type
type moqNothingFn_paramsKey struct {
	params struct{}
	hashes struct{}
}

// moqNothingFn_resultsByParams contains the results for a given set of
// parameters for the NothingFn type
type moqNothingFn_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqNothingFn_paramsKey]*moqNothingFn_results
}

// moqNothingFn_doFn defines the type of function needed when calling andDo for
// the NothingFn type
type moqNothingFn_doFn func()

// moqNothingFn_doReturnFn defines the type of function needed when calling
// doReturnResults for the NothingFn type
type moqNothingFn_doReturnFn func()

// moqNothingFn_results holds the results of the NothingFn type
type moqNothingFn_results struct {
	params  moqNothingFn_params
	results []struct {
		values     *struct{}
		sequence   uint32
		doFn       moqNothingFn_doFn
		doReturnFn moqNothingFn_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqNothingFn_fnRecorder routes recorded function calls to the moqNothingFn
// moq
type moqNothingFn_fnRecorder struct {
	params    moqNothingFn_params
	anyParams uint64
	sequence  bool
	results   *moqNothingFn_results
	moq       *moqNothingFn
}

// moqNothingFn_anyParams isolates the any params functions of the NothingFn
// type
type moqNothingFn_anyParams struct {
	recorder *moqNothingFn_fnRecorder
}

// newMoqNothingFn creates a new moq of the NothingFn type
func newMoqNothingFn(scene *moq.Scene, config *moq.Config) *moqNothingFn {
	if config == nil {
		config = &moq.Config{}
	}
	m := &moqNothingFn{
		scene:  scene,
		config: *config,
		moq:    &moqNothingFn_mock{},

		runtime: struct {
			parameterIndexing struct{}
		}{parameterIndexing: struct{}{}},
	}
	m.moq.moq = m

	scene.AddMoq(m)
	return m
}

// mock returns the moq implementation of the NothingFn type
func (m *moqNothingFn) mock() testmoqs.NothingFn {
	return func() { m.scene.T.Helper(); moq := &moqNothingFn_mock{moq: m}; moq.fn() }
}

func (m *moqNothingFn_mock) fn() {
	m.moq.scene.T.Helper()
	params := moqNothingFn_params{}
	var results *moqNothingFn_results
	for _, resultsByParams := range m.moq.resultsByParams {
		paramsKey := m.moq.paramsKey(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call to %s", m.moq.prettyParams(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to %s", m.moq.prettyParams(params))
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match call to %s", m.moq.prettyParams(params))
		}
	}

	if result.doFn != nil {
		result.doFn()
	}

	if result.doReturnFn != nil {
		result.doReturnFn()
	}
	return
}

func (m *moqNothingFn) onCall() *moqNothingFn_fnRecorder {
	return &moqNothingFn_fnRecorder{
		params:   moqNothingFn_params{},
		sequence: m.config.Sequence == moq.SeqDefaultOn,
		moq:      m,
	}
}

func (r *moqNothingFn_fnRecorder) any() *moqNothingFn_anyParams {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	return &moqNothingFn_anyParams{recorder: r}
}

func (r *moqNothingFn_fnRecorder) seq() *moqNothingFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqNothingFn_fnRecorder) noSeq() *moqNothingFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqNothingFn_fnRecorder) returnResults() *moqNothingFn_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values     *struct{}
		sequence   uint32
		doFn       moqNothingFn_doFn
		doReturnFn moqNothingFn_doReturnFn
	}{
		values:   &struct{}{},
		sequence: sequence,
	})
	return r
}

func (r *moqNothingFn_fnRecorder) andDo(fn moqNothingFn_doFn) *moqNothingFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqNothingFn_fnRecorder) doReturnResults(fn moqNothingFn_doReturnFn) *moqNothingFn_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values     *struct{}
		sequence   uint32
		doFn       moqNothingFn_doFn
		doReturnFn moqNothingFn_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqNothingFn_fnRecorder) findResults() {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqNothingFn_resultsByParams
	for n, res := range r.moq.resultsByParams {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqNothingFn_resultsByParams{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqNothingFn_paramsKey]*moqNothingFn_results{},
		}
		r.moq.resultsByParams = append(r.moq.resultsByParams, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams) {
			copy(r.moq.resultsByParams[insertAt+1:], r.moq.resultsByParams[insertAt:0])
			r.moq.resultsByParams[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqNothingFn_results{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqNothingFn_fnRecorder) repeat(repeaters ...moq.Repeater) *moqNothingFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values     *struct{}
				sequence   uint32
				doFn       moqNothingFn_doFn
				doReturnFn moqNothingFn_doReturnFn
			}{
				values:   last.values,
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqNothingFn) prettyParams(params moqNothingFn_params) string {
	return fmt.Sprintf("NothingFn()")
}

func (m *moqNothingFn) paramsKey(params moqNothingFn_params, anyParams uint64) moqNothingFn_paramsKey {
	m.scene.T.Helper()
	return moqNothingFn_paramsKey{
		params: struct{}{},
		hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *moqNothingFn) Reset() { m.resultsByParams = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *moqNothingFn) AssertExpectationsMet() {
	m.scene.T.Helper()
	for _, res := range m.resultsByParams {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.prettyParams(results.params))
			}
		}
	}
}

// moqVariadicFn holds the state of a moq of the VariadicFn type
type moqVariadicFn struct {
	scene  *moq.Scene
	config moq.Config
	moq    *moqVariadicFn_mock

	resultsByParams []moqVariadicFn_resultsByParams

	runtime struct {
		parameterIndexing struct {
			other moq.ParamIndexing
			args  moq.ParamIndexing
		}
	}
}

// moqVariadicFn_mock isolates the mock interface of the VariadicFn type
type moqVariadicFn_mock struct {
	moq *moqVariadicFn
}

// moqVariadicFn_params holds the params of the VariadicFn type
type moqVariadicFn_params struct {
	other bool
	args  []string
}

// moqVariadicFn_paramsKey holds the map key params of the VariadicFn type
type moqVariadicFn_paramsKey struct {
	params struct{ other bool }
	hashes struct {
		other hash.Hash
		args  hash.Hash
	}
}

// moqVariadicFn_resultsByParams contains the results for a given set of
// parameters for the VariadicFn type
type moqVariadicFn_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqVariadicFn_paramsKey]*moqVariadicFn_results
}

// moqVariadicFn_doFn defines the type of function needed when calling andDo
// for the VariadicFn type
type moqVariadicFn_doFn func(other bool, args ...string)

// moqVariadicFn_doReturnFn defines the type of function needed when calling
// doReturnResults for the VariadicFn type
type moqVariadicFn_doReturnFn func(other bool, args ...string) (sResult string, err error)

// moqVariadicFn_results holds the results of the VariadicFn type
type moqVariadicFn_results struct {
	params  moqVariadicFn_params
	results []struct {
		values *struct {
			sResult string
			err     error
		}
		sequence   uint32
		doFn       moqVariadicFn_doFn
		doReturnFn moqVariadicFn_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqVariadicFn_fnRecorder routes recorded function calls to the moqVariadicFn
// moq
type moqVariadicFn_fnRecorder struct {
	params    moqVariadicFn_params
	anyParams uint64
	sequence  bool
	results   *moqVariadicFn_results
	moq       *moqVariadicFn
}

// moqVariadicFn_anyParams isolates the any params functions of the VariadicFn
// type
type moqVariadicFn_anyParams struct {
	recorder *moqVariadicFn_fnRecorder
}

// newMoqVariadicFn creates a new moq of the VariadicFn type
func newMoqVariadicFn(scene *moq.Scene, config *moq.Config) *moqVariadicFn {
	if config == nil {
		config = &moq.Config{}
	}
	m := &moqVariadicFn{
		scene:  scene,
		config: *config,
		moq:    &moqVariadicFn_mock{},

		runtime: struct {
			parameterIndexing struct {
				other moq.ParamIndexing
				args  moq.ParamIndexing
			}
		}{parameterIndexing: struct {
			other moq.ParamIndexing
			args  moq.ParamIndexing
		}{
			other: moq.ParamIndexByValue,
			args:  moq.ParamIndexByHash,
		}},
	}
	m.moq.moq = m

	scene.AddMoq(m)
	return m
}

// mock returns the moq implementation of the VariadicFn type
func (m *moqVariadicFn) mock() testmoqs.VariadicFn {
	return func(other bool, args ...string) (_ string, _ error) {
		m.scene.T.Helper()
		moq := &moqVariadicFn_mock{moq: m}
		return moq.fn(other, args...)
	}
}

func (m *moqVariadicFn_mock) fn(other bool, args ...string) (sResult string, err error) {
	m.moq.scene.T.Helper()
	params := moqVariadicFn_params{
		other: other,
		args:  args,
	}
	var results *moqVariadicFn_results
	for _, resultsByParams := range m.moq.resultsByParams {
		paramsKey := m.moq.paramsKey(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call to %s", m.moq.prettyParams(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to %s", m.moq.prettyParams(params))
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match call to %s", m.moq.prettyParams(params))
		}
	}

	if result.doFn != nil {
		result.doFn(other, args...)
	}

	if result.values != nil {
		sResult = result.values.sResult
		err = result.values.err
	}
	if result.doReturnFn != nil {
		sResult, err = result.doReturnFn(other, args...)
	}
	return
}

func (m *moqVariadicFn) onCall(other bool, args ...string) *moqVariadicFn_fnRecorder {
	return &moqVariadicFn_fnRecorder{
		params: moqVariadicFn_params{
			other: other,
			args:  args,
		},
		sequence: m.config.Sequence == moq.SeqDefaultOn,
		moq:      m,
	}
}

func (r *moqVariadicFn_fnRecorder) any() *moqVariadicFn_anyParams {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	return &moqVariadicFn_anyParams{recorder: r}
}

func (a *moqVariadicFn_anyParams) other() *moqVariadicFn_fnRecorder {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (a *moqVariadicFn_anyParams) args() *moqVariadicFn_fnRecorder {
	a.recorder.anyParams |= 1 << 1
	return a.recorder
}

func (r *moqVariadicFn_fnRecorder) seq() *moqVariadicFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqVariadicFn_fnRecorder) noSeq() *moqVariadicFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqVariadicFn_fnRecorder) returnResults(sResult string, err error) *moqVariadicFn_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			sResult string
			err     error
		}
		sequence   uint32
		doFn       moqVariadicFn_doFn
		doReturnFn moqVariadicFn_doReturnFn
	}{
		values: &struct {
			sResult string
			err     error
		}{
			sResult: sResult,
			err:     err,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqVariadicFn_fnRecorder) andDo(fn moqVariadicFn_doFn) *moqVariadicFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqVariadicFn_fnRecorder) doReturnResults(fn moqVariadicFn_doReturnFn) *moqVariadicFn_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			sResult string
			err     error
		}
		sequence   uint32
		doFn       moqVariadicFn_doFn
		doReturnFn moqVariadicFn_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqVariadicFn_fnRecorder) findResults() {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqVariadicFn_resultsByParams
	for n, res := range r.moq.resultsByParams {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqVariadicFn_resultsByParams{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqVariadicFn_paramsKey]*moqVariadicFn_results{},
		}
		r.moq.resultsByParams = append(r.moq.resultsByParams, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams) {
			copy(r.moq.resultsByParams[insertAt+1:], r.moq.resultsByParams[insertAt:0])
			r.moq.resultsByParams[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqVariadicFn_results{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqVariadicFn_fnRecorder) repeat(repeaters ...moq.Repeater) *moqVariadicFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values *struct {
					sResult string
					err     error
				}
				sequence   uint32
				doFn       moqVariadicFn_doFn
				doReturnFn moqVariadicFn_doReturnFn
			}{
				values:   last.values,
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqVariadicFn) prettyParams(params moqVariadicFn_params) string {
	return fmt.Sprintf("VariadicFn(%#v, %#v)", params.other, params.args)
}

func (m *moqVariadicFn) paramsKey(params moqVariadicFn_params, anyParams uint64) moqVariadicFn_paramsKey {
	m.scene.T.Helper()
	var otherUsed bool
	var otherUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.other == moq.ParamIndexByValue {
			otherUsed = params.other
		} else {
			otherUsedHash = hash.DeepHash(params.other)
		}
	}
	var argsUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.runtime.parameterIndexing.args == moq.ParamIndexByValue {
			m.scene.T.Fatalf("The args parameter can't be indexed by value")
		}
		argsUsedHash = hash.DeepHash(params.args)
	}
	return moqVariadicFn_paramsKey{
		params: struct{ other bool }{
			other: otherUsed,
		},
		hashes: struct {
			other hash.Hash
			args  hash.Hash
		}{
			other: otherUsedHash,
			args:  argsUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *moqVariadicFn) Reset() { m.resultsByParams = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *moqVariadicFn) AssertExpectationsMet() {
	m.scene.T.Helper()
	for _, res := range m.resultsByParams {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.prettyParams(results.params))
			}
		}
	}
}

// moqRepeatedIdsFn holds the state of a moq of the RepeatedIdsFn type
type moqRepeatedIdsFn struct {
	scene  *moq.Scene
	config moq.Config
	moq    *moqRepeatedIdsFn_mock

	resultsByParams []moqRepeatedIdsFn_resultsByParams

	runtime struct {
		parameterIndexing struct {
			sParam1 moq.ParamIndexing
			sParam2 moq.ParamIndexing
			bParam  moq.ParamIndexing
		}
	}
}

// moqRepeatedIdsFn_mock isolates the mock interface of the RepeatedIdsFn type
type moqRepeatedIdsFn_mock struct {
	moq *moqRepeatedIdsFn
}

// moqRepeatedIdsFn_params holds the params of the RepeatedIdsFn type
type moqRepeatedIdsFn_params struct {
	sParam1, sParam2 string
	bParam           bool
}

// moqRepeatedIdsFn_paramsKey holds the map key params of the RepeatedIdsFn
// type
type moqRepeatedIdsFn_paramsKey struct {
	params struct {
		sParam1, sParam2 string
		bParam           bool
	}
	hashes struct {
		sParam1, sParam2 hash.Hash
		bParam           hash.Hash
	}
}

// moqRepeatedIdsFn_resultsByParams contains the results for a given set of
// parameters for the RepeatedIdsFn type
type moqRepeatedIdsFn_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqRepeatedIdsFn_paramsKey]*moqRepeatedIdsFn_results
}

// moqRepeatedIdsFn_doFn defines the type of function needed when calling andDo
// for the RepeatedIdsFn type
type moqRepeatedIdsFn_doFn func(sParam1, sParam2 string, bParam bool)

// moqRepeatedIdsFn_doReturnFn defines the type of function needed when calling
// doReturnResults for the RepeatedIdsFn type
type moqRepeatedIdsFn_doReturnFn func(sParam1, sParam2 string, bParam bool) (sResult1, sResult2 string, err error)

// moqRepeatedIdsFn_results holds the results of the RepeatedIdsFn type
type moqRepeatedIdsFn_results struct {
	params  moqRepeatedIdsFn_params
	results []struct {
		values *struct {
			sResult1, sResult2 string
			err                error
		}
		sequence   uint32
		doFn       moqRepeatedIdsFn_doFn
		doReturnFn moqRepeatedIdsFn_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqRepeatedIdsFn_fnRecorder routes recorded function calls to the
// moqRepeatedIdsFn moq
type moqRepeatedIdsFn_fnRecorder struct {
	params    moqRepeatedIdsFn_params
	anyParams uint64
	sequence  bool
	results   *moqRepeatedIdsFn_results
	moq       *moqRepeatedIdsFn
}

// moqRepeatedIdsFn_anyParams isolates the any params functions of the
// RepeatedIdsFn type
type moqRepeatedIdsFn_anyParams struct {
	recorder *moqRepeatedIdsFn_fnRecorder
}

// newMoqRepeatedIdsFn creates a new moq of the RepeatedIdsFn type
func newMoqRepeatedIdsFn(scene *moq.Scene, config *moq.Config) *moqRepeatedIdsFn {
	if config == nil {
		config = &moq.Config{}
	}
	m := &moqRepeatedIdsFn{
		scene:  scene,
		config: *config,
		moq:    &moqRepeatedIdsFn_mock{},

		runtime: struct {
			parameterIndexing struct {
				sParam1 moq.ParamIndexing
				sParam2 moq.ParamIndexing
				bParam  moq.ParamIndexing
			}
		}{parameterIndexing: struct {
			sParam1 moq.ParamIndexing
			sParam2 moq.ParamIndexing
			bParam  moq.ParamIndexing
		}{
			sParam1: moq.ParamIndexByValue,
			sParam2: moq.ParamIndexByValue,
			bParam:  moq.ParamIndexByValue,
		}},
	}
	m.moq.moq = m

	scene.AddMoq(m)
	return m
}

// mock returns the moq implementation of the RepeatedIdsFn type
func (m *moqRepeatedIdsFn) mock() testmoqs.RepeatedIdsFn {
	return func(sParam1, sParam2 string, bParam bool) (_, _ string, _ error) {
		m.scene.T.Helper()
		moq := &moqRepeatedIdsFn_mock{moq: m}
		return moq.fn(sParam1, sParam2, bParam)
	}
}

func (m *moqRepeatedIdsFn_mock) fn(sParam1, sParam2 string, bParam bool) (sResult1, sResult2 string, err error) {
	m.moq.scene.T.Helper()
	params := moqRepeatedIdsFn_params{
		sParam1: sParam1,
		sParam2: sParam2,
		bParam:  bParam,
	}
	var results *moqRepeatedIdsFn_results
	for _, resultsByParams := range m.moq.resultsByParams {
		paramsKey := m.moq.paramsKey(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call to %s", m.moq.prettyParams(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to %s", m.moq.prettyParams(params))
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match call to %s", m.moq.prettyParams(params))
		}
	}

	if result.doFn != nil {
		result.doFn(sParam1, sParam2, bParam)
	}

	if result.values != nil {
		sResult1 = result.values.sResult1
		sResult2 = result.values.sResult2
		err = result.values.err
	}
	if result.doReturnFn != nil {
		sResult1, sResult2, err = result.doReturnFn(sParam1, sParam2, bParam)
	}
	return
}

func (m *moqRepeatedIdsFn) onCall(sParam1, sParam2 string, bParam bool) *moqRepeatedIdsFn_fnRecorder {
	return &moqRepeatedIdsFn_fnRecorder{
		params: moqRepeatedIdsFn_params{
			sParam1: sParam1,
			sParam2: sParam2,
			bParam:  bParam,
		},
		sequence: m.config.Sequence == moq.SeqDefaultOn,
		moq:      m,
	}
}

func (r *moqRepeatedIdsFn_fnRecorder) any() *moqRepeatedIdsFn_anyParams {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	return &moqRepeatedIdsFn_anyParams{recorder: r}
}

func (a *moqRepeatedIdsFn_anyParams) sParam1() *moqRepeatedIdsFn_fnRecorder {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (a *moqRepeatedIdsFn_anyParams) sParam2() *moqRepeatedIdsFn_fnRecorder {
	a.recorder.anyParams |= 1 << 1
	return a.recorder
}

func (a *moqRepeatedIdsFn_anyParams) bParam() *moqRepeatedIdsFn_fnRecorder {
	a.recorder.anyParams |= 1 << 2
	return a.recorder
}

func (r *moqRepeatedIdsFn_fnRecorder) seq() *moqRepeatedIdsFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqRepeatedIdsFn_fnRecorder) noSeq() *moqRepeatedIdsFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqRepeatedIdsFn_fnRecorder) returnResults(sResult1, sResult2 string, err error) *moqRepeatedIdsFn_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			sResult1, sResult2 string
			err                error
		}
		sequence   uint32
		doFn       moqRepeatedIdsFn_doFn
		doReturnFn moqRepeatedIdsFn_doReturnFn
	}{
		values: &struct {
			sResult1, sResult2 string
			err                error
		}{
			sResult1: sResult1,
			sResult2: sResult2,
			err:      err,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqRepeatedIdsFn_fnRecorder) andDo(fn moqRepeatedIdsFn_doFn) *moqRepeatedIdsFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqRepeatedIdsFn_fnRecorder) doReturnResults(fn moqRepeatedIdsFn_doReturnFn) *moqRepeatedIdsFn_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			sResult1, sResult2 string
			err                error
		}
		sequence   uint32
		doFn       moqRepeatedIdsFn_doFn
		doReturnFn moqRepeatedIdsFn_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqRepeatedIdsFn_fnRecorder) findResults() {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqRepeatedIdsFn_resultsByParams
	for n, res := range r.moq.resultsByParams {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqRepeatedIdsFn_resultsByParams{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqRepeatedIdsFn_paramsKey]*moqRepeatedIdsFn_results{},
		}
		r.moq.resultsByParams = append(r.moq.resultsByParams, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams) {
			copy(r.moq.resultsByParams[insertAt+1:], r.moq.resultsByParams[insertAt:0])
			r.moq.resultsByParams[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqRepeatedIdsFn_results{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqRepeatedIdsFn_fnRecorder) repeat(repeaters ...moq.Repeater) *moqRepeatedIdsFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values *struct {
					sResult1, sResult2 string
					err                error
				}
				sequence   uint32
				doFn       moqRepeatedIdsFn_doFn
				doReturnFn moqRepeatedIdsFn_doReturnFn
			}{
				values:   last.values,
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqRepeatedIdsFn) prettyParams(params moqRepeatedIdsFn_params) string {
	return fmt.Sprintf("RepeatedIdsFn(%#v, %#v, %#v)", params.sParam1, params.sParam2, params.bParam)
}

func (m *moqRepeatedIdsFn) paramsKey(params moqRepeatedIdsFn_params, anyParams uint64) moqRepeatedIdsFn_paramsKey {
	m.scene.T.Helper()
	var sParam1Used string
	var sParam1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.sParam1 == moq.ParamIndexByValue {
			sParam1Used = params.sParam1
		} else {
			sParam1UsedHash = hash.DeepHash(params.sParam1)
		}
	}
	var sParam2Used string
	var sParam2UsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.runtime.parameterIndexing.sParam2 == moq.ParamIndexByValue {
			sParam2Used = params.sParam2
		} else {
			sParam2UsedHash = hash.DeepHash(params.sParam2)
		}
	}
	var bParamUsed bool
	var bParamUsedHash hash.Hash
	if anyParams&(1<<2) == 0 {
		if m.runtime.parameterIndexing.bParam == moq.ParamIndexByValue {
			bParamUsed = params.bParam
		} else {
			bParamUsedHash = hash.DeepHash(params.bParam)
		}
	}
	return moqRepeatedIdsFn_paramsKey{
		params: struct {
			sParam1, sParam2 string
			bParam           bool
		}{
			sParam1: sParam1Used,
			sParam2: sParam2Used,
			bParam:  bParamUsed,
		},
		hashes: struct {
			sParam1, sParam2 hash.Hash
			bParam           hash.Hash
		}{
			sParam1: sParam1UsedHash,
			sParam2: sParam2UsedHash,
			bParam:  bParamUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *moqRepeatedIdsFn) Reset() { m.resultsByParams = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *moqRepeatedIdsFn) AssertExpectationsMet() {
	m.scene.T.Helper()
	for _, res := range m.resultsByParams {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.prettyParams(results.params))
			}
		}
	}
}

// moqTimesFn holds the state of a moq of the TimesFn type
type moqTimesFn struct {
	scene  *moq.Scene
	config moq.Config
	moq    *moqTimesFn_mock

	resultsByParams []moqTimesFn_resultsByParams

	runtime struct {
		parameterIndexing struct {
			times  moq.ParamIndexing
			bParam moq.ParamIndexing
		}
	}
}

// moqTimesFn_mock isolates the mock interface of the TimesFn type
type moqTimesFn_mock struct {
	moq *moqTimesFn
}

// moqTimesFn_params holds the params of the TimesFn type
type moqTimesFn_params struct {
	times  string
	bParam bool
}

// moqTimesFn_paramsKey holds the map key params of the TimesFn type
type moqTimesFn_paramsKey struct {
	params struct {
		times  string
		bParam bool
	}
	hashes struct {
		times  hash.Hash
		bParam hash.Hash
	}
}

// moqTimesFn_resultsByParams contains the results for a given set of
// parameters for the TimesFn type
type moqTimesFn_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqTimesFn_paramsKey]*moqTimesFn_results
}

// moqTimesFn_doFn defines the type of function needed when calling andDo for
// the TimesFn type
type moqTimesFn_doFn func(times string, bParam bool)

// moqTimesFn_doReturnFn defines the type of function needed when calling
// doReturnResults for the TimesFn type
type moqTimesFn_doReturnFn func(times string, bParam bool) (sResult string, err error)

// moqTimesFn_results holds the results of the TimesFn type
type moqTimesFn_results struct {
	params  moqTimesFn_params
	results []struct {
		values *struct {
			sResult string
			err     error
		}
		sequence   uint32
		doFn       moqTimesFn_doFn
		doReturnFn moqTimesFn_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqTimesFn_fnRecorder routes recorded function calls to the moqTimesFn moq
type moqTimesFn_fnRecorder struct {
	params    moqTimesFn_params
	anyParams uint64
	sequence  bool
	results   *moqTimesFn_results
	moq       *moqTimesFn
}

// moqTimesFn_anyParams isolates the any params functions of the TimesFn type
type moqTimesFn_anyParams struct {
	recorder *moqTimesFn_fnRecorder
}

// newMoqTimesFn creates a new moq of the TimesFn type
func newMoqTimesFn(scene *moq.Scene, config *moq.Config) *moqTimesFn {
	if config == nil {
		config = &moq.Config{}
	}
	m := &moqTimesFn{
		scene:  scene,
		config: *config,
		moq:    &moqTimesFn_mock{},

		runtime: struct {
			parameterIndexing struct {
				times  moq.ParamIndexing
				bParam moq.ParamIndexing
			}
		}{parameterIndexing: struct {
			times  moq.ParamIndexing
			bParam moq.ParamIndexing
		}{
			times:  moq.ParamIndexByValue,
			bParam: moq.ParamIndexByValue,
		}},
	}
	m.moq.moq = m

	scene.AddMoq(m)
	return m
}

// mock returns the moq implementation of the TimesFn type
func (m *moqTimesFn) mock() testmoqs.TimesFn {
	return func(times string, bParam bool) (_ string, _ error) {
		m.scene.T.Helper()
		moq := &moqTimesFn_mock{moq: m}
		return moq.fn(times, bParam)
	}
}

func (m *moqTimesFn_mock) fn(times string, bParam bool) (sResult string, err error) {
	m.moq.scene.T.Helper()
	params := moqTimesFn_params{
		times:  times,
		bParam: bParam,
	}
	var results *moqTimesFn_results
	for _, resultsByParams := range m.moq.resultsByParams {
		paramsKey := m.moq.paramsKey(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call to %s", m.moq.prettyParams(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to %s", m.moq.prettyParams(params))
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match call to %s", m.moq.prettyParams(params))
		}
	}

	if result.doFn != nil {
		result.doFn(times, bParam)
	}

	if result.values != nil {
		sResult = result.values.sResult
		err = result.values.err
	}
	if result.doReturnFn != nil {
		sResult, err = result.doReturnFn(times, bParam)
	}
	return
}

func (m *moqTimesFn) onCall(times string, bParam bool) *moqTimesFn_fnRecorder {
	return &moqTimesFn_fnRecorder{
		params: moqTimesFn_params{
			times:  times,
			bParam: bParam,
		},
		sequence: m.config.Sequence == moq.SeqDefaultOn,
		moq:      m,
	}
}

func (r *moqTimesFn_fnRecorder) any() *moqTimesFn_anyParams {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	return &moqTimesFn_anyParams{recorder: r}
}

func (a *moqTimesFn_anyParams) times() *moqTimesFn_fnRecorder {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (a *moqTimesFn_anyParams) bParam() *moqTimesFn_fnRecorder {
	a.recorder.anyParams |= 1 << 1
	return a.recorder
}

func (r *moqTimesFn_fnRecorder) seq() *moqTimesFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqTimesFn_fnRecorder) noSeq() *moqTimesFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqTimesFn_fnRecorder) returnResults(sResult string, err error) *moqTimesFn_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			sResult string
			err     error
		}
		sequence   uint32
		doFn       moqTimesFn_doFn
		doReturnFn moqTimesFn_doReturnFn
	}{
		values: &struct {
			sResult string
			err     error
		}{
			sResult: sResult,
			err:     err,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqTimesFn_fnRecorder) andDo(fn moqTimesFn_doFn) *moqTimesFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqTimesFn_fnRecorder) doReturnResults(fn moqTimesFn_doReturnFn) *moqTimesFn_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			sResult string
			err     error
		}
		sequence   uint32
		doFn       moqTimesFn_doFn
		doReturnFn moqTimesFn_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqTimesFn_fnRecorder) findResults() {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqTimesFn_resultsByParams
	for n, res := range r.moq.resultsByParams {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqTimesFn_resultsByParams{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqTimesFn_paramsKey]*moqTimesFn_results{},
		}
		r.moq.resultsByParams = append(r.moq.resultsByParams, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams) {
			copy(r.moq.resultsByParams[insertAt+1:], r.moq.resultsByParams[insertAt:0])
			r.moq.resultsByParams[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqTimesFn_results{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqTimesFn_fnRecorder) repeat(repeaters ...moq.Repeater) *moqTimesFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values *struct {
					sResult string
					err     error
				}
				sequence   uint32
				doFn       moqTimesFn_doFn
				doReturnFn moqTimesFn_doReturnFn
			}{
				values:   last.values,
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqTimesFn) prettyParams(params moqTimesFn_params) string {
	return fmt.Sprintf("TimesFn(%#v, %#v)", params.times, params.bParam)
}

func (m *moqTimesFn) paramsKey(params moqTimesFn_params, anyParams uint64) moqTimesFn_paramsKey {
	m.scene.T.Helper()
	var timesUsed string
	var timesUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.times == moq.ParamIndexByValue {
			timesUsed = params.times
		} else {
			timesUsedHash = hash.DeepHash(params.times)
		}
	}
	var bParamUsed bool
	var bParamUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.runtime.parameterIndexing.bParam == moq.ParamIndexByValue {
			bParamUsed = params.bParam
		} else {
			bParamUsedHash = hash.DeepHash(params.bParam)
		}
	}
	return moqTimesFn_paramsKey{
		params: struct {
			times  string
			bParam bool
		}{
			times:  timesUsed,
			bParam: bParamUsed,
		},
		hashes: struct {
			times  hash.Hash
			bParam hash.Hash
		}{
			times:  timesUsedHash,
			bParam: bParamUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *moqTimesFn) Reset() { m.resultsByParams = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *moqTimesFn) AssertExpectationsMet() {
	m.scene.T.Helper()
	for _, res := range m.resultsByParams {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.prettyParams(results.params))
			}
		}
	}
}

// moqDifficultParamNamesFn holds the state of a moq of the
// DifficultParamNamesFn type
type moqDifficultParamNamesFn struct {
	scene  *moq.Scene
	config moq.Config
	moq    *moqDifficultParamNamesFn_mock

	resultsByParams []moqDifficultParamNamesFn_resultsByParams

	runtime struct {
		parameterIndexing struct {
			param1 moq.ParamIndexing
			param2 moq.ParamIndexing
			param3 moq.ParamIndexing
			param  moq.ParamIndexing
			param5 moq.ParamIndexing
			param6 moq.ParamIndexing
			param7 moq.ParamIndexing
			param8 moq.ParamIndexing
			param9 moq.ParamIndexing
		}
	}
}

// moqDifficultParamNamesFn_mock isolates the mock interface of the
// DifficultParamNamesFn type
type moqDifficultParamNamesFn_mock struct {
	moq *moqDifficultParamNamesFn
}

// moqDifficultParamNamesFn_params holds the params of the
// DifficultParamNamesFn type
type moqDifficultParamNamesFn_params struct {
	param1, param2         bool
	param3                 string
	param, param5, param6  int
	param7, param8, param9 float32
}

// moqDifficultParamNamesFn_paramsKey holds the map key params of the
// DifficultParamNamesFn type
type moqDifficultParamNamesFn_paramsKey struct {
	params struct {
		param1, param2         bool
		param3                 string
		param, param5, param6  int
		param7, param8, param9 float32
	}
	hashes struct {
		param1, param2         hash.Hash
		param3                 hash.Hash
		param, param5, param6  hash.Hash
		param7, param8, param9 hash.Hash
	}
}

// moqDifficultParamNamesFn_resultsByParams contains the results for a given
// set of parameters for the DifficultParamNamesFn type
type moqDifficultParamNamesFn_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqDifficultParamNamesFn_paramsKey]*moqDifficultParamNamesFn_results
}

// moqDifficultParamNamesFn_doFn defines the type of function needed when
// calling andDo for the DifficultParamNamesFn type
type moqDifficultParamNamesFn_doFn func(m, r bool, sequence string, param, params, i int, result, results, _ float32)

// moqDifficultParamNamesFn_doReturnFn defines the type of function needed when
// calling doReturnResults for the DifficultParamNamesFn type
type moqDifficultParamNamesFn_doReturnFn func(m, r bool, sequence string, param, params, i int, result, results, _ float32)

// moqDifficultParamNamesFn_results holds the results of the
// DifficultParamNamesFn type
type moqDifficultParamNamesFn_results struct {
	params  moqDifficultParamNamesFn_params
	results []struct {
		values     *struct{}
		sequence   uint32
		doFn       moqDifficultParamNamesFn_doFn
		doReturnFn moqDifficultParamNamesFn_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqDifficultParamNamesFn_fnRecorder routes recorded function calls to the
// moqDifficultParamNamesFn moq
type moqDifficultParamNamesFn_fnRecorder struct {
	params    moqDifficultParamNamesFn_params
	anyParams uint64
	sequence  bool
	results   *moqDifficultParamNamesFn_results
	moq       *moqDifficultParamNamesFn
}

// moqDifficultParamNamesFn_anyParams isolates the any params functions of the
// DifficultParamNamesFn type
type moqDifficultParamNamesFn_anyParams struct {
	recorder *moqDifficultParamNamesFn_fnRecorder
}

// newMoqDifficultParamNamesFn creates a new moq of the DifficultParamNamesFn
// type
func newMoqDifficultParamNamesFn(scene *moq.Scene, config *moq.Config) *moqDifficultParamNamesFn {
	if config == nil {
		config = &moq.Config{}
	}
	m := &moqDifficultParamNamesFn{
		scene:  scene,
		config: *config,
		moq:    &moqDifficultParamNamesFn_mock{},

		runtime: struct {
			parameterIndexing struct {
				param1 moq.ParamIndexing
				param2 moq.ParamIndexing
				param3 moq.ParamIndexing
				param  moq.ParamIndexing
				param5 moq.ParamIndexing
				param6 moq.ParamIndexing
				param7 moq.ParamIndexing
				param8 moq.ParamIndexing
				param9 moq.ParamIndexing
			}
		}{parameterIndexing: struct {
			param1 moq.ParamIndexing
			param2 moq.ParamIndexing
			param3 moq.ParamIndexing
			param  moq.ParamIndexing
			param5 moq.ParamIndexing
			param6 moq.ParamIndexing
			param7 moq.ParamIndexing
			param8 moq.ParamIndexing
			param9 moq.ParamIndexing
		}{
			param1: moq.ParamIndexByValue,
			param2: moq.ParamIndexByValue,
			param3: moq.ParamIndexByValue,
			param:  moq.ParamIndexByValue,
			param5: moq.ParamIndexByValue,
			param6: moq.ParamIndexByValue,
			param7: moq.ParamIndexByValue,
			param8: moq.ParamIndexByValue,
			param9: moq.ParamIndexByValue,
		}},
	}
	m.moq.moq = m

	scene.AddMoq(m)
	return m
}

// mock returns the moq implementation of the DifficultParamNamesFn type
func (m *moqDifficultParamNamesFn) mock() testmoqs.DifficultParamNamesFn {
	return func(param1, param2 bool, param3 string, param, param5, param6 int, param7, param8, param9 float32) {
		m.scene.T.Helper()
		moq := &moqDifficultParamNamesFn_mock{moq: m}
		moq.fn(param1, param2, param3, param, param5, param6, param7, param8, param9)
	}
}

func (m *moqDifficultParamNamesFn_mock) fn(param1, param2 bool, param3 string, param, param5, param6 int, param7, param8, param9 float32) {
	m.moq.scene.T.Helper()
	params := moqDifficultParamNamesFn_params{
		param1: param1,
		param2: param2,
		param3: param3,
		param:  param,
		param5: param5,
		param6: param6,
		param7: param7,
		param8: param8,
		param9: param9,
	}
	var results *moqDifficultParamNamesFn_results
	for _, resultsByParams := range m.moq.resultsByParams {
		paramsKey := m.moq.paramsKey(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call to %s", m.moq.prettyParams(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to %s", m.moq.prettyParams(params))
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match call to %s", m.moq.prettyParams(params))
		}
	}

	if result.doFn != nil {
		result.doFn(param1, param2, param3, param, param5, param6, param7, param8, param9)
	}

	if result.doReturnFn != nil {
		result.doReturnFn(param1, param2, param3, param, param5, param6, param7, param8, param9)
	}
	return
}

func (m *moqDifficultParamNamesFn) onCall(param1, param2 bool, param3 string, param, param5, param6 int, param7, param8, param9 float32) *moqDifficultParamNamesFn_fnRecorder {
	return &moqDifficultParamNamesFn_fnRecorder{
		params: moqDifficultParamNamesFn_params{
			param1: param1,
			param2: param2,
			param3: param3,
			param:  param,
			param5: param5,
			param6: param6,
			param7: param7,
			param8: param8,
			param9: param9,
		},
		sequence: m.config.Sequence == moq.SeqDefaultOn,
		moq:      m,
	}
}

func (r *moqDifficultParamNamesFn_fnRecorder) any() *moqDifficultParamNamesFn_anyParams {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	return &moqDifficultParamNamesFn_anyParams{recorder: r}
}

func (a *moqDifficultParamNamesFn_anyParams) param1() *moqDifficultParamNamesFn_fnRecorder {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (a *moqDifficultParamNamesFn_anyParams) param2() *moqDifficultParamNamesFn_fnRecorder {
	a.recorder.anyParams |= 1 << 1
	return a.recorder
}

func (a *moqDifficultParamNamesFn_anyParams) param3() *moqDifficultParamNamesFn_fnRecorder {
	a.recorder.anyParams |= 1 << 2
	return a.recorder
}

func (a *moqDifficultParamNamesFn_anyParams) param() *moqDifficultParamNamesFn_fnRecorder {
	a.recorder.anyParams |= 1 << 3
	return a.recorder
}

func (a *moqDifficultParamNamesFn_anyParams) param5() *moqDifficultParamNamesFn_fnRecorder {
	a.recorder.anyParams |= 1 << 4
	return a.recorder
}

func (a *moqDifficultParamNamesFn_anyParams) param6() *moqDifficultParamNamesFn_fnRecorder {
	a.recorder.anyParams |= 1 << 5
	return a.recorder
}

func (a *moqDifficultParamNamesFn_anyParams) param7() *moqDifficultParamNamesFn_fnRecorder {
	a.recorder.anyParams |= 1 << 6
	return a.recorder
}

func (a *moqDifficultParamNamesFn_anyParams) param8() *moqDifficultParamNamesFn_fnRecorder {
	a.recorder.anyParams |= 1 << 7
	return a.recorder
}

func (a *moqDifficultParamNamesFn_anyParams) param9() *moqDifficultParamNamesFn_fnRecorder {
	a.recorder.anyParams |= 1 << 8
	return a.recorder
}

func (r *moqDifficultParamNamesFn_fnRecorder) seq() *moqDifficultParamNamesFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqDifficultParamNamesFn_fnRecorder) noSeq() *moqDifficultParamNamesFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqDifficultParamNamesFn_fnRecorder) returnResults() *moqDifficultParamNamesFn_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values     *struct{}
		sequence   uint32
		doFn       moqDifficultParamNamesFn_doFn
		doReturnFn moqDifficultParamNamesFn_doReturnFn
	}{
		values:   &struct{}{},
		sequence: sequence,
	})
	return r
}

func (r *moqDifficultParamNamesFn_fnRecorder) andDo(fn moqDifficultParamNamesFn_doFn) *moqDifficultParamNamesFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqDifficultParamNamesFn_fnRecorder) doReturnResults(fn moqDifficultParamNamesFn_doReturnFn) *moqDifficultParamNamesFn_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values     *struct{}
		sequence   uint32
		doFn       moqDifficultParamNamesFn_doFn
		doReturnFn moqDifficultParamNamesFn_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqDifficultParamNamesFn_fnRecorder) findResults() {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqDifficultParamNamesFn_resultsByParams
	for n, res := range r.moq.resultsByParams {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqDifficultParamNamesFn_resultsByParams{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqDifficultParamNamesFn_paramsKey]*moqDifficultParamNamesFn_results{},
		}
		r.moq.resultsByParams = append(r.moq.resultsByParams, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams) {
			copy(r.moq.resultsByParams[insertAt+1:], r.moq.resultsByParams[insertAt:0])
			r.moq.resultsByParams[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqDifficultParamNamesFn_results{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqDifficultParamNamesFn_fnRecorder) repeat(repeaters ...moq.Repeater) *moqDifficultParamNamesFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values     *struct{}
				sequence   uint32
				doFn       moqDifficultParamNamesFn_doFn
				doReturnFn moqDifficultParamNamesFn_doReturnFn
			}{
				values:   last.values,
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqDifficultParamNamesFn) prettyParams(params moqDifficultParamNamesFn_params) string {
	return fmt.Sprintf("DifficultParamNamesFn(%#v, %#v, %#v, %#v, %#v, %#v, %#v, %#v, %#v)", params.param1, params.param2, params.param3, params.param, params.param5, params.param6, params.param7, params.param8, params.param9)
}

func (m *moqDifficultParamNamesFn) paramsKey(params moqDifficultParamNamesFn_params, anyParams uint64) moqDifficultParamNamesFn_paramsKey {
	m.scene.T.Helper()
	var param1Used bool
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.param1 == moq.ParamIndexByValue {
			param1Used = params.param1
		} else {
			param1UsedHash = hash.DeepHash(params.param1)
		}
	}
	var param2Used bool
	var param2UsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.runtime.parameterIndexing.param2 == moq.ParamIndexByValue {
			param2Used = params.param2
		} else {
			param2UsedHash = hash.DeepHash(params.param2)
		}
	}
	var param3Used string
	var param3UsedHash hash.Hash
	if anyParams&(1<<2) == 0 {
		if m.runtime.parameterIndexing.param3 == moq.ParamIndexByValue {
			param3Used = params.param3
		} else {
			param3UsedHash = hash.DeepHash(params.param3)
		}
	}
	var paramUsed int
	var paramUsedHash hash.Hash
	if anyParams&(1<<3) == 0 {
		if m.runtime.parameterIndexing.param == moq.ParamIndexByValue {
			paramUsed = params.param
		} else {
			paramUsedHash = hash.DeepHash(params.param)
		}
	}
	var param5Used int
	var param5UsedHash hash.Hash
	if anyParams&(1<<4) == 0 {
		if m.runtime.parameterIndexing.param5 == moq.ParamIndexByValue {
			param5Used = params.param5
		} else {
			param5UsedHash = hash.DeepHash(params.param5)
		}
	}
	var param6Used int
	var param6UsedHash hash.Hash
	if anyParams&(1<<5) == 0 {
		if m.runtime.parameterIndexing.param6 == moq.ParamIndexByValue {
			param6Used = params.param6
		} else {
			param6UsedHash = hash.DeepHash(params.param6)
		}
	}
	var param7Used float32
	var param7UsedHash hash.Hash
	if anyParams&(1<<6) == 0 {
		if m.runtime.parameterIndexing.param7 == moq.ParamIndexByValue {
			param7Used = params.param7
		} else {
			param7UsedHash = hash.DeepHash(params.param7)
		}
	}
	var param8Used float32
	var param8UsedHash hash.Hash
	if anyParams&(1<<7) == 0 {
		if m.runtime.parameterIndexing.param8 == moq.ParamIndexByValue {
			param8Used = params.param8
		} else {
			param8UsedHash = hash.DeepHash(params.param8)
		}
	}
	var param9Used float32
	var param9UsedHash hash.Hash
	if anyParams&(1<<8) == 0 {
		if m.runtime.parameterIndexing.param9 == moq.ParamIndexByValue {
			param9Used = params.param9
		} else {
			param9UsedHash = hash.DeepHash(params.param9)
		}
	}
	return moqDifficultParamNamesFn_paramsKey{
		params: struct {
			param1, param2         bool
			param3                 string
			param, param5, param6  int
			param7, param8, param9 float32
		}{
			param1: param1Used,
			param2: param2Used,
			param3: param3Used,
			param:  paramUsed,
			param5: param5Used,
			param6: param6Used,
			param7: param7Used,
			param8: param8Used,
			param9: param9Used,
		},
		hashes: struct {
			param1, param2         hash.Hash
			param3                 hash.Hash
			param, param5, param6  hash.Hash
			param7, param8, param9 hash.Hash
		}{
			param1: param1UsedHash,
			param2: param2UsedHash,
			param3: param3UsedHash,
			param:  paramUsedHash,
			param5: param5UsedHash,
			param6: param6UsedHash,
			param7: param7UsedHash,
			param8: param8UsedHash,
			param9: param9UsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *moqDifficultParamNamesFn) Reset() { m.resultsByParams = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *moqDifficultParamNamesFn) AssertExpectationsMet() {
	m.scene.T.Helper()
	for _, res := range m.resultsByParams {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.prettyParams(results.params))
			}
		}
	}
}

// moqDifficultResultNamesFn holds the state of a moq of the
// DifficultResultNamesFn type
type moqDifficultResultNamesFn struct {
	scene  *moq.Scene
	config moq.Config
	moq    *moqDifficultResultNamesFn_mock

	resultsByParams []moqDifficultResultNamesFn_resultsByParams

	runtime struct {
		parameterIndexing struct{}
	}
}

// moqDifficultResultNamesFn_mock isolates the mock interface of the
// DifficultResultNamesFn type
type moqDifficultResultNamesFn_mock struct {
	moq *moqDifficultResultNamesFn
}

// moqDifficultResultNamesFn_params holds the params of the
// DifficultResultNamesFn type
type moqDifficultResultNamesFn_params struct{}

// moqDifficultResultNamesFn_paramsKey holds the map key params of the
// DifficultResultNamesFn type
type moqDifficultResultNamesFn_paramsKey struct {
	params struct{}
	hashes struct{}
}

// moqDifficultResultNamesFn_resultsByParams contains the results for a given
// set of parameters for the DifficultResultNamesFn type
type moqDifficultResultNamesFn_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqDifficultResultNamesFn_paramsKey]*moqDifficultResultNamesFn_results
}

// moqDifficultResultNamesFn_doFn defines the type of function needed when
// calling andDo for the DifficultResultNamesFn type
type moqDifficultResultNamesFn_doFn func()

// moqDifficultResultNamesFn_doReturnFn defines the type of function needed
// when calling doReturnResults for the DifficultResultNamesFn type
type moqDifficultResultNamesFn_doReturnFn func() (m, r string, sequence error, param, params, i int, result, results, _ float32)

// moqDifficultResultNamesFn_results holds the results of the
// DifficultResultNamesFn type
type moqDifficultResultNamesFn_results struct {
	params  moqDifficultResultNamesFn_params
	results []struct {
		values *struct {
			result1, result2          string
			result3                   error
			param, result5, result6   int
			result7, result8, result9 float32
		}
		sequence   uint32
		doFn       moqDifficultResultNamesFn_doFn
		doReturnFn moqDifficultResultNamesFn_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqDifficultResultNamesFn_fnRecorder routes recorded function calls to the
// moqDifficultResultNamesFn moq
type moqDifficultResultNamesFn_fnRecorder struct {
	params    moqDifficultResultNamesFn_params
	anyParams uint64
	sequence  bool
	results   *moqDifficultResultNamesFn_results
	moq       *moqDifficultResultNamesFn
}

// moqDifficultResultNamesFn_anyParams isolates the any params functions of the
// DifficultResultNamesFn type
type moqDifficultResultNamesFn_anyParams struct {
	recorder *moqDifficultResultNamesFn_fnRecorder
}

// newMoqDifficultResultNamesFn creates a new moq of the DifficultResultNamesFn
// type
func newMoqDifficultResultNamesFn(scene *moq.Scene, config *moq.Config) *moqDifficultResultNamesFn {
	if config == nil {
		config = &moq.Config{}
	}
	m := &moqDifficultResultNamesFn{
		scene:  scene,
		config: *config,
		moq:    &moqDifficultResultNamesFn_mock{},

		runtime: struct {
			parameterIndexing struct{}
		}{parameterIndexing: struct{}{}},
	}
	m.moq.moq = m

	scene.AddMoq(m)
	return m
}

// mock returns the moq implementation of the DifficultResultNamesFn type
func (m *moqDifficultResultNamesFn) mock() testmoqs.DifficultResultNamesFn {
	return func() (_, _ string, _ error, _, _, _ int, _, _, _ float32) {
		m.scene.T.Helper()
		moq := &moqDifficultResultNamesFn_mock{moq: m}
		return moq.fn()
	}
}

func (m *moqDifficultResultNamesFn_mock) fn() (result1, result2 string, result3 error, param, result5, result6 int, result7, result8, result9 float32) {
	m.moq.scene.T.Helper()
	params := moqDifficultResultNamesFn_params{}
	var results *moqDifficultResultNamesFn_results
	for _, resultsByParams := range m.moq.resultsByParams {
		paramsKey := m.moq.paramsKey(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call to %s", m.moq.prettyParams(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to %s", m.moq.prettyParams(params))
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match call to %s", m.moq.prettyParams(params))
		}
	}

	if result.doFn != nil {
		result.doFn()
	}

	if result.values != nil {
		result1 = result.values.result1
		result2 = result.values.result2
		result3 = result.values.result3
		param = result.values.param
		result5 = result.values.result5
		result6 = result.values.result6
		result7 = result.values.result7
		result8 = result.values.result8
		result9 = result.values.result9
	}
	if result.doReturnFn != nil {
		result1, result2, result3, param, result5, result6, result7, result8, result9 = result.doReturnFn()
	}
	return
}

func (m *moqDifficultResultNamesFn) onCall() *moqDifficultResultNamesFn_fnRecorder {
	return &moqDifficultResultNamesFn_fnRecorder{
		params:   moqDifficultResultNamesFn_params{},
		sequence: m.config.Sequence == moq.SeqDefaultOn,
		moq:      m,
	}
}

func (r *moqDifficultResultNamesFn_fnRecorder) any() *moqDifficultResultNamesFn_anyParams {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	return &moqDifficultResultNamesFn_anyParams{recorder: r}
}

func (r *moqDifficultResultNamesFn_fnRecorder) seq() *moqDifficultResultNamesFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqDifficultResultNamesFn_fnRecorder) noSeq() *moqDifficultResultNamesFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqDifficultResultNamesFn_fnRecorder) returnResults(result1, result2 string, result3 error, param, result5, result6 int, result7, result8, result9 float32) *moqDifficultResultNamesFn_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1, result2          string
			result3                   error
			param, result5, result6   int
			result7, result8, result9 float32
		}
		sequence   uint32
		doFn       moqDifficultResultNamesFn_doFn
		doReturnFn moqDifficultResultNamesFn_doReturnFn
	}{
		values: &struct {
			result1, result2          string
			result3                   error
			param, result5, result6   int
			result7, result8, result9 float32
		}{
			result1: result1,
			result2: result2,
			result3: result3,
			param:   param,
			result5: result5,
			result6: result6,
			result7: result7,
			result8: result8,
			result9: result9,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqDifficultResultNamesFn_fnRecorder) andDo(fn moqDifficultResultNamesFn_doFn) *moqDifficultResultNamesFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqDifficultResultNamesFn_fnRecorder) doReturnResults(fn moqDifficultResultNamesFn_doReturnFn) *moqDifficultResultNamesFn_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1, result2          string
			result3                   error
			param, result5, result6   int
			result7, result8, result9 float32
		}
		sequence   uint32
		doFn       moqDifficultResultNamesFn_doFn
		doReturnFn moqDifficultResultNamesFn_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqDifficultResultNamesFn_fnRecorder) findResults() {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqDifficultResultNamesFn_resultsByParams
	for n, res := range r.moq.resultsByParams {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqDifficultResultNamesFn_resultsByParams{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqDifficultResultNamesFn_paramsKey]*moqDifficultResultNamesFn_results{},
		}
		r.moq.resultsByParams = append(r.moq.resultsByParams, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams) {
			copy(r.moq.resultsByParams[insertAt+1:], r.moq.resultsByParams[insertAt:0])
			r.moq.resultsByParams[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqDifficultResultNamesFn_results{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqDifficultResultNamesFn_fnRecorder) repeat(repeaters ...moq.Repeater) *moqDifficultResultNamesFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values *struct {
					result1, result2          string
					result3                   error
					param, result5, result6   int
					result7, result8, result9 float32
				}
				sequence   uint32
				doFn       moqDifficultResultNamesFn_doFn
				doReturnFn moqDifficultResultNamesFn_doReturnFn
			}{
				values:   last.values,
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqDifficultResultNamesFn) prettyParams(params moqDifficultResultNamesFn_params) string {
	return fmt.Sprintf("DifficultResultNamesFn()")
}

func (m *moqDifficultResultNamesFn) paramsKey(params moqDifficultResultNamesFn_params, anyParams uint64) moqDifficultResultNamesFn_paramsKey {
	m.scene.T.Helper()
	return moqDifficultResultNamesFn_paramsKey{
		params: struct{}{},
		hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *moqDifficultResultNamesFn) Reset() { m.resultsByParams = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *moqDifficultResultNamesFn) AssertExpectationsMet() {
	m.scene.T.Helper()
	for _, res := range m.resultsByParams {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.prettyParams(results.params))
			}
		}
	}
}

// moqPassByArrayFn holds the state of a moq of the PassByArrayFn type
type moqPassByArrayFn struct {
	scene  *moq.Scene
	config moq.Config
	moq    *moqPassByArrayFn_mock

	resultsByParams []moqPassByArrayFn_resultsByParams

	runtime struct {
		parameterIndexing struct {
			p moq.ParamIndexing
		}
	}
}

// moqPassByArrayFn_mock isolates the mock interface of the PassByArrayFn type
type moqPassByArrayFn_mock struct {
	moq *moqPassByArrayFn
}

// moqPassByArrayFn_params holds the params of the PassByArrayFn type
type moqPassByArrayFn_params struct{ p [3]testmoqs.Params }

// moqPassByArrayFn_paramsKey holds the map key params of the PassByArrayFn
// type
type moqPassByArrayFn_paramsKey struct {
	params struct{ p [3]testmoqs.Params }
	hashes struct{ p hash.Hash }
}

// moqPassByArrayFn_resultsByParams contains the results for a given set of
// parameters for the PassByArrayFn type
type moqPassByArrayFn_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqPassByArrayFn_paramsKey]*moqPassByArrayFn_results
}

// moqPassByArrayFn_doFn defines the type of function needed when calling andDo
// for the PassByArrayFn type
type moqPassByArrayFn_doFn func(p [3]testmoqs.Params)

// moqPassByArrayFn_doReturnFn defines the type of function needed when calling
// doReturnResults for the PassByArrayFn type
type moqPassByArrayFn_doReturnFn func(p [3]testmoqs.Params) [3]testmoqs.Results

// moqPassByArrayFn_results holds the results of the PassByArrayFn type
type moqPassByArrayFn_results struct {
	params  moqPassByArrayFn_params
	results []struct {
		values *struct {
			result1 [3]testmoqs.Results
		}
		sequence   uint32
		doFn       moqPassByArrayFn_doFn
		doReturnFn moqPassByArrayFn_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqPassByArrayFn_fnRecorder routes recorded function calls to the
// moqPassByArrayFn moq
type moqPassByArrayFn_fnRecorder struct {
	params    moqPassByArrayFn_params
	anyParams uint64
	sequence  bool
	results   *moqPassByArrayFn_results
	moq       *moqPassByArrayFn
}

// moqPassByArrayFn_anyParams isolates the any params functions of the
// PassByArrayFn type
type moqPassByArrayFn_anyParams struct {
	recorder *moqPassByArrayFn_fnRecorder
}

// newMoqPassByArrayFn creates a new moq of the PassByArrayFn type
func newMoqPassByArrayFn(scene *moq.Scene, config *moq.Config) *moqPassByArrayFn {
	if config == nil {
		config = &moq.Config{}
	}
	m := &moqPassByArrayFn{
		scene:  scene,
		config: *config,
		moq:    &moqPassByArrayFn_mock{},

		runtime: struct {
			parameterIndexing struct {
				p moq.ParamIndexing
			}
		}{parameterIndexing: struct {
			p moq.ParamIndexing
		}{
			p: moq.ParamIndexByValue,
		}},
	}
	m.moq.moq = m

	scene.AddMoq(m)
	return m
}

// mock returns the moq implementation of the PassByArrayFn type
func (m *moqPassByArrayFn) mock() testmoqs.PassByArrayFn {
	return func(p [3]testmoqs.Params) [3]testmoqs.Results {
		m.scene.T.Helper()
		moq := &moqPassByArrayFn_mock{moq: m}
		return moq.fn(p)
	}
}

func (m *moqPassByArrayFn_mock) fn(p [3]testmoqs.Params) (result1 [3]testmoqs.Results) {
	m.moq.scene.T.Helper()
	params := moqPassByArrayFn_params{
		p: p,
	}
	var results *moqPassByArrayFn_results
	for _, resultsByParams := range m.moq.resultsByParams {
		paramsKey := m.moq.paramsKey(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call to %s", m.moq.prettyParams(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to %s", m.moq.prettyParams(params))
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match call to %s", m.moq.prettyParams(params))
		}
	}

	if result.doFn != nil {
		result.doFn(p)
	}

	if result.values != nil {
		result1 = result.values.result1
	}
	if result.doReturnFn != nil {
		result1 = result.doReturnFn(p)
	}
	return
}

func (m *moqPassByArrayFn) onCall(p [3]testmoqs.Params) *moqPassByArrayFn_fnRecorder {
	return &moqPassByArrayFn_fnRecorder{
		params: moqPassByArrayFn_params{
			p: p,
		},
		sequence: m.config.Sequence == moq.SeqDefaultOn,
		moq:      m,
	}
}

func (r *moqPassByArrayFn_fnRecorder) any() *moqPassByArrayFn_anyParams {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	return &moqPassByArrayFn_anyParams{recorder: r}
}

func (a *moqPassByArrayFn_anyParams) p() *moqPassByArrayFn_fnRecorder {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (r *moqPassByArrayFn_fnRecorder) seq() *moqPassByArrayFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqPassByArrayFn_fnRecorder) noSeq() *moqPassByArrayFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqPassByArrayFn_fnRecorder) returnResults(result1 [3]testmoqs.Results) *moqPassByArrayFn_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 [3]testmoqs.Results
		}
		sequence   uint32
		doFn       moqPassByArrayFn_doFn
		doReturnFn moqPassByArrayFn_doReturnFn
	}{
		values: &struct {
			result1 [3]testmoqs.Results
		}{
			result1: result1,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqPassByArrayFn_fnRecorder) andDo(fn moqPassByArrayFn_doFn) *moqPassByArrayFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqPassByArrayFn_fnRecorder) doReturnResults(fn moqPassByArrayFn_doReturnFn) *moqPassByArrayFn_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 [3]testmoqs.Results
		}
		sequence   uint32
		doFn       moqPassByArrayFn_doFn
		doReturnFn moqPassByArrayFn_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqPassByArrayFn_fnRecorder) findResults() {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqPassByArrayFn_resultsByParams
	for n, res := range r.moq.resultsByParams {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqPassByArrayFn_resultsByParams{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqPassByArrayFn_paramsKey]*moqPassByArrayFn_results{},
		}
		r.moq.resultsByParams = append(r.moq.resultsByParams, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams) {
			copy(r.moq.resultsByParams[insertAt+1:], r.moq.resultsByParams[insertAt:0])
			r.moq.resultsByParams[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqPassByArrayFn_results{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqPassByArrayFn_fnRecorder) repeat(repeaters ...moq.Repeater) *moqPassByArrayFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values *struct {
					result1 [3]testmoqs.Results
				}
				sequence   uint32
				doFn       moqPassByArrayFn_doFn
				doReturnFn moqPassByArrayFn_doReturnFn
			}{
				values:   last.values,
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqPassByArrayFn) prettyParams(params moqPassByArrayFn_params) string {
	return fmt.Sprintf("PassByArrayFn(%#v)", params.p)
}

func (m *moqPassByArrayFn) paramsKey(params moqPassByArrayFn_params, anyParams uint64) moqPassByArrayFn_paramsKey {
	m.scene.T.Helper()
	var pUsed [3]testmoqs.Params
	var pUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.p == moq.ParamIndexByValue {
			pUsed = params.p
		} else {
			pUsedHash = hash.DeepHash(params.p)
		}
	}
	return moqPassByArrayFn_paramsKey{
		params: struct{ p [3]testmoqs.Params }{
			p: pUsed,
		},
		hashes: struct{ p hash.Hash }{
			p: pUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *moqPassByArrayFn) Reset() { m.resultsByParams = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *moqPassByArrayFn) AssertExpectationsMet() {
	m.scene.T.Helper()
	for _, res := range m.resultsByParams {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.prettyParams(results.params))
			}
		}
	}
}

// moqPassByChanFn holds the state of a moq of the PassByChanFn type
type moqPassByChanFn struct {
	scene  *moq.Scene
	config moq.Config
	moq    *moqPassByChanFn_mock

	resultsByParams []moqPassByChanFn_resultsByParams

	runtime struct {
		parameterIndexing struct {
			p moq.ParamIndexing
		}
	}
}

// moqPassByChanFn_mock isolates the mock interface of the PassByChanFn type
type moqPassByChanFn_mock struct {
	moq *moqPassByChanFn
}

// moqPassByChanFn_params holds the params of the PassByChanFn type
type moqPassByChanFn_params struct{ p chan testmoqs.Params }

// moqPassByChanFn_paramsKey holds the map key params of the PassByChanFn type
type moqPassByChanFn_paramsKey struct {
	params struct{ p chan testmoqs.Params }
	hashes struct{ p hash.Hash }
}

// moqPassByChanFn_resultsByParams contains the results for a given set of
// parameters for the PassByChanFn type
type moqPassByChanFn_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqPassByChanFn_paramsKey]*moqPassByChanFn_results
}

// moqPassByChanFn_doFn defines the type of function needed when calling andDo
// for the PassByChanFn type
type moqPassByChanFn_doFn func(p chan testmoqs.Params)

// moqPassByChanFn_doReturnFn defines the type of function needed when calling
// doReturnResults for the PassByChanFn type
type moqPassByChanFn_doReturnFn func(p chan testmoqs.Params) chan testmoqs.Results

// moqPassByChanFn_results holds the results of the PassByChanFn type
type moqPassByChanFn_results struct {
	params  moqPassByChanFn_params
	results []struct {
		values *struct {
			result1 chan testmoqs.Results
		}
		sequence   uint32
		doFn       moqPassByChanFn_doFn
		doReturnFn moqPassByChanFn_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqPassByChanFn_fnRecorder routes recorded function calls to the
// moqPassByChanFn moq
type moqPassByChanFn_fnRecorder struct {
	params    moqPassByChanFn_params
	anyParams uint64
	sequence  bool
	results   *moqPassByChanFn_results
	moq       *moqPassByChanFn
}

// moqPassByChanFn_anyParams isolates the any params functions of the
// PassByChanFn type
type moqPassByChanFn_anyParams struct {
	recorder *moqPassByChanFn_fnRecorder
}

// newMoqPassByChanFn creates a new moq of the PassByChanFn type
func newMoqPassByChanFn(scene *moq.Scene, config *moq.Config) *moqPassByChanFn {
	if config == nil {
		config = &moq.Config{}
	}
	m := &moqPassByChanFn{
		scene:  scene,
		config: *config,
		moq:    &moqPassByChanFn_mock{},

		runtime: struct {
			parameterIndexing struct {
				p moq.ParamIndexing
			}
		}{parameterIndexing: struct {
			p moq.ParamIndexing
		}{
			p: moq.ParamIndexByValue,
		}},
	}
	m.moq.moq = m

	scene.AddMoq(m)
	return m
}

// mock returns the moq implementation of the PassByChanFn type
func (m *moqPassByChanFn) mock() testmoqs.PassByChanFn {
	return func(p chan testmoqs.Params) chan testmoqs.Results {
		m.scene.T.Helper()
		moq := &moqPassByChanFn_mock{moq: m}
		return moq.fn(p)
	}
}

func (m *moqPassByChanFn_mock) fn(p chan testmoqs.Params) (result1 chan testmoqs.Results) {
	m.moq.scene.T.Helper()
	params := moqPassByChanFn_params{
		p: p,
	}
	var results *moqPassByChanFn_results
	for _, resultsByParams := range m.moq.resultsByParams {
		paramsKey := m.moq.paramsKey(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call to %s", m.moq.prettyParams(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to %s", m.moq.prettyParams(params))
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match call to %s", m.moq.prettyParams(params))
		}
	}

	if result.doFn != nil {
		result.doFn(p)
	}

	if result.values != nil {
		result1 = result.values.result1
	}
	if result.doReturnFn != nil {
		result1 = result.doReturnFn(p)
	}
	return
}

func (m *moqPassByChanFn) onCall(p chan testmoqs.Params) *moqPassByChanFn_fnRecorder {
	return &moqPassByChanFn_fnRecorder{
		params: moqPassByChanFn_params{
			p: p,
		},
		sequence: m.config.Sequence == moq.SeqDefaultOn,
		moq:      m,
	}
}

func (r *moqPassByChanFn_fnRecorder) any() *moqPassByChanFn_anyParams {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	return &moqPassByChanFn_anyParams{recorder: r}
}

func (a *moqPassByChanFn_anyParams) p() *moqPassByChanFn_fnRecorder {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (r *moqPassByChanFn_fnRecorder) seq() *moqPassByChanFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqPassByChanFn_fnRecorder) noSeq() *moqPassByChanFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqPassByChanFn_fnRecorder) returnResults(result1 chan testmoqs.Results) *moqPassByChanFn_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 chan testmoqs.Results
		}
		sequence   uint32
		doFn       moqPassByChanFn_doFn
		doReturnFn moqPassByChanFn_doReturnFn
	}{
		values: &struct {
			result1 chan testmoqs.Results
		}{
			result1: result1,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqPassByChanFn_fnRecorder) andDo(fn moqPassByChanFn_doFn) *moqPassByChanFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqPassByChanFn_fnRecorder) doReturnResults(fn moqPassByChanFn_doReturnFn) *moqPassByChanFn_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 chan testmoqs.Results
		}
		sequence   uint32
		doFn       moqPassByChanFn_doFn
		doReturnFn moqPassByChanFn_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqPassByChanFn_fnRecorder) findResults() {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqPassByChanFn_resultsByParams
	for n, res := range r.moq.resultsByParams {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqPassByChanFn_resultsByParams{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqPassByChanFn_paramsKey]*moqPassByChanFn_results{},
		}
		r.moq.resultsByParams = append(r.moq.resultsByParams, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams) {
			copy(r.moq.resultsByParams[insertAt+1:], r.moq.resultsByParams[insertAt:0])
			r.moq.resultsByParams[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqPassByChanFn_results{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqPassByChanFn_fnRecorder) repeat(repeaters ...moq.Repeater) *moqPassByChanFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values *struct {
					result1 chan testmoqs.Results
				}
				sequence   uint32
				doFn       moqPassByChanFn_doFn
				doReturnFn moqPassByChanFn_doReturnFn
			}{
				values:   last.values,
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqPassByChanFn) prettyParams(params moqPassByChanFn_params) string {
	return fmt.Sprintf("PassByChanFn(%#v)", params.p)
}

func (m *moqPassByChanFn) paramsKey(params moqPassByChanFn_params, anyParams uint64) moqPassByChanFn_paramsKey {
	m.scene.T.Helper()
	var pUsed chan testmoqs.Params
	var pUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.p == moq.ParamIndexByValue {
			pUsed = params.p
		} else {
			pUsedHash = hash.DeepHash(params.p)
		}
	}
	return moqPassByChanFn_paramsKey{
		params: struct{ p chan testmoqs.Params }{
			p: pUsed,
		},
		hashes: struct{ p hash.Hash }{
			p: pUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *moqPassByChanFn) Reset() { m.resultsByParams = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *moqPassByChanFn) AssertExpectationsMet() {
	m.scene.T.Helper()
	for _, res := range m.resultsByParams {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.prettyParams(results.params))
			}
		}
	}
}

// moqPassByEllipsisFn holds the state of a moq of the PassByEllipsisFn type
type moqPassByEllipsisFn struct {
	scene  *moq.Scene
	config moq.Config
	moq    *moqPassByEllipsisFn_mock

	resultsByParams []moqPassByEllipsisFn_resultsByParams

	runtime struct {
		parameterIndexing struct {
			p moq.ParamIndexing
		}
	}
}

// moqPassByEllipsisFn_mock isolates the mock interface of the PassByEllipsisFn
// type
type moqPassByEllipsisFn_mock struct {
	moq *moqPassByEllipsisFn
}

// moqPassByEllipsisFn_params holds the params of the PassByEllipsisFn type
type moqPassByEllipsisFn_params struct{ p []testmoqs.Params }

// moqPassByEllipsisFn_paramsKey holds the map key params of the
// PassByEllipsisFn type
type moqPassByEllipsisFn_paramsKey struct {
	params struct{}
	hashes struct{ p hash.Hash }
}

// moqPassByEllipsisFn_resultsByParams contains the results for a given set of
// parameters for the PassByEllipsisFn type
type moqPassByEllipsisFn_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqPassByEllipsisFn_paramsKey]*moqPassByEllipsisFn_results
}

// moqPassByEllipsisFn_doFn defines the type of function needed when calling
// andDo for the PassByEllipsisFn type
type moqPassByEllipsisFn_doFn func(p ...testmoqs.Params)

// moqPassByEllipsisFn_doReturnFn defines the type of function needed when
// calling doReturnResults for the PassByEllipsisFn type
type moqPassByEllipsisFn_doReturnFn func(p ...testmoqs.Params) (string, error)

// moqPassByEllipsisFn_results holds the results of the PassByEllipsisFn type
type moqPassByEllipsisFn_results struct {
	params  moqPassByEllipsisFn_params
	results []struct {
		values *struct {
			result1 string
			result2 error
		}
		sequence   uint32
		doFn       moqPassByEllipsisFn_doFn
		doReturnFn moqPassByEllipsisFn_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqPassByEllipsisFn_fnRecorder routes recorded function calls to the
// moqPassByEllipsisFn moq
type moqPassByEllipsisFn_fnRecorder struct {
	params    moqPassByEllipsisFn_params
	anyParams uint64
	sequence  bool
	results   *moqPassByEllipsisFn_results
	moq       *moqPassByEllipsisFn
}

// moqPassByEllipsisFn_anyParams isolates the any params functions of the
// PassByEllipsisFn type
type moqPassByEllipsisFn_anyParams struct {
	recorder *moqPassByEllipsisFn_fnRecorder
}

// newMoqPassByEllipsisFn creates a new moq of the PassByEllipsisFn type
func newMoqPassByEllipsisFn(scene *moq.Scene, config *moq.Config) *moqPassByEllipsisFn {
	if config == nil {
		config = &moq.Config{}
	}
	m := &moqPassByEllipsisFn{
		scene:  scene,
		config: *config,
		moq:    &moqPassByEllipsisFn_mock{},

		runtime: struct {
			parameterIndexing struct {
				p moq.ParamIndexing
			}
		}{parameterIndexing: struct {
			p moq.ParamIndexing
		}{
			p: moq.ParamIndexByHash,
		}},
	}
	m.moq.moq = m

	scene.AddMoq(m)
	return m
}

// mock returns the moq implementation of the PassByEllipsisFn type
func (m *moqPassByEllipsisFn) mock() testmoqs.PassByEllipsisFn {
	return func(p ...testmoqs.Params) (string, error) {
		m.scene.T.Helper()
		moq := &moqPassByEllipsisFn_mock{moq: m}
		return moq.fn(p...)
	}
}

func (m *moqPassByEllipsisFn_mock) fn(p ...testmoqs.Params) (result1 string, result2 error) {
	m.moq.scene.T.Helper()
	params := moqPassByEllipsisFn_params{
		p: p,
	}
	var results *moqPassByEllipsisFn_results
	for _, resultsByParams := range m.moq.resultsByParams {
		paramsKey := m.moq.paramsKey(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call to %s", m.moq.prettyParams(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to %s", m.moq.prettyParams(params))
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match call to %s", m.moq.prettyParams(params))
		}
	}

	if result.doFn != nil {
		result.doFn(p...)
	}

	if result.values != nil {
		result1 = result.values.result1
		result2 = result.values.result2
	}
	if result.doReturnFn != nil {
		result1, result2 = result.doReturnFn(p...)
	}
	return
}

func (m *moqPassByEllipsisFn) onCall(p ...testmoqs.Params) *moqPassByEllipsisFn_fnRecorder {
	return &moqPassByEllipsisFn_fnRecorder{
		params: moqPassByEllipsisFn_params{
			p: p,
		},
		sequence: m.config.Sequence == moq.SeqDefaultOn,
		moq:      m,
	}
}

func (r *moqPassByEllipsisFn_fnRecorder) any() *moqPassByEllipsisFn_anyParams {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	return &moqPassByEllipsisFn_anyParams{recorder: r}
}

func (a *moqPassByEllipsisFn_anyParams) p() *moqPassByEllipsisFn_fnRecorder {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (r *moqPassByEllipsisFn_fnRecorder) seq() *moqPassByEllipsisFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqPassByEllipsisFn_fnRecorder) noSeq() *moqPassByEllipsisFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqPassByEllipsisFn_fnRecorder) returnResults(result1 string, result2 error) *moqPassByEllipsisFn_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 string
			result2 error
		}
		sequence   uint32
		doFn       moqPassByEllipsisFn_doFn
		doReturnFn moqPassByEllipsisFn_doReturnFn
	}{
		values: &struct {
			result1 string
			result2 error
		}{
			result1: result1,
			result2: result2,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqPassByEllipsisFn_fnRecorder) andDo(fn moqPassByEllipsisFn_doFn) *moqPassByEllipsisFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqPassByEllipsisFn_fnRecorder) doReturnResults(fn moqPassByEllipsisFn_doReturnFn) *moqPassByEllipsisFn_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 string
			result2 error
		}
		sequence   uint32
		doFn       moqPassByEllipsisFn_doFn
		doReturnFn moqPassByEllipsisFn_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqPassByEllipsisFn_fnRecorder) findResults() {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqPassByEllipsisFn_resultsByParams
	for n, res := range r.moq.resultsByParams {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqPassByEllipsisFn_resultsByParams{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqPassByEllipsisFn_paramsKey]*moqPassByEllipsisFn_results{},
		}
		r.moq.resultsByParams = append(r.moq.resultsByParams, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams) {
			copy(r.moq.resultsByParams[insertAt+1:], r.moq.resultsByParams[insertAt:0])
			r.moq.resultsByParams[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqPassByEllipsisFn_results{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqPassByEllipsisFn_fnRecorder) repeat(repeaters ...moq.Repeater) *moqPassByEllipsisFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values *struct {
					result1 string
					result2 error
				}
				sequence   uint32
				doFn       moqPassByEllipsisFn_doFn
				doReturnFn moqPassByEllipsisFn_doReturnFn
			}{
				values:   last.values,
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqPassByEllipsisFn) prettyParams(params moqPassByEllipsisFn_params) string {
	return fmt.Sprintf("PassByEllipsisFn(%#v)", params.p)
}

func (m *moqPassByEllipsisFn) paramsKey(params moqPassByEllipsisFn_params, anyParams uint64) moqPassByEllipsisFn_paramsKey {
	m.scene.T.Helper()
	var pUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.p == moq.ParamIndexByValue {
			m.scene.T.Fatalf("The p parameter can't be indexed by value")
		}
		pUsedHash = hash.DeepHash(params.p)
	}
	return moqPassByEllipsisFn_paramsKey{
		params: struct{}{},
		hashes: struct{ p hash.Hash }{
			p: pUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *moqPassByEllipsisFn) Reset() { m.resultsByParams = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *moqPassByEllipsisFn) AssertExpectationsMet() {
	m.scene.T.Helper()
	for _, res := range m.resultsByParams {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.prettyParams(results.params))
			}
		}
	}
}

// moqPassByMapFn holds the state of a moq of the PassByMapFn type
type moqPassByMapFn struct {
	scene  *moq.Scene
	config moq.Config
	moq    *moqPassByMapFn_mock

	resultsByParams []moqPassByMapFn_resultsByParams

	runtime struct {
		parameterIndexing struct {
			p moq.ParamIndexing
		}
	}
}

// moqPassByMapFn_mock isolates the mock interface of the PassByMapFn type
type moqPassByMapFn_mock struct {
	moq *moqPassByMapFn
}

// moqPassByMapFn_params holds the params of the PassByMapFn type
type moqPassByMapFn_params struct{ p map[string]testmoqs.Params }

// moqPassByMapFn_paramsKey holds the map key params of the PassByMapFn type
type moqPassByMapFn_paramsKey struct {
	params struct{}
	hashes struct{ p hash.Hash }
}

// moqPassByMapFn_resultsByParams contains the results for a given set of
// parameters for the PassByMapFn type
type moqPassByMapFn_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqPassByMapFn_paramsKey]*moqPassByMapFn_results
}

// moqPassByMapFn_doFn defines the type of function needed when calling andDo
// for the PassByMapFn type
type moqPassByMapFn_doFn func(p map[string]testmoqs.Params)

// moqPassByMapFn_doReturnFn defines the type of function needed when calling
// doReturnResults for the PassByMapFn type
type moqPassByMapFn_doReturnFn func(p map[string]testmoqs.Params) map[string]testmoqs.Results

// moqPassByMapFn_results holds the results of the PassByMapFn type
type moqPassByMapFn_results struct {
	params  moqPassByMapFn_params
	results []struct {
		values *struct {
			result1 map[string]testmoqs.Results
		}
		sequence   uint32
		doFn       moqPassByMapFn_doFn
		doReturnFn moqPassByMapFn_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqPassByMapFn_fnRecorder routes recorded function calls to the
// moqPassByMapFn moq
type moqPassByMapFn_fnRecorder struct {
	params    moqPassByMapFn_params
	anyParams uint64
	sequence  bool
	results   *moqPassByMapFn_results
	moq       *moqPassByMapFn
}

// moqPassByMapFn_anyParams isolates the any params functions of the
// PassByMapFn type
type moqPassByMapFn_anyParams struct {
	recorder *moqPassByMapFn_fnRecorder
}

// newMoqPassByMapFn creates a new moq of the PassByMapFn type
func newMoqPassByMapFn(scene *moq.Scene, config *moq.Config) *moqPassByMapFn {
	if config == nil {
		config = &moq.Config{}
	}
	m := &moqPassByMapFn{
		scene:  scene,
		config: *config,
		moq:    &moqPassByMapFn_mock{},

		runtime: struct {
			parameterIndexing struct {
				p moq.ParamIndexing
			}
		}{parameterIndexing: struct {
			p moq.ParamIndexing
		}{
			p: moq.ParamIndexByHash,
		}},
	}
	m.moq.moq = m

	scene.AddMoq(m)
	return m
}

// mock returns the moq implementation of the PassByMapFn type
func (m *moqPassByMapFn) mock() testmoqs.PassByMapFn {
	return func(p map[string]testmoqs.Params) map[string]testmoqs.Results {
		m.scene.T.Helper()
		moq := &moqPassByMapFn_mock{moq: m}
		return moq.fn(p)
	}
}

func (m *moqPassByMapFn_mock) fn(p map[string]testmoqs.Params) (result1 map[string]testmoqs.Results) {
	m.moq.scene.T.Helper()
	params := moqPassByMapFn_params{
		p: p,
	}
	var results *moqPassByMapFn_results
	for _, resultsByParams := range m.moq.resultsByParams {
		paramsKey := m.moq.paramsKey(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call to %s", m.moq.prettyParams(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to %s", m.moq.prettyParams(params))
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match call to %s", m.moq.prettyParams(params))
		}
	}

	if result.doFn != nil {
		result.doFn(p)
	}

	if result.values != nil {
		result1 = result.values.result1
	}
	if result.doReturnFn != nil {
		result1 = result.doReturnFn(p)
	}
	return
}

func (m *moqPassByMapFn) onCall(p map[string]testmoqs.Params) *moqPassByMapFn_fnRecorder {
	return &moqPassByMapFn_fnRecorder{
		params: moqPassByMapFn_params{
			p: p,
		},
		sequence: m.config.Sequence == moq.SeqDefaultOn,
		moq:      m,
	}
}

func (r *moqPassByMapFn_fnRecorder) any() *moqPassByMapFn_anyParams {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	return &moqPassByMapFn_anyParams{recorder: r}
}

func (a *moqPassByMapFn_anyParams) p() *moqPassByMapFn_fnRecorder {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (r *moqPassByMapFn_fnRecorder) seq() *moqPassByMapFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqPassByMapFn_fnRecorder) noSeq() *moqPassByMapFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqPassByMapFn_fnRecorder) returnResults(result1 map[string]testmoqs.Results) *moqPassByMapFn_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 map[string]testmoqs.Results
		}
		sequence   uint32
		doFn       moqPassByMapFn_doFn
		doReturnFn moqPassByMapFn_doReturnFn
	}{
		values: &struct {
			result1 map[string]testmoqs.Results
		}{
			result1: result1,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqPassByMapFn_fnRecorder) andDo(fn moqPassByMapFn_doFn) *moqPassByMapFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqPassByMapFn_fnRecorder) doReturnResults(fn moqPassByMapFn_doReturnFn) *moqPassByMapFn_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 map[string]testmoqs.Results
		}
		sequence   uint32
		doFn       moqPassByMapFn_doFn
		doReturnFn moqPassByMapFn_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqPassByMapFn_fnRecorder) findResults() {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqPassByMapFn_resultsByParams
	for n, res := range r.moq.resultsByParams {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqPassByMapFn_resultsByParams{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqPassByMapFn_paramsKey]*moqPassByMapFn_results{},
		}
		r.moq.resultsByParams = append(r.moq.resultsByParams, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams) {
			copy(r.moq.resultsByParams[insertAt+1:], r.moq.resultsByParams[insertAt:0])
			r.moq.resultsByParams[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqPassByMapFn_results{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqPassByMapFn_fnRecorder) repeat(repeaters ...moq.Repeater) *moqPassByMapFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values *struct {
					result1 map[string]testmoqs.Results
				}
				sequence   uint32
				doFn       moqPassByMapFn_doFn
				doReturnFn moqPassByMapFn_doReturnFn
			}{
				values:   last.values,
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqPassByMapFn) prettyParams(params moqPassByMapFn_params) string {
	return fmt.Sprintf("PassByMapFn(%#v)", params.p)
}

func (m *moqPassByMapFn) paramsKey(params moqPassByMapFn_params, anyParams uint64) moqPassByMapFn_paramsKey {
	m.scene.T.Helper()
	var pUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.p == moq.ParamIndexByValue {
			m.scene.T.Fatalf("The p parameter can't be indexed by value")
		}
		pUsedHash = hash.DeepHash(params.p)
	}
	return moqPassByMapFn_paramsKey{
		params: struct{}{},
		hashes: struct{ p hash.Hash }{
			p: pUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *moqPassByMapFn) Reset() { m.resultsByParams = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *moqPassByMapFn) AssertExpectationsMet() {
	m.scene.T.Helper()
	for _, res := range m.resultsByParams {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.prettyParams(results.params))
			}
		}
	}
}

// moqPassByReferenceFn holds the state of a moq of the PassByReferenceFn type
type moqPassByReferenceFn struct {
	scene  *moq.Scene
	config moq.Config
	moq    *moqPassByReferenceFn_mock

	resultsByParams []moqPassByReferenceFn_resultsByParams

	runtime struct {
		parameterIndexing struct {
			p moq.ParamIndexing
		}
	}
}

// moqPassByReferenceFn_mock isolates the mock interface of the
// PassByReferenceFn type
type moqPassByReferenceFn_mock struct {
	moq *moqPassByReferenceFn
}

// moqPassByReferenceFn_params holds the params of the PassByReferenceFn type
type moqPassByReferenceFn_params struct{ p *testmoqs.Params }

// moqPassByReferenceFn_paramsKey holds the map key params of the
// PassByReferenceFn type
type moqPassByReferenceFn_paramsKey struct {
	params struct{ p *testmoqs.Params }
	hashes struct{ p hash.Hash }
}

// moqPassByReferenceFn_resultsByParams contains the results for a given set of
// parameters for the PassByReferenceFn type
type moqPassByReferenceFn_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqPassByReferenceFn_paramsKey]*moqPassByReferenceFn_results
}

// moqPassByReferenceFn_doFn defines the type of function needed when calling
// andDo for the PassByReferenceFn type
type moqPassByReferenceFn_doFn func(p *testmoqs.Params)

// moqPassByReferenceFn_doReturnFn defines the type of function needed when
// calling doReturnResults for the PassByReferenceFn type
type moqPassByReferenceFn_doReturnFn func(p *testmoqs.Params) *testmoqs.Results

// moqPassByReferenceFn_results holds the results of the PassByReferenceFn type
type moqPassByReferenceFn_results struct {
	params  moqPassByReferenceFn_params
	results []struct {
		values *struct {
			result1 *testmoqs.Results
		}
		sequence   uint32
		doFn       moqPassByReferenceFn_doFn
		doReturnFn moqPassByReferenceFn_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqPassByReferenceFn_fnRecorder routes recorded function calls to the
// moqPassByReferenceFn moq
type moqPassByReferenceFn_fnRecorder struct {
	params    moqPassByReferenceFn_params
	anyParams uint64
	sequence  bool
	results   *moqPassByReferenceFn_results
	moq       *moqPassByReferenceFn
}

// moqPassByReferenceFn_anyParams isolates the any params functions of the
// PassByReferenceFn type
type moqPassByReferenceFn_anyParams struct {
	recorder *moqPassByReferenceFn_fnRecorder
}

// newMoqPassByReferenceFn creates a new moq of the PassByReferenceFn type
func newMoqPassByReferenceFn(scene *moq.Scene, config *moq.Config) *moqPassByReferenceFn {
	if config == nil {
		config = &moq.Config{}
	}
	m := &moqPassByReferenceFn{
		scene:  scene,
		config: *config,
		moq:    &moqPassByReferenceFn_mock{},

		runtime: struct {
			parameterIndexing struct {
				p moq.ParamIndexing
			}
		}{parameterIndexing: struct {
			p moq.ParamIndexing
		}{
			p: moq.ParamIndexByHash,
		}},
	}
	m.moq.moq = m

	scene.AddMoq(m)
	return m
}

// mock returns the moq implementation of the PassByReferenceFn type
func (m *moqPassByReferenceFn) mock() testmoqs.PassByReferenceFn {
	return func(p *testmoqs.Params) *testmoqs.Results {
		m.scene.T.Helper()
		moq := &moqPassByReferenceFn_mock{moq: m}
		return moq.fn(p)
	}
}

func (m *moqPassByReferenceFn_mock) fn(p *testmoqs.Params) (result1 *testmoqs.Results) {
	m.moq.scene.T.Helper()
	params := moqPassByReferenceFn_params{
		p: p,
	}
	var results *moqPassByReferenceFn_results
	for _, resultsByParams := range m.moq.resultsByParams {
		paramsKey := m.moq.paramsKey(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call to %s", m.moq.prettyParams(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to %s", m.moq.prettyParams(params))
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match call to %s", m.moq.prettyParams(params))
		}
	}

	if result.doFn != nil {
		result.doFn(p)
	}

	if result.values != nil {
		result1 = result.values.result1
	}
	if result.doReturnFn != nil {
		result1 = result.doReturnFn(p)
	}
	return
}

func (m *moqPassByReferenceFn) onCall(p *testmoqs.Params) *moqPassByReferenceFn_fnRecorder {
	return &moqPassByReferenceFn_fnRecorder{
		params: moqPassByReferenceFn_params{
			p: p,
		},
		sequence: m.config.Sequence == moq.SeqDefaultOn,
		moq:      m,
	}
}

func (r *moqPassByReferenceFn_fnRecorder) any() *moqPassByReferenceFn_anyParams {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	return &moqPassByReferenceFn_anyParams{recorder: r}
}

func (a *moqPassByReferenceFn_anyParams) p() *moqPassByReferenceFn_fnRecorder {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (r *moqPassByReferenceFn_fnRecorder) seq() *moqPassByReferenceFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqPassByReferenceFn_fnRecorder) noSeq() *moqPassByReferenceFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqPassByReferenceFn_fnRecorder) returnResults(result1 *testmoqs.Results) *moqPassByReferenceFn_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 *testmoqs.Results
		}
		sequence   uint32
		doFn       moqPassByReferenceFn_doFn
		doReturnFn moqPassByReferenceFn_doReturnFn
	}{
		values: &struct {
			result1 *testmoqs.Results
		}{
			result1: result1,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqPassByReferenceFn_fnRecorder) andDo(fn moqPassByReferenceFn_doFn) *moqPassByReferenceFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqPassByReferenceFn_fnRecorder) doReturnResults(fn moqPassByReferenceFn_doReturnFn) *moqPassByReferenceFn_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 *testmoqs.Results
		}
		sequence   uint32
		doFn       moqPassByReferenceFn_doFn
		doReturnFn moqPassByReferenceFn_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqPassByReferenceFn_fnRecorder) findResults() {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqPassByReferenceFn_resultsByParams
	for n, res := range r.moq.resultsByParams {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqPassByReferenceFn_resultsByParams{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqPassByReferenceFn_paramsKey]*moqPassByReferenceFn_results{},
		}
		r.moq.resultsByParams = append(r.moq.resultsByParams, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams) {
			copy(r.moq.resultsByParams[insertAt+1:], r.moq.resultsByParams[insertAt:0])
			r.moq.resultsByParams[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqPassByReferenceFn_results{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqPassByReferenceFn_fnRecorder) repeat(repeaters ...moq.Repeater) *moqPassByReferenceFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values *struct {
					result1 *testmoqs.Results
				}
				sequence   uint32
				doFn       moqPassByReferenceFn_doFn
				doReturnFn moqPassByReferenceFn_doReturnFn
			}{
				values:   last.values,
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqPassByReferenceFn) prettyParams(params moqPassByReferenceFn_params) string {
	return fmt.Sprintf("PassByReferenceFn(%#v)", params.p)
}

func (m *moqPassByReferenceFn) paramsKey(params moqPassByReferenceFn_params, anyParams uint64) moqPassByReferenceFn_paramsKey {
	m.scene.T.Helper()
	var pUsed *testmoqs.Params
	var pUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.p == moq.ParamIndexByValue {
			pUsed = params.p
		} else {
			pUsedHash = hash.DeepHash(params.p)
		}
	}
	return moqPassByReferenceFn_paramsKey{
		params: struct{ p *testmoqs.Params }{
			p: pUsed,
		},
		hashes: struct{ p hash.Hash }{
			p: pUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *moqPassByReferenceFn) Reset() { m.resultsByParams = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *moqPassByReferenceFn) AssertExpectationsMet() {
	m.scene.T.Helper()
	for _, res := range m.resultsByParams {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.prettyParams(results.params))
			}
		}
	}
}

// moqPassBySliceFn holds the state of a moq of the PassBySliceFn type
type moqPassBySliceFn struct {
	scene  *moq.Scene
	config moq.Config
	moq    *moqPassBySliceFn_mock

	resultsByParams []moqPassBySliceFn_resultsByParams

	runtime struct {
		parameterIndexing struct {
			p moq.ParamIndexing
		}
	}
}

// moqPassBySliceFn_mock isolates the mock interface of the PassBySliceFn type
type moqPassBySliceFn_mock struct {
	moq *moqPassBySliceFn
}

// moqPassBySliceFn_params holds the params of the PassBySliceFn type
type moqPassBySliceFn_params struct{ p []testmoqs.Params }

// moqPassBySliceFn_paramsKey holds the map key params of the PassBySliceFn
// type
type moqPassBySliceFn_paramsKey struct {
	params struct{}
	hashes struct{ p hash.Hash }
}

// moqPassBySliceFn_resultsByParams contains the results for a given set of
// parameters for the PassBySliceFn type
type moqPassBySliceFn_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqPassBySliceFn_paramsKey]*moqPassBySliceFn_results
}

// moqPassBySliceFn_doFn defines the type of function needed when calling andDo
// for the PassBySliceFn type
type moqPassBySliceFn_doFn func(p []testmoqs.Params)

// moqPassBySliceFn_doReturnFn defines the type of function needed when calling
// doReturnResults for the PassBySliceFn type
type moqPassBySliceFn_doReturnFn func(p []testmoqs.Params) []testmoqs.Results

// moqPassBySliceFn_results holds the results of the PassBySliceFn type
type moqPassBySliceFn_results struct {
	params  moqPassBySliceFn_params
	results []struct {
		values *struct {
			result1 []testmoqs.Results
		}
		sequence   uint32
		doFn       moqPassBySliceFn_doFn
		doReturnFn moqPassBySliceFn_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqPassBySliceFn_fnRecorder routes recorded function calls to the
// moqPassBySliceFn moq
type moqPassBySliceFn_fnRecorder struct {
	params    moqPassBySliceFn_params
	anyParams uint64
	sequence  bool
	results   *moqPassBySliceFn_results
	moq       *moqPassBySliceFn
}

// moqPassBySliceFn_anyParams isolates the any params functions of the
// PassBySliceFn type
type moqPassBySliceFn_anyParams struct {
	recorder *moqPassBySliceFn_fnRecorder
}

// newMoqPassBySliceFn creates a new moq of the PassBySliceFn type
func newMoqPassBySliceFn(scene *moq.Scene, config *moq.Config) *moqPassBySliceFn {
	if config == nil {
		config = &moq.Config{}
	}
	m := &moqPassBySliceFn{
		scene:  scene,
		config: *config,
		moq:    &moqPassBySliceFn_mock{},

		runtime: struct {
			parameterIndexing struct {
				p moq.ParamIndexing
			}
		}{parameterIndexing: struct {
			p moq.ParamIndexing
		}{
			p: moq.ParamIndexByHash,
		}},
	}
	m.moq.moq = m

	scene.AddMoq(m)
	return m
}

// mock returns the moq implementation of the PassBySliceFn type
func (m *moqPassBySliceFn) mock() testmoqs.PassBySliceFn {
	return func(p []testmoqs.Params) []testmoqs.Results {
		m.scene.T.Helper()
		moq := &moqPassBySliceFn_mock{moq: m}
		return moq.fn(p)
	}
}

func (m *moqPassBySliceFn_mock) fn(p []testmoqs.Params) (result1 []testmoqs.Results) {
	m.moq.scene.T.Helper()
	params := moqPassBySliceFn_params{
		p: p,
	}
	var results *moqPassBySliceFn_results
	for _, resultsByParams := range m.moq.resultsByParams {
		paramsKey := m.moq.paramsKey(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call to %s", m.moq.prettyParams(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to %s", m.moq.prettyParams(params))
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match call to %s", m.moq.prettyParams(params))
		}
	}

	if result.doFn != nil {
		result.doFn(p)
	}

	if result.values != nil {
		result1 = result.values.result1
	}
	if result.doReturnFn != nil {
		result1 = result.doReturnFn(p)
	}
	return
}

func (m *moqPassBySliceFn) onCall(p []testmoqs.Params) *moqPassBySliceFn_fnRecorder {
	return &moqPassBySliceFn_fnRecorder{
		params: moqPassBySliceFn_params{
			p: p,
		},
		sequence: m.config.Sequence == moq.SeqDefaultOn,
		moq:      m,
	}
}

func (r *moqPassBySliceFn_fnRecorder) any() *moqPassBySliceFn_anyParams {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	return &moqPassBySliceFn_anyParams{recorder: r}
}

func (a *moqPassBySliceFn_anyParams) p() *moqPassBySliceFn_fnRecorder {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (r *moqPassBySliceFn_fnRecorder) seq() *moqPassBySliceFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqPassBySliceFn_fnRecorder) noSeq() *moqPassBySliceFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqPassBySliceFn_fnRecorder) returnResults(result1 []testmoqs.Results) *moqPassBySliceFn_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 []testmoqs.Results
		}
		sequence   uint32
		doFn       moqPassBySliceFn_doFn
		doReturnFn moqPassBySliceFn_doReturnFn
	}{
		values: &struct {
			result1 []testmoqs.Results
		}{
			result1: result1,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqPassBySliceFn_fnRecorder) andDo(fn moqPassBySliceFn_doFn) *moqPassBySliceFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqPassBySliceFn_fnRecorder) doReturnResults(fn moqPassBySliceFn_doReturnFn) *moqPassBySliceFn_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 []testmoqs.Results
		}
		sequence   uint32
		doFn       moqPassBySliceFn_doFn
		doReturnFn moqPassBySliceFn_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqPassBySliceFn_fnRecorder) findResults() {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqPassBySliceFn_resultsByParams
	for n, res := range r.moq.resultsByParams {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqPassBySliceFn_resultsByParams{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqPassBySliceFn_paramsKey]*moqPassBySliceFn_results{},
		}
		r.moq.resultsByParams = append(r.moq.resultsByParams, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams) {
			copy(r.moq.resultsByParams[insertAt+1:], r.moq.resultsByParams[insertAt:0])
			r.moq.resultsByParams[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqPassBySliceFn_results{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqPassBySliceFn_fnRecorder) repeat(repeaters ...moq.Repeater) *moqPassBySliceFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values *struct {
					result1 []testmoqs.Results
				}
				sequence   uint32
				doFn       moqPassBySliceFn_doFn
				doReturnFn moqPassBySliceFn_doReturnFn
			}{
				values:   last.values,
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqPassBySliceFn) prettyParams(params moqPassBySliceFn_params) string {
	return fmt.Sprintf("PassBySliceFn(%#v)", params.p)
}

func (m *moqPassBySliceFn) paramsKey(params moqPassBySliceFn_params, anyParams uint64) moqPassBySliceFn_paramsKey {
	m.scene.T.Helper()
	var pUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.p == moq.ParamIndexByValue {
			m.scene.T.Fatalf("The p parameter can't be indexed by value")
		}
		pUsedHash = hash.DeepHash(params.p)
	}
	return moqPassBySliceFn_paramsKey{
		params: struct{}{},
		hashes: struct{ p hash.Hash }{
			p: pUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *moqPassBySliceFn) Reset() { m.resultsByParams = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *moqPassBySliceFn) AssertExpectationsMet() {
	m.scene.T.Helper()
	for _, res := range m.resultsByParams {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.prettyParams(results.params))
			}
		}
	}
}

// moqPassByValueFn holds the state of a moq of the PassByValueFn type
type moqPassByValueFn struct {
	scene  *moq.Scene
	config moq.Config
	moq    *moqPassByValueFn_mock

	resultsByParams []moqPassByValueFn_resultsByParams

	runtime struct {
		parameterIndexing struct {
			p moq.ParamIndexing
		}
	}
}

// moqPassByValueFn_mock isolates the mock interface of the PassByValueFn type
type moqPassByValueFn_mock struct {
	moq *moqPassByValueFn
}

// moqPassByValueFn_params holds the params of the PassByValueFn type
type moqPassByValueFn_params struct{ p testmoqs.Params }

// moqPassByValueFn_paramsKey holds the map key params of the PassByValueFn
// type
type moqPassByValueFn_paramsKey struct {
	params struct{ p testmoqs.Params }
	hashes struct{ p hash.Hash }
}

// moqPassByValueFn_resultsByParams contains the results for a given set of
// parameters for the PassByValueFn type
type moqPassByValueFn_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqPassByValueFn_paramsKey]*moqPassByValueFn_results
}

// moqPassByValueFn_doFn defines the type of function needed when calling andDo
// for the PassByValueFn type
type moqPassByValueFn_doFn func(p testmoqs.Params)

// moqPassByValueFn_doReturnFn defines the type of function needed when calling
// doReturnResults for the PassByValueFn type
type moqPassByValueFn_doReturnFn func(p testmoqs.Params) testmoqs.Results

// moqPassByValueFn_results holds the results of the PassByValueFn type
type moqPassByValueFn_results struct {
	params  moqPassByValueFn_params
	results []struct {
		values *struct {
			result1 testmoqs.Results
		}
		sequence   uint32
		doFn       moqPassByValueFn_doFn
		doReturnFn moqPassByValueFn_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqPassByValueFn_fnRecorder routes recorded function calls to the
// moqPassByValueFn moq
type moqPassByValueFn_fnRecorder struct {
	params    moqPassByValueFn_params
	anyParams uint64
	sequence  bool
	results   *moqPassByValueFn_results
	moq       *moqPassByValueFn
}

// moqPassByValueFn_anyParams isolates the any params functions of the
// PassByValueFn type
type moqPassByValueFn_anyParams struct {
	recorder *moqPassByValueFn_fnRecorder
}

// newMoqPassByValueFn creates a new moq of the PassByValueFn type
func newMoqPassByValueFn(scene *moq.Scene, config *moq.Config) *moqPassByValueFn {
	if config == nil {
		config = &moq.Config{}
	}
	m := &moqPassByValueFn{
		scene:  scene,
		config: *config,
		moq:    &moqPassByValueFn_mock{},

		runtime: struct {
			parameterIndexing struct {
				p moq.ParamIndexing
			}
		}{parameterIndexing: struct {
			p moq.ParamIndexing
		}{
			p: moq.ParamIndexByValue,
		}},
	}
	m.moq.moq = m

	scene.AddMoq(m)
	return m
}

// mock returns the moq implementation of the PassByValueFn type
func (m *moqPassByValueFn) mock() testmoqs.PassByValueFn {
	return func(p testmoqs.Params) testmoqs.Results {
		m.scene.T.Helper()
		moq := &moqPassByValueFn_mock{moq: m}
		return moq.fn(p)
	}
}

func (m *moqPassByValueFn_mock) fn(p testmoqs.Params) (result1 testmoqs.Results) {
	m.moq.scene.T.Helper()
	params := moqPassByValueFn_params{
		p: p,
	}
	var results *moqPassByValueFn_results
	for _, resultsByParams := range m.moq.resultsByParams {
		paramsKey := m.moq.paramsKey(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call to %s", m.moq.prettyParams(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to %s", m.moq.prettyParams(params))
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match call to %s", m.moq.prettyParams(params))
		}
	}

	if result.doFn != nil {
		result.doFn(p)
	}

	if result.values != nil {
		result1 = result.values.result1
	}
	if result.doReturnFn != nil {
		result1 = result.doReturnFn(p)
	}
	return
}

func (m *moqPassByValueFn) onCall(p testmoqs.Params) *moqPassByValueFn_fnRecorder {
	return &moqPassByValueFn_fnRecorder{
		params: moqPassByValueFn_params{
			p: p,
		},
		sequence: m.config.Sequence == moq.SeqDefaultOn,
		moq:      m,
	}
}

func (r *moqPassByValueFn_fnRecorder) any() *moqPassByValueFn_anyParams {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	return &moqPassByValueFn_anyParams{recorder: r}
}

func (a *moqPassByValueFn_anyParams) p() *moqPassByValueFn_fnRecorder {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (r *moqPassByValueFn_fnRecorder) seq() *moqPassByValueFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqPassByValueFn_fnRecorder) noSeq() *moqPassByValueFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqPassByValueFn_fnRecorder) returnResults(result1 testmoqs.Results) *moqPassByValueFn_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 testmoqs.Results
		}
		sequence   uint32
		doFn       moqPassByValueFn_doFn
		doReturnFn moqPassByValueFn_doReturnFn
	}{
		values: &struct {
			result1 testmoqs.Results
		}{
			result1: result1,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqPassByValueFn_fnRecorder) andDo(fn moqPassByValueFn_doFn) *moqPassByValueFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqPassByValueFn_fnRecorder) doReturnResults(fn moqPassByValueFn_doReturnFn) *moqPassByValueFn_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 testmoqs.Results
		}
		sequence   uint32
		doFn       moqPassByValueFn_doFn
		doReturnFn moqPassByValueFn_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqPassByValueFn_fnRecorder) findResults() {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqPassByValueFn_resultsByParams
	for n, res := range r.moq.resultsByParams {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqPassByValueFn_resultsByParams{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqPassByValueFn_paramsKey]*moqPassByValueFn_results{},
		}
		r.moq.resultsByParams = append(r.moq.resultsByParams, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams) {
			copy(r.moq.resultsByParams[insertAt+1:], r.moq.resultsByParams[insertAt:0])
			r.moq.resultsByParams[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqPassByValueFn_results{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqPassByValueFn_fnRecorder) repeat(repeaters ...moq.Repeater) *moqPassByValueFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values *struct {
					result1 testmoqs.Results
				}
				sequence   uint32
				doFn       moqPassByValueFn_doFn
				doReturnFn moqPassByValueFn_doReturnFn
			}{
				values:   last.values,
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqPassByValueFn) prettyParams(params moqPassByValueFn_params) string {
	return fmt.Sprintf("PassByValueFn(%#v)", params.p)
}

func (m *moqPassByValueFn) paramsKey(params moqPassByValueFn_params, anyParams uint64) moqPassByValueFn_paramsKey {
	m.scene.T.Helper()
	var pUsed testmoqs.Params
	var pUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.p == moq.ParamIndexByValue {
			pUsed = params.p
		} else {
			pUsedHash = hash.DeepHash(params.p)
		}
	}
	return moqPassByValueFn_paramsKey{
		params: struct{ p testmoqs.Params }{
			p: pUsed,
		},
		hashes: struct{ p hash.Hash }{
			p: pUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *moqPassByValueFn) Reset() { m.resultsByParams = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *moqPassByValueFn) AssertExpectationsMet() {
	m.scene.T.Helper()
	for _, res := range m.resultsByParams {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.prettyParams(results.params))
			}
		}
	}
}

// moqInterfaceParamFn holds the state of a moq of the InterfaceParamFn type
type moqInterfaceParamFn struct {
	scene  *moq.Scene
	config moq.Config
	moq    *moqInterfaceParamFn_mock

	resultsByParams []moqInterfaceParamFn_resultsByParams

	runtime struct {
		parameterIndexing struct {
			w moq.ParamIndexing
		}
	}
}

// moqInterfaceParamFn_mock isolates the mock interface of the InterfaceParamFn
// type
type moqInterfaceParamFn_mock struct {
	moq *moqInterfaceParamFn
}

// moqInterfaceParamFn_params holds the params of the InterfaceParamFn type
type moqInterfaceParamFn_params struct{ w io.Writer }

// moqInterfaceParamFn_paramsKey holds the map key params of the
// InterfaceParamFn type
type moqInterfaceParamFn_paramsKey struct {
	params struct{ w io.Writer }
	hashes struct{ w hash.Hash }
}

// moqInterfaceParamFn_resultsByParams contains the results for a given set of
// parameters for the InterfaceParamFn type
type moqInterfaceParamFn_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqInterfaceParamFn_paramsKey]*moqInterfaceParamFn_results
}

// moqInterfaceParamFn_doFn defines the type of function needed when calling
// andDo for the InterfaceParamFn type
type moqInterfaceParamFn_doFn func(w io.Writer)

// moqInterfaceParamFn_doReturnFn defines the type of function needed when
// calling doReturnResults for the InterfaceParamFn type
type moqInterfaceParamFn_doReturnFn func(w io.Writer) (sResult string, err error)

// moqInterfaceParamFn_results holds the results of the InterfaceParamFn type
type moqInterfaceParamFn_results struct {
	params  moqInterfaceParamFn_params
	results []struct {
		values *struct {
			sResult string
			err     error
		}
		sequence   uint32
		doFn       moqInterfaceParamFn_doFn
		doReturnFn moqInterfaceParamFn_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqInterfaceParamFn_fnRecorder routes recorded function calls to the
// moqInterfaceParamFn moq
type moqInterfaceParamFn_fnRecorder struct {
	params    moqInterfaceParamFn_params
	anyParams uint64
	sequence  bool
	results   *moqInterfaceParamFn_results
	moq       *moqInterfaceParamFn
}

// moqInterfaceParamFn_anyParams isolates the any params functions of the
// InterfaceParamFn type
type moqInterfaceParamFn_anyParams struct {
	recorder *moqInterfaceParamFn_fnRecorder
}

// newMoqInterfaceParamFn creates a new moq of the InterfaceParamFn type
func newMoqInterfaceParamFn(scene *moq.Scene, config *moq.Config) *moqInterfaceParamFn {
	if config == nil {
		config = &moq.Config{}
	}
	m := &moqInterfaceParamFn{
		scene:  scene,
		config: *config,
		moq:    &moqInterfaceParamFn_mock{},

		runtime: struct {
			parameterIndexing struct {
				w moq.ParamIndexing
			}
		}{parameterIndexing: struct {
			w moq.ParamIndexing
		}{
			w: moq.ParamIndexByHash,
		}},
	}
	m.moq.moq = m

	scene.AddMoq(m)
	return m
}

// mock returns the moq implementation of the InterfaceParamFn type
func (m *moqInterfaceParamFn) mock() testmoqs.InterfaceParamFn {
	return func(w io.Writer) (_ string, _ error) {
		m.scene.T.Helper()
		moq := &moqInterfaceParamFn_mock{moq: m}
		return moq.fn(w)
	}
}

func (m *moqInterfaceParamFn_mock) fn(w io.Writer) (sResult string, err error) {
	m.moq.scene.T.Helper()
	params := moqInterfaceParamFn_params{
		w: w,
	}
	var results *moqInterfaceParamFn_results
	for _, resultsByParams := range m.moq.resultsByParams {
		paramsKey := m.moq.paramsKey(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call to %s", m.moq.prettyParams(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to %s", m.moq.prettyParams(params))
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match call to %s", m.moq.prettyParams(params))
		}
	}

	if result.doFn != nil {
		result.doFn(w)
	}

	if result.values != nil {
		sResult = result.values.sResult
		err = result.values.err
	}
	if result.doReturnFn != nil {
		sResult, err = result.doReturnFn(w)
	}
	return
}

func (m *moqInterfaceParamFn) onCall(w io.Writer) *moqInterfaceParamFn_fnRecorder {
	return &moqInterfaceParamFn_fnRecorder{
		params: moqInterfaceParamFn_params{
			w: w,
		},
		sequence: m.config.Sequence == moq.SeqDefaultOn,
		moq:      m,
	}
}

func (r *moqInterfaceParamFn_fnRecorder) any() *moqInterfaceParamFn_anyParams {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	return &moqInterfaceParamFn_anyParams{recorder: r}
}

func (a *moqInterfaceParamFn_anyParams) w() *moqInterfaceParamFn_fnRecorder {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (r *moqInterfaceParamFn_fnRecorder) seq() *moqInterfaceParamFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqInterfaceParamFn_fnRecorder) noSeq() *moqInterfaceParamFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqInterfaceParamFn_fnRecorder) returnResults(sResult string, err error) *moqInterfaceParamFn_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			sResult string
			err     error
		}
		sequence   uint32
		doFn       moqInterfaceParamFn_doFn
		doReturnFn moqInterfaceParamFn_doReturnFn
	}{
		values: &struct {
			sResult string
			err     error
		}{
			sResult: sResult,
			err:     err,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqInterfaceParamFn_fnRecorder) andDo(fn moqInterfaceParamFn_doFn) *moqInterfaceParamFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqInterfaceParamFn_fnRecorder) doReturnResults(fn moqInterfaceParamFn_doReturnFn) *moqInterfaceParamFn_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			sResult string
			err     error
		}
		sequence   uint32
		doFn       moqInterfaceParamFn_doFn
		doReturnFn moqInterfaceParamFn_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqInterfaceParamFn_fnRecorder) findResults() {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqInterfaceParamFn_resultsByParams
	for n, res := range r.moq.resultsByParams {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqInterfaceParamFn_resultsByParams{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqInterfaceParamFn_paramsKey]*moqInterfaceParamFn_results{},
		}
		r.moq.resultsByParams = append(r.moq.resultsByParams, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams) {
			copy(r.moq.resultsByParams[insertAt+1:], r.moq.resultsByParams[insertAt:0])
			r.moq.resultsByParams[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqInterfaceParamFn_results{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqInterfaceParamFn_fnRecorder) repeat(repeaters ...moq.Repeater) *moqInterfaceParamFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values *struct {
					sResult string
					err     error
				}
				sequence   uint32
				doFn       moqInterfaceParamFn_doFn
				doReturnFn moqInterfaceParamFn_doReturnFn
			}{
				values:   last.values,
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqInterfaceParamFn) prettyParams(params moqInterfaceParamFn_params) string {
	return fmt.Sprintf("InterfaceParamFn(%#v)", params.w)
}

func (m *moqInterfaceParamFn) paramsKey(params moqInterfaceParamFn_params, anyParams uint64) moqInterfaceParamFn_paramsKey {
	m.scene.T.Helper()
	var wUsed io.Writer
	var wUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.w == moq.ParamIndexByValue {
			wUsed = params.w
		} else {
			wUsedHash = hash.DeepHash(params.w)
		}
	}
	return moqInterfaceParamFn_paramsKey{
		params: struct{ w io.Writer }{
			w: wUsed,
		},
		hashes: struct{ w hash.Hash }{
			w: wUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *moqInterfaceParamFn) Reset() { m.resultsByParams = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *moqInterfaceParamFn) AssertExpectationsMet() {
	m.scene.T.Helper()
	for _, res := range m.resultsByParams {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.prettyParams(results.params))
			}
		}
	}
}

// moqInterfaceResultFn holds the state of a moq of the InterfaceResultFn type
type moqInterfaceResultFn struct {
	scene  *moq.Scene
	config moq.Config
	moq    *moqInterfaceResultFn_mock

	resultsByParams []moqInterfaceResultFn_resultsByParams

	runtime struct {
		parameterIndexing struct {
			sParam moq.ParamIndexing
			bParam moq.ParamIndexing
		}
	}
}

// moqInterfaceResultFn_mock isolates the mock interface of the
// InterfaceResultFn type
type moqInterfaceResultFn_mock struct {
	moq *moqInterfaceResultFn
}

// moqInterfaceResultFn_params holds the params of the InterfaceResultFn type
type moqInterfaceResultFn_params struct {
	sParam string
	bParam bool
}

// moqInterfaceResultFn_paramsKey holds the map key params of the
// InterfaceResultFn type
type moqInterfaceResultFn_paramsKey struct {
	params struct {
		sParam string
		bParam bool
	}
	hashes struct {
		sParam hash.Hash
		bParam hash.Hash
	}
}

// moqInterfaceResultFn_resultsByParams contains the results for a given set of
// parameters for the InterfaceResultFn type
type moqInterfaceResultFn_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqInterfaceResultFn_paramsKey]*moqInterfaceResultFn_results
}

// moqInterfaceResultFn_doFn defines the type of function needed when calling
// andDo for the InterfaceResultFn type
type moqInterfaceResultFn_doFn func(sParam string, bParam bool)

// moqInterfaceResultFn_doReturnFn defines the type of function needed when
// calling doReturnResults for the InterfaceResultFn type
type moqInterfaceResultFn_doReturnFn func(sParam string, bParam bool) (r io.Reader)

// moqInterfaceResultFn_results holds the results of the InterfaceResultFn type
type moqInterfaceResultFn_results struct {
	params  moqInterfaceResultFn_params
	results []struct {
		values     *struct{ result1 io.Reader }
		sequence   uint32
		doFn       moqInterfaceResultFn_doFn
		doReturnFn moqInterfaceResultFn_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqInterfaceResultFn_fnRecorder routes recorded function calls to the
// moqInterfaceResultFn moq
type moqInterfaceResultFn_fnRecorder struct {
	params    moqInterfaceResultFn_params
	anyParams uint64
	sequence  bool
	results   *moqInterfaceResultFn_results
	moq       *moqInterfaceResultFn
}

// moqInterfaceResultFn_anyParams isolates the any params functions of the
// InterfaceResultFn type
type moqInterfaceResultFn_anyParams struct {
	recorder *moqInterfaceResultFn_fnRecorder
}

// newMoqInterfaceResultFn creates a new moq of the InterfaceResultFn type
func newMoqInterfaceResultFn(scene *moq.Scene, config *moq.Config) *moqInterfaceResultFn {
	if config == nil {
		config = &moq.Config{}
	}
	m := &moqInterfaceResultFn{
		scene:  scene,
		config: *config,
		moq:    &moqInterfaceResultFn_mock{},

		runtime: struct {
			parameterIndexing struct {
				sParam moq.ParamIndexing
				bParam moq.ParamIndexing
			}
		}{parameterIndexing: struct {
			sParam moq.ParamIndexing
			bParam moq.ParamIndexing
		}{
			sParam: moq.ParamIndexByValue,
			bParam: moq.ParamIndexByValue,
		}},
	}
	m.moq.moq = m

	scene.AddMoq(m)
	return m
}

// mock returns the moq implementation of the InterfaceResultFn type
func (m *moqInterfaceResultFn) mock() testmoqs.InterfaceResultFn {
	return func(sParam string, bParam bool) (_ io.Reader) {
		m.scene.T.Helper()
		moq := &moqInterfaceResultFn_mock{moq: m}
		return moq.fn(sParam, bParam)
	}
}

func (m *moqInterfaceResultFn_mock) fn(sParam string, bParam bool) (result1 io.Reader) {
	m.moq.scene.T.Helper()
	params := moqInterfaceResultFn_params{
		sParam: sParam,
		bParam: bParam,
	}
	var results *moqInterfaceResultFn_results
	for _, resultsByParams := range m.moq.resultsByParams {
		paramsKey := m.moq.paramsKey(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call to %s", m.moq.prettyParams(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to %s", m.moq.prettyParams(params))
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match call to %s", m.moq.prettyParams(params))
		}
	}

	if result.doFn != nil {
		result.doFn(sParam, bParam)
	}

	if result.values != nil {
		result1 = result.values.result1
	}
	if result.doReturnFn != nil {
		result1 = result.doReturnFn(sParam, bParam)
	}
	return
}

func (m *moqInterfaceResultFn) onCall(sParam string, bParam bool) *moqInterfaceResultFn_fnRecorder {
	return &moqInterfaceResultFn_fnRecorder{
		params: moqInterfaceResultFn_params{
			sParam: sParam,
			bParam: bParam,
		},
		sequence: m.config.Sequence == moq.SeqDefaultOn,
		moq:      m,
	}
}

func (r *moqInterfaceResultFn_fnRecorder) any() *moqInterfaceResultFn_anyParams {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	return &moqInterfaceResultFn_anyParams{recorder: r}
}

func (a *moqInterfaceResultFn_anyParams) sParam() *moqInterfaceResultFn_fnRecorder {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (a *moqInterfaceResultFn_anyParams) bParam() *moqInterfaceResultFn_fnRecorder {
	a.recorder.anyParams |= 1 << 1
	return a.recorder
}

func (r *moqInterfaceResultFn_fnRecorder) seq() *moqInterfaceResultFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqInterfaceResultFn_fnRecorder) noSeq() *moqInterfaceResultFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqInterfaceResultFn_fnRecorder) returnResults(result1 io.Reader) *moqInterfaceResultFn_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values     *struct{ result1 io.Reader }
		sequence   uint32
		doFn       moqInterfaceResultFn_doFn
		doReturnFn moqInterfaceResultFn_doReturnFn
	}{
		values: &struct{ result1 io.Reader }{
			result1: result1,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqInterfaceResultFn_fnRecorder) andDo(fn moqInterfaceResultFn_doFn) *moqInterfaceResultFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqInterfaceResultFn_fnRecorder) doReturnResults(fn moqInterfaceResultFn_doReturnFn) *moqInterfaceResultFn_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values     *struct{ result1 io.Reader }
		sequence   uint32
		doFn       moqInterfaceResultFn_doFn
		doReturnFn moqInterfaceResultFn_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqInterfaceResultFn_fnRecorder) findResults() {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqInterfaceResultFn_resultsByParams
	for n, res := range r.moq.resultsByParams {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqInterfaceResultFn_resultsByParams{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqInterfaceResultFn_paramsKey]*moqInterfaceResultFn_results{},
		}
		r.moq.resultsByParams = append(r.moq.resultsByParams, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams) {
			copy(r.moq.resultsByParams[insertAt+1:], r.moq.resultsByParams[insertAt:0])
			r.moq.resultsByParams[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqInterfaceResultFn_results{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqInterfaceResultFn_fnRecorder) repeat(repeaters ...moq.Repeater) *moqInterfaceResultFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values     *struct{ result1 io.Reader }
				sequence   uint32
				doFn       moqInterfaceResultFn_doFn
				doReturnFn moqInterfaceResultFn_doReturnFn
			}{
				values:   last.values,
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqInterfaceResultFn) prettyParams(params moqInterfaceResultFn_params) string {
	return fmt.Sprintf("InterfaceResultFn(%#v, %#v)", params.sParam, params.bParam)
}

func (m *moqInterfaceResultFn) paramsKey(params moqInterfaceResultFn_params, anyParams uint64) moqInterfaceResultFn_paramsKey {
	m.scene.T.Helper()
	var sParamUsed string
	var sParamUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.sParam == moq.ParamIndexByValue {
			sParamUsed = params.sParam
		} else {
			sParamUsedHash = hash.DeepHash(params.sParam)
		}
	}
	var bParamUsed bool
	var bParamUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.runtime.parameterIndexing.bParam == moq.ParamIndexByValue {
			bParamUsed = params.bParam
		} else {
			bParamUsedHash = hash.DeepHash(params.bParam)
		}
	}
	return moqInterfaceResultFn_paramsKey{
		params: struct {
			sParam string
			bParam bool
		}{
			sParam: sParamUsed,
			bParam: bParamUsed,
		},
		hashes: struct {
			sParam hash.Hash
			bParam hash.Hash
		}{
			sParam: sParamUsedHash,
			bParam: bParamUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *moqInterfaceResultFn) Reset() { m.resultsByParams = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *moqInterfaceResultFn) AssertExpectationsMet() {
	m.scene.T.Helper()
	for _, res := range m.resultsByParams {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.prettyParams(results.params))
			}
		}
	}
}

// moqGenericParamsFn holds the state of a moq of the GenericParamsFn type
type moqGenericParamsFn[S, B any] struct {
	scene  *moq.Scene
	config moq.Config
	moq    *moqGenericParamsFn_mock[S, B]

	resultsByParams []moqGenericParamsFn_resultsByParams[S, B]

	runtime struct {
		parameterIndexing struct {
			param1 moq.ParamIndexing
			param2 moq.ParamIndexing
		}
	}
}

// moqGenericParamsFn_mock isolates the mock interface of the GenericParamsFn
// type
type moqGenericParamsFn_mock[S, B any] struct {
	moq *moqGenericParamsFn[S, B]
}

// moqGenericParamsFn_params holds the params of the GenericParamsFn type
type moqGenericParamsFn_params[S, B any] struct {
	param1 S
	param2 B
}

// moqGenericParamsFn_paramsKey holds the map key params of the GenericParamsFn
// type
type moqGenericParamsFn_paramsKey[S, B any] struct {
	params struct{}
	hashes struct {
		param1 hash.Hash
		param2 hash.Hash
	}
}

// moqGenericParamsFn_resultsByParams contains the results for a given set of
// parameters for the GenericParamsFn type
type moqGenericParamsFn_resultsByParams[S, B any] struct {
	anyCount  int
	anyParams uint64
	results   map[moqGenericParamsFn_paramsKey[S, B]]*moqGenericParamsFn_results[S, B]
}

// moqGenericParamsFn_doFn defines the type of function needed when calling
// andDo for the GenericParamsFn type
type moqGenericParamsFn_doFn[S, B any] func(S, B)

// moqGenericParamsFn_doReturnFn defines the type of function needed when
// calling doReturnResults for the GenericParamsFn type
type moqGenericParamsFn_doReturnFn[S, B any] func(S, B) (string, error)

// moqGenericParamsFn_results holds the results of the GenericParamsFn type
type moqGenericParamsFn_results[S, B any] struct {
	params  moqGenericParamsFn_params[S, B]
	results []struct {
		values *struct {
			result1 string
			result2 error
		}
		sequence   uint32
		doFn       moqGenericParamsFn_doFn[S, B]
		doReturnFn moqGenericParamsFn_doReturnFn[S, B]
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqGenericParamsFn_fnRecorder routes recorded function calls to the
// moqGenericParamsFn moq
type moqGenericParamsFn_fnRecorder[S, B any] struct {
	params    moqGenericParamsFn_params[S, B]
	anyParams uint64
	sequence  bool
	results   *moqGenericParamsFn_results[S, B]
	moq       *moqGenericParamsFn[S, B]
}

// moqGenericParamsFn_anyParams isolates the any params functions of the
// GenericParamsFn type
type moqGenericParamsFn_anyParams[S, B any] struct {
	recorder *moqGenericParamsFn_fnRecorder[S, B]
}

// newMoqGenericParamsFn creates a new moq of the GenericParamsFn type
func newMoqGenericParamsFn[S, B any](scene *moq.Scene, config *moq.Config) *moqGenericParamsFn[S, B] {
	if config == nil {
		config = &moq.Config{}
	}
	m := &moqGenericParamsFn[S, B]{
		scene:  scene,
		config: *config,
		moq:    &moqGenericParamsFn_mock[S, B]{},

		runtime: struct {
			parameterIndexing struct {
				param1 moq.ParamIndexing
				param2 moq.ParamIndexing
			}
		}{parameterIndexing: struct {
			param1 moq.ParamIndexing
			param2 moq.ParamIndexing
		}{
			param1: moq.ParamIndexByHash,
			param2: moq.ParamIndexByHash,
		}},
	}
	m.moq.moq = m

	scene.AddMoq(m)
	return m
}

// mock returns the moq implementation of the GenericParamsFn type
func (m *moqGenericParamsFn[S, B]) mock() testmoqs.GenericParamsFn[S, B] {
	return func(param1 S, param2 B) (string, error) {
		m.scene.T.Helper()
		moq := &moqGenericParamsFn_mock[S, B]{moq: m}
		return moq.fn(param1, param2)
	}
}

func (m *moqGenericParamsFn_mock[S, B]) fn(param1 S, param2 B) (result1 string, result2 error) {
	m.moq.scene.T.Helper()
	params := moqGenericParamsFn_params[S, B]{
		param1: param1,
		param2: param2,
	}
	var results *moqGenericParamsFn_results[S, B]
	for _, resultsByParams := range m.moq.resultsByParams {
		paramsKey := m.moq.paramsKey(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call to %s", m.moq.prettyParams(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to %s", m.moq.prettyParams(params))
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match call to %s", m.moq.prettyParams(params))
		}
	}

	if result.doFn != nil {
		result.doFn(param1, param2)
	}

	if result.values != nil {
		result1 = result.values.result1
		result2 = result.values.result2
	}
	if result.doReturnFn != nil {
		result1, result2 = result.doReturnFn(param1, param2)
	}
	return
}

func (m *moqGenericParamsFn[S, B]) onCall(param1 S, param2 B) *moqGenericParamsFn_fnRecorder[S, B] {
	return &moqGenericParamsFn_fnRecorder[S, B]{
		params: moqGenericParamsFn_params[S, B]{
			param1: param1,
			param2: param2,
		},
		sequence: m.config.Sequence == moq.SeqDefaultOn,
		moq:      m,
	}
}

func (r *moqGenericParamsFn_fnRecorder[S, B]) any() *moqGenericParamsFn_anyParams[S, B] {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	return &moqGenericParamsFn_anyParams[S, B]{recorder: r}
}

func (a *moqGenericParamsFn_anyParams[S, B]) param1() *moqGenericParamsFn_fnRecorder[S, B] {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (a *moqGenericParamsFn_anyParams[S, B]) param2() *moqGenericParamsFn_fnRecorder[S, B] {
	a.recorder.anyParams |= 1 << 1
	return a.recorder
}

func (r *moqGenericParamsFn_fnRecorder[S, B]) seq() *moqGenericParamsFn_fnRecorder[S, B] {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqGenericParamsFn_fnRecorder[S, B]) noSeq() *moqGenericParamsFn_fnRecorder[S, B] {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqGenericParamsFn_fnRecorder[S, B]) returnResults(result1 string, result2 error) *moqGenericParamsFn_fnRecorder[S, B] {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 string
			result2 error
		}
		sequence   uint32
		doFn       moqGenericParamsFn_doFn[S, B]
		doReturnFn moqGenericParamsFn_doReturnFn[S, B]
	}{
		values: &struct {
			result1 string
			result2 error
		}{
			result1: result1,
			result2: result2,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqGenericParamsFn_fnRecorder[S, B]) andDo(fn moqGenericParamsFn_doFn[S, B]) *moqGenericParamsFn_fnRecorder[S, B] {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqGenericParamsFn_fnRecorder[S, B]) doReturnResults(fn moqGenericParamsFn_doReturnFn[S, B]) *moqGenericParamsFn_fnRecorder[S, B] {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 string
			result2 error
		}
		sequence   uint32
		doFn       moqGenericParamsFn_doFn[S, B]
		doReturnFn moqGenericParamsFn_doReturnFn[S, B]
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqGenericParamsFn_fnRecorder[S, B]) findResults() {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqGenericParamsFn_resultsByParams[S, B]
	for n, res := range r.moq.resultsByParams {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqGenericParamsFn_resultsByParams[S, B]{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqGenericParamsFn_paramsKey[S, B]]*moqGenericParamsFn_results[S, B]{},
		}
		r.moq.resultsByParams = append(r.moq.resultsByParams, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams) {
			copy(r.moq.resultsByParams[insertAt+1:], r.moq.resultsByParams[insertAt:0])
			r.moq.resultsByParams[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqGenericParamsFn_results[S, B]{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqGenericParamsFn_fnRecorder[S, B]) repeat(repeaters ...moq.Repeater) *moqGenericParamsFn_fnRecorder[S, B] {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values *struct {
					result1 string
					result2 error
				}
				sequence   uint32
				doFn       moqGenericParamsFn_doFn[S, B]
				doReturnFn moqGenericParamsFn_doReturnFn[S, B]
			}{
				values:   last.values,
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqGenericParamsFn[S, B]) prettyParams(params moqGenericParamsFn_params[S, B]) string {
	return fmt.Sprintf("GenericParamsFn(%#v, %#v)", params.param1, params.param2)
}

func (m *moqGenericParamsFn[S, B]) paramsKey(params moqGenericParamsFn_params[S, B], anyParams uint64) moqGenericParamsFn_paramsKey[S, B] {
	m.scene.T.Helper()
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.param1 == moq.ParamIndexByValue {
			m.scene.T.Fatalf("The param1 parameter can't be indexed by value")
		}
		param1UsedHash = hash.DeepHash(params.param1)
	}
	var param2UsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.runtime.parameterIndexing.param2 == moq.ParamIndexByValue {
			m.scene.T.Fatalf("The param2 parameter can't be indexed by value")
		}
		param2UsedHash = hash.DeepHash(params.param2)
	}
	return moqGenericParamsFn_paramsKey[S, B]{
		params: struct{}{},
		hashes: struct {
			param1 hash.Hash
			param2 hash.Hash
		}{
			param1: param1UsedHash,
			param2: param2UsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *moqGenericParamsFn[S, B]) Reset() { m.resultsByParams = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *moqGenericParamsFn[S, B]) AssertExpectationsMet() {
	m.scene.T.Helper()
	for _, res := range m.resultsByParams {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.prettyParams(results.params))
			}
		}
	}
}

// moqPartialGenericParamsFn holds the state of a moq of the
// PartialGenericParamsFn type
type moqPartialGenericParamsFn[S any] struct {
	scene  *moq.Scene
	config moq.Config
	moq    *moqPartialGenericParamsFn_mock[S]

	resultsByParams []moqPartialGenericParamsFn_resultsByParams[S]

	runtime struct {
		parameterIndexing struct {
			param1 moq.ParamIndexing
			param2 moq.ParamIndexing
		}
	}
}

// moqPartialGenericParamsFn_mock isolates the mock interface of the
// PartialGenericParamsFn type
type moqPartialGenericParamsFn_mock[S any] struct {
	moq *moqPartialGenericParamsFn[S]
}

// moqPartialGenericParamsFn_params holds the params of the
// PartialGenericParamsFn type
type moqPartialGenericParamsFn_params[S any] struct {
	param1 S
	param2 bool
}

// moqPartialGenericParamsFn_paramsKey holds the map key params of the
// PartialGenericParamsFn type
type moqPartialGenericParamsFn_paramsKey[S any] struct {
	params struct{ param2 bool }
	hashes struct {
		param1 hash.Hash
		param2 hash.Hash
	}
}

// moqPartialGenericParamsFn_resultsByParams contains the results for a given
// set of parameters for the PartialGenericParamsFn type
type moqPartialGenericParamsFn_resultsByParams[S any] struct {
	anyCount  int
	anyParams uint64
	results   map[moqPartialGenericParamsFn_paramsKey[S]]*moqPartialGenericParamsFn_results[S]
}

// moqPartialGenericParamsFn_doFn defines the type of function needed when
// calling andDo for the PartialGenericParamsFn type
type moqPartialGenericParamsFn_doFn[S any] func(S, bool)

// moqPartialGenericParamsFn_doReturnFn defines the type of function needed
// when calling doReturnResults for the PartialGenericParamsFn type
type moqPartialGenericParamsFn_doReturnFn[S any] func(S, bool) (string, error)

// moqPartialGenericParamsFn_results holds the results of the
// PartialGenericParamsFn type
type moqPartialGenericParamsFn_results[S any] struct {
	params  moqPartialGenericParamsFn_params[S]
	results []struct {
		values *struct {
			result1 string
			result2 error
		}
		sequence   uint32
		doFn       moqPartialGenericParamsFn_doFn[S]
		doReturnFn moqPartialGenericParamsFn_doReturnFn[S]
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqPartialGenericParamsFn_fnRecorder routes recorded function calls to the
// moqPartialGenericParamsFn moq
type moqPartialGenericParamsFn_fnRecorder[S any] struct {
	params    moqPartialGenericParamsFn_params[S]
	anyParams uint64
	sequence  bool
	results   *moqPartialGenericParamsFn_results[S]
	moq       *moqPartialGenericParamsFn[S]
}

// moqPartialGenericParamsFn_anyParams isolates the any params functions of the
// PartialGenericParamsFn type
type moqPartialGenericParamsFn_anyParams[S any] struct {
	recorder *moqPartialGenericParamsFn_fnRecorder[S]
}

// newMoqPartialGenericParamsFn creates a new moq of the PartialGenericParamsFn
// type
func newMoqPartialGenericParamsFn[S any](scene *moq.Scene, config *moq.Config) *moqPartialGenericParamsFn[S] {
	if config == nil {
		config = &moq.Config{}
	}
	m := &moqPartialGenericParamsFn[S]{
		scene:  scene,
		config: *config,
		moq:    &moqPartialGenericParamsFn_mock[S]{},

		runtime: struct {
			parameterIndexing struct {
				param1 moq.ParamIndexing
				param2 moq.ParamIndexing
			}
		}{parameterIndexing: struct {
			param1 moq.ParamIndexing
			param2 moq.ParamIndexing
		}{
			param1: moq.ParamIndexByHash,
			param2: moq.ParamIndexByValue,
		}},
	}
	m.moq.moq = m

	scene.AddMoq(m)
	return m
}

// mock returns the moq implementation of the PartialGenericParamsFn type
func (m *moqPartialGenericParamsFn[S]) mock() testmoqs.PartialGenericParamsFn[S] {
	return func(param1 S, param2 bool) (string, error) {
		m.scene.T.Helper()
		moq := &moqPartialGenericParamsFn_mock[S]{moq: m}
		return moq.fn(param1, param2)
	}
}

func (m *moqPartialGenericParamsFn_mock[S]) fn(param1 S, param2 bool) (result1 string, result2 error) {
	m.moq.scene.T.Helper()
	params := moqPartialGenericParamsFn_params[S]{
		param1: param1,
		param2: param2,
	}
	var results *moqPartialGenericParamsFn_results[S]
	for _, resultsByParams := range m.moq.resultsByParams {
		paramsKey := m.moq.paramsKey(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call to %s", m.moq.prettyParams(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to %s", m.moq.prettyParams(params))
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match call to %s", m.moq.prettyParams(params))
		}
	}

	if result.doFn != nil {
		result.doFn(param1, param2)
	}

	if result.values != nil {
		result1 = result.values.result1
		result2 = result.values.result2
	}
	if result.doReturnFn != nil {
		result1, result2 = result.doReturnFn(param1, param2)
	}
	return
}

func (m *moqPartialGenericParamsFn[S]) onCall(param1 S, param2 bool) *moqPartialGenericParamsFn_fnRecorder[S] {
	return &moqPartialGenericParamsFn_fnRecorder[S]{
		params: moqPartialGenericParamsFn_params[S]{
			param1: param1,
			param2: param2,
		},
		sequence: m.config.Sequence == moq.SeqDefaultOn,
		moq:      m,
	}
}

func (r *moqPartialGenericParamsFn_fnRecorder[S]) any() *moqPartialGenericParamsFn_anyParams[S] {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	return &moqPartialGenericParamsFn_anyParams[S]{recorder: r}
}

func (a *moqPartialGenericParamsFn_anyParams[S]) param1() *moqPartialGenericParamsFn_fnRecorder[S] {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (a *moqPartialGenericParamsFn_anyParams[S]) param2() *moqPartialGenericParamsFn_fnRecorder[S] {
	a.recorder.anyParams |= 1 << 1
	return a.recorder
}

func (r *moqPartialGenericParamsFn_fnRecorder[S]) seq() *moqPartialGenericParamsFn_fnRecorder[S] {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqPartialGenericParamsFn_fnRecorder[S]) noSeq() *moqPartialGenericParamsFn_fnRecorder[S] {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqPartialGenericParamsFn_fnRecorder[S]) returnResults(result1 string, result2 error) *moqPartialGenericParamsFn_fnRecorder[S] {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 string
			result2 error
		}
		sequence   uint32
		doFn       moqPartialGenericParamsFn_doFn[S]
		doReturnFn moqPartialGenericParamsFn_doReturnFn[S]
	}{
		values: &struct {
			result1 string
			result2 error
		}{
			result1: result1,
			result2: result2,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqPartialGenericParamsFn_fnRecorder[S]) andDo(fn moqPartialGenericParamsFn_doFn[S]) *moqPartialGenericParamsFn_fnRecorder[S] {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqPartialGenericParamsFn_fnRecorder[S]) doReturnResults(fn moqPartialGenericParamsFn_doReturnFn[S]) *moqPartialGenericParamsFn_fnRecorder[S] {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 string
			result2 error
		}
		sequence   uint32
		doFn       moqPartialGenericParamsFn_doFn[S]
		doReturnFn moqPartialGenericParamsFn_doReturnFn[S]
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqPartialGenericParamsFn_fnRecorder[S]) findResults() {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqPartialGenericParamsFn_resultsByParams[S]
	for n, res := range r.moq.resultsByParams {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqPartialGenericParamsFn_resultsByParams[S]{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqPartialGenericParamsFn_paramsKey[S]]*moqPartialGenericParamsFn_results[S]{},
		}
		r.moq.resultsByParams = append(r.moq.resultsByParams, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams) {
			copy(r.moq.resultsByParams[insertAt+1:], r.moq.resultsByParams[insertAt:0])
			r.moq.resultsByParams[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqPartialGenericParamsFn_results[S]{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqPartialGenericParamsFn_fnRecorder[S]) repeat(repeaters ...moq.Repeater) *moqPartialGenericParamsFn_fnRecorder[S] {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values *struct {
					result1 string
					result2 error
				}
				sequence   uint32
				doFn       moqPartialGenericParamsFn_doFn[S]
				doReturnFn moqPartialGenericParamsFn_doReturnFn[S]
			}{
				values:   last.values,
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqPartialGenericParamsFn[S]) prettyParams(params moqPartialGenericParamsFn_params[S]) string {
	return fmt.Sprintf("PartialGenericParamsFn(%#v, %#v)", params.param1, params.param2)
}

func (m *moqPartialGenericParamsFn[S]) paramsKey(params moqPartialGenericParamsFn_params[S], anyParams uint64) moqPartialGenericParamsFn_paramsKey[S] {
	m.scene.T.Helper()
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.param1 == moq.ParamIndexByValue {
			m.scene.T.Fatalf("The param1 parameter can't be indexed by value")
		}
		param1UsedHash = hash.DeepHash(params.param1)
	}
	var param2Used bool
	var param2UsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.runtime.parameterIndexing.param2 == moq.ParamIndexByValue {
			param2Used = params.param2
		} else {
			param2UsedHash = hash.DeepHash(params.param2)
		}
	}
	return moqPartialGenericParamsFn_paramsKey[S]{
		params: struct{ param2 bool }{
			param2: param2Used,
		},
		hashes: struct {
			param1 hash.Hash
			param2 hash.Hash
		}{
			param1: param1UsedHash,
			param2: param2UsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *moqPartialGenericParamsFn[S]) Reset() { m.resultsByParams = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *moqPartialGenericParamsFn[S]) AssertExpectationsMet() {
	m.scene.T.Helper()
	for _, res := range m.resultsByParams {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.prettyParams(results.params))
			}
		}
	}
}

// moqGenericResultsFn holds the state of a moq of the GenericResultsFn type
type moqGenericResultsFn[S ~string, E error] struct {
	scene  *moq.Scene
	config moq.Config
	moq    *moqGenericResultsFn_mock[S, E]

	resultsByParams []moqGenericResultsFn_resultsByParams[S, E]

	runtime struct {
		parameterIndexing struct {
			param1 moq.ParamIndexing
			param2 moq.ParamIndexing
		}
	}
}

// moqGenericResultsFn_mock isolates the mock interface of the GenericResultsFn
// type
type moqGenericResultsFn_mock[S ~string, E error] struct {
	moq *moqGenericResultsFn[S, E]
}

// moqGenericResultsFn_params holds the params of the GenericResultsFn type
type moqGenericResultsFn_params[S ~string, E error] struct {
	param1 string
	param2 bool
}

// moqGenericResultsFn_paramsKey holds the map key params of the
// GenericResultsFn type
type moqGenericResultsFn_paramsKey[S ~string, E error] struct {
	params struct {
		param1 string
		param2 bool
	}
	hashes struct {
		param1 hash.Hash
		param2 hash.Hash
	}
}

// moqGenericResultsFn_resultsByParams contains the results for a given set of
// parameters for the GenericResultsFn type
type moqGenericResultsFn_resultsByParams[S ~string, E error] struct {
	anyCount  int
	anyParams uint64
	results   map[moqGenericResultsFn_paramsKey[S, E]]*moqGenericResultsFn_results[S, E]
}

// moqGenericResultsFn_doFn defines the type of function needed when calling
// andDo for the GenericResultsFn type
type moqGenericResultsFn_doFn[S ~string, E error] func(string, bool)

// moqGenericResultsFn_doReturnFn defines the type of function needed when
// calling doReturnResults for the GenericResultsFn type
type moqGenericResultsFn_doReturnFn[S ~string, E error] func(string, bool) (S, E)

// moqGenericResultsFn_results holds the results of the GenericResultsFn type
type moqGenericResultsFn_results[S ~string, E error] struct {
	params  moqGenericResultsFn_params[S, E]
	results []struct {
		values *struct {
			result1 S
			result2 E
		}
		sequence   uint32
		doFn       moqGenericResultsFn_doFn[S, E]
		doReturnFn moqGenericResultsFn_doReturnFn[S, E]
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqGenericResultsFn_fnRecorder routes recorded function calls to the
// moqGenericResultsFn moq
type moqGenericResultsFn_fnRecorder[S ~string, E error] struct {
	params    moqGenericResultsFn_params[S, E]
	anyParams uint64
	sequence  bool
	results   *moqGenericResultsFn_results[S, E]
	moq       *moqGenericResultsFn[S, E]
}

// moqGenericResultsFn_anyParams isolates the any params functions of the
// GenericResultsFn type
type moqGenericResultsFn_anyParams[S ~string, E error] struct {
	recorder *moqGenericResultsFn_fnRecorder[S, E]
}

// newMoqGenericResultsFn creates a new moq of the GenericResultsFn type
func newMoqGenericResultsFn[S ~string, E error](scene *moq.Scene, config *moq.Config) *moqGenericResultsFn[S, E] {
	if config == nil {
		config = &moq.Config{}
	}
	m := &moqGenericResultsFn[S, E]{
		scene:  scene,
		config: *config,
		moq:    &moqGenericResultsFn_mock[S, E]{},

		runtime: struct {
			parameterIndexing struct {
				param1 moq.ParamIndexing
				param2 moq.ParamIndexing
			}
		}{parameterIndexing: struct {
			param1 moq.ParamIndexing
			param2 moq.ParamIndexing
		}{
			param1: moq.ParamIndexByValue,
			param2: moq.ParamIndexByValue,
		}},
	}
	m.moq.moq = m

	scene.AddMoq(m)
	return m
}

// mock returns the moq implementation of the GenericResultsFn type
func (m *moqGenericResultsFn[S, E]) mock() testmoqs.GenericResultsFn[S, E] {
	return func(param1 string, param2 bool) (S, E) {
		m.scene.T.Helper()
		moq := &moqGenericResultsFn_mock[S, E]{moq: m}
		return moq.fn(param1, param2)
	}
}

func (m *moqGenericResultsFn_mock[S, E]) fn(param1 string, param2 bool) (result1 S, result2 E) {
	m.moq.scene.T.Helper()
	params := moqGenericResultsFn_params[S, E]{
		param1: param1,
		param2: param2,
	}
	var results *moqGenericResultsFn_results[S, E]
	for _, resultsByParams := range m.moq.resultsByParams {
		paramsKey := m.moq.paramsKey(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call to %s", m.moq.prettyParams(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to %s", m.moq.prettyParams(params))
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match call to %s", m.moq.prettyParams(params))
		}
	}

	if result.doFn != nil {
		result.doFn(param1, param2)
	}

	if result.values != nil {
		result1 = result.values.result1
		result2 = result.values.result2
	}
	if result.doReturnFn != nil {
		result1, result2 = result.doReturnFn(param1, param2)
	}
	return
}

func (m *moqGenericResultsFn[S, E]) onCall(param1 string, param2 bool) *moqGenericResultsFn_fnRecorder[S, E] {
	return &moqGenericResultsFn_fnRecorder[S, E]{
		params: moqGenericResultsFn_params[S, E]{
			param1: param1,
			param2: param2,
		},
		sequence: m.config.Sequence == moq.SeqDefaultOn,
		moq:      m,
	}
}

func (r *moqGenericResultsFn_fnRecorder[S, E]) any() *moqGenericResultsFn_anyParams[S, E] {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	return &moqGenericResultsFn_anyParams[S, E]{recorder: r}
}

func (a *moqGenericResultsFn_anyParams[S, E]) param1() *moqGenericResultsFn_fnRecorder[S, E] {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (a *moqGenericResultsFn_anyParams[S, E]) param2() *moqGenericResultsFn_fnRecorder[S, E] {
	a.recorder.anyParams |= 1 << 1
	return a.recorder
}

func (r *moqGenericResultsFn_fnRecorder[S, E]) seq() *moqGenericResultsFn_fnRecorder[S, E] {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqGenericResultsFn_fnRecorder[S, E]) noSeq() *moqGenericResultsFn_fnRecorder[S, E] {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqGenericResultsFn_fnRecorder[S, E]) returnResults(result1 S, result2 E) *moqGenericResultsFn_fnRecorder[S, E] {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 S
			result2 E
		}
		sequence   uint32
		doFn       moqGenericResultsFn_doFn[S, E]
		doReturnFn moqGenericResultsFn_doReturnFn[S, E]
	}{
		values: &struct {
			result1 S
			result2 E
		}{
			result1: result1,
			result2: result2,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqGenericResultsFn_fnRecorder[S, E]) andDo(fn moqGenericResultsFn_doFn[S, E]) *moqGenericResultsFn_fnRecorder[S, E] {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqGenericResultsFn_fnRecorder[S, E]) doReturnResults(fn moqGenericResultsFn_doReturnFn[S, E]) *moqGenericResultsFn_fnRecorder[S, E] {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 S
			result2 E
		}
		sequence   uint32
		doFn       moqGenericResultsFn_doFn[S, E]
		doReturnFn moqGenericResultsFn_doReturnFn[S, E]
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqGenericResultsFn_fnRecorder[S, E]) findResults() {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqGenericResultsFn_resultsByParams[S, E]
	for n, res := range r.moq.resultsByParams {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqGenericResultsFn_resultsByParams[S, E]{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqGenericResultsFn_paramsKey[S, E]]*moqGenericResultsFn_results[S, E]{},
		}
		r.moq.resultsByParams = append(r.moq.resultsByParams, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams) {
			copy(r.moq.resultsByParams[insertAt+1:], r.moq.resultsByParams[insertAt:0])
			r.moq.resultsByParams[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqGenericResultsFn_results[S, E]{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqGenericResultsFn_fnRecorder[S, E]) repeat(repeaters ...moq.Repeater) *moqGenericResultsFn_fnRecorder[S, E] {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values *struct {
					result1 S
					result2 E
				}
				sequence   uint32
				doFn       moqGenericResultsFn_doFn[S, E]
				doReturnFn moqGenericResultsFn_doReturnFn[S, E]
			}{
				values:   last.values,
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqGenericResultsFn[S, E]) prettyParams(params moqGenericResultsFn_params[S, E]) string {
	return fmt.Sprintf("GenericResultsFn(%#v, %#v)", params.param1, params.param2)
}

func (m *moqGenericResultsFn[S, E]) paramsKey(params moqGenericResultsFn_params[S, E], anyParams uint64) moqGenericResultsFn_paramsKey[S, E] {
	m.scene.T.Helper()
	var param1Used string
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.param1 == moq.ParamIndexByValue {
			param1Used = params.param1
		} else {
			param1UsedHash = hash.DeepHash(params.param1)
		}
	}
	var param2Used bool
	var param2UsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.runtime.parameterIndexing.param2 == moq.ParamIndexByValue {
			param2Used = params.param2
		} else {
			param2UsedHash = hash.DeepHash(params.param2)
		}
	}
	return moqGenericResultsFn_paramsKey[S, E]{
		params: struct {
			param1 string
			param2 bool
		}{
			param1: param1Used,
			param2: param2Used,
		},
		hashes: struct {
			param1 hash.Hash
			param2 hash.Hash
		}{
			param1: param1UsedHash,
			param2: param2UsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *moqGenericResultsFn[S, E]) Reset() { m.resultsByParams = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *moqGenericResultsFn[S, E]) AssertExpectationsMet() {
	m.scene.T.Helper()
	for _, res := range m.resultsByParams {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.prettyParams(results.params))
			}
		}
	}
}

// moqPartialGenericResultsFn holds the state of a moq of the
// PartialGenericResultsFn type
type moqPartialGenericResultsFn[S ~string] struct {
	scene  *moq.Scene
	config moq.Config
	moq    *moqPartialGenericResultsFn_mock[S]

	resultsByParams []moqPartialGenericResultsFn_resultsByParams[S]

	runtime struct {
		parameterIndexing struct {
			param1 moq.ParamIndexing
			param2 moq.ParamIndexing
		}
	}
}

// moqPartialGenericResultsFn_mock isolates the mock interface of the
// PartialGenericResultsFn type
type moqPartialGenericResultsFn_mock[S ~string] struct {
	moq *moqPartialGenericResultsFn[S]
}

// moqPartialGenericResultsFn_params holds the params of the
// PartialGenericResultsFn type
type moqPartialGenericResultsFn_params[S ~string] struct {
	param1 string
	param2 bool
}

// moqPartialGenericResultsFn_paramsKey holds the map key params of the
// PartialGenericResultsFn type
type moqPartialGenericResultsFn_paramsKey[S ~string] struct {
	params struct {
		param1 string
		param2 bool
	}
	hashes struct {
		param1 hash.Hash
		param2 hash.Hash
	}
}

// moqPartialGenericResultsFn_resultsByParams contains the results for a given
// set of parameters for the PartialGenericResultsFn type
type moqPartialGenericResultsFn_resultsByParams[S ~string] struct {
	anyCount  int
	anyParams uint64
	results   map[moqPartialGenericResultsFn_paramsKey[S]]*moqPartialGenericResultsFn_results[S]
}

// moqPartialGenericResultsFn_doFn defines the type of function needed when
// calling andDo for the PartialGenericResultsFn type
type moqPartialGenericResultsFn_doFn[S ~string] func(string, bool)

// moqPartialGenericResultsFn_doReturnFn defines the type of function needed
// when calling doReturnResults for the PartialGenericResultsFn type
type moqPartialGenericResultsFn_doReturnFn[S ~string] func(string, bool) (S, error)

// moqPartialGenericResultsFn_results holds the results of the
// PartialGenericResultsFn type
type moqPartialGenericResultsFn_results[S ~string] struct {
	params  moqPartialGenericResultsFn_params[S]
	results []struct {
		values *struct {
			result1 S
			result2 error
		}
		sequence   uint32
		doFn       moqPartialGenericResultsFn_doFn[S]
		doReturnFn moqPartialGenericResultsFn_doReturnFn[S]
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqPartialGenericResultsFn_fnRecorder routes recorded function calls to the
// moqPartialGenericResultsFn moq
type moqPartialGenericResultsFn_fnRecorder[S ~string] struct {
	params    moqPartialGenericResultsFn_params[S]
	anyParams uint64
	sequence  bool
	results   *moqPartialGenericResultsFn_results[S]
	moq       *moqPartialGenericResultsFn[S]
}

// moqPartialGenericResultsFn_anyParams isolates the any params functions of
// the PartialGenericResultsFn type
type moqPartialGenericResultsFn_anyParams[S ~string] struct {
	recorder *moqPartialGenericResultsFn_fnRecorder[S]
}

// newMoqPartialGenericResultsFn creates a new moq of the
// PartialGenericResultsFn type
func newMoqPartialGenericResultsFn[S ~string](scene *moq.Scene, config *moq.Config) *moqPartialGenericResultsFn[S] {
	if config == nil {
		config = &moq.Config{}
	}
	m := &moqPartialGenericResultsFn[S]{
		scene:  scene,
		config: *config,
		moq:    &moqPartialGenericResultsFn_mock[S]{},

		runtime: struct {
			parameterIndexing struct {
				param1 moq.ParamIndexing
				param2 moq.ParamIndexing
			}
		}{parameterIndexing: struct {
			param1 moq.ParamIndexing
			param2 moq.ParamIndexing
		}{
			param1: moq.ParamIndexByValue,
			param2: moq.ParamIndexByValue,
		}},
	}
	m.moq.moq = m

	scene.AddMoq(m)
	return m
}

// mock returns the moq implementation of the PartialGenericResultsFn type
func (m *moqPartialGenericResultsFn[S]) mock() testmoqs.PartialGenericResultsFn[S] {
	return func(param1 string, param2 bool) (S, error) {
		m.scene.T.Helper()
		moq := &moqPartialGenericResultsFn_mock[S]{moq: m}
		return moq.fn(param1, param2)
	}
}

func (m *moqPartialGenericResultsFn_mock[S]) fn(param1 string, param2 bool) (result1 S, result2 error) {
	m.moq.scene.T.Helper()
	params := moqPartialGenericResultsFn_params[S]{
		param1: param1,
		param2: param2,
	}
	var results *moqPartialGenericResultsFn_results[S]
	for _, resultsByParams := range m.moq.resultsByParams {
		paramsKey := m.moq.paramsKey(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call to %s", m.moq.prettyParams(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to %s", m.moq.prettyParams(params))
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match call to %s", m.moq.prettyParams(params))
		}
	}

	if result.doFn != nil {
		result.doFn(param1, param2)
	}

	if result.values != nil {
		result1 = result.values.result1
		result2 = result.values.result2
	}
	if result.doReturnFn != nil {
		result1, result2 = result.doReturnFn(param1, param2)
	}
	return
}

func (m *moqPartialGenericResultsFn[S]) onCall(param1 string, param2 bool) *moqPartialGenericResultsFn_fnRecorder[S] {
	return &moqPartialGenericResultsFn_fnRecorder[S]{
		params: moqPartialGenericResultsFn_params[S]{
			param1: param1,
			param2: param2,
		},
		sequence: m.config.Sequence == moq.SeqDefaultOn,
		moq:      m,
	}
}

func (r *moqPartialGenericResultsFn_fnRecorder[S]) any() *moqPartialGenericResultsFn_anyParams[S] {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	return &moqPartialGenericResultsFn_anyParams[S]{recorder: r}
}

func (a *moqPartialGenericResultsFn_anyParams[S]) param1() *moqPartialGenericResultsFn_fnRecorder[S] {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (a *moqPartialGenericResultsFn_anyParams[S]) param2() *moqPartialGenericResultsFn_fnRecorder[S] {
	a.recorder.anyParams |= 1 << 1
	return a.recorder
}

func (r *moqPartialGenericResultsFn_fnRecorder[S]) seq() *moqPartialGenericResultsFn_fnRecorder[S] {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqPartialGenericResultsFn_fnRecorder[S]) noSeq() *moqPartialGenericResultsFn_fnRecorder[S] {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqPartialGenericResultsFn_fnRecorder[S]) returnResults(result1 S, result2 error) *moqPartialGenericResultsFn_fnRecorder[S] {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 S
			result2 error
		}
		sequence   uint32
		doFn       moqPartialGenericResultsFn_doFn[S]
		doReturnFn moqPartialGenericResultsFn_doReturnFn[S]
	}{
		values: &struct {
			result1 S
			result2 error
		}{
			result1: result1,
			result2: result2,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqPartialGenericResultsFn_fnRecorder[S]) andDo(fn moqPartialGenericResultsFn_doFn[S]) *moqPartialGenericResultsFn_fnRecorder[S] {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqPartialGenericResultsFn_fnRecorder[S]) doReturnResults(fn moqPartialGenericResultsFn_doReturnFn[S]) *moqPartialGenericResultsFn_fnRecorder[S] {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 S
			result2 error
		}
		sequence   uint32
		doFn       moqPartialGenericResultsFn_doFn[S]
		doReturnFn moqPartialGenericResultsFn_doReturnFn[S]
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqPartialGenericResultsFn_fnRecorder[S]) findResults() {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqPartialGenericResultsFn_resultsByParams[S]
	for n, res := range r.moq.resultsByParams {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqPartialGenericResultsFn_resultsByParams[S]{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqPartialGenericResultsFn_paramsKey[S]]*moqPartialGenericResultsFn_results[S]{},
		}
		r.moq.resultsByParams = append(r.moq.resultsByParams, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams) {
			copy(r.moq.resultsByParams[insertAt+1:], r.moq.resultsByParams[insertAt:0])
			r.moq.resultsByParams[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqPartialGenericResultsFn_results[S]{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqPartialGenericResultsFn_fnRecorder[S]) repeat(repeaters ...moq.Repeater) *moqPartialGenericResultsFn_fnRecorder[S] {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values *struct {
					result1 S
					result2 error
				}
				sequence   uint32
				doFn       moqPartialGenericResultsFn_doFn[S]
				doReturnFn moqPartialGenericResultsFn_doReturnFn[S]
			}{
				values:   last.values,
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqPartialGenericResultsFn[S]) prettyParams(params moqPartialGenericResultsFn_params[S]) string {
	return fmt.Sprintf("PartialGenericResultsFn(%#v, %#v)", params.param1, params.param2)
}

func (m *moqPartialGenericResultsFn[S]) paramsKey(params moqPartialGenericResultsFn_params[S], anyParams uint64) moqPartialGenericResultsFn_paramsKey[S] {
	m.scene.T.Helper()
	var param1Used string
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.param1 == moq.ParamIndexByValue {
			param1Used = params.param1
		} else {
			param1UsedHash = hash.DeepHash(params.param1)
		}
	}
	var param2Used bool
	var param2UsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.runtime.parameterIndexing.param2 == moq.ParamIndexByValue {
			param2Used = params.param2
		} else {
			param2UsedHash = hash.DeepHash(params.param2)
		}
	}
	return moqPartialGenericResultsFn_paramsKey[S]{
		params: struct {
			param1 string
			param2 bool
		}{
			param1: param1Used,
			param2: param2Used,
		},
		hashes: struct {
			param1 hash.Hash
			param2 hash.Hash
		}{
			param1: param1UsedHash,
			param2: param2UsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *moqPartialGenericResultsFn[S]) Reset() { m.resultsByParams = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *moqPartialGenericResultsFn[S]) AssertExpectationsMet() {
	m.scene.T.Helper()
	for _, res := range m.resultsByParams {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.prettyParams(results.params))
			}
		}
	}
}

// moqGenericInterfaceParamFn holds the state of a moq of the
// GenericInterfaceParamFn type
type moqGenericInterfaceParamFn[W testmoqs.MyWriter] struct {
	scene  *moq.Scene
	config moq.Config
	moq    *moqGenericInterfaceParamFn_mock[W]

	resultsByParams []moqGenericInterfaceParamFn_resultsByParams[W]

	runtime struct {
		parameterIndexing struct {
			w moq.ParamIndexing
		}
	}
}

// moqGenericInterfaceParamFn_mock isolates the mock interface of the
// GenericInterfaceParamFn type
type moqGenericInterfaceParamFn_mock[W testmoqs.MyWriter] struct {
	moq *moqGenericInterfaceParamFn[W]
}

// moqGenericInterfaceParamFn_params holds the params of the
// GenericInterfaceParamFn type
type moqGenericInterfaceParamFn_params[W testmoqs.MyWriter] struct{ w W }

// moqGenericInterfaceParamFn_paramsKey holds the map key params of the
// GenericInterfaceParamFn type
type moqGenericInterfaceParamFn_paramsKey[W testmoqs.MyWriter] struct {
	params struct{}
	hashes struct{ w hash.Hash }
}

// moqGenericInterfaceParamFn_resultsByParams contains the results for a given
// set of parameters for the GenericInterfaceParamFn type
type moqGenericInterfaceParamFn_resultsByParams[W testmoqs.MyWriter] struct {
	anyCount  int
	anyParams uint64
	results   map[moqGenericInterfaceParamFn_paramsKey[W]]*moqGenericInterfaceParamFn_results[W]
}

// moqGenericInterfaceParamFn_doFn defines the type of function needed when
// calling andDo for the GenericInterfaceParamFn type
type moqGenericInterfaceParamFn_doFn[W testmoqs.MyWriter] func(w W)

// moqGenericInterfaceParamFn_doReturnFn defines the type of function needed
// when calling doReturnResults for the GenericInterfaceParamFn type
type moqGenericInterfaceParamFn_doReturnFn[W testmoqs.MyWriter] func(w W) (sResult string, err error)

// moqGenericInterfaceParamFn_results holds the results of the
// GenericInterfaceParamFn type
type moqGenericInterfaceParamFn_results[W testmoqs.MyWriter] struct {
	params  moqGenericInterfaceParamFn_params[W]
	results []struct {
		values *struct {
			sResult string
			err     error
		}
		sequence   uint32
		doFn       moqGenericInterfaceParamFn_doFn[W]
		doReturnFn moqGenericInterfaceParamFn_doReturnFn[W]
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqGenericInterfaceParamFn_fnRecorder routes recorded function calls to the
// moqGenericInterfaceParamFn moq
type moqGenericInterfaceParamFn_fnRecorder[W testmoqs.MyWriter] struct {
	params    moqGenericInterfaceParamFn_params[W]
	anyParams uint64
	sequence  bool
	results   *moqGenericInterfaceParamFn_results[W]
	moq       *moqGenericInterfaceParamFn[W]
}

// moqGenericInterfaceParamFn_anyParams isolates the any params functions of
// the GenericInterfaceParamFn type
type moqGenericInterfaceParamFn_anyParams[W testmoqs.MyWriter] struct {
	recorder *moqGenericInterfaceParamFn_fnRecorder[W]
}

// newMoqGenericInterfaceParamFn creates a new moq of the
// GenericInterfaceParamFn type
func newMoqGenericInterfaceParamFn[W testmoqs.MyWriter](scene *moq.Scene, config *moq.Config) *moqGenericInterfaceParamFn[W] {
	if config == nil {
		config = &moq.Config{}
	}
	m := &moqGenericInterfaceParamFn[W]{
		scene:  scene,
		config: *config,
		moq:    &moqGenericInterfaceParamFn_mock[W]{},

		runtime: struct {
			parameterIndexing struct {
				w moq.ParamIndexing
			}
		}{parameterIndexing: struct {
			w moq.ParamIndexing
		}{
			w: moq.ParamIndexByHash,
		}},
	}
	m.moq.moq = m

	scene.AddMoq(m)
	return m
}

// mock returns the moq implementation of the GenericInterfaceParamFn type
func (m *moqGenericInterfaceParamFn[W]) mock() testmoqs.GenericInterfaceParamFn[W] {
	return func(w W) (_ string, _ error) {
		m.scene.T.Helper()
		moq := &moqGenericInterfaceParamFn_mock[W]{moq: m}
		return moq.fn(w)
	}
}

func (m *moqGenericInterfaceParamFn_mock[W]) fn(w W) (sResult string, err error) {
	m.moq.scene.T.Helper()
	params := moqGenericInterfaceParamFn_params[W]{
		w: w,
	}
	var results *moqGenericInterfaceParamFn_results[W]
	for _, resultsByParams := range m.moq.resultsByParams {
		paramsKey := m.moq.paramsKey(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call to %s", m.moq.prettyParams(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to %s", m.moq.prettyParams(params))
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match call to %s", m.moq.prettyParams(params))
		}
	}

	if result.doFn != nil {
		result.doFn(w)
	}

	if result.values != nil {
		sResult = result.values.sResult
		err = result.values.err
	}
	if result.doReturnFn != nil {
		sResult, err = result.doReturnFn(w)
	}
	return
}

func (m *moqGenericInterfaceParamFn[W]) onCall(w W) *moqGenericInterfaceParamFn_fnRecorder[W] {
	return &moqGenericInterfaceParamFn_fnRecorder[W]{
		params: moqGenericInterfaceParamFn_params[W]{
			w: w,
		},
		sequence: m.config.Sequence == moq.SeqDefaultOn,
		moq:      m,
	}
}

func (r *moqGenericInterfaceParamFn_fnRecorder[W]) any() *moqGenericInterfaceParamFn_anyParams[W] {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	return &moqGenericInterfaceParamFn_anyParams[W]{recorder: r}
}

func (a *moqGenericInterfaceParamFn_anyParams[W]) w() *moqGenericInterfaceParamFn_fnRecorder[W] {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (r *moqGenericInterfaceParamFn_fnRecorder[W]) seq() *moqGenericInterfaceParamFn_fnRecorder[W] {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqGenericInterfaceParamFn_fnRecorder[W]) noSeq() *moqGenericInterfaceParamFn_fnRecorder[W] {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqGenericInterfaceParamFn_fnRecorder[W]) returnResults(sResult string, err error) *moqGenericInterfaceParamFn_fnRecorder[W] {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			sResult string
			err     error
		}
		sequence   uint32
		doFn       moqGenericInterfaceParamFn_doFn[W]
		doReturnFn moqGenericInterfaceParamFn_doReturnFn[W]
	}{
		values: &struct {
			sResult string
			err     error
		}{
			sResult: sResult,
			err:     err,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqGenericInterfaceParamFn_fnRecorder[W]) andDo(fn moqGenericInterfaceParamFn_doFn[W]) *moqGenericInterfaceParamFn_fnRecorder[W] {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqGenericInterfaceParamFn_fnRecorder[W]) doReturnResults(fn moqGenericInterfaceParamFn_doReturnFn[W]) *moqGenericInterfaceParamFn_fnRecorder[W] {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			sResult string
			err     error
		}
		sequence   uint32
		doFn       moqGenericInterfaceParamFn_doFn[W]
		doReturnFn moqGenericInterfaceParamFn_doReturnFn[W]
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqGenericInterfaceParamFn_fnRecorder[W]) findResults() {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqGenericInterfaceParamFn_resultsByParams[W]
	for n, res := range r.moq.resultsByParams {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqGenericInterfaceParamFn_resultsByParams[W]{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqGenericInterfaceParamFn_paramsKey[W]]*moqGenericInterfaceParamFn_results[W]{},
		}
		r.moq.resultsByParams = append(r.moq.resultsByParams, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams) {
			copy(r.moq.resultsByParams[insertAt+1:], r.moq.resultsByParams[insertAt:0])
			r.moq.resultsByParams[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqGenericInterfaceParamFn_results[W]{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqGenericInterfaceParamFn_fnRecorder[W]) repeat(repeaters ...moq.Repeater) *moqGenericInterfaceParamFn_fnRecorder[W] {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values *struct {
					sResult string
					err     error
				}
				sequence   uint32
				doFn       moqGenericInterfaceParamFn_doFn[W]
				doReturnFn moqGenericInterfaceParamFn_doReturnFn[W]
			}{
				values:   last.values,
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqGenericInterfaceParamFn[W]) prettyParams(params moqGenericInterfaceParamFn_params[W]) string {
	return fmt.Sprintf("GenericInterfaceParamFn(%#v)", params.w)
}

func (m *moqGenericInterfaceParamFn[W]) paramsKey(params moqGenericInterfaceParamFn_params[W], anyParams uint64) moqGenericInterfaceParamFn_paramsKey[W] {
	m.scene.T.Helper()
	var wUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.w == moq.ParamIndexByValue {
			m.scene.T.Fatalf("The w parameter can't be indexed by value")
		}
		wUsedHash = hash.DeepHash(params.w)
	}
	return moqGenericInterfaceParamFn_paramsKey[W]{
		params: struct{}{},
		hashes: struct{ w hash.Hash }{
			w: wUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *moqGenericInterfaceParamFn[W]) Reset() { m.resultsByParams = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *moqGenericInterfaceParamFn[W]) AssertExpectationsMet() {
	m.scene.T.Helper()
	for _, res := range m.resultsByParams {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.prettyParams(results.params))
			}
		}
	}
}

// moqGenericInterfaceResultFn holds the state of a moq of the
// GenericInterfaceResultFn type
type moqGenericInterfaceResultFn[R testmoqs.MyReader] struct {
	scene  *moq.Scene
	config moq.Config
	moq    *moqGenericInterfaceResultFn_mock[R]

	resultsByParams []moqGenericInterfaceResultFn_resultsByParams[R]

	runtime struct {
		parameterIndexing struct {
			sParam moq.ParamIndexing
			bParam moq.ParamIndexing
		}
	}
}

// moqGenericInterfaceResultFn_mock isolates the mock interface of the
// GenericInterfaceResultFn type
type moqGenericInterfaceResultFn_mock[R testmoqs.MyReader] struct {
	moq *moqGenericInterfaceResultFn[R]
}

// moqGenericInterfaceResultFn_params holds the params of the
// GenericInterfaceResultFn type
type moqGenericInterfaceResultFn_params[R testmoqs.MyReader] struct {
	sParam string
	bParam bool
}

// moqGenericInterfaceResultFn_paramsKey holds the map key params of the
// GenericInterfaceResultFn type
type moqGenericInterfaceResultFn_paramsKey[R testmoqs.MyReader] struct {
	params struct {
		sParam string
		bParam bool
	}
	hashes struct {
		sParam hash.Hash
		bParam hash.Hash
	}
}

// moqGenericInterfaceResultFn_resultsByParams contains the results for a given
// set of parameters for the GenericInterfaceResultFn type
type moqGenericInterfaceResultFn_resultsByParams[R testmoqs.MyReader] struct {
	anyCount  int
	anyParams uint64
	results   map[moqGenericInterfaceResultFn_paramsKey[R]]*moqGenericInterfaceResultFn_results[R]
}

// moqGenericInterfaceResultFn_doFn defines the type of function needed when
// calling andDo for the GenericInterfaceResultFn type
type moqGenericInterfaceResultFn_doFn[R testmoqs.MyReader] func(sParam string, bParam bool)

// moqGenericInterfaceResultFn_doReturnFn defines the type of function needed
// when calling doReturnResults for the GenericInterfaceResultFn type
type moqGenericInterfaceResultFn_doReturnFn[R testmoqs.MyReader] func(sParam string, bParam bool) (r R)

// moqGenericInterfaceResultFn_results holds the results of the
// GenericInterfaceResultFn type
type moqGenericInterfaceResultFn_results[R testmoqs.MyReader] struct {
	params  moqGenericInterfaceResultFn_params[R]
	results []struct {
		values     *struct{ result1 R }
		sequence   uint32
		doFn       moqGenericInterfaceResultFn_doFn[R]
		doReturnFn moqGenericInterfaceResultFn_doReturnFn[R]
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqGenericInterfaceResultFn_fnRecorder routes recorded function calls to the
// moqGenericInterfaceResultFn moq
type moqGenericInterfaceResultFn_fnRecorder[R testmoqs.MyReader] struct {
	params    moqGenericInterfaceResultFn_params[R]
	anyParams uint64
	sequence  bool
	results   *moqGenericInterfaceResultFn_results[R]
	moq       *moqGenericInterfaceResultFn[R]
}

// moqGenericInterfaceResultFn_anyParams isolates the any params functions of
// the GenericInterfaceResultFn type
type moqGenericInterfaceResultFn_anyParams[R testmoqs.MyReader] struct {
	recorder *moqGenericInterfaceResultFn_fnRecorder[R]
}

// newMoqGenericInterfaceResultFn creates a new moq of the
// GenericInterfaceResultFn type
func newMoqGenericInterfaceResultFn[R testmoqs.MyReader](scene *moq.Scene, config *moq.Config) *moqGenericInterfaceResultFn[R] {
	if config == nil {
		config = &moq.Config{}
	}
	m := &moqGenericInterfaceResultFn[R]{
		scene:  scene,
		config: *config,
		moq:    &moqGenericInterfaceResultFn_mock[R]{},

		runtime: struct {
			parameterIndexing struct {
				sParam moq.ParamIndexing
				bParam moq.ParamIndexing
			}
		}{parameterIndexing: struct {
			sParam moq.ParamIndexing
			bParam moq.ParamIndexing
		}{
			sParam: moq.ParamIndexByValue,
			bParam: moq.ParamIndexByValue,
		}},
	}
	m.moq.moq = m

	scene.AddMoq(m)
	return m
}

// mock returns the moq implementation of the GenericInterfaceResultFn type
func (m *moqGenericInterfaceResultFn[R]) mock() testmoqs.GenericInterfaceResultFn[R] {
	return func(sParam string, bParam bool) (_ R) {
		m.scene.T.Helper()
		moq := &moqGenericInterfaceResultFn_mock[R]{moq: m}
		return moq.fn(sParam, bParam)
	}
}

func (m *moqGenericInterfaceResultFn_mock[R]) fn(sParam string, bParam bool) (result1 R) {
	m.moq.scene.T.Helper()
	params := moqGenericInterfaceResultFn_params[R]{
		sParam: sParam,
		bParam: bParam,
	}
	var results *moqGenericInterfaceResultFn_results[R]
	for _, resultsByParams := range m.moq.resultsByParams {
		paramsKey := m.moq.paramsKey(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call to %s", m.moq.prettyParams(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to %s", m.moq.prettyParams(params))
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match call to %s", m.moq.prettyParams(params))
		}
	}

	if result.doFn != nil {
		result.doFn(sParam, bParam)
	}

	if result.values != nil {
		result1 = result.values.result1
	}
	if result.doReturnFn != nil {
		result1 = result.doReturnFn(sParam, bParam)
	}
	return
}

func (m *moqGenericInterfaceResultFn[R]) onCall(sParam string, bParam bool) *moqGenericInterfaceResultFn_fnRecorder[R] {
	return &moqGenericInterfaceResultFn_fnRecorder[R]{
		params: moqGenericInterfaceResultFn_params[R]{
			sParam: sParam,
			bParam: bParam,
		},
		sequence: m.config.Sequence == moq.SeqDefaultOn,
		moq:      m,
	}
}

func (r *moqGenericInterfaceResultFn_fnRecorder[R]) any() *moqGenericInterfaceResultFn_anyParams[R] {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	return &moqGenericInterfaceResultFn_anyParams[R]{recorder: r}
}

func (a *moqGenericInterfaceResultFn_anyParams[R]) sParam() *moqGenericInterfaceResultFn_fnRecorder[R] {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (a *moqGenericInterfaceResultFn_anyParams[R]) bParam() *moqGenericInterfaceResultFn_fnRecorder[R] {
	a.recorder.anyParams |= 1 << 1
	return a.recorder
}

func (r *moqGenericInterfaceResultFn_fnRecorder[R]) seq() *moqGenericInterfaceResultFn_fnRecorder[R] {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqGenericInterfaceResultFn_fnRecorder[R]) noSeq() *moqGenericInterfaceResultFn_fnRecorder[R] {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams(r.params))
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqGenericInterfaceResultFn_fnRecorder[R]) returnResults(result1 R) *moqGenericInterfaceResultFn_fnRecorder[R] {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values     *struct{ result1 R }
		sequence   uint32
		doFn       moqGenericInterfaceResultFn_doFn[R]
		doReturnFn moqGenericInterfaceResultFn_doReturnFn[R]
	}{
		values: &struct{ result1 R }{
			result1: result1,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqGenericInterfaceResultFn_fnRecorder[R]) andDo(fn moqGenericInterfaceResultFn_doFn[R]) *moqGenericInterfaceResultFn_fnRecorder[R] {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqGenericInterfaceResultFn_fnRecorder[R]) doReturnResults(fn moqGenericInterfaceResultFn_doReturnFn[R]) *moqGenericInterfaceResultFn_fnRecorder[R] {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values     *struct{ result1 R }
		sequence   uint32
		doFn       moqGenericInterfaceResultFn_doFn[R]
		doReturnFn moqGenericInterfaceResultFn_doReturnFn[R]
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqGenericInterfaceResultFn_fnRecorder[R]) findResults() {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqGenericInterfaceResultFn_resultsByParams[R]
	for n, res := range r.moq.resultsByParams {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqGenericInterfaceResultFn_resultsByParams[R]{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqGenericInterfaceResultFn_paramsKey[R]]*moqGenericInterfaceResultFn_results[R]{},
		}
		r.moq.resultsByParams = append(r.moq.resultsByParams, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams) {
			copy(r.moq.resultsByParams[insertAt+1:], r.moq.resultsByParams[insertAt:0])
			r.moq.resultsByParams[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqGenericInterfaceResultFn_results[R]{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqGenericInterfaceResultFn_fnRecorder[R]) repeat(repeaters ...moq.Repeater) *moqGenericInterfaceResultFn_fnRecorder[R] {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values     *struct{ result1 R }
				sequence   uint32
				doFn       moqGenericInterfaceResultFn_doFn[R]
				doReturnFn moqGenericInterfaceResultFn_doReturnFn[R]
			}{
				values:   last.values,
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqGenericInterfaceResultFn[R]) prettyParams(params moqGenericInterfaceResultFn_params[R]) string {
	return fmt.Sprintf("GenericInterfaceResultFn(%#v, %#v)", params.sParam, params.bParam)
}

func (m *moqGenericInterfaceResultFn[R]) paramsKey(params moqGenericInterfaceResultFn_params[R], anyParams uint64) moqGenericInterfaceResultFn_paramsKey[R] {
	m.scene.T.Helper()
	var sParamUsed string
	var sParamUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.sParam == moq.ParamIndexByValue {
			sParamUsed = params.sParam
		} else {
			sParamUsedHash = hash.DeepHash(params.sParam)
		}
	}
	var bParamUsed bool
	var bParamUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.runtime.parameterIndexing.bParam == moq.ParamIndexByValue {
			bParamUsed = params.bParam
		} else {
			bParamUsedHash = hash.DeepHash(params.bParam)
		}
	}
	return moqGenericInterfaceResultFn_paramsKey[R]{
		params: struct {
			sParam string
			bParam bool
		}{
			sParam: sParamUsed,
			bParam: bParamUsed,
		},
		hashes: struct {
			sParam hash.Hash
			bParam hash.Hash
		}{
			sParam: sParamUsedHash,
			bParam: bParamUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *moqGenericInterfaceResultFn[R]) Reset() { m.resultsByParams = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *moqGenericInterfaceResultFn[R]) AssertExpectationsMet() {
	m.scene.T.Helper()
	for _, res := range m.resultsByParams {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.prettyParams(results.params))
			}
		}
	}
}

// The following type assertion assures that testmoqs.Usual is mocked
// completely
var _ testmoqs.Usual = (*moqUsual_mock)(nil)

// moqUsual holds the state of a moq of the Usual type
type moqUsual struct {
	scene  *moq.Scene
	config moq.Config
	moq    *moqUsual_mock

	resultsByParams_Usual                []moqUsual_Usual_resultsByParams
	resultsByParams_NoNames              []moqUsual_NoNames_resultsByParams
	resultsByParams_NoResults            []moqUsual_NoResults_resultsByParams
	resultsByParams_NoParams             []moqUsual_NoParams_resultsByParams
	resultsByParams_Nothing              []moqUsual_Nothing_resultsByParams
	resultsByParams_Variadic             []moqUsual_Variadic_resultsByParams
	resultsByParams_RepeatedIds          []moqUsual_RepeatedIds_resultsByParams
	resultsByParams_Times                []moqUsual_Times_resultsByParams
	resultsByParams_DifficultParamNames  []moqUsual_DifficultParamNames_resultsByParams
	resultsByParams_DifficultResultNames []moqUsual_DifficultResultNames_resultsByParams
	resultsByParams_PassByArray          []moqUsual_PassByArray_resultsByParams
	resultsByParams_PassByChan           []moqUsual_PassByChan_resultsByParams
	resultsByParams_PassByEllipsis       []moqUsual_PassByEllipsis_resultsByParams
	resultsByParams_PassByMap            []moqUsual_PassByMap_resultsByParams
	resultsByParams_PassByReference      []moqUsual_PassByReference_resultsByParams
	resultsByParams_PassBySlice          []moqUsual_PassBySlice_resultsByParams
	resultsByParams_PassByValue          []moqUsual_PassByValue_resultsByParams
	resultsByParams_InterfaceParam       []moqUsual_InterfaceParam_resultsByParams
	resultsByParams_InterfaceResult      []moqUsual_InterfaceResult_resultsByParams
	resultsByParams_FnParam              []moqUsual_FnParam_resultsByParams
	resultsByParams_Other                []moqUsual_Other_resultsByParams

	runtime struct {
		parameterIndexing struct {
			Usual struct {
				sParam moq.ParamIndexing
				bParam moq.ParamIndexing
			}
			NoNames struct {
				param1 moq.ParamIndexing
				param2 moq.ParamIndexing
			}
			NoResults struct {
				sParam moq.ParamIndexing
				bParam moq.ParamIndexing
			}
			NoParams struct{}
			Nothing  struct{}
			Variadic struct {
				other moq.ParamIndexing
				args  moq.ParamIndexing
			}
			RepeatedIds struct {
				sParam1 moq.ParamIndexing
				sParam2 moq.ParamIndexing
				bParam  moq.ParamIndexing
			}
			Times struct {
				sParam moq.ParamIndexing
				times  moq.ParamIndexing
			}
			DifficultParamNames struct {
				param1 moq.ParamIndexing
				param2 moq.ParamIndexing
				param3 moq.ParamIndexing
				param  moq.ParamIndexing
				param5 moq.ParamIndexing
				param6 moq.ParamIndexing
				param7 moq.ParamIndexing
				param8 moq.ParamIndexing
				param9 moq.ParamIndexing
			}
			DifficultResultNames struct{}
			PassByArray          struct {
				p moq.ParamIndexing
			}
			PassByChan struct {
				p moq.ParamIndexing
			}
			PassByEllipsis struct {
				p moq.ParamIndexing
			}
			PassByMap struct {
				p moq.ParamIndexing
			}
			PassByReference struct {
				p moq.ParamIndexing
			}
			PassBySlice struct {
				p moq.ParamIndexing
			}
			PassByValue struct {
				p moq.ParamIndexing
			}
			InterfaceParam struct {
				w moq.ParamIndexing
			}
			InterfaceResult struct {
				sParam moq.ParamIndexing
				bParam moq.ParamIndexing
			}
			FnParam struct {
				fn moq.ParamIndexing
			}
			Other struct {
				param1 moq.ParamIndexing
			}
		}
	}
	// moqUsual_mock isolates the mock interface of the Usual type
}

type moqUsual_mock struct {
	moq *moqUsual
}

// moqUsual_recorder isolates the recorder interface of the Usual type
type moqUsual_recorder struct {
	moq *moqUsual
}

// moqUsual_Usual_params holds the params of the Usual type
type moqUsual_Usual_params struct {
	sParam string
	bParam bool
}

// moqUsual_Usual_paramsKey holds the map key params of the Usual type
type moqUsual_Usual_paramsKey struct {
	params struct {
		sParam string
		bParam bool
	}
	hashes struct {
		sParam hash.Hash
		bParam hash.Hash
	}
}

// moqUsual_Usual_resultsByParams contains the results for a given set of
// parameters for the Usual type
type moqUsual_Usual_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqUsual_Usual_paramsKey]*moqUsual_Usual_results
}

// moqUsual_Usual_doFn defines the type of function needed when calling andDo
// for the Usual type
type moqUsual_Usual_doFn func(sParam string, bParam bool)

// moqUsual_Usual_doReturnFn defines the type of function needed when calling
// doReturnResults for the Usual type
type moqUsual_Usual_doReturnFn func(sParam string, bParam bool) (sResult string, err error)

// moqUsual_Usual_results holds the results of the Usual type
type moqUsual_Usual_results struct {
	params  moqUsual_Usual_params
	results []struct {
		values *struct {
			sResult string
			err     error
		}
		sequence   uint32
		doFn       moqUsual_Usual_doFn
		doReturnFn moqUsual_Usual_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqUsual_Usual_fnRecorder routes recorded function calls to the moqUsual moq
type moqUsual_Usual_fnRecorder struct {
	params    moqUsual_Usual_params
	anyParams uint64
	sequence  bool
	results   *moqUsual_Usual_results
	moq       *moqUsual
}

// moqUsual_Usual_anyParams isolates the any params functions of the Usual type
type moqUsual_Usual_anyParams struct {
	recorder *moqUsual_Usual_fnRecorder
}

// moqUsual_NoNames_params holds the params of the Usual type
type moqUsual_NoNames_params struct {
	param1 string
	param2 bool
}

// moqUsual_NoNames_paramsKey holds the map key params of the Usual type
type moqUsual_NoNames_paramsKey struct {
	params struct {
		param1 string
		param2 bool
	}
	hashes struct {
		param1 hash.Hash
		param2 hash.Hash
	}
}

// moqUsual_NoNames_resultsByParams contains the results for a given set of
// parameters for the Usual type
type moqUsual_NoNames_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqUsual_NoNames_paramsKey]*moqUsual_NoNames_results
}

// moqUsual_NoNames_doFn defines the type of function needed when calling andDo
// for the Usual type
type moqUsual_NoNames_doFn func(string, bool)

// moqUsual_NoNames_doReturnFn defines the type of function needed when calling
// doReturnResults for the Usual type
type moqUsual_NoNames_doReturnFn func(string, bool) (string, error)

// moqUsual_NoNames_results holds the results of the Usual type
type moqUsual_NoNames_results struct {
	params  moqUsual_NoNames_params
	results []struct {
		values *struct {
			result1 string
			result2 error
		}
		sequence   uint32
		doFn       moqUsual_NoNames_doFn
		doReturnFn moqUsual_NoNames_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqUsual_NoNames_fnRecorder routes recorded function calls to the moqUsual
// moq
type moqUsual_NoNames_fnRecorder struct {
	params    moqUsual_NoNames_params
	anyParams uint64
	sequence  bool
	results   *moqUsual_NoNames_results
	moq       *moqUsual
}

// moqUsual_NoNames_anyParams isolates the any params functions of the Usual
// type
type moqUsual_NoNames_anyParams struct {
	recorder *moqUsual_NoNames_fnRecorder
}

// moqUsual_NoResults_params holds the params of the Usual type
type moqUsual_NoResults_params struct {
	sParam string
	bParam bool
}

// moqUsual_NoResults_paramsKey holds the map key params of the Usual type
type moqUsual_NoResults_paramsKey struct {
	params struct {
		sParam string
		bParam bool
	}
	hashes struct {
		sParam hash.Hash
		bParam hash.Hash
	}
}

// moqUsual_NoResults_resultsByParams contains the results for a given set of
// parameters for the Usual type
type moqUsual_NoResults_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqUsual_NoResults_paramsKey]*moqUsual_NoResults_results
}

// moqUsual_NoResults_doFn defines the type of function needed when calling
// andDo for the Usual type
type moqUsual_NoResults_doFn func(sParam string, bParam bool)

// moqUsual_NoResults_doReturnFn defines the type of function needed when
// calling doReturnResults for the Usual type
type moqUsual_NoResults_doReturnFn func(sParam string, bParam bool)

// moqUsual_NoResults_results holds the results of the Usual type
type moqUsual_NoResults_results struct {
	params  moqUsual_NoResults_params
	results []struct {
		values     *struct{}
		sequence   uint32
		doFn       moqUsual_NoResults_doFn
		doReturnFn moqUsual_NoResults_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqUsual_NoResults_fnRecorder routes recorded function calls to the moqUsual
// moq
type moqUsual_NoResults_fnRecorder struct {
	params    moqUsual_NoResults_params
	anyParams uint64
	sequence  bool
	results   *moqUsual_NoResults_results
	moq       *moqUsual
}

// moqUsual_NoResults_anyParams isolates the any params functions of the Usual
// type
type moqUsual_NoResults_anyParams struct {
	recorder *moqUsual_NoResults_fnRecorder
}

// moqUsual_NoParams_params holds the params of the Usual type
type moqUsual_NoParams_params struct{}

// moqUsual_NoParams_paramsKey holds the map key params of the Usual type
type moqUsual_NoParams_paramsKey struct {
	params struct{}
	hashes struct{}
}

// moqUsual_NoParams_resultsByParams contains the results for a given set of
// parameters for the Usual type
type moqUsual_NoParams_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqUsual_NoParams_paramsKey]*moqUsual_NoParams_results
}

// moqUsual_NoParams_doFn defines the type of function needed when calling
// andDo for the Usual type
type moqUsual_NoParams_doFn func()

// moqUsual_NoParams_doReturnFn defines the type of function needed when
// calling doReturnResults for the Usual type
type moqUsual_NoParams_doReturnFn func() (sResult string, err error)

// moqUsual_NoParams_results holds the results of the Usual type
type moqUsual_NoParams_results struct {
	params  moqUsual_NoParams_params
	results []struct {
		values *struct {
			sResult string
			err     error
		}
		sequence   uint32
		doFn       moqUsual_NoParams_doFn
		doReturnFn moqUsual_NoParams_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqUsual_NoParams_fnRecorder routes recorded function calls to the moqUsual
// moq
type moqUsual_NoParams_fnRecorder struct {
	params    moqUsual_NoParams_params
	anyParams uint64
	sequence  bool
	results   *moqUsual_NoParams_results
	moq       *moqUsual
}

// moqUsual_NoParams_anyParams isolates the any params functions of the Usual
// type
type moqUsual_NoParams_anyParams struct {
	recorder *moqUsual_NoParams_fnRecorder
}

// moqUsual_Nothing_params holds the params of the Usual type
type moqUsual_Nothing_params struct{}

// moqUsual_Nothing_paramsKey holds the map key params of the Usual type
type moqUsual_Nothing_paramsKey struct {
	params struct{}
	hashes struct{}
}

// moqUsual_Nothing_resultsByParams contains the results for a given set of
// parameters for the Usual type
type moqUsual_Nothing_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqUsual_Nothing_paramsKey]*moqUsual_Nothing_results
}

// moqUsual_Nothing_doFn defines the type of function needed when calling andDo
// for the Usual type
type moqUsual_Nothing_doFn func()

// moqUsual_Nothing_doReturnFn defines the type of function needed when calling
// doReturnResults for the Usual type
type moqUsual_Nothing_doReturnFn func()

// moqUsual_Nothing_results holds the results of the Usual type
type moqUsual_Nothing_results struct {
	params  moqUsual_Nothing_params
	results []struct {
		values     *struct{}
		sequence   uint32
		doFn       moqUsual_Nothing_doFn
		doReturnFn moqUsual_Nothing_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqUsual_Nothing_fnRecorder routes recorded function calls to the moqUsual
// moq
type moqUsual_Nothing_fnRecorder struct {
	params    moqUsual_Nothing_params
	anyParams uint64
	sequence  bool
	results   *moqUsual_Nothing_results
	moq       *moqUsual
}

// moqUsual_Nothing_anyParams isolates the any params functions of the Usual
// type
type moqUsual_Nothing_anyParams struct {
	recorder *moqUsual_Nothing_fnRecorder
}

// moqUsual_Variadic_params holds the params of the Usual type
type moqUsual_Variadic_params struct {
	other bool
	args  []string
}

// moqUsual_Variadic_paramsKey holds the map key params of the Usual type
type moqUsual_Variadic_paramsKey struct {
	params struct{ other bool }
	hashes struct {
		other hash.Hash
		args  hash.Hash
	}
}

// moqUsual_Variadic_resultsByParams contains the results for a given set of
// parameters for the Usual type
type moqUsual_Variadic_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqUsual_Variadic_paramsKey]*moqUsual_Variadic_results
}

// moqUsual_Variadic_doFn defines the type of function needed when calling
// andDo for the Usual type
type moqUsual_Variadic_doFn func(other bool, args ...string)

// moqUsual_Variadic_doReturnFn defines the type of function needed when
// calling doReturnResults for the Usual type
type moqUsual_Variadic_doReturnFn func(other bool, args ...string) (sResult string, err error)

// moqUsual_Variadic_results holds the results of the Usual type
type moqUsual_Variadic_results struct {
	params  moqUsual_Variadic_params
	results []struct {
		values *struct {
			sResult string
			err     error
		}
		sequence   uint32
		doFn       moqUsual_Variadic_doFn
		doReturnFn moqUsual_Variadic_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqUsual_Variadic_fnRecorder routes recorded function calls to the moqUsual
// moq
type moqUsual_Variadic_fnRecorder struct {
	params    moqUsual_Variadic_params
	anyParams uint64
	sequence  bool
	results   *moqUsual_Variadic_results
	moq       *moqUsual
}

// moqUsual_Variadic_anyParams isolates the any params functions of the Usual
// type
type moqUsual_Variadic_anyParams struct {
	recorder *moqUsual_Variadic_fnRecorder
}

// moqUsual_RepeatedIds_params holds the params of the Usual type
type moqUsual_RepeatedIds_params struct {
	sParam1, sParam2 string
	bParam           bool
}

// moqUsual_RepeatedIds_paramsKey holds the map key params of the Usual type
type moqUsual_RepeatedIds_paramsKey struct {
	params struct {
		sParam1, sParam2 string
		bParam           bool
	}
	hashes struct {
		sParam1, sParam2 hash.Hash
		bParam           hash.Hash
	}
}

// moqUsual_RepeatedIds_resultsByParams contains the results for a given set of
// parameters for the Usual type
type moqUsual_RepeatedIds_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqUsual_RepeatedIds_paramsKey]*moqUsual_RepeatedIds_results
}

// moqUsual_RepeatedIds_doFn defines the type of function needed when calling
// andDo for the Usual type
type moqUsual_RepeatedIds_doFn func(sParam1, sParam2 string, bParam bool)

// moqUsual_RepeatedIds_doReturnFn defines the type of function needed when
// calling doReturnResults for the Usual type
type moqUsual_RepeatedIds_doReturnFn func(sParam1, sParam2 string, bParam bool) (sResult1, sResult2 string, err error)

// moqUsual_RepeatedIds_results holds the results of the Usual type
type moqUsual_RepeatedIds_results struct {
	params  moqUsual_RepeatedIds_params
	results []struct {
		values *struct {
			sResult1, sResult2 string
			err                error
		}
		sequence   uint32
		doFn       moqUsual_RepeatedIds_doFn
		doReturnFn moqUsual_RepeatedIds_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqUsual_RepeatedIds_fnRecorder routes recorded function calls to the
// moqUsual moq
type moqUsual_RepeatedIds_fnRecorder struct {
	params    moqUsual_RepeatedIds_params
	anyParams uint64
	sequence  bool
	results   *moqUsual_RepeatedIds_results
	moq       *moqUsual
}

// moqUsual_RepeatedIds_anyParams isolates the any params functions of the
// Usual type
type moqUsual_RepeatedIds_anyParams struct {
	recorder *moqUsual_RepeatedIds_fnRecorder
}

// moqUsual_Times_params holds the params of the Usual type
type moqUsual_Times_params struct {
	sParam string
	times  bool
}

// moqUsual_Times_paramsKey holds the map key params of the Usual type
type moqUsual_Times_paramsKey struct {
	params struct {
		sParam string
		times  bool
	}
	hashes struct {
		sParam hash.Hash
		times  hash.Hash
	}
}

// moqUsual_Times_resultsByParams contains the results for a given set of
// parameters for the Usual type
type moqUsual_Times_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqUsual_Times_paramsKey]*moqUsual_Times_results
}

// moqUsual_Times_doFn defines the type of function needed when calling andDo
// for the Usual type
type moqUsual_Times_doFn func(sParam string, times bool)

// moqUsual_Times_doReturnFn defines the type of function needed when calling
// doReturnResults for the Usual type
type moqUsual_Times_doReturnFn func(sParam string, times bool) (sResult string, err error)

// moqUsual_Times_results holds the results of the Usual type
type moqUsual_Times_results struct {
	params  moqUsual_Times_params
	results []struct {
		values *struct {
			sResult string
			err     error
		}
		sequence   uint32
		doFn       moqUsual_Times_doFn
		doReturnFn moqUsual_Times_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqUsual_Times_fnRecorder routes recorded function calls to the moqUsual moq
type moqUsual_Times_fnRecorder struct {
	params    moqUsual_Times_params
	anyParams uint64
	sequence  bool
	results   *moqUsual_Times_results
	moq       *moqUsual
}

// moqUsual_Times_anyParams isolates the any params functions of the Usual type
type moqUsual_Times_anyParams struct {
	recorder *moqUsual_Times_fnRecorder
}

// moqUsual_DifficultParamNames_params holds the params of the Usual type
type moqUsual_DifficultParamNames_params struct {
	param1, param2         bool
	param3                 string
	param, param5, param6  int
	param7, param8, param9 float32
}

// moqUsual_DifficultParamNames_paramsKey holds the map key params of the Usual
// type
type moqUsual_DifficultParamNames_paramsKey struct {
	params struct {
		param1, param2         bool
		param3                 string
		param, param5, param6  int
		param7, param8, param9 float32
	}
	hashes struct {
		param1, param2         hash.Hash
		param3                 hash.Hash
		param, param5, param6  hash.Hash
		param7, param8, param9 hash.Hash
	}
}

// moqUsual_DifficultParamNames_resultsByParams contains the results for a
// given set of parameters for the Usual type
type moqUsual_DifficultParamNames_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqUsual_DifficultParamNames_paramsKey]*moqUsual_DifficultParamNames_results
}

// moqUsual_DifficultParamNames_doFn defines the type of function needed when
// calling andDo for the Usual type
type moqUsual_DifficultParamNames_doFn func(m, r bool, sequence string, param, params, i int, result, results, _ float32)

// moqUsual_DifficultParamNames_doReturnFn defines the type of function needed
// when calling doReturnResults for the Usual type
type moqUsual_DifficultParamNames_doReturnFn func(m, r bool, sequence string, param, params, i int, result, results, _ float32)

// moqUsual_DifficultParamNames_results holds the results of the Usual type
type moqUsual_DifficultParamNames_results struct {
	params  moqUsual_DifficultParamNames_params
	results []struct {
		values     *struct{}
		sequence   uint32
		doFn       moqUsual_DifficultParamNames_doFn
		doReturnFn moqUsual_DifficultParamNames_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqUsual_DifficultParamNames_fnRecorder routes recorded function calls to
// the moqUsual moq
type moqUsual_DifficultParamNames_fnRecorder struct {
	params    moqUsual_DifficultParamNames_params
	anyParams uint64
	sequence  bool
	results   *moqUsual_DifficultParamNames_results
	moq       *moqUsual
}

// moqUsual_DifficultParamNames_anyParams isolates the any params functions of
// the Usual type
type moqUsual_DifficultParamNames_anyParams struct {
	recorder *moqUsual_DifficultParamNames_fnRecorder
}

// moqUsual_DifficultResultNames_params holds the params of the Usual type
type moqUsual_DifficultResultNames_params struct{}

// moqUsual_DifficultResultNames_paramsKey holds the map key params of the
// Usual type
type moqUsual_DifficultResultNames_paramsKey struct {
	params struct{}
	hashes struct{}
}

// moqUsual_DifficultResultNames_resultsByParams contains the results for a
// given set of parameters for the Usual type
type moqUsual_DifficultResultNames_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqUsual_DifficultResultNames_paramsKey]*moqUsual_DifficultResultNames_results
}

// moqUsual_DifficultResultNames_doFn defines the type of function needed when
// calling andDo for the Usual type
type moqUsual_DifficultResultNames_doFn func()

// moqUsual_DifficultResultNames_doReturnFn defines the type of function needed
// when calling doReturnResults for the Usual type
type moqUsual_DifficultResultNames_doReturnFn func() (m, r string, sequence error, param, params, i int, result, results, _ float32)

// moqUsual_DifficultResultNames_results holds the results of the Usual type
type moqUsual_DifficultResultNames_results struct {
	params  moqUsual_DifficultResultNames_params
	results []struct {
		values *struct {
			result1, result2          string
			result3                   error
			param, result5, result6   int
			result7, result8, result9 float32
		}
		sequence   uint32
		doFn       moqUsual_DifficultResultNames_doFn
		doReturnFn moqUsual_DifficultResultNames_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqUsual_DifficultResultNames_fnRecorder routes recorded function calls to
// the moqUsual moq
type moqUsual_DifficultResultNames_fnRecorder struct {
	params    moqUsual_DifficultResultNames_params
	anyParams uint64
	sequence  bool
	results   *moqUsual_DifficultResultNames_results
	moq       *moqUsual
}

// moqUsual_DifficultResultNames_anyParams isolates the any params functions of
// the Usual type
type moqUsual_DifficultResultNames_anyParams struct {
	recorder *moqUsual_DifficultResultNames_fnRecorder
}

// moqUsual_PassByArray_params holds the params of the Usual type
type moqUsual_PassByArray_params struct{ p [3]testmoqs.Params }

// moqUsual_PassByArray_paramsKey holds the map key params of the Usual type
type moqUsual_PassByArray_paramsKey struct {
	params struct{ p [3]testmoqs.Params }
	hashes struct{ p hash.Hash }
}

// moqUsual_PassByArray_resultsByParams contains the results for a given set of
// parameters for the Usual type
type moqUsual_PassByArray_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqUsual_PassByArray_paramsKey]*moqUsual_PassByArray_results
}

// moqUsual_PassByArray_doFn defines the type of function needed when calling
// andDo for the Usual type
type moqUsual_PassByArray_doFn func(p [3]testmoqs.Params)

// moqUsual_PassByArray_doReturnFn defines the type of function needed when
// calling doReturnResults for the Usual type
type moqUsual_PassByArray_doReturnFn func(p [3]testmoqs.Params) [3]testmoqs.Results

// moqUsual_PassByArray_results holds the results of the Usual type
type moqUsual_PassByArray_results struct {
	params  moqUsual_PassByArray_params
	results []struct {
		values *struct {
			result1 [3]testmoqs.Results
		}
		sequence   uint32
		doFn       moqUsual_PassByArray_doFn
		doReturnFn moqUsual_PassByArray_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqUsual_PassByArray_fnRecorder routes recorded function calls to the
// moqUsual moq
type moqUsual_PassByArray_fnRecorder struct {
	params    moqUsual_PassByArray_params
	anyParams uint64
	sequence  bool
	results   *moqUsual_PassByArray_results
	moq       *moqUsual
}

// moqUsual_PassByArray_anyParams isolates the any params functions of the
// Usual type
type moqUsual_PassByArray_anyParams struct {
	recorder *moqUsual_PassByArray_fnRecorder
}

// moqUsual_PassByChan_params holds the params of the Usual type
type moqUsual_PassByChan_params struct{ p chan testmoqs.Params }

// moqUsual_PassByChan_paramsKey holds the map key params of the Usual type
type moqUsual_PassByChan_paramsKey struct {
	params struct{ p chan testmoqs.Params }
	hashes struct{ p hash.Hash }
}

// moqUsual_PassByChan_resultsByParams contains the results for a given set of
// parameters for the Usual type
type moqUsual_PassByChan_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqUsual_PassByChan_paramsKey]*moqUsual_PassByChan_results
}

// moqUsual_PassByChan_doFn defines the type of function needed when calling
// andDo for the Usual type
type moqUsual_PassByChan_doFn func(p chan testmoqs.Params)

// moqUsual_PassByChan_doReturnFn defines the type of function needed when
// calling doReturnResults for the Usual type
type moqUsual_PassByChan_doReturnFn func(p chan testmoqs.Params) chan testmoqs.Results

// moqUsual_PassByChan_results holds the results of the Usual type
type moqUsual_PassByChan_results struct {
	params  moqUsual_PassByChan_params
	results []struct {
		values *struct {
			result1 chan testmoqs.Results
		}
		sequence   uint32
		doFn       moqUsual_PassByChan_doFn
		doReturnFn moqUsual_PassByChan_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqUsual_PassByChan_fnRecorder routes recorded function calls to the
// moqUsual moq
type moqUsual_PassByChan_fnRecorder struct {
	params    moqUsual_PassByChan_params
	anyParams uint64
	sequence  bool
	results   *moqUsual_PassByChan_results
	moq       *moqUsual
}

// moqUsual_PassByChan_anyParams isolates the any params functions of the Usual
// type
type moqUsual_PassByChan_anyParams struct {
	recorder *moqUsual_PassByChan_fnRecorder
}

// moqUsual_PassByEllipsis_params holds the params of the Usual type
type moqUsual_PassByEllipsis_params struct{ p []testmoqs.Params }

// moqUsual_PassByEllipsis_paramsKey holds the map key params of the Usual type
type moqUsual_PassByEllipsis_paramsKey struct {
	params struct{}
	hashes struct{ p hash.Hash }
}

// moqUsual_PassByEllipsis_resultsByParams contains the results for a given set
// of parameters for the Usual type
type moqUsual_PassByEllipsis_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqUsual_PassByEllipsis_paramsKey]*moqUsual_PassByEllipsis_results
}

// moqUsual_PassByEllipsis_doFn defines the type of function needed when
// calling andDo for the Usual type
type moqUsual_PassByEllipsis_doFn func(p ...testmoqs.Params)

// moqUsual_PassByEllipsis_doReturnFn defines the type of function needed when
// calling doReturnResults for the Usual type
type moqUsual_PassByEllipsis_doReturnFn func(p ...testmoqs.Params) (string, error)

// moqUsual_PassByEllipsis_results holds the results of the Usual type
type moqUsual_PassByEllipsis_results struct {
	params  moqUsual_PassByEllipsis_params
	results []struct {
		values *struct {
			result1 string
			result2 error
		}
		sequence   uint32
		doFn       moqUsual_PassByEllipsis_doFn
		doReturnFn moqUsual_PassByEllipsis_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqUsual_PassByEllipsis_fnRecorder routes recorded function calls to the
// moqUsual moq
type moqUsual_PassByEllipsis_fnRecorder struct {
	params    moqUsual_PassByEllipsis_params
	anyParams uint64
	sequence  bool
	results   *moqUsual_PassByEllipsis_results
	moq       *moqUsual
}

// moqUsual_PassByEllipsis_anyParams isolates the any params functions of the
// Usual type
type moqUsual_PassByEllipsis_anyParams struct {
	recorder *moqUsual_PassByEllipsis_fnRecorder
}

// moqUsual_PassByMap_params holds the params of the Usual type
type moqUsual_PassByMap_params struct{ p map[string]testmoqs.Params }

// moqUsual_PassByMap_paramsKey holds the map key params of the Usual type
type moqUsual_PassByMap_paramsKey struct {
	params struct{}
	hashes struct{ p hash.Hash }
}

// moqUsual_PassByMap_resultsByParams contains the results for a given set of
// parameters for the Usual type
type moqUsual_PassByMap_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqUsual_PassByMap_paramsKey]*moqUsual_PassByMap_results
}

// moqUsual_PassByMap_doFn defines the type of function needed when calling
// andDo for the Usual type
type moqUsual_PassByMap_doFn func(p map[string]testmoqs.Params)

// moqUsual_PassByMap_doReturnFn defines the type of function needed when
// calling doReturnResults for the Usual type
type moqUsual_PassByMap_doReturnFn func(p map[string]testmoqs.Params) map[string]testmoqs.Results

// moqUsual_PassByMap_results holds the results of the Usual type
type moqUsual_PassByMap_results struct {
	params  moqUsual_PassByMap_params
	results []struct {
		values *struct {
			result1 map[string]testmoqs.Results
		}
		sequence   uint32
		doFn       moqUsual_PassByMap_doFn
		doReturnFn moqUsual_PassByMap_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqUsual_PassByMap_fnRecorder routes recorded function calls to the moqUsual
// moq
type moqUsual_PassByMap_fnRecorder struct {
	params    moqUsual_PassByMap_params
	anyParams uint64
	sequence  bool
	results   *moqUsual_PassByMap_results
	moq       *moqUsual
}

// moqUsual_PassByMap_anyParams isolates the any params functions of the Usual
// type
type moqUsual_PassByMap_anyParams struct {
	recorder *moqUsual_PassByMap_fnRecorder
}

// moqUsual_PassByReference_params holds the params of the Usual type
type moqUsual_PassByReference_params struct{ p *testmoqs.Params }

// moqUsual_PassByReference_paramsKey holds the map key params of the Usual
// type
type moqUsual_PassByReference_paramsKey struct {
	params struct{ p *testmoqs.Params }
	hashes struct{ p hash.Hash }
}

// moqUsual_PassByReference_resultsByParams contains the results for a given
// set of parameters for the Usual type
type moqUsual_PassByReference_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqUsual_PassByReference_paramsKey]*moqUsual_PassByReference_results
}

// moqUsual_PassByReference_doFn defines the type of function needed when
// calling andDo for the Usual type
type moqUsual_PassByReference_doFn func(p *testmoqs.Params)

// moqUsual_PassByReference_doReturnFn defines the type of function needed when
// calling doReturnResults for the Usual type
type moqUsual_PassByReference_doReturnFn func(p *testmoqs.Params) *testmoqs.Results

// moqUsual_PassByReference_results holds the results of the Usual type
type moqUsual_PassByReference_results struct {
	params  moqUsual_PassByReference_params
	results []struct {
		values *struct {
			result1 *testmoqs.Results
		}
		sequence   uint32
		doFn       moqUsual_PassByReference_doFn
		doReturnFn moqUsual_PassByReference_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqUsual_PassByReference_fnRecorder routes recorded function calls to the
// moqUsual moq
type moqUsual_PassByReference_fnRecorder struct {
	params    moqUsual_PassByReference_params
	anyParams uint64
	sequence  bool
	results   *moqUsual_PassByReference_results
	moq       *moqUsual
}

// moqUsual_PassByReference_anyParams isolates the any params functions of the
// Usual type
type moqUsual_PassByReference_anyParams struct {
	recorder *moqUsual_PassByReference_fnRecorder
}

// moqUsual_PassBySlice_params holds the params of the Usual type
type moqUsual_PassBySlice_params struct{ p []testmoqs.Params }

// moqUsual_PassBySlice_paramsKey holds the map key params of the Usual type
type moqUsual_PassBySlice_paramsKey struct {
	params struct{}
	hashes struct{ p hash.Hash }
}

// moqUsual_PassBySlice_resultsByParams contains the results for a given set of
// parameters for the Usual type
type moqUsual_PassBySlice_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqUsual_PassBySlice_paramsKey]*moqUsual_PassBySlice_results
}

// moqUsual_PassBySlice_doFn defines the type of function needed when calling
// andDo for the Usual type
type moqUsual_PassBySlice_doFn func(p []testmoqs.Params)

// moqUsual_PassBySlice_doReturnFn defines the type of function needed when
// calling doReturnResults for the Usual type
type moqUsual_PassBySlice_doReturnFn func(p []testmoqs.Params) []testmoqs.Results

// moqUsual_PassBySlice_results holds the results of the Usual type
type moqUsual_PassBySlice_results struct {
	params  moqUsual_PassBySlice_params
	results []struct {
		values *struct {
			result1 []testmoqs.Results
		}
		sequence   uint32
		doFn       moqUsual_PassBySlice_doFn
		doReturnFn moqUsual_PassBySlice_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqUsual_PassBySlice_fnRecorder routes recorded function calls to the
// moqUsual moq
type moqUsual_PassBySlice_fnRecorder struct {
	params    moqUsual_PassBySlice_params
	anyParams uint64
	sequence  bool
	results   *moqUsual_PassBySlice_results
	moq       *moqUsual
}

// moqUsual_PassBySlice_anyParams isolates the any params functions of the
// Usual type
type moqUsual_PassBySlice_anyParams struct {
	recorder *moqUsual_PassBySlice_fnRecorder
}

// moqUsual_PassByValue_params holds the params of the Usual type
type moqUsual_PassByValue_params struct{ p testmoqs.Params }

// moqUsual_PassByValue_paramsKey holds the map key params of the Usual type
type moqUsual_PassByValue_paramsKey struct {
	params struct{ p testmoqs.Params }
	hashes struct{ p hash.Hash }
}

// moqUsual_PassByValue_resultsByParams contains the results for a given set of
// parameters for the Usual type
type moqUsual_PassByValue_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqUsual_PassByValue_paramsKey]*moqUsual_PassByValue_results
}

// moqUsual_PassByValue_doFn defines the type of function needed when calling
// andDo for the Usual type
type moqUsual_PassByValue_doFn func(p testmoqs.Params)

// moqUsual_PassByValue_doReturnFn defines the type of function needed when
// calling doReturnResults for the Usual type
type moqUsual_PassByValue_doReturnFn func(p testmoqs.Params) testmoqs.Results

// moqUsual_PassByValue_results holds the results of the Usual type
type moqUsual_PassByValue_results struct {
	params  moqUsual_PassByValue_params
	results []struct {
		values *struct {
			result1 testmoqs.Results
		}
		sequence   uint32
		doFn       moqUsual_PassByValue_doFn
		doReturnFn moqUsual_PassByValue_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqUsual_PassByValue_fnRecorder routes recorded function calls to the
// moqUsual moq
type moqUsual_PassByValue_fnRecorder struct {
	params    moqUsual_PassByValue_params
	anyParams uint64
	sequence  bool
	results   *moqUsual_PassByValue_results
	moq       *moqUsual
}

// moqUsual_PassByValue_anyParams isolates the any params functions of the
// Usual type
type moqUsual_PassByValue_anyParams struct {
	recorder *moqUsual_PassByValue_fnRecorder
}

// moqUsual_InterfaceParam_params holds the params of the Usual type
type moqUsual_InterfaceParam_params struct{ w io.Writer }

// moqUsual_InterfaceParam_paramsKey holds the map key params of the Usual type
type moqUsual_InterfaceParam_paramsKey struct {
	params struct{ w io.Writer }
	hashes struct{ w hash.Hash }
}

// moqUsual_InterfaceParam_resultsByParams contains the results for a given set
// of parameters for the Usual type
type moqUsual_InterfaceParam_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqUsual_InterfaceParam_paramsKey]*moqUsual_InterfaceParam_results
}

// moqUsual_InterfaceParam_doFn defines the type of function needed when
// calling andDo for the Usual type
type moqUsual_InterfaceParam_doFn func(w io.Writer)

// moqUsual_InterfaceParam_doReturnFn defines the type of function needed when
// calling doReturnResults for the Usual type
type moqUsual_InterfaceParam_doReturnFn func(w io.Writer) (sResult string, err error)

// moqUsual_InterfaceParam_results holds the results of the Usual type
type moqUsual_InterfaceParam_results struct {
	params  moqUsual_InterfaceParam_params
	results []struct {
		values *struct {
			sResult string
			err     error
		}
		sequence   uint32
		doFn       moqUsual_InterfaceParam_doFn
		doReturnFn moqUsual_InterfaceParam_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqUsual_InterfaceParam_fnRecorder routes recorded function calls to the
// moqUsual moq
type moqUsual_InterfaceParam_fnRecorder struct {
	params    moqUsual_InterfaceParam_params
	anyParams uint64
	sequence  bool
	results   *moqUsual_InterfaceParam_results
	moq       *moqUsual
}

// moqUsual_InterfaceParam_anyParams isolates the any params functions of the
// Usual type
type moqUsual_InterfaceParam_anyParams struct {
	recorder *moqUsual_InterfaceParam_fnRecorder
}

// moqUsual_InterfaceResult_params holds the params of the Usual type
type moqUsual_InterfaceResult_params struct {
	sParam string
	bParam bool
}

// moqUsual_InterfaceResult_paramsKey holds the map key params of the Usual
// type
type moqUsual_InterfaceResult_paramsKey struct {
	params struct {
		sParam string
		bParam bool
	}
	hashes struct {
		sParam hash.Hash
		bParam hash.Hash
	}
}

// moqUsual_InterfaceResult_resultsByParams contains the results for a given
// set of parameters for the Usual type
type moqUsual_InterfaceResult_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqUsual_InterfaceResult_paramsKey]*moqUsual_InterfaceResult_results
}

// moqUsual_InterfaceResult_doFn defines the type of function needed when
// calling andDo for the Usual type
type moqUsual_InterfaceResult_doFn func(sParam string, bParam bool)

// moqUsual_InterfaceResult_doReturnFn defines the type of function needed when
// calling doReturnResults for the Usual type
type moqUsual_InterfaceResult_doReturnFn func(sParam string, bParam bool) (r io.Reader)

// moqUsual_InterfaceResult_results holds the results of the Usual type
type moqUsual_InterfaceResult_results struct {
	params  moqUsual_InterfaceResult_params
	results []struct {
		values     *struct{ result1 io.Reader }
		sequence   uint32
		doFn       moqUsual_InterfaceResult_doFn
		doReturnFn moqUsual_InterfaceResult_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqUsual_InterfaceResult_fnRecorder routes recorded function calls to the
// moqUsual moq
type moqUsual_InterfaceResult_fnRecorder struct {
	params    moqUsual_InterfaceResult_params
	anyParams uint64
	sequence  bool
	results   *moqUsual_InterfaceResult_results
	moq       *moqUsual
}

// moqUsual_InterfaceResult_anyParams isolates the any params functions of the
// Usual type
type moqUsual_InterfaceResult_anyParams struct {
	recorder *moqUsual_InterfaceResult_fnRecorder
}

// moqUsual_FnParam_params holds the params of the Usual type
type moqUsual_FnParam_params struct{ fn func() }

// moqUsual_FnParam_paramsKey holds the map key params of the Usual type
type moqUsual_FnParam_paramsKey struct {
	params struct{}
	hashes struct{ fn hash.Hash }
}

// moqUsual_FnParam_resultsByParams contains the results for a given set of
// parameters for the Usual type
type moqUsual_FnParam_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqUsual_FnParam_paramsKey]*moqUsual_FnParam_results
}

// moqUsual_FnParam_doFn defines the type of function needed when calling andDo
// for the Usual type
type moqUsual_FnParam_doFn func(fn func())

// moqUsual_FnParam_doReturnFn defines the type of function needed when calling
// doReturnResults for the Usual type
type moqUsual_FnParam_doReturnFn func(fn func())

// moqUsual_FnParam_results holds the results of the Usual type
type moqUsual_FnParam_results struct {
	params  moqUsual_FnParam_params
	results []struct {
		values     *struct{}
		sequence   uint32
		doFn       moqUsual_FnParam_doFn
		doReturnFn moqUsual_FnParam_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqUsual_FnParam_fnRecorder routes recorded function calls to the moqUsual
// moq
type moqUsual_FnParam_fnRecorder struct {
	params    moqUsual_FnParam_params
	anyParams uint64
	sequence  bool
	results   *moqUsual_FnParam_results
	moq       *moqUsual
}

// moqUsual_FnParam_anyParams isolates the any params functions of the Usual
// type
type moqUsual_FnParam_anyParams struct {
	recorder *moqUsual_FnParam_fnRecorder
}

// moqUsual_Other_params holds the params of the Usual type
type moqUsual_Other_params struct{ param1 other.Params }

// moqUsual_Other_paramsKey holds the map key params of the Usual type
type moqUsual_Other_paramsKey struct {
	params struct{ param1 other.Params }
	hashes struct{ param1 hash.Hash }
}

// moqUsual_Other_resultsByParams contains the results for a given set of
// parameters for the Usual type
type moqUsual_Other_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqUsual_Other_paramsKey]*moqUsual_Other_results
}

// moqUsual_Other_doFn defines the type of function needed when calling andDo
// for the Usual type
type moqUsual_Other_doFn func(other.Params)

// moqUsual_Other_doReturnFn defines the type of function needed when calling
// doReturnResults for the Usual type
type moqUsual_Other_doReturnFn func(other.Params) other.Results

// moqUsual_Other_results holds the results of the Usual type
type moqUsual_Other_results struct {
	params  moqUsual_Other_params
	results []struct {
		values *struct {
			result1 other.Results
		}
		sequence   uint32
		doFn       moqUsual_Other_doFn
		doReturnFn moqUsual_Other_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqUsual_Other_fnRecorder routes recorded function calls to the moqUsual moq
type moqUsual_Other_fnRecorder struct {
	params    moqUsual_Other_params
	anyParams uint64
	sequence  bool
	results   *moqUsual_Other_results
	moq       *moqUsual
}

// moqUsual_Other_anyParams isolates the any params functions of the Usual type
type moqUsual_Other_anyParams struct {
	recorder *moqUsual_Other_fnRecorder
}

// newMoqUsual creates a new moq of the Usual type
func newMoqUsual(scene *moq.Scene, config *moq.Config) *moqUsual {
	if config == nil {
		config = &moq.Config{}
	}
	m := &moqUsual{
		scene:  scene,
		config: *config,
		moq:    &moqUsual_mock{},

		runtime: struct {
			parameterIndexing struct {
				Usual struct {
					sParam moq.ParamIndexing
					bParam moq.ParamIndexing
				}
				NoNames struct {
					param1 moq.ParamIndexing
					param2 moq.ParamIndexing
				}
				NoResults struct {
					sParam moq.ParamIndexing
					bParam moq.ParamIndexing
				}
				NoParams struct{}
				Nothing  struct{}
				Variadic struct {
					other moq.ParamIndexing
					args  moq.ParamIndexing
				}
				RepeatedIds struct {
					sParam1 moq.ParamIndexing
					sParam2 moq.ParamIndexing
					bParam  moq.ParamIndexing
				}
				Times struct {
					sParam moq.ParamIndexing
					times  moq.ParamIndexing
				}
				DifficultParamNames struct {
					param1 moq.ParamIndexing
					param2 moq.ParamIndexing
					param3 moq.ParamIndexing
					param  moq.ParamIndexing
					param5 moq.ParamIndexing
					param6 moq.ParamIndexing
					param7 moq.ParamIndexing
					param8 moq.ParamIndexing
					param9 moq.ParamIndexing
				}
				DifficultResultNames struct{}
				PassByArray          struct {
					p moq.ParamIndexing
				}
				PassByChan struct {
					p moq.ParamIndexing
				}
				PassByEllipsis struct {
					p moq.ParamIndexing
				}
				PassByMap struct {
					p moq.ParamIndexing
				}
				PassByReference struct {
					p moq.ParamIndexing
				}
				PassBySlice struct {
					p moq.ParamIndexing
				}
				PassByValue struct {
					p moq.ParamIndexing
				}
				InterfaceParam struct {
					w moq.ParamIndexing
				}
				InterfaceResult struct {
					sParam moq.ParamIndexing
					bParam moq.ParamIndexing
				}
				FnParam struct {
					fn moq.ParamIndexing
				}
				Other struct {
					param1 moq.ParamIndexing
				}
			}
		}{parameterIndexing: struct {
			Usual struct {
				sParam moq.ParamIndexing
				bParam moq.ParamIndexing
			}
			NoNames struct {
				param1 moq.ParamIndexing
				param2 moq.ParamIndexing
			}
			NoResults struct {
				sParam moq.ParamIndexing
				bParam moq.ParamIndexing
			}
			NoParams struct{}
			Nothing  struct{}
			Variadic struct {
				other moq.ParamIndexing
				args  moq.ParamIndexing
			}
			RepeatedIds struct {
				sParam1 moq.ParamIndexing
				sParam2 moq.ParamIndexing
				bParam  moq.ParamIndexing
			}
			Times struct {
				sParam moq.ParamIndexing
				times  moq.ParamIndexing
			}
			DifficultParamNames struct {
				param1 moq.ParamIndexing
				param2 moq.ParamIndexing
				param3 moq.ParamIndexing
				param  moq.ParamIndexing
				param5 moq.ParamIndexing
				param6 moq.ParamIndexing
				param7 moq.ParamIndexing
				param8 moq.ParamIndexing
				param9 moq.ParamIndexing
			}
			DifficultResultNames struct{}
			PassByArray          struct {
				p moq.ParamIndexing
			}
			PassByChan struct {
				p moq.ParamIndexing
			}
			PassByEllipsis struct {
				p moq.ParamIndexing
			}
			PassByMap struct {
				p moq.ParamIndexing
			}
			PassByReference struct {
				p moq.ParamIndexing
			}
			PassBySlice struct {
				p moq.ParamIndexing
			}
			PassByValue struct {
				p moq.ParamIndexing
			}
			InterfaceParam struct {
				w moq.ParamIndexing
			}
			InterfaceResult struct {
				sParam moq.ParamIndexing
				bParam moq.ParamIndexing
			}
			FnParam struct {
				fn moq.ParamIndexing
			}
			Other struct {
				param1 moq.ParamIndexing
			}
		}{
			Usual: struct {
				sParam moq.ParamIndexing
				bParam moq.ParamIndexing
			}{
				sParam: moq.ParamIndexByValue,
				bParam: moq.ParamIndexByValue,
			},
			NoNames: struct {
				param1 moq.ParamIndexing
				param2 moq.ParamIndexing
			}{
				param1: moq.ParamIndexByValue,
				param2: moq.ParamIndexByValue,
			},
			NoResults: struct {
				sParam moq.ParamIndexing
				bParam moq.ParamIndexing
			}{
				sParam: moq.ParamIndexByValue,
				bParam: moq.ParamIndexByValue,
			},
			NoParams: struct{}{},
			Nothing:  struct{}{},
			Variadic: struct {
				other moq.ParamIndexing
				args  moq.ParamIndexing
			}{
				other: moq.ParamIndexByValue,
				args:  moq.ParamIndexByHash,
			},
			RepeatedIds: struct {
				sParam1 moq.ParamIndexing
				sParam2 moq.ParamIndexing
				bParam  moq.ParamIndexing
			}{
				sParam1: moq.ParamIndexByValue,
				sParam2: moq.ParamIndexByValue,
				bParam:  moq.ParamIndexByValue,
			},
			Times: struct {
				sParam moq.ParamIndexing
				times  moq.ParamIndexing
			}{
				sParam: moq.ParamIndexByValue,
				times:  moq.ParamIndexByValue,
			},
			DifficultParamNames: struct {
				param1 moq.ParamIndexing
				param2 moq.ParamIndexing
				param3 moq.ParamIndexing
				param  moq.ParamIndexing
				param5 moq.ParamIndexing
				param6 moq.ParamIndexing
				param7 moq.ParamIndexing
				param8 moq.ParamIndexing
				param9 moq.ParamIndexing
			}{
				param1: moq.ParamIndexByValue,
				param2: moq.ParamIndexByValue,
				param3: moq.ParamIndexByValue,
				param:  moq.ParamIndexByValue,
				param5: moq.ParamIndexByValue,
				param6: moq.ParamIndexByValue,
				param7: moq.ParamIndexByValue,
				param8: moq.ParamIndexByValue,
				param9: moq.ParamIndexByValue,
			},
			DifficultResultNames: struct{}{},
			PassByArray: struct {
				p moq.ParamIndexing
			}{
				p: moq.ParamIndexByValue,
			},
			PassByChan: struct {
				p moq.ParamIndexing
			}{
				p: moq.ParamIndexByValue,
			},
			PassByEllipsis: struct {
				p moq.ParamIndexing
			}{
				p: moq.ParamIndexByHash,
			},
			PassByMap: struct {
				p moq.ParamIndexing
			}{
				p: moq.ParamIndexByHash,
			},
			PassByReference: struct {
				p moq.ParamIndexing
			}{
				p: moq.ParamIndexByHash,
			},
			PassBySlice: struct {
				p moq.ParamIndexing
			}{
				p: moq.ParamIndexByHash,
			},
			PassByValue: struct {
				p moq.ParamIndexing
			}{
				p: moq.ParamIndexByValue,
			},
			InterfaceParam: struct {
				w moq.ParamIndexing
			}{
				w: moq.ParamIndexByHash,
			},
			InterfaceResult: struct {
				sParam moq.ParamIndexing
				bParam moq.ParamIndexing
			}{
				sParam: moq.ParamIndexByValue,
				bParam: moq.ParamIndexByValue,
			},
			FnParam: struct {
				fn moq.ParamIndexing
			}{
				fn: moq.ParamIndexByHash,
			},
			Other: struct {
				param1 moq.ParamIndexing
			}{
				param1: moq.ParamIndexByValue,
			},
		}},
	}
	m.moq.moq = m

	scene.AddMoq(m)
	return m
}

// mock returns the mock implementation of the Usual type
func (m *moqUsual) mock() *moqUsual_mock { return m.moq }

func (m *moqUsual_mock) Usual(sParam string, bParam bool) (sResult string, err error) {
	m.moq.scene.T.Helper()
	params := moqUsual_Usual_params{
		sParam: sParam,
		bParam: bParam,
	}
	var results *moqUsual_Usual_results
	for _, resultsByParams := range m.moq.resultsByParams_Usual {
		paramsKey := m.moq.paramsKey_Usual(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call to %s", m.moq.prettyParams_Usual(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to %s", m.moq.prettyParams_Usual(params))
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match call to %s", m.moq.prettyParams_Usual(params))
		}
	}

	if result.doFn != nil {
		result.doFn(sParam, bParam)
	}

	if result.values != nil {
		sResult = result.values.sResult
		err = result.values.err
	}
	if result.doReturnFn != nil {
		sResult, err = result.doReturnFn(sParam, bParam)
	}
	return
}

func (m *moqUsual_mock) NoNames(param1 string, param2 bool) (result1 string, result2 error) {
	m.moq.scene.T.Helper()
	params := moqUsual_NoNames_params{
		param1: param1,
		param2: param2,
	}
	var results *moqUsual_NoNames_results
	for _, resultsByParams := range m.moq.resultsByParams_NoNames {
		paramsKey := m.moq.paramsKey_NoNames(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call to %s", m.moq.prettyParams_NoNames(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to %s", m.moq.prettyParams_NoNames(params))
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match call to %s", m.moq.prettyParams_NoNames(params))
		}
	}

	if result.doFn != nil {
		result.doFn(param1, param2)
	}

	if result.values != nil {
		result1 = result.values.result1
		result2 = result.values.result2
	}
	if result.doReturnFn != nil {
		result1, result2 = result.doReturnFn(param1, param2)
	}
	return
}

func (m *moqUsual_mock) NoResults(sParam string, bParam bool) {
	m.moq.scene.T.Helper()
	params := moqUsual_NoResults_params{
		sParam: sParam,
		bParam: bParam,
	}
	var results *moqUsual_NoResults_results
	for _, resultsByParams := range m.moq.resultsByParams_NoResults {
		paramsKey := m.moq.paramsKey_NoResults(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call to %s", m.moq.prettyParams_NoResults(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to %s", m.moq.prettyParams_NoResults(params))
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match call to %s", m.moq.prettyParams_NoResults(params))
		}
	}

	if result.doFn != nil {
		result.doFn(sParam, bParam)
	}

	if result.doReturnFn != nil {
		result.doReturnFn(sParam, bParam)
	}
	return
}

func (m *moqUsual_mock) NoParams() (sResult string, err error) {
	m.moq.scene.T.Helper()
	params := moqUsual_NoParams_params{}
	var results *moqUsual_NoParams_results
	for _, resultsByParams := range m.moq.resultsByParams_NoParams {
		paramsKey := m.moq.paramsKey_NoParams(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call to %s", m.moq.prettyParams_NoParams(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to %s", m.moq.prettyParams_NoParams(params))
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match call to %s", m.moq.prettyParams_NoParams(params))
		}
	}

	if result.doFn != nil {
		result.doFn()
	}

	if result.values != nil {
		sResult = result.values.sResult
		err = result.values.err
	}
	if result.doReturnFn != nil {
		sResult, err = result.doReturnFn()
	}
	return
}

func (m *moqUsual_mock) Nothing() {
	m.moq.scene.T.Helper()
	params := moqUsual_Nothing_params{}
	var results *moqUsual_Nothing_results
	for _, resultsByParams := range m.moq.resultsByParams_Nothing {
		paramsKey := m.moq.paramsKey_Nothing(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call to %s", m.moq.prettyParams_Nothing(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to %s", m.moq.prettyParams_Nothing(params))
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match call to %s", m.moq.prettyParams_Nothing(params))
		}
	}

	if result.doFn != nil {
		result.doFn()
	}

	if result.doReturnFn != nil {
		result.doReturnFn()
	}
	return
}

func (m *moqUsual_mock) Variadic(other bool, args ...string) (sResult string, err error) {
	m.moq.scene.T.Helper()
	params := moqUsual_Variadic_params{
		other: other,
		args:  args,
	}
	var results *moqUsual_Variadic_results
	for _, resultsByParams := range m.moq.resultsByParams_Variadic {
		paramsKey := m.moq.paramsKey_Variadic(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call to %s", m.moq.prettyParams_Variadic(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to %s", m.moq.prettyParams_Variadic(params))
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match call to %s", m.moq.prettyParams_Variadic(params))
		}
	}

	if result.doFn != nil {
		result.doFn(other, args...)
	}

	if result.values != nil {
		sResult = result.values.sResult
		err = result.values.err
	}
	if result.doReturnFn != nil {
		sResult, err = result.doReturnFn(other, args...)
	}
	return
}

func (m *moqUsual_mock) RepeatedIds(sParam1, sParam2 string, bParam bool) (sResult1, sResult2 string, err error) {
	m.moq.scene.T.Helper()
	params := moqUsual_RepeatedIds_params{
		sParam1: sParam1,
		sParam2: sParam2,
		bParam:  bParam,
	}
	var results *moqUsual_RepeatedIds_results
	for _, resultsByParams := range m.moq.resultsByParams_RepeatedIds {
		paramsKey := m.moq.paramsKey_RepeatedIds(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call to %s", m.moq.prettyParams_RepeatedIds(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to %s", m.moq.prettyParams_RepeatedIds(params))
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match call to %s", m.moq.prettyParams_RepeatedIds(params))
		}
	}

	if result.doFn != nil {
		result.doFn(sParam1, sParam2, bParam)
	}

	if result.values != nil {
		sResult1 = result.values.sResult1
		sResult2 = result.values.sResult2
		err = result.values.err
	}
	if result.doReturnFn != nil {
		sResult1, sResult2, err = result.doReturnFn(sParam1, sParam2, bParam)
	}
	return
}

func (m *moqUsual_mock) Times(sParam string, times bool) (sResult string, err error) {
	m.moq.scene.T.Helper()
	params := moqUsual_Times_params{
		sParam: sParam,
		times:  times,
	}
	var results *moqUsual_Times_results
	for _, resultsByParams := range m.moq.resultsByParams_Times {
		paramsKey := m.moq.paramsKey_Times(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call to %s", m.moq.prettyParams_Times(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to %s", m.moq.prettyParams_Times(params))
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match call to %s", m.moq.prettyParams_Times(params))
		}
	}

	if result.doFn != nil {
		result.doFn(sParam, times)
	}

	if result.values != nil {
		sResult = result.values.sResult
		err = result.values.err
	}
	if result.doReturnFn != nil {
		sResult, err = result.doReturnFn(sParam, times)
	}
	return
}

func (m *moqUsual_mock) DifficultParamNames(param1, param2 bool, param3 string, param, param5, param6 int, param7, param8, param9 float32) {
	m.moq.scene.T.Helper()
	params := moqUsual_DifficultParamNames_params{
		param1: param1,
		param2: param2,
		param3: param3,
		param:  param,
		param5: param5,
		param6: param6,
		param7: param7,
		param8: param8,
		param9: param9,
	}
	var results *moqUsual_DifficultParamNames_results
	for _, resultsByParams := range m.moq.resultsByParams_DifficultParamNames {
		paramsKey := m.moq.paramsKey_DifficultParamNames(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call to %s", m.moq.prettyParams_DifficultParamNames(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to %s", m.moq.prettyParams_DifficultParamNames(params))
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match call to %s", m.moq.prettyParams_DifficultParamNames(params))
		}
	}

	if result.doFn != nil {
		result.doFn(param1, param2, param3, param, param5, param6, param7, param8, param9)
	}

	if result.doReturnFn != nil {
		result.doReturnFn(param1, param2, param3, param, param5, param6, param7, param8, param9)
	}
	return
}

func (m *moqUsual_mock) DifficultResultNames() (result1, result2 string, result3 error, param, result5, result6 int, result7, result8, result9 float32) {
	m.moq.scene.T.Helper()
	params := moqUsual_DifficultResultNames_params{}
	var results *moqUsual_DifficultResultNames_results
	for _, resultsByParams := range m.moq.resultsByParams_DifficultResultNames {
		paramsKey := m.moq.paramsKey_DifficultResultNames(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call to %s", m.moq.prettyParams_DifficultResultNames(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to %s", m.moq.prettyParams_DifficultResultNames(params))
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match call to %s", m.moq.prettyParams_DifficultResultNames(params))
		}
	}

	if result.doFn != nil {
		result.doFn()
	}

	if result.values != nil {
		result1 = result.values.result1
		result2 = result.values.result2
		result3 = result.values.result3
		param = result.values.param
		result5 = result.values.result5
		result6 = result.values.result6
		result7 = result.values.result7
		result8 = result.values.result8
		result9 = result.values.result9
	}
	if result.doReturnFn != nil {
		result1, result2, result3, param, result5, result6, result7, result8, result9 = result.doReturnFn()
	}
	return
}

func (m *moqUsual_mock) PassByArray(p [3]testmoqs.Params) (result1 [3]testmoqs.Results) {
	m.moq.scene.T.Helper()
	params := moqUsual_PassByArray_params{
		p: p,
	}
	var results *moqUsual_PassByArray_results
	for _, resultsByParams := range m.moq.resultsByParams_PassByArray {
		paramsKey := m.moq.paramsKey_PassByArray(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call to %s", m.moq.prettyParams_PassByArray(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to %s", m.moq.prettyParams_PassByArray(params))
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match call to %s", m.moq.prettyParams_PassByArray(params))
		}
	}

	if result.doFn != nil {
		result.doFn(p)
	}

	if result.values != nil {
		result1 = result.values.result1
	}
	if result.doReturnFn != nil {
		result1 = result.doReturnFn(p)
	}
	return
}

func (m *moqUsual_mock) PassByChan(p chan testmoqs.Params) (result1 chan testmoqs.Results) {
	m.moq.scene.T.Helper()
	params := moqUsual_PassByChan_params{
		p: p,
	}
	var results *moqUsual_PassByChan_results
	for _, resultsByParams := range m.moq.resultsByParams_PassByChan {
		paramsKey := m.moq.paramsKey_PassByChan(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call to %s", m.moq.prettyParams_PassByChan(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to %s", m.moq.prettyParams_PassByChan(params))
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match call to %s", m.moq.prettyParams_PassByChan(params))
		}
	}

	if result.doFn != nil {
		result.doFn(p)
	}

	if result.values != nil {
		result1 = result.values.result1
	}
	if result.doReturnFn != nil {
		result1 = result.doReturnFn(p)
	}
	return
}

func (m *moqUsual_mock) PassByEllipsis(p ...testmoqs.Params) (result1 string, result2 error) {
	m.moq.scene.T.Helper()
	params := moqUsual_PassByEllipsis_params{
		p: p,
	}
	var results *moqUsual_PassByEllipsis_results
	for _, resultsByParams := range m.moq.resultsByParams_PassByEllipsis {
		paramsKey := m.moq.paramsKey_PassByEllipsis(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call to %s", m.moq.prettyParams_PassByEllipsis(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to %s", m.moq.prettyParams_PassByEllipsis(params))
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match call to %s", m.moq.prettyParams_PassByEllipsis(params))
		}
	}

	if result.doFn != nil {
		result.doFn(p...)
	}

	if result.values != nil {
		result1 = result.values.result1
		result2 = result.values.result2
	}
	if result.doReturnFn != nil {
		result1, result2 = result.doReturnFn(p...)
	}
	return
}

func (m *moqUsual_mock) PassByMap(p map[string]testmoqs.Params) (result1 map[string]testmoqs.Results) {
	m.moq.scene.T.Helper()
	params := moqUsual_PassByMap_params{
		p: p,
	}
	var results *moqUsual_PassByMap_results
	for _, resultsByParams := range m.moq.resultsByParams_PassByMap {
		paramsKey := m.moq.paramsKey_PassByMap(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call to %s", m.moq.prettyParams_PassByMap(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to %s", m.moq.prettyParams_PassByMap(params))
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match call to %s", m.moq.prettyParams_PassByMap(params))
		}
	}

	if result.doFn != nil {
		result.doFn(p)
	}

	if result.values != nil {
		result1 = result.values.result1
	}
	if result.doReturnFn != nil {
		result1 = result.doReturnFn(p)
	}
	return
}

func (m *moqUsual_mock) PassByReference(p *testmoqs.Params) (result1 *testmoqs.Results) {
	m.moq.scene.T.Helper()
	params := moqUsual_PassByReference_params{
		p: p,
	}
	var results *moqUsual_PassByReference_results
	for _, resultsByParams := range m.moq.resultsByParams_PassByReference {
		paramsKey := m.moq.paramsKey_PassByReference(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call to %s", m.moq.prettyParams_PassByReference(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to %s", m.moq.prettyParams_PassByReference(params))
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match call to %s", m.moq.prettyParams_PassByReference(params))
		}
	}

	if result.doFn != nil {
		result.doFn(p)
	}

	if result.values != nil {
		result1 = result.values.result1
	}
	if result.doReturnFn != nil {
		result1 = result.doReturnFn(p)
	}
	return
}

func (m *moqUsual_mock) PassBySlice(p []testmoqs.Params) (result1 []testmoqs.Results) {
	m.moq.scene.T.Helper()
	params := moqUsual_PassBySlice_params{
		p: p,
	}
	var results *moqUsual_PassBySlice_results
	for _, resultsByParams := range m.moq.resultsByParams_PassBySlice {
		paramsKey := m.moq.paramsKey_PassBySlice(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call to %s", m.moq.prettyParams_PassBySlice(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to %s", m.moq.prettyParams_PassBySlice(params))
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match call to %s", m.moq.prettyParams_PassBySlice(params))
		}
	}

	if result.doFn != nil {
		result.doFn(p)
	}

	if result.values != nil {
		result1 = result.values.result1
	}
	if result.doReturnFn != nil {
		result1 = result.doReturnFn(p)
	}
	return
}

func (m *moqUsual_mock) PassByValue(p testmoqs.Params) (result1 testmoqs.Results) {
	m.moq.scene.T.Helper()
	params := moqUsual_PassByValue_params{
		p: p,
	}
	var results *moqUsual_PassByValue_results
	for _, resultsByParams := range m.moq.resultsByParams_PassByValue {
		paramsKey := m.moq.paramsKey_PassByValue(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call to %s", m.moq.prettyParams_PassByValue(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to %s", m.moq.prettyParams_PassByValue(params))
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match call to %s", m.moq.prettyParams_PassByValue(params))
		}
	}

	if result.doFn != nil {
		result.doFn(p)
	}

	if result.values != nil {
		result1 = result.values.result1
	}
	if result.doReturnFn != nil {
		result1 = result.doReturnFn(p)
	}
	return
}

func (m *moqUsual_mock) InterfaceParam(w io.Writer) (sResult string, err error) {
	m.moq.scene.T.Helper()
	params := moqUsual_InterfaceParam_params{
		w: w,
	}
	var results *moqUsual_InterfaceParam_results
	for _, resultsByParams := range m.moq.resultsByParams_InterfaceParam {
		paramsKey := m.moq.paramsKey_InterfaceParam(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call to %s", m.moq.prettyParams_InterfaceParam(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to %s", m.moq.prettyParams_InterfaceParam(params))
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match call to %s", m.moq.prettyParams_InterfaceParam(params))
		}
	}

	if result.doFn != nil {
		result.doFn(w)
	}

	if result.values != nil {
		sResult = result.values.sResult
		err = result.values.err
	}
	if result.doReturnFn != nil {
		sResult, err = result.doReturnFn(w)
	}
	return
}

func (m *moqUsual_mock) InterfaceResult(sParam string, bParam bool) (result1 io.Reader) {
	m.moq.scene.T.Helper()
	params := moqUsual_InterfaceResult_params{
		sParam: sParam,
		bParam: bParam,
	}
	var results *moqUsual_InterfaceResult_results
	for _, resultsByParams := range m.moq.resultsByParams_InterfaceResult {
		paramsKey := m.moq.paramsKey_InterfaceResult(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call to %s", m.moq.prettyParams_InterfaceResult(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to %s", m.moq.prettyParams_InterfaceResult(params))
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match call to %s", m.moq.prettyParams_InterfaceResult(params))
		}
	}

	if result.doFn != nil {
		result.doFn(sParam, bParam)
	}

	if result.values != nil {
		result1 = result.values.result1
	}
	if result.doReturnFn != nil {
		result1 = result.doReturnFn(sParam, bParam)
	}
	return
}

func (m *moqUsual_mock) FnParam(fn func()) {
	m.moq.scene.T.Helper()
	params := moqUsual_FnParam_params{
		fn: fn,
	}
	var results *moqUsual_FnParam_results
	for _, resultsByParams := range m.moq.resultsByParams_FnParam {
		paramsKey := m.moq.paramsKey_FnParam(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call to %s", m.moq.prettyParams_FnParam(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to %s", m.moq.prettyParams_FnParam(params))
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match call to %s", m.moq.prettyParams_FnParam(params))
		}
	}

	if result.doFn != nil {
		result.doFn(fn)
	}

	if result.doReturnFn != nil {
		result.doReturnFn(fn)
	}
	return
}

func (m *moqUsual_mock) Other(param1 other.Params) (result1 other.Results) {
	m.moq.scene.T.Helper()
	params := moqUsual_Other_params{
		param1: param1,
	}
	var results *moqUsual_Other_results
	for _, resultsByParams := range m.moq.resultsByParams_Other {
		paramsKey := m.moq.paramsKey_Other(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call to %s", m.moq.prettyParams_Other(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to %s", m.moq.prettyParams_Other(params))
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match call to %s", m.moq.prettyParams_Other(params))
		}
	}

	if result.doFn != nil {
		result.doFn(param1)
	}

	if result.values != nil {
		result1 = result.values.result1
	}
	if result.doReturnFn != nil {
		result1 = result.doReturnFn(param1)
	}
	return
}

// onCall returns the recorder implementation of the Usual type
func (m *moqUsual) onCall() *moqUsual_recorder {
	return &moqUsual_recorder{
		moq: m,
	}
}

func (m *moqUsual_recorder) Usual(sParam string, bParam bool) *moqUsual_Usual_fnRecorder {
	return &moqUsual_Usual_fnRecorder{
		params: moqUsual_Usual_params{
			sParam: sParam,
			bParam: bParam,
		},
		sequence: m.moq.config.Sequence == moq.SeqDefaultOn,
		moq:      m.moq,
	}
}

func (r *moqUsual_Usual_fnRecorder) any() *moqUsual_Usual_anyParams {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_Usual(r.params))
		return nil
	}
	return &moqUsual_Usual_anyParams{recorder: r}
}

func (a *moqUsual_Usual_anyParams) sParam() *moqUsual_Usual_fnRecorder {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (a *moqUsual_Usual_anyParams) bParam() *moqUsual_Usual_fnRecorder {
	a.recorder.anyParams |= 1 << 1
	return a.recorder
}

func (r *moqUsual_Usual_fnRecorder) seq() *moqUsual_Usual_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_Usual(r.params))
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqUsual_Usual_fnRecorder) noSeq() *moqUsual_Usual_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_Usual(r.params))
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqUsual_Usual_fnRecorder) returnResults(sResult string, err error) *moqUsual_Usual_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			sResult string
			err     error
		}
		sequence   uint32
		doFn       moqUsual_Usual_doFn
		doReturnFn moqUsual_Usual_doReturnFn
	}{
		values: &struct {
			sResult string
			err     error
		}{
			sResult: sResult,
			err:     err,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqUsual_Usual_fnRecorder) andDo(fn moqUsual_Usual_doFn) *moqUsual_Usual_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqUsual_Usual_fnRecorder) doReturnResults(fn moqUsual_Usual_doReturnFn) *moqUsual_Usual_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			sResult string
			err     error
		}
		sequence   uint32
		doFn       moqUsual_Usual_doFn
		doReturnFn moqUsual_Usual_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqUsual_Usual_fnRecorder) findResults() {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqUsual_Usual_resultsByParams
	for n, res := range r.moq.resultsByParams_Usual {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqUsual_Usual_resultsByParams{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqUsual_Usual_paramsKey]*moqUsual_Usual_results{},
		}
		r.moq.resultsByParams_Usual = append(r.moq.resultsByParams_Usual, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams_Usual) {
			copy(r.moq.resultsByParams_Usual[insertAt+1:], r.moq.resultsByParams_Usual[insertAt:0])
			r.moq.resultsByParams_Usual[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey_Usual(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqUsual_Usual_results{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqUsual_Usual_fnRecorder) repeat(repeaters ...moq.Repeater) *moqUsual_Usual_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values *struct {
					sResult string
					err     error
				}
				sequence   uint32
				doFn       moqUsual_Usual_doFn
				doReturnFn moqUsual_Usual_doReturnFn
			}{
				values:   last.values,
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqUsual) prettyParams_Usual(params moqUsual_Usual_params) string {
	return fmt.Sprintf("Usual(%#v, %#v)", params.sParam, params.bParam)
}

func (m *moqUsual) paramsKey_Usual(params moqUsual_Usual_params, anyParams uint64) moqUsual_Usual_paramsKey {
	m.scene.T.Helper()
	var sParamUsed string
	var sParamUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.Usual.sParam == moq.ParamIndexByValue {
			sParamUsed = params.sParam
		} else {
			sParamUsedHash = hash.DeepHash(params.sParam)
		}
	}
	var bParamUsed bool
	var bParamUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.runtime.parameterIndexing.Usual.bParam == moq.ParamIndexByValue {
			bParamUsed = params.bParam
		} else {
			bParamUsedHash = hash.DeepHash(params.bParam)
		}
	}
	return moqUsual_Usual_paramsKey{
		params: struct {
			sParam string
			bParam bool
		}{
			sParam: sParamUsed,
			bParam: bParamUsed,
		},
		hashes: struct {
			sParam hash.Hash
			bParam hash.Hash
		}{
			sParam: sParamUsedHash,
			bParam: bParamUsedHash,
		},
	}
}

func (m *moqUsual_recorder) NoNames(param1 string, param2 bool) *moqUsual_NoNames_fnRecorder {
	return &moqUsual_NoNames_fnRecorder{
		params: moqUsual_NoNames_params{
			param1: param1,
			param2: param2,
		},
		sequence: m.moq.config.Sequence == moq.SeqDefaultOn,
		moq:      m.moq,
	}
}

func (r *moqUsual_NoNames_fnRecorder) any() *moqUsual_NoNames_anyParams {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_NoNames(r.params))
		return nil
	}
	return &moqUsual_NoNames_anyParams{recorder: r}
}

func (a *moqUsual_NoNames_anyParams) param1() *moqUsual_NoNames_fnRecorder {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (a *moqUsual_NoNames_anyParams) param2() *moqUsual_NoNames_fnRecorder {
	a.recorder.anyParams |= 1 << 1
	return a.recorder
}

func (r *moqUsual_NoNames_fnRecorder) seq() *moqUsual_NoNames_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_NoNames(r.params))
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqUsual_NoNames_fnRecorder) noSeq() *moqUsual_NoNames_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_NoNames(r.params))
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqUsual_NoNames_fnRecorder) returnResults(result1 string, result2 error) *moqUsual_NoNames_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 string
			result2 error
		}
		sequence   uint32
		doFn       moqUsual_NoNames_doFn
		doReturnFn moqUsual_NoNames_doReturnFn
	}{
		values: &struct {
			result1 string
			result2 error
		}{
			result1: result1,
			result2: result2,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqUsual_NoNames_fnRecorder) andDo(fn moqUsual_NoNames_doFn) *moqUsual_NoNames_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqUsual_NoNames_fnRecorder) doReturnResults(fn moqUsual_NoNames_doReturnFn) *moqUsual_NoNames_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 string
			result2 error
		}
		sequence   uint32
		doFn       moqUsual_NoNames_doFn
		doReturnFn moqUsual_NoNames_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqUsual_NoNames_fnRecorder) findResults() {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqUsual_NoNames_resultsByParams
	for n, res := range r.moq.resultsByParams_NoNames {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqUsual_NoNames_resultsByParams{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqUsual_NoNames_paramsKey]*moqUsual_NoNames_results{},
		}
		r.moq.resultsByParams_NoNames = append(r.moq.resultsByParams_NoNames, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams_NoNames) {
			copy(r.moq.resultsByParams_NoNames[insertAt+1:], r.moq.resultsByParams_NoNames[insertAt:0])
			r.moq.resultsByParams_NoNames[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey_NoNames(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqUsual_NoNames_results{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqUsual_NoNames_fnRecorder) repeat(repeaters ...moq.Repeater) *moqUsual_NoNames_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values *struct {
					result1 string
					result2 error
				}
				sequence   uint32
				doFn       moqUsual_NoNames_doFn
				doReturnFn moqUsual_NoNames_doReturnFn
			}{
				values:   last.values,
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqUsual) prettyParams_NoNames(params moqUsual_NoNames_params) string {
	return fmt.Sprintf("NoNames(%#v, %#v)", params.param1, params.param2)
}

func (m *moqUsual) paramsKey_NoNames(params moqUsual_NoNames_params, anyParams uint64) moqUsual_NoNames_paramsKey {
	m.scene.T.Helper()
	var param1Used string
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.NoNames.param1 == moq.ParamIndexByValue {
			param1Used = params.param1
		} else {
			param1UsedHash = hash.DeepHash(params.param1)
		}
	}
	var param2Used bool
	var param2UsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.runtime.parameterIndexing.NoNames.param2 == moq.ParamIndexByValue {
			param2Used = params.param2
		} else {
			param2UsedHash = hash.DeepHash(params.param2)
		}
	}
	return moqUsual_NoNames_paramsKey{
		params: struct {
			param1 string
			param2 bool
		}{
			param1: param1Used,
			param2: param2Used,
		},
		hashes: struct {
			param1 hash.Hash
			param2 hash.Hash
		}{
			param1: param1UsedHash,
			param2: param2UsedHash,
		},
	}
}

func (m *moqUsual_recorder) NoResults(sParam string, bParam bool) *moqUsual_NoResults_fnRecorder {
	return &moqUsual_NoResults_fnRecorder{
		params: moqUsual_NoResults_params{
			sParam: sParam,
			bParam: bParam,
		},
		sequence: m.moq.config.Sequence == moq.SeqDefaultOn,
		moq:      m.moq,
	}
}

func (r *moqUsual_NoResults_fnRecorder) any() *moqUsual_NoResults_anyParams {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_NoResults(r.params))
		return nil
	}
	return &moqUsual_NoResults_anyParams{recorder: r}
}

func (a *moqUsual_NoResults_anyParams) sParam() *moqUsual_NoResults_fnRecorder {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (a *moqUsual_NoResults_anyParams) bParam() *moqUsual_NoResults_fnRecorder {
	a.recorder.anyParams |= 1 << 1
	return a.recorder
}

func (r *moqUsual_NoResults_fnRecorder) seq() *moqUsual_NoResults_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_NoResults(r.params))
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqUsual_NoResults_fnRecorder) noSeq() *moqUsual_NoResults_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_NoResults(r.params))
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqUsual_NoResults_fnRecorder) returnResults() *moqUsual_NoResults_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values     *struct{}
		sequence   uint32
		doFn       moqUsual_NoResults_doFn
		doReturnFn moqUsual_NoResults_doReturnFn
	}{
		values:   &struct{}{},
		sequence: sequence,
	})
	return r
}

func (r *moqUsual_NoResults_fnRecorder) andDo(fn moqUsual_NoResults_doFn) *moqUsual_NoResults_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqUsual_NoResults_fnRecorder) doReturnResults(fn moqUsual_NoResults_doReturnFn) *moqUsual_NoResults_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values     *struct{}
		sequence   uint32
		doFn       moqUsual_NoResults_doFn
		doReturnFn moqUsual_NoResults_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqUsual_NoResults_fnRecorder) findResults() {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqUsual_NoResults_resultsByParams
	for n, res := range r.moq.resultsByParams_NoResults {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqUsual_NoResults_resultsByParams{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqUsual_NoResults_paramsKey]*moqUsual_NoResults_results{},
		}
		r.moq.resultsByParams_NoResults = append(r.moq.resultsByParams_NoResults, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams_NoResults) {
			copy(r.moq.resultsByParams_NoResults[insertAt+1:], r.moq.resultsByParams_NoResults[insertAt:0])
			r.moq.resultsByParams_NoResults[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey_NoResults(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqUsual_NoResults_results{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqUsual_NoResults_fnRecorder) repeat(repeaters ...moq.Repeater) *moqUsual_NoResults_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values     *struct{}
				sequence   uint32
				doFn       moqUsual_NoResults_doFn
				doReturnFn moqUsual_NoResults_doReturnFn
			}{
				values:   last.values,
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqUsual) prettyParams_NoResults(params moqUsual_NoResults_params) string {
	return fmt.Sprintf("NoResults(%#v, %#v)", params.sParam, params.bParam)
}

func (m *moqUsual) paramsKey_NoResults(params moqUsual_NoResults_params, anyParams uint64) moqUsual_NoResults_paramsKey {
	m.scene.T.Helper()
	var sParamUsed string
	var sParamUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.NoResults.sParam == moq.ParamIndexByValue {
			sParamUsed = params.sParam
		} else {
			sParamUsedHash = hash.DeepHash(params.sParam)
		}
	}
	var bParamUsed bool
	var bParamUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.runtime.parameterIndexing.NoResults.bParam == moq.ParamIndexByValue {
			bParamUsed = params.bParam
		} else {
			bParamUsedHash = hash.DeepHash(params.bParam)
		}
	}
	return moqUsual_NoResults_paramsKey{
		params: struct {
			sParam string
			bParam bool
		}{
			sParam: sParamUsed,
			bParam: bParamUsed,
		},
		hashes: struct {
			sParam hash.Hash
			bParam hash.Hash
		}{
			sParam: sParamUsedHash,
			bParam: bParamUsedHash,
		},
	}
}

func (m *moqUsual_recorder) NoParams() *moqUsual_NoParams_fnRecorder {
	return &moqUsual_NoParams_fnRecorder{
		params:   moqUsual_NoParams_params{},
		sequence: m.moq.config.Sequence == moq.SeqDefaultOn,
		moq:      m.moq,
	}
}

func (r *moqUsual_NoParams_fnRecorder) any() *moqUsual_NoParams_anyParams {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_NoParams(r.params))
		return nil
	}
	return &moqUsual_NoParams_anyParams{recorder: r}
}

func (r *moqUsual_NoParams_fnRecorder) seq() *moqUsual_NoParams_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_NoParams(r.params))
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqUsual_NoParams_fnRecorder) noSeq() *moqUsual_NoParams_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_NoParams(r.params))
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqUsual_NoParams_fnRecorder) returnResults(sResult string, err error) *moqUsual_NoParams_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			sResult string
			err     error
		}
		sequence   uint32
		doFn       moqUsual_NoParams_doFn
		doReturnFn moqUsual_NoParams_doReturnFn
	}{
		values: &struct {
			sResult string
			err     error
		}{
			sResult: sResult,
			err:     err,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqUsual_NoParams_fnRecorder) andDo(fn moqUsual_NoParams_doFn) *moqUsual_NoParams_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqUsual_NoParams_fnRecorder) doReturnResults(fn moqUsual_NoParams_doReturnFn) *moqUsual_NoParams_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			sResult string
			err     error
		}
		sequence   uint32
		doFn       moqUsual_NoParams_doFn
		doReturnFn moqUsual_NoParams_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqUsual_NoParams_fnRecorder) findResults() {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqUsual_NoParams_resultsByParams
	for n, res := range r.moq.resultsByParams_NoParams {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqUsual_NoParams_resultsByParams{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqUsual_NoParams_paramsKey]*moqUsual_NoParams_results{},
		}
		r.moq.resultsByParams_NoParams = append(r.moq.resultsByParams_NoParams, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams_NoParams) {
			copy(r.moq.resultsByParams_NoParams[insertAt+1:], r.moq.resultsByParams_NoParams[insertAt:0])
			r.moq.resultsByParams_NoParams[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey_NoParams(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqUsual_NoParams_results{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqUsual_NoParams_fnRecorder) repeat(repeaters ...moq.Repeater) *moqUsual_NoParams_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values *struct {
					sResult string
					err     error
				}
				sequence   uint32
				doFn       moqUsual_NoParams_doFn
				doReturnFn moqUsual_NoParams_doReturnFn
			}{
				values:   last.values,
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqUsual) prettyParams_NoParams(params moqUsual_NoParams_params) string {
	return fmt.Sprintf("NoParams()")
}

func (m *moqUsual) paramsKey_NoParams(params moqUsual_NoParams_params, anyParams uint64) moqUsual_NoParams_paramsKey {
	m.scene.T.Helper()
	return moqUsual_NoParams_paramsKey{
		params: struct{}{},
		hashes: struct{}{},
	}
}

func (m *moqUsual_recorder) Nothing() *moqUsual_Nothing_fnRecorder {
	return &moqUsual_Nothing_fnRecorder{
		params:   moqUsual_Nothing_params{},
		sequence: m.moq.config.Sequence == moq.SeqDefaultOn,
		moq:      m.moq,
	}
}

func (r *moqUsual_Nothing_fnRecorder) any() *moqUsual_Nothing_anyParams {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_Nothing(r.params))
		return nil
	}
	return &moqUsual_Nothing_anyParams{recorder: r}
}

func (r *moqUsual_Nothing_fnRecorder) seq() *moqUsual_Nothing_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_Nothing(r.params))
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqUsual_Nothing_fnRecorder) noSeq() *moqUsual_Nothing_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_Nothing(r.params))
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqUsual_Nothing_fnRecorder) returnResults() *moqUsual_Nothing_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values     *struct{}
		sequence   uint32
		doFn       moqUsual_Nothing_doFn
		doReturnFn moqUsual_Nothing_doReturnFn
	}{
		values:   &struct{}{},
		sequence: sequence,
	})
	return r
}

func (r *moqUsual_Nothing_fnRecorder) andDo(fn moqUsual_Nothing_doFn) *moqUsual_Nothing_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqUsual_Nothing_fnRecorder) doReturnResults(fn moqUsual_Nothing_doReturnFn) *moqUsual_Nothing_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values     *struct{}
		sequence   uint32
		doFn       moqUsual_Nothing_doFn
		doReturnFn moqUsual_Nothing_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqUsual_Nothing_fnRecorder) findResults() {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqUsual_Nothing_resultsByParams
	for n, res := range r.moq.resultsByParams_Nothing {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqUsual_Nothing_resultsByParams{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqUsual_Nothing_paramsKey]*moqUsual_Nothing_results{},
		}
		r.moq.resultsByParams_Nothing = append(r.moq.resultsByParams_Nothing, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams_Nothing) {
			copy(r.moq.resultsByParams_Nothing[insertAt+1:], r.moq.resultsByParams_Nothing[insertAt:0])
			r.moq.resultsByParams_Nothing[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey_Nothing(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqUsual_Nothing_results{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqUsual_Nothing_fnRecorder) repeat(repeaters ...moq.Repeater) *moqUsual_Nothing_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values     *struct{}
				sequence   uint32
				doFn       moqUsual_Nothing_doFn
				doReturnFn moqUsual_Nothing_doReturnFn
			}{
				values:   last.values,
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqUsual) prettyParams_Nothing(params moqUsual_Nothing_params) string {
	return fmt.Sprintf("Nothing()")
}

func (m *moqUsual) paramsKey_Nothing(params moqUsual_Nothing_params, anyParams uint64) moqUsual_Nothing_paramsKey {
	m.scene.T.Helper()
	return moqUsual_Nothing_paramsKey{
		params: struct{}{},
		hashes: struct{}{},
	}
}

func (m *moqUsual_recorder) Variadic(other bool, args ...string) *moqUsual_Variadic_fnRecorder {
	return &moqUsual_Variadic_fnRecorder{
		params: moqUsual_Variadic_params{
			other: other,
			args:  args,
		},
		sequence: m.moq.config.Sequence == moq.SeqDefaultOn,
		moq:      m.moq,
	}
}

func (r *moqUsual_Variadic_fnRecorder) any() *moqUsual_Variadic_anyParams {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_Variadic(r.params))
		return nil
	}
	return &moqUsual_Variadic_anyParams{recorder: r}
}

func (a *moqUsual_Variadic_anyParams) other() *moqUsual_Variadic_fnRecorder {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (a *moqUsual_Variadic_anyParams) args() *moqUsual_Variadic_fnRecorder {
	a.recorder.anyParams |= 1 << 1
	return a.recorder
}

func (r *moqUsual_Variadic_fnRecorder) seq() *moqUsual_Variadic_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_Variadic(r.params))
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqUsual_Variadic_fnRecorder) noSeq() *moqUsual_Variadic_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_Variadic(r.params))
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqUsual_Variadic_fnRecorder) returnResults(sResult string, err error) *moqUsual_Variadic_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			sResult string
			err     error
		}
		sequence   uint32
		doFn       moqUsual_Variadic_doFn
		doReturnFn moqUsual_Variadic_doReturnFn
	}{
		values: &struct {
			sResult string
			err     error
		}{
			sResult: sResult,
			err:     err,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqUsual_Variadic_fnRecorder) andDo(fn moqUsual_Variadic_doFn) *moqUsual_Variadic_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqUsual_Variadic_fnRecorder) doReturnResults(fn moqUsual_Variadic_doReturnFn) *moqUsual_Variadic_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			sResult string
			err     error
		}
		sequence   uint32
		doFn       moqUsual_Variadic_doFn
		doReturnFn moqUsual_Variadic_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqUsual_Variadic_fnRecorder) findResults() {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqUsual_Variadic_resultsByParams
	for n, res := range r.moq.resultsByParams_Variadic {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqUsual_Variadic_resultsByParams{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqUsual_Variadic_paramsKey]*moqUsual_Variadic_results{},
		}
		r.moq.resultsByParams_Variadic = append(r.moq.resultsByParams_Variadic, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams_Variadic) {
			copy(r.moq.resultsByParams_Variadic[insertAt+1:], r.moq.resultsByParams_Variadic[insertAt:0])
			r.moq.resultsByParams_Variadic[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey_Variadic(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqUsual_Variadic_results{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqUsual_Variadic_fnRecorder) repeat(repeaters ...moq.Repeater) *moqUsual_Variadic_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values *struct {
					sResult string
					err     error
				}
				sequence   uint32
				doFn       moqUsual_Variadic_doFn
				doReturnFn moqUsual_Variadic_doReturnFn
			}{
				values:   last.values,
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqUsual) prettyParams_Variadic(params moqUsual_Variadic_params) string {
	return fmt.Sprintf("Variadic(%#v, %#v)", params.other, params.args)
}

func (m *moqUsual) paramsKey_Variadic(params moqUsual_Variadic_params, anyParams uint64) moqUsual_Variadic_paramsKey {
	m.scene.T.Helper()
	var otherUsed bool
	var otherUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.Variadic.other == moq.ParamIndexByValue {
			otherUsed = params.other
		} else {
			otherUsedHash = hash.DeepHash(params.other)
		}
	}
	var argsUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.runtime.parameterIndexing.Variadic.args == moq.ParamIndexByValue {
			m.scene.T.Fatalf("The args parameter of the Variadic function can't be indexed by value")
		}
		argsUsedHash = hash.DeepHash(params.args)
	}
	return moqUsual_Variadic_paramsKey{
		params: struct{ other bool }{
			other: otherUsed,
		},
		hashes: struct {
			other hash.Hash
			args  hash.Hash
		}{
			other: otherUsedHash,
			args:  argsUsedHash,
		},
	}
}

func (m *moqUsual_recorder) RepeatedIds(sParam1, sParam2 string, bParam bool) *moqUsual_RepeatedIds_fnRecorder {
	return &moqUsual_RepeatedIds_fnRecorder{
		params: moqUsual_RepeatedIds_params{
			sParam1: sParam1,
			sParam2: sParam2,
			bParam:  bParam,
		},
		sequence: m.moq.config.Sequence == moq.SeqDefaultOn,
		moq:      m.moq,
	}
}

func (r *moqUsual_RepeatedIds_fnRecorder) any() *moqUsual_RepeatedIds_anyParams {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_RepeatedIds(r.params))
		return nil
	}
	return &moqUsual_RepeatedIds_anyParams{recorder: r}
}

func (a *moqUsual_RepeatedIds_anyParams) sParam1() *moqUsual_RepeatedIds_fnRecorder {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (a *moqUsual_RepeatedIds_anyParams) sParam2() *moqUsual_RepeatedIds_fnRecorder {
	a.recorder.anyParams |= 1 << 1
	return a.recorder
}

func (a *moqUsual_RepeatedIds_anyParams) bParam() *moqUsual_RepeatedIds_fnRecorder {
	a.recorder.anyParams |= 1 << 2
	return a.recorder
}

func (r *moqUsual_RepeatedIds_fnRecorder) seq() *moqUsual_RepeatedIds_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_RepeatedIds(r.params))
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqUsual_RepeatedIds_fnRecorder) noSeq() *moqUsual_RepeatedIds_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_RepeatedIds(r.params))
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqUsual_RepeatedIds_fnRecorder) returnResults(sResult1, sResult2 string, err error) *moqUsual_RepeatedIds_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			sResult1, sResult2 string
			err                error
		}
		sequence   uint32
		doFn       moqUsual_RepeatedIds_doFn
		doReturnFn moqUsual_RepeatedIds_doReturnFn
	}{
		values: &struct {
			sResult1, sResult2 string
			err                error
		}{
			sResult1: sResult1,
			sResult2: sResult2,
			err:      err,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqUsual_RepeatedIds_fnRecorder) andDo(fn moqUsual_RepeatedIds_doFn) *moqUsual_RepeatedIds_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqUsual_RepeatedIds_fnRecorder) doReturnResults(fn moqUsual_RepeatedIds_doReturnFn) *moqUsual_RepeatedIds_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			sResult1, sResult2 string
			err                error
		}
		sequence   uint32
		doFn       moqUsual_RepeatedIds_doFn
		doReturnFn moqUsual_RepeatedIds_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqUsual_RepeatedIds_fnRecorder) findResults() {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqUsual_RepeatedIds_resultsByParams
	for n, res := range r.moq.resultsByParams_RepeatedIds {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqUsual_RepeatedIds_resultsByParams{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqUsual_RepeatedIds_paramsKey]*moqUsual_RepeatedIds_results{},
		}
		r.moq.resultsByParams_RepeatedIds = append(r.moq.resultsByParams_RepeatedIds, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams_RepeatedIds) {
			copy(r.moq.resultsByParams_RepeatedIds[insertAt+1:], r.moq.resultsByParams_RepeatedIds[insertAt:0])
			r.moq.resultsByParams_RepeatedIds[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey_RepeatedIds(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqUsual_RepeatedIds_results{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqUsual_RepeatedIds_fnRecorder) repeat(repeaters ...moq.Repeater) *moqUsual_RepeatedIds_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values *struct {
					sResult1, sResult2 string
					err                error
				}
				sequence   uint32
				doFn       moqUsual_RepeatedIds_doFn
				doReturnFn moqUsual_RepeatedIds_doReturnFn
			}{
				values:   last.values,
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqUsual) prettyParams_RepeatedIds(params moqUsual_RepeatedIds_params) string {
	return fmt.Sprintf("RepeatedIds(%#v, %#v, %#v)", params.sParam1, params.sParam2, params.bParam)
}

func (m *moqUsual) paramsKey_RepeatedIds(params moqUsual_RepeatedIds_params, anyParams uint64) moqUsual_RepeatedIds_paramsKey {
	m.scene.T.Helper()
	var sParam1Used string
	var sParam1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.RepeatedIds.sParam1 == moq.ParamIndexByValue {
			sParam1Used = params.sParam1
		} else {
			sParam1UsedHash = hash.DeepHash(params.sParam1)
		}
	}
	var sParam2Used string
	var sParam2UsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.runtime.parameterIndexing.RepeatedIds.sParam2 == moq.ParamIndexByValue {
			sParam2Used = params.sParam2
		} else {
			sParam2UsedHash = hash.DeepHash(params.sParam2)
		}
	}
	var bParamUsed bool
	var bParamUsedHash hash.Hash
	if anyParams&(1<<2) == 0 {
		if m.runtime.parameterIndexing.RepeatedIds.bParam == moq.ParamIndexByValue {
			bParamUsed = params.bParam
		} else {
			bParamUsedHash = hash.DeepHash(params.bParam)
		}
	}
	return moqUsual_RepeatedIds_paramsKey{
		params: struct {
			sParam1, sParam2 string
			bParam           bool
		}{
			sParam1: sParam1Used,
			sParam2: sParam2Used,
			bParam:  bParamUsed,
		},
		hashes: struct {
			sParam1, sParam2 hash.Hash
			bParam           hash.Hash
		}{
			sParam1: sParam1UsedHash,
			sParam2: sParam2UsedHash,
			bParam:  bParamUsedHash,
		},
	}
}

func (m *moqUsual_recorder) Times(sParam string, times bool) *moqUsual_Times_fnRecorder {
	return &moqUsual_Times_fnRecorder{
		params: moqUsual_Times_params{
			sParam: sParam,
			times:  times,
		},
		sequence: m.moq.config.Sequence == moq.SeqDefaultOn,
		moq:      m.moq,
	}
}

func (r *moqUsual_Times_fnRecorder) any() *moqUsual_Times_anyParams {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_Times(r.params))
		return nil
	}
	return &moqUsual_Times_anyParams{recorder: r}
}

func (a *moqUsual_Times_anyParams) sParam() *moqUsual_Times_fnRecorder {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (a *moqUsual_Times_anyParams) times() *moqUsual_Times_fnRecorder {
	a.recorder.anyParams |= 1 << 1
	return a.recorder
}

func (r *moqUsual_Times_fnRecorder) seq() *moqUsual_Times_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_Times(r.params))
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqUsual_Times_fnRecorder) noSeq() *moqUsual_Times_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_Times(r.params))
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqUsual_Times_fnRecorder) returnResults(sResult string, err error) *moqUsual_Times_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			sResult string
			err     error
		}
		sequence   uint32
		doFn       moqUsual_Times_doFn
		doReturnFn moqUsual_Times_doReturnFn
	}{
		values: &struct {
			sResult string
			err     error
		}{
			sResult: sResult,
			err:     err,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqUsual_Times_fnRecorder) andDo(fn moqUsual_Times_doFn) *moqUsual_Times_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqUsual_Times_fnRecorder) doReturnResults(fn moqUsual_Times_doReturnFn) *moqUsual_Times_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			sResult string
			err     error
		}
		sequence   uint32
		doFn       moqUsual_Times_doFn
		doReturnFn moqUsual_Times_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqUsual_Times_fnRecorder) findResults() {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqUsual_Times_resultsByParams
	for n, res := range r.moq.resultsByParams_Times {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqUsual_Times_resultsByParams{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqUsual_Times_paramsKey]*moqUsual_Times_results{},
		}
		r.moq.resultsByParams_Times = append(r.moq.resultsByParams_Times, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams_Times) {
			copy(r.moq.resultsByParams_Times[insertAt+1:], r.moq.resultsByParams_Times[insertAt:0])
			r.moq.resultsByParams_Times[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey_Times(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqUsual_Times_results{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqUsual_Times_fnRecorder) repeat(repeaters ...moq.Repeater) *moqUsual_Times_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values *struct {
					sResult string
					err     error
				}
				sequence   uint32
				doFn       moqUsual_Times_doFn
				doReturnFn moqUsual_Times_doReturnFn
			}{
				values:   last.values,
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqUsual) prettyParams_Times(params moqUsual_Times_params) string {
	return fmt.Sprintf("Times(%#v, %#v)", params.sParam, params.times)
}

func (m *moqUsual) paramsKey_Times(params moqUsual_Times_params, anyParams uint64) moqUsual_Times_paramsKey {
	m.scene.T.Helper()
	var sParamUsed string
	var sParamUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.Times.sParam == moq.ParamIndexByValue {
			sParamUsed = params.sParam
		} else {
			sParamUsedHash = hash.DeepHash(params.sParam)
		}
	}
	var timesUsed bool
	var timesUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.runtime.parameterIndexing.Times.times == moq.ParamIndexByValue {
			timesUsed = params.times
		} else {
			timesUsedHash = hash.DeepHash(params.times)
		}
	}
	return moqUsual_Times_paramsKey{
		params: struct {
			sParam string
			times  bool
		}{
			sParam: sParamUsed,
			times:  timesUsed,
		},
		hashes: struct {
			sParam hash.Hash
			times  hash.Hash
		}{
			sParam: sParamUsedHash,
			times:  timesUsedHash,
		},
	}
}

func (m *moqUsual_recorder) DifficultParamNames(param1, param2 bool, param3 string, param, param5, param6 int, param7, param8, param9 float32) *moqUsual_DifficultParamNames_fnRecorder {
	return &moqUsual_DifficultParamNames_fnRecorder{
		params: moqUsual_DifficultParamNames_params{
			param1: param1,
			param2: param2,
			param3: param3,
			param:  param,
			param5: param5,
			param6: param6,
			param7: param7,
			param8: param8,
			param9: param9,
		},
		sequence: m.moq.config.Sequence == moq.SeqDefaultOn,
		moq:      m.moq,
	}
}

func (r *moqUsual_DifficultParamNames_fnRecorder) any() *moqUsual_DifficultParamNames_anyParams {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_DifficultParamNames(r.params))
		return nil
	}
	return &moqUsual_DifficultParamNames_anyParams{recorder: r}
}

func (a *moqUsual_DifficultParamNames_anyParams) param1() *moqUsual_DifficultParamNames_fnRecorder {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (a *moqUsual_DifficultParamNames_anyParams) param2() *moqUsual_DifficultParamNames_fnRecorder {
	a.recorder.anyParams |= 1 << 1
	return a.recorder
}

func (a *moqUsual_DifficultParamNames_anyParams) param3() *moqUsual_DifficultParamNames_fnRecorder {
	a.recorder.anyParams |= 1 << 2
	return a.recorder
}

func (a *moqUsual_DifficultParamNames_anyParams) param() *moqUsual_DifficultParamNames_fnRecorder {
	a.recorder.anyParams |= 1 << 3
	return a.recorder
}

func (a *moqUsual_DifficultParamNames_anyParams) param5() *moqUsual_DifficultParamNames_fnRecorder {
	a.recorder.anyParams |= 1 << 4
	return a.recorder
}

func (a *moqUsual_DifficultParamNames_anyParams) param6() *moqUsual_DifficultParamNames_fnRecorder {
	a.recorder.anyParams |= 1 << 5
	return a.recorder
}

func (a *moqUsual_DifficultParamNames_anyParams) param7() *moqUsual_DifficultParamNames_fnRecorder {
	a.recorder.anyParams |= 1 << 6
	return a.recorder
}

func (a *moqUsual_DifficultParamNames_anyParams) param8() *moqUsual_DifficultParamNames_fnRecorder {
	a.recorder.anyParams |= 1 << 7
	return a.recorder
}

func (a *moqUsual_DifficultParamNames_anyParams) param9() *moqUsual_DifficultParamNames_fnRecorder {
	a.recorder.anyParams |= 1 << 8
	return a.recorder
}

func (r *moqUsual_DifficultParamNames_fnRecorder) seq() *moqUsual_DifficultParamNames_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_DifficultParamNames(r.params))
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqUsual_DifficultParamNames_fnRecorder) noSeq() *moqUsual_DifficultParamNames_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_DifficultParamNames(r.params))
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqUsual_DifficultParamNames_fnRecorder) returnResults() *moqUsual_DifficultParamNames_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values     *struct{}
		sequence   uint32
		doFn       moqUsual_DifficultParamNames_doFn
		doReturnFn moqUsual_DifficultParamNames_doReturnFn
	}{
		values:   &struct{}{},
		sequence: sequence,
	})
	return r
}

func (r *moqUsual_DifficultParamNames_fnRecorder) andDo(fn moqUsual_DifficultParamNames_doFn) *moqUsual_DifficultParamNames_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqUsual_DifficultParamNames_fnRecorder) doReturnResults(fn moqUsual_DifficultParamNames_doReturnFn) *moqUsual_DifficultParamNames_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values     *struct{}
		sequence   uint32
		doFn       moqUsual_DifficultParamNames_doFn
		doReturnFn moqUsual_DifficultParamNames_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqUsual_DifficultParamNames_fnRecorder) findResults() {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqUsual_DifficultParamNames_resultsByParams
	for n, res := range r.moq.resultsByParams_DifficultParamNames {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqUsual_DifficultParamNames_resultsByParams{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqUsual_DifficultParamNames_paramsKey]*moqUsual_DifficultParamNames_results{},
		}
		r.moq.resultsByParams_DifficultParamNames = append(r.moq.resultsByParams_DifficultParamNames, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams_DifficultParamNames) {
			copy(r.moq.resultsByParams_DifficultParamNames[insertAt+1:], r.moq.resultsByParams_DifficultParamNames[insertAt:0])
			r.moq.resultsByParams_DifficultParamNames[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey_DifficultParamNames(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqUsual_DifficultParamNames_results{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqUsual_DifficultParamNames_fnRecorder) repeat(repeaters ...moq.Repeater) *moqUsual_DifficultParamNames_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values     *struct{}
				sequence   uint32
				doFn       moqUsual_DifficultParamNames_doFn
				doReturnFn moqUsual_DifficultParamNames_doReturnFn
			}{
				values:   last.values,
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqUsual) prettyParams_DifficultParamNames(params moqUsual_DifficultParamNames_params) string {
	return fmt.Sprintf("DifficultParamNames(%#v, %#v, %#v, %#v, %#v, %#v, %#v, %#v, %#v)", params.param1, params.param2, params.param3, params.param, params.param5, params.param6, params.param7, params.param8, params.param9)
}

func (m *moqUsual) paramsKey_DifficultParamNames(params moqUsual_DifficultParamNames_params, anyParams uint64) moqUsual_DifficultParamNames_paramsKey {
	m.scene.T.Helper()
	var param1Used bool
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.DifficultParamNames.param1 == moq.ParamIndexByValue {
			param1Used = params.param1
		} else {
			param1UsedHash = hash.DeepHash(params.param1)
		}
	}
	var param2Used bool
	var param2UsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.runtime.parameterIndexing.DifficultParamNames.param2 == moq.ParamIndexByValue {
			param2Used = params.param2
		} else {
			param2UsedHash = hash.DeepHash(params.param2)
		}
	}
	var param3Used string
	var param3UsedHash hash.Hash
	if anyParams&(1<<2) == 0 {
		if m.runtime.parameterIndexing.DifficultParamNames.param3 == moq.ParamIndexByValue {
			param3Used = params.param3
		} else {
			param3UsedHash = hash.DeepHash(params.param3)
		}
	}
	var paramUsed int
	var paramUsedHash hash.Hash
	if anyParams&(1<<3) == 0 {
		if m.runtime.parameterIndexing.DifficultParamNames.param == moq.ParamIndexByValue {
			paramUsed = params.param
		} else {
			paramUsedHash = hash.DeepHash(params.param)
		}
	}
	var param5Used int
	var param5UsedHash hash.Hash
	if anyParams&(1<<4) == 0 {
		if m.runtime.parameterIndexing.DifficultParamNames.param5 == moq.ParamIndexByValue {
			param5Used = params.param5
		} else {
			param5UsedHash = hash.DeepHash(params.param5)
		}
	}
	var param6Used int
	var param6UsedHash hash.Hash
	if anyParams&(1<<5) == 0 {
		if m.runtime.parameterIndexing.DifficultParamNames.param6 == moq.ParamIndexByValue {
			param6Used = params.param6
		} else {
			param6UsedHash = hash.DeepHash(params.param6)
		}
	}
	var param7Used float32
	var param7UsedHash hash.Hash
	if anyParams&(1<<6) == 0 {
		if m.runtime.parameterIndexing.DifficultParamNames.param7 == moq.ParamIndexByValue {
			param7Used = params.param7
		} else {
			param7UsedHash = hash.DeepHash(params.param7)
		}
	}
	var param8Used float32
	var param8UsedHash hash.Hash
	if anyParams&(1<<7) == 0 {
		if m.runtime.parameterIndexing.DifficultParamNames.param8 == moq.ParamIndexByValue {
			param8Used = params.param8
		} else {
			param8UsedHash = hash.DeepHash(params.param8)
		}
	}
	var param9Used float32
	var param9UsedHash hash.Hash
	if anyParams&(1<<8) == 0 {
		if m.runtime.parameterIndexing.DifficultParamNames.param9 == moq.ParamIndexByValue {
			param9Used = params.param9
		} else {
			param9UsedHash = hash.DeepHash(params.param9)
		}
	}
	return moqUsual_DifficultParamNames_paramsKey{
		params: struct {
			param1, param2         bool
			param3                 string
			param, param5, param6  int
			param7, param8, param9 float32
		}{
			param1: param1Used,
			param2: param2Used,
			param3: param3Used,
			param:  paramUsed,
			param5: param5Used,
			param6: param6Used,
			param7: param7Used,
			param8: param8Used,
			param9: param9Used,
		},
		hashes: struct {
			param1, param2         hash.Hash
			param3                 hash.Hash
			param, param5, param6  hash.Hash
			param7, param8, param9 hash.Hash
		}{
			param1: param1UsedHash,
			param2: param2UsedHash,
			param3: param3UsedHash,
			param:  paramUsedHash,
			param5: param5UsedHash,
			param6: param6UsedHash,
			param7: param7UsedHash,
			param8: param8UsedHash,
			param9: param9UsedHash,
		},
	}
}

func (m *moqUsual_recorder) DifficultResultNames() *moqUsual_DifficultResultNames_fnRecorder {
	return &moqUsual_DifficultResultNames_fnRecorder{
		params:   moqUsual_DifficultResultNames_params{},
		sequence: m.moq.config.Sequence == moq.SeqDefaultOn,
		moq:      m.moq,
	}
}

func (r *moqUsual_DifficultResultNames_fnRecorder) any() *moqUsual_DifficultResultNames_anyParams {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_DifficultResultNames(r.params))
		return nil
	}
	return &moqUsual_DifficultResultNames_anyParams{recorder: r}
}

func (r *moqUsual_DifficultResultNames_fnRecorder) seq() *moqUsual_DifficultResultNames_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_DifficultResultNames(r.params))
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqUsual_DifficultResultNames_fnRecorder) noSeq() *moqUsual_DifficultResultNames_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_DifficultResultNames(r.params))
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqUsual_DifficultResultNames_fnRecorder) returnResults(result1, result2 string, result3 error, param, result5, result6 int, result7, result8, result9 float32) *moqUsual_DifficultResultNames_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1, result2          string
			result3                   error
			param, result5, result6   int
			result7, result8, result9 float32
		}
		sequence   uint32
		doFn       moqUsual_DifficultResultNames_doFn
		doReturnFn moqUsual_DifficultResultNames_doReturnFn
	}{
		values: &struct {
			result1, result2          string
			result3                   error
			param, result5, result6   int
			result7, result8, result9 float32
		}{
			result1: result1,
			result2: result2,
			result3: result3,
			param:   param,
			result5: result5,
			result6: result6,
			result7: result7,
			result8: result8,
			result9: result9,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqUsual_DifficultResultNames_fnRecorder) andDo(fn moqUsual_DifficultResultNames_doFn) *moqUsual_DifficultResultNames_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqUsual_DifficultResultNames_fnRecorder) doReturnResults(fn moqUsual_DifficultResultNames_doReturnFn) *moqUsual_DifficultResultNames_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1, result2          string
			result3                   error
			param, result5, result6   int
			result7, result8, result9 float32
		}
		sequence   uint32
		doFn       moqUsual_DifficultResultNames_doFn
		doReturnFn moqUsual_DifficultResultNames_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqUsual_DifficultResultNames_fnRecorder) findResults() {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqUsual_DifficultResultNames_resultsByParams
	for n, res := range r.moq.resultsByParams_DifficultResultNames {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqUsual_DifficultResultNames_resultsByParams{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqUsual_DifficultResultNames_paramsKey]*moqUsual_DifficultResultNames_results{},
		}
		r.moq.resultsByParams_DifficultResultNames = append(r.moq.resultsByParams_DifficultResultNames, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams_DifficultResultNames) {
			copy(r.moq.resultsByParams_DifficultResultNames[insertAt+1:], r.moq.resultsByParams_DifficultResultNames[insertAt:0])
			r.moq.resultsByParams_DifficultResultNames[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey_DifficultResultNames(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqUsual_DifficultResultNames_results{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqUsual_DifficultResultNames_fnRecorder) repeat(repeaters ...moq.Repeater) *moqUsual_DifficultResultNames_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values *struct {
					result1, result2          string
					result3                   error
					param, result5, result6   int
					result7, result8, result9 float32
				}
				sequence   uint32
				doFn       moqUsual_DifficultResultNames_doFn
				doReturnFn moqUsual_DifficultResultNames_doReturnFn
			}{
				values:   last.values,
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqUsual) prettyParams_DifficultResultNames(params moqUsual_DifficultResultNames_params) string {
	return fmt.Sprintf("DifficultResultNames()")
}

func (m *moqUsual) paramsKey_DifficultResultNames(params moqUsual_DifficultResultNames_params, anyParams uint64) moqUsual_DifficultResultNames_paramsKey {
	m.scene.T.Helper()
	return moqUsual_DifficultResultNames_paramsKey{
		params: struct{}{},
		hashes: struct{}{},
	}
}

func (m *moqUsual_recorder) PassByArray(p [3]testmoqs.Params) *moqUsual_PassByArray_fnRecorder {
	return &moqUsual_PassByArray_fnRecorder{
		params: moqUsual_PassByArray_params{
			p: p,
		},
		sequence: m.moq.config.Sequence == moq.SeqDefaultOn,
		moq:      m.moq,
	}
}

func (r *moqUsual_PassByArray_fnRecorder) any() *moqUsual_PassByArray_anyParams {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_PassByArray(r.params))
		return nil
	}
	return &moqUsual_PassByArray_anyParams{recorder: r}
}

func (a *moqUsual_PassByArray_anyParams) p() *moqUsual_PassByArray_fnRecorder {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (r *moqUsual_PassByArray_fnRecorder) seq() *moqUsual_PassByArray_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_PassByArray(r.params))
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqUsual_PassByArray_fnRecorder) noSeq() *moqUsual_PassByArray_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_PassByArray(r.params))
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqUsual_PassByArray_fnRecorder) returnResults(result1 [3]testmoqs.Results) *moqUsual_PassByArray_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 [3]testmoqs.Results
		}
		sequence   uint32
		doFn       moqUsual_PassByArray_doFn
		doReturnFn moqUsual_PassByArray_doReturnFn
	}{
		values: &struct {
			result1 [3]testmoqs.Results
		}{
			result1: result1,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqUsual_PassByArray_fnRecorder) andDo(fn moqUsual_PassByArray_doFn) *moqUsual_PassByArray_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqUsual_PassByArray_fnRecorder) doReturnResults(fn moqUsual_PassByArray_doReturnFn) *moqUsual_PassByArray_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 [3]testmoqs.Results
		}
		sequence   uint32
		doFn       moqUsual_PassByArray_doFn
		doReturnFn moqUsual_PassByArray_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqUsual_PassByArray_fnRecorder) findResults() {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqUsual_PassByArray_resultsByParams
	for n, res := range r.moq.resultsByParams_PassByArray {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqUsual_PassByArray_resultsByParams{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqUsual_PassByArray_paramsKey]*moqUsual_PassByArray_results{},
		}
		r.moq.resultsByParams_PassByArray = append(r.moq.resultsByParams_PassByArray, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams_PassByArray) {
			copy(r.moq.resultsByParams_PassByArray[insertAt+1:], r.moq.resultsByParams_PassByArray[insertAt:0])
			r.moq.resultsByParams_PassByArray[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey_PassByArray(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqUsual_PassByArray_results{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqUsual_PassByArray_fnRecorder) repeat(repeaters ...moq.Repeater) *moqUsual_PassByArray_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values *struct {
					result1 [3]testmoqs.Results
				}
				sequence   uint32
				doFn       moqUsual_PassByArray_doFn
				doReturnFn moqUsual_PassByArray_doReturnFn
			}{
				values:   last.values,
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqUsual) prettyParams_PassByArray(params moqUsual_PassByArray_params) string {
	return fmt.Sprintf("PassByArray(%#v)", params.p)
}

func (m *moqUsual) paramsKey_PassByArray(params moqUsual_PassByArray_params, anyParams uint64) moqUsual_PassByArray_paramsKey {
	m.scene.T.Helper()
	var pUsed [3]testmoqs.Params
	var pUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.PassByArray.p == moq.ParamIndexByValue {
			pUsed = params.p
		} else {
			pUsedHash = hash.DeepHash(params.p)
		}
	}
	return moqUsual_PassByArray_paramsKey{
		params: struct{ p [3]testmoqs.Params }{
			p: pUsed,
		},
		hashes: struct{ p hash.Hash }{
			p: pUsedHash,
		},
	}
}

func (m *moqUsual_recorder) PassByChan(p chan testmoqs.Params) *moqUsual_PassByChan_fnRecorder {
	return &moqUsual_PassByChan_fnRecorder{
		params: moqUsual_PassByChan_params{
			p: p,
		},
		sequence: m.moq.config.Sequence == moq.SeqDefaultOn,
		moq:      m.moq,
	}
}

func (r *moqUsual_PassByChan_fnRecorder) any() *moqUsual_PassByChan_anyParams {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_PassByChan(r.params))
		return nil
	}
	return &moqUsual_PassByChan_anyParams{recorder: r}
}

func (a *moqUsual_PassByChan_anyParams) p() *moqUsual_PassByChan_fnRecorder {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (r *moqUsual_PassByChan_fnRecorder) seq() *moqUsual_PassByChan_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_PassByChan(r.params))
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqUsual_PassByChan_fnRecorder) noSeq() *moqUsual_PassByChan_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_PassByChan(r.params))
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqUsual_PassByChan_fnRecorder) returnResults(result1 chan testmoqs.Results) *moqUsual_PassByChan_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 chan testmoqs.Results
		}
		sequence   uint32
		doFn       moqUsual_PassByChan_doFn
		doReturnFn moqUsual_PassByChan_doReturnFn
	}{
		values: &struct {
			result1 chan testmoqs.Results
		}{
			result1: result1,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqUsual_PassByChan_fnRecorder) andDo(fn moqUsual_PassByChan_doFn) *moqUsual_PassByChan_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqUsual_PassByChan_fnRecorder) doReturnResults(fn moqUsual_PassByChan_doReturnFn) *moqUsual_PassByChan_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 chan testmoqs.Results
		}
		sequence   uint32
		doFn       moqUsual_PassByChan_doFn
		doReturnFn moqUsual_PassByChan_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqUsual_PassByChan_fnRecorder) findResults() {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqUsual_PassByChan_resultsByParams
	for n, res := range r.moq.resultsByParams_PassByChan {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqUsual_PassByChan_resultsByParams{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqUsual_PassByChan_paramsKey]*moqUsual_PassByChan_results{},
		}
		r.moq.resultsByParams_PassByChan = append(r.moq.resultsByParams_PassByChan, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams_PassByChan) {
			copy(r.moq.resultsByParams_PassByChan[insertAt+1:], r.moq.resultsByParams_PassByChan[insertAt:0])
			r.moq.resultsByParams_PassByChan[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey_PassByChan(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqUsual_PassByChan_results{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqUsual_PassByChan_fnRecorder) repeat(repeaters ...moq.Repeater) *moqUsual_PassByChan_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values *struct {
					result1 chan testmoqs.Results
				}
				sequence   uint32
				doFn       moqUsual_PassByChan_doFn
				doReturnFn moqUsual_PassByChan_doReturnFn
			}{
				values:   last.values,
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqUsual) prettyParams_PassByChan(params moqUsual_PassByChan_params) string {
	return fmt.Sprintf("PassByChan(%#v)", params.p)
}

func (m *moqUsual) paramsKey_PassByChan(params moqUsual_PassByChan_params, anyParams uint64) moqUsual_PassByChan_paramsKey {
	m.scene.T.Helper()
	var pUsed chan testmoqs.Params
	var pUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.PassByChan.p == moq.ParamIndexByValue {
			pUsed = params.p
		} else {
			pUsedHash = hash.DeepHash(params.p)
		}
	}
	return moqUsual_PassByChan_paramsKey{
		params: struct{ p chan testmoqs.Params }{
			p: pUsed,
		},
		hashes: struct{ p hash.Hash }{
			p: pUsedHash,
		},
	}
}

func (m *moqUsual_recorder) PassByEllipsis(p ...testmoqs.Params) *moqUsual_PassByEllipsis_fnRecorder {
	return &moqUsual_PassByEllipsis_fnRecorder{
		params: moqUsual_PassByEllipsis_params{
			p: p,
		},
		sequence: m.moq.config.Sequence == moq.SeqDefaultOn,
		moq:      m.moq,
	}
}

func (r *moqUsual_PassByEllipsis_fnRecorder) any() *moqUsual_PassByEllipsis_anyParams {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_PassByEllipsis(r.params))
		return nil
	}
	return &moqUsual_PassByEllipsis_anyParams{recorder: r}
}

func (a *moqUsual_PassByEllipsis_anyParams) p() *moqUsual_PassByEllipsis_fnRecorder {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (r *moqUsual_PassByEllipsis_fnRecorder) seq() *moqUsual_PassByEllipsis_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_PassByEllipsis(r.params))
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqUsual_PassByEllipsis_fnRecorder) noSeq() *moqUsual_PassByEllipsis_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_PassByEllipsis(r.params))
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqUsual_PassByEllipsis_fnRecorder) returnResults(result1 string, result2 error) *moqUsual_PassByEllipsis_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 string
			result2 error
		}
		sequence   uint32
		doFn       moqUsual_PassByEllipsis_doFn
		doReturnFn moqUsual_PassByEllipsis_doReturnFn
	}{
		values: &struct {
			result1 string
			result2 error
		}{
			result1: result1,
			result2: result2,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqUsual_PassByEllipsis_fnRecorder) andDo(fn moqUsual_PassByEllipsis_doFn) *moqUsual_PassByEllipsis_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqUsual_PassByEllipsis_fnRecorder) doReturnResults(fn moqUsual_PassByEllipsis_doReturnFn) *moqUsual_PassByEllipsis_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 string
			result2 error
		}
		sequence   uint32
		doFn       moqUsual_PassByEllipsis_doFn
		doReturnFn moqUsual_PassByEllipsis_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqUsual_PassByEllipsis_fnRecorder) findResults() {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqUsual_PassByEllipsis_resultsByParams
	for n, res := range r.moq.resultsByParams_PassByEllipsis {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqUsual_PassByEllipsis_resultsByParams{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqUsual_PassByEllipsis_paramsKey]*moqUsual_PassByEllipsis_results{},
		}
		r.moq.resultsByParams_PassByEllipsis = append(r.moq.resultsByParams_PassByEllipsis, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams_PassByEllipsis) {
			copy(r.moq.resultsByParams_PassByEllipsis[insertAt+1:], r.moq.resultsByParams_PassByEllipsis[insertAt:0])
			r.moq.resultsByParams_PassByEllipsis[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey_PassByEllipsis(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqUsual_PassByEllipsis_results{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqUsual_PassByEllipsis_fnRecorder) repeat(repeaters ...moq.Repeater) *moqUsual_PassByEllipsis_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values *struct {
					result1 string
					result2 error
				}
				sequence   uint32
				doFn       moqUsual_PassByEllipsis_doFn
				doReturnFn moqUsual_PassByEllipsis_doReturnFn
			}{
				values:   last.values,
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqUsual) prettyParams_PassByEllipsis(params moqUsual_PassByEllipsis_params) string {
	return fmt.Sprintf("PassByEllipsis(%#v)", params.p)
}

func (m *moqUsual) paramsKey_PassByEllipsis(params moqUsual_PassByEllipsis_params, anyParams uint64) moqUsual_PassByEllipsis_paramsKey {
	m.scene.T.Helper()
	var pUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.PassByEllipsis.p == moq.ParamIndexByValue {
			m.scene.T.Fatalf("The p parameter of the PassByEllipsis function can't be indexed by value")
		}
		pUsedHash = hash.DeepHash(params.p)
	}
	return moqUsual_PassByEllipsis_paramsKey{
		params: struct{}{},
		hashes: struct{ p hash.Hash }{
			p: pUsedHash,
		},
	}
}

func (m *moqUsual_recorder) PassByMap(p map[string]testmoqs.Params) *moqUsual_PassByMap_fnRecorder {
	return &moqUsual_PassByMap_fnRecorder{
		params: moqUsual_PassByMap_params{
			p: p,
		},
		sequence: m.moq.config.Sequence == moq.SeqDefaultOn,
		moq:      m.moq,
	}
}

func (r *moqUsual_PassByMap_fnRecorder) any() *moqUsual_PassByMap_anyParams {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_PassByMap(r.params))
		return nil
	}
	return &moqUsual_PassByMap_anyParams{recorder: r}
}

func (a *moqUsual_PassByMap_anyParams) p() *moqUsual_PassByMap_fnRecorder {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (r *moqUsual_PassByMap_fnRecorder) seq() *moqUsual_PassByMap_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_PassByMap(r.params))
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqUsual_PassByMap_fnRecorder) noSeq() *moqUsual_PassByMap_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_PassByMap(r.params))
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqUsual_PassByMap_fnRecorder) returnResults(result1 map[string]testmoqs.Results) *moqUsual_PassByMap_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 map[string]testmoqs.Results
		}
		sequence   uint32
		doFn       moqUsual_PassByMap_doFn
		doReturnFn moqUsual_PassByMap_doReturnFn
	}{
		values: &struct {
			result1 map[string]testmoqs.Results
		}{
			result1: result1,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqUsual_PassByMap_fnRecorder) andDo(fn moqUsual_PassByMap_doFn) *moqUsual_PassByMap_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqUsual_PassByMap_fnRecorder) doReturnResults(fn moqUsual_PassByMap_doReturnFn) *moqUsual_PassByMap_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 map[string]testmoqs.Results
		}
		sequence   uint32
		doFn       moqUsual_PassByMap_doFn
		doReturnFn moqUsual_PassByMap_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqUsual_PassByMap_fnRecorder) findResults() {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqUsual_PassByMap_resultsByParams
	for n, res := range r.moq.resultsByParams_PassByMap {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqUsual_PassByMap_resultsByParams{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqUsual_PassByMap_paramsKey]*moqUsual_PassByMap_results{},
		}
		r.moq.resultsByParams_PassByMap = append(r.moq.resultsByParams_PassByMap, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams_PassByMap) {
			copy(r.moq.resultsByParams_PassByMap[insertAt+1:], r.moq.resultsByParams_PassByMap[insertAt:0])
			r.moq.resultsByParams_PassByMap[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey_PassByMap(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqUsual_PassByMap_results{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqUsual_PassByMap_fnRecorder) repeat(repeaters ...moq.Repeater) *moqUsual_PassByMap_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values *struct {
					result1 map[string]testmoqs.Results
				}
				sequence   uint32
				doFn       moqUsual_PassByMap_doFn
				doReturnFn moqUsual_PassByMap_doReturnFn
			}{
				values:   last.values,
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqUsual) prettyParams_PassByMap(params moqUsual_PassByMap_params) string {
	return fmt.Sprintf("PassByMap(%#v)", params.p)
}

func (m *moqUsual) paramsKey_PassByMap(params moqUsual_PassByMap_params, anyParams uint64) moqUsual_PassByMap_paramsKey {
	m.scene.T.Helper()
	var pUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.PassByMap.p == moq.ParamIndexByValue {
			m.scene.T.Fatalf("The p parameter of the PassByMap function can't be indexed by value")
		}
		pUsedHash = hash.DeepHash(params.p)
	}
	return moqUsual_PassByMap_paramsKey{
		params: struct{}{},
		hashes: struct{ p hash.Hash }{
			p: pUsedHash,
		},
	}
}

func (m *moqUsual_recorder) PassByReference(p *testmoqs.Params) *moqUsual_PassByReference_fnRecorder {
	return &moqUsual_PassByReference_fnRecorder{
		params: moqUsual_PassByReference_params{
			p: p,
		},
		sequence: m.moq.config.Sequence == moq.SeqDefaultOn,
		moq:      m.moq,
	}
}

func (r *moqUsual_PassByReference_fnRecorder) any() *moqUsual_PassByReference_anyParams {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_PassByReference(r.params))
		return nil
	}
	return &moqUsual_PassByReference_anyParams{recorder: r}
}

func (a *moqUsual_PassByReference_anyParams) p() *moqUsual_PassByReference_fnRecorder {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (r *moqUsual_PassByReference_fnRecorder) seq() *moqUsual_PassByReference_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_PassByReference(r.params))
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqUsual_PassByReference_fnRecorder) noSeq() *moqUsual_PassByReference_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_PassByReference(r.params))
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqUsual_PassByReference_fnRecorder) returnResults(result1 *testmoqs.Results) *moqUsual_PassByReference_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 *testmoqs.Results
		}
		sequence   uint32
		doFn       moqUsual_PassByReference_doFn
		doReturnFn moqUsual_PassByReference_doReturnFn
	}{
		values: &struct {
			result1 *testmoqs.Results
		}{
			result1: result1,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqUsual_PassByReference_fnRecorder) andDo(fn moqUsual_PassByReference_doFn) *moqUsual_PassByReference_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqUsual_PassByReference_fnRecorder) doReturnResults(fn moqUsual_PassByReference_doReturnFn) *moqUsual_PassByReference_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 *testmoqs.Results
		}
		sequence   uint32
		doFn       moqUsual_PassByReference_doFn
		doReturnFn moqUsual_PassByReference_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqUsual_PassByReference_fnRecorder) findResults() {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqUsual_PassByReference_resultsByParams
	for n, res := range r.moq.resultsByParams_PassByReference {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqUsual_PassByReference_resultsByParams{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqUsual_PassByReference_paramsKey]*moqUsual_PassByReference_results{},
		}
		r.moq.resultsByParams_PassByReference = append(r.moq.resultsByParams_PassByReference, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams_PassByReference) {
			copy(r.moq.resultsByParams_PassByReference[insertAt+1:], r.moq.resultsByParams_PassByReference[insertAt:0])
			r.moq.resultsByParams_PassByReference[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey_PassByReference(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqUsual_PassByReference_results{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqUsual_PassByReference_fnRecorder) repeat(repeaters ...moq.Repeater) *moqUsual_PassByReference_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values *struct {
					result1 *testmoqs.Results
				}
				sequence   uint32
				doFn       moqUsual_PassByReference_doFn
				doReturnFn moqUsual_PassByReference_doReturnFn
			}{
				values:   last.values,
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqUsual) prettyParams_PassByReference(params moqUsual_PassByReference_params) string {
	return fmt.Sprintf("PassByReference(%#v)", params.p)
}

func (m *moqUsual) paramsKey_PassByReference(params moqUsual_PassByReference_params, anyParams uint64) moqUsual_PassByReference_paramsKey {
	m.scene.T.Helper()
	var pUsed *testmoqs.Params
	var pUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.PassByReference.p == moq.ParamIndexByValue {
			pUsed = params.p
		} else {
			pUsedHash = hash.DeepHash(params.p)
		}
	}
	return moqUsual_PassByReference_paramsKey{
		params: struct{ p *testmoqs.Params }{
			p: pUsed,
		},
		hashes: struct{ p hash.Hash }{
			p: pUsedHash,
		},
	}
}

func (m *moqUsual_recorder) PassBySlice(p []testmoqs.Params) *moqUsual_PassBySlice_fnRecorder {
	return &moqUsual_PassBySlice_fnRecorder{
		params: moqUsual_PassBySlice_params{
			p: p,
		},
		sequence: m.moq.config.Sequence == moq.SeqDefaultOn,
		moq:      m.moq,
	}
}

func (r *moqUsual_PassBySlice_fnRecorder) any() *moqUsual_PassBySlice_anyParams {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_PassBySlice(r.params))
		return nil
	}
	return &moqUsual_PassBySlice_anyParams{recorder: r}
}

func (a *moqUsual_PassBySlice_anyParams) p() *moqUsual_PassBySlice_fnRecorder {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (r *moqUsual_PassBySlice_fnRecorder) seq() *moqUsual_PassBySlice_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_PassBySlice(r.params))
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqUsual_PassBySlice_fnRecorder) noSeq() *moqUsual_PassBySlice_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_PassBySlice(r.params))
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqUsual_PassBySlice_fnRecorder) returnResults(result1 []testmoqs.Results) *moqUsual_PassBySlice_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 []testmoqs.Results
		}
		sequence   uint32
		doFn       moqUsual_PassBySlice_doFn
		doReturnFn moqUsual_PassBySlice_doReturnFn
	}{
		values: &struct {
			result1 []testmoqs.Results
		}{
			result1: result1,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqUsual_PassBySlice_fnRecorder) andDo(fn moqUsual_PassBySlice_doFn) *moqUsual_PassBySlice_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqUsual_PassBySlice_fnRecorder) doReturnResults(fn moqUsual_PassBySlice_doReturnFn) *moqUsual_PassBySlice_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 []testmoqs.Results
		}
		sequence   uint32
		doFn       moqUsual_PassBySlice_doFn
		doReturnFn moqUsual_PassBySlice_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqUsual_PassBySlice_fnRecorder) findResults() {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqUsual_PassBySlice_resultsByParams
	for n, res := range r.moq.resultsByParams_PassBySlice {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqUsual_PassBySlice_resultsByParams{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqUsual_PassBySlice_paramsKey]*moqUsual_PassBySlice_results{},
		}
		r.moq.resultsByParams_PassBySlice = append(r.moq.resultsByParams_PassBySlice, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams_PassBySlice) {
			copy(r.moq.resultsByParams_PassBySlice[insertAt+1:], r.moq.resultsByParams_PassBySlice[insertAt:0])
			r.moq.resultsByParams_PassBySlice[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey_PassBySlice(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqUsual_PassBySlice_results{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqUsual_PassBySlice_fnRecorder) repeat(repeaters ...moq.Repeater) *moqUsual_PassBySlice_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values *struct {
					result1 []testmoqs.Results
				}
				sequence   uint32
				doFn       moqUsual_PassBySlice_doFn
				doReturnFn moqUsual_PassBySlice_doReturnFn
			}{
				values:   last.values,
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqUsual) prettyParams_PassBySlice(params moqUsual_PassBySlice_params) string {
	return fmt.Sprintf("PassBySlice(%#v)", params.p)
}

func (m *moqUsual) paramsKey_PassBySlice(params moqUsual_PassBySlice_params, anyParams uint64) moqUsual_PassBySlice_paramsKey {
	m.scene.T.Helper()
	var pUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.PassBySlice.p == moq.ParamIndexByValue {
			m.scene.T.Fatalf("The p parameter of the PassBySlice function can't be indexed by value")
		}
		pUsedHash = hash.DeepHash(params.p)
	}
	return moqUsual_PassBySlice_paramsKey{
		params: struct{}{},
		hashes: struct{ p hash.Hash }{
			p: pUsedHash,
		},
	}
}

func (m *moqUsual_recorder) PassByValue(p testmoqs.Params) *moqUsual_PassByValue_fnRecorder {
	return &moqUsual_PassByValue_fnRecorder{
		params: moqUsual_PassByValue_params{
			p: p,
		},
		sequence: m.moq.config.Sequence == moq.SeqDefaultOn,
		moq:      m.moq,
	}
}

func (r *moqUsual_PassByValue_fnRecorder) any() *moqUsual_PassByValue_anyParams {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_PassByValue(r.params))
		return nil
	}
	return &moqUsual_PassByValue_anyParams{recorder: r}
}

func (a *moqUsual_PassByValue_anyParams) p() *moqUsual_PassByValue_fnRecorder {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (r *moqUsual_PassByValue_fnRecorder) seq() *moqUsual_PassByValue_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_PassByValue(r.params))
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqUsual_PassByValue_fnRecorder) noSeq() *moqUsual_PassByValue_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_PassByValue(r.params))
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqUsual_PassByValue_fnRecorder) returnResults(result1 testmoqs.Results) *moqUsual_PassByValue_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 testmoqs.Results
		}
		sequence   uint32
		doFn       moqUsual_PassByValue_doFn
		doReturnFn moqUsual_PassByValue_doReturnFn
	}{
		values: &struct {
			result1 testmoqs.Results
		}{
			result1: result1,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqUsual_PassByValue_fnRecorder) andDo(fn moqUsual_PassByValue_doFn) *moqUsual_PassByValue_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqUsual_PassByValue_fnRecorder) doReturnResults(fn moqUsual_PassByValue_doReturnFn) *moqUsual_PassByValue_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 testmoqs.Results
		}
		sequence   uint32
		doFn       moqUsual_PassByValue_doFn
		doReturnFn moqUsual_PassByValue_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqUsual_PassByValue_fnRecorder) findResults() {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqUsual_PassByValue_resultsByParams
	for n, res := range r.moq.resultsByParams_PassByValue {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqUsual_PassByValue_resultsByParams{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqUsual_PassByValue_paramsKey]*moqUsual_PassByValue_results{},
		}
		r.moq.resultsByParams_PassByValue = append(r.moq.resultsByParams_PassByValue, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams_PassByValue) {
			copy(r.moq.resultsByParams_PassByValue[insertAt+1:], r.moq.resultsByParams_PassByValue[insertAt:0])
			r.moq.resultsByParams_PassByValue[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey_PassByValue(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqUsual_PassByValue_results{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqUsual_PassByValue_fnRecorder) repeat(repeaters ...moq.Repeater) *moqUsual_PassByValue_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values *struct {
					result1 testmoqs.Results
				}
				sequence   uint32
				doFn       moqUsual_PassByValue_doFn
				doReturnFn moqUsual_PassByValue_doReturnFn
			}{
				values:   last.values,
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqUsual) prettyParams_PassByValue(params moqUsual_PassByValue_params) string {
	return fmt.Sprintf("PassByValue(%#v)", params.p)
}

func (m *moqUsual) paramsKey_PassByValue(params moqUsual_PassByValue_params, anyParams uint64) moqUsual_PassByValue_paramsKey {
	m.scene.T.Helper()
	var pUsed testmoqs.Params
	var pUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.PassByValue.p == moq.ParamIndexByValue {
			pUsed = params.p
		} else {
			pUsedHash = hash.DeepHash(params.p)
		}
	}
	return moqUsual_PassByValue_paramsKey{
		params: struct{ p testmoqs.Params }{
			p: pUsed,
		},
		hashes: struct{ p hash.Hash }{
			p: pUsedHash,
		},
	}
}

func (m *moqUsual_recorder) InterfaceParam(w io.Writer) *moqUsual_InterfaceParam_fnRecorder {
	return &moqUsual_InterfaceParam_fnRecorder{
		params: moqUsual_InterfaceParam_params{
			w: w,
		},
		sequence: m.moq.config.Sequence == moq.SeqDefaultOn,
		moq:      m.moq,
	}
}

func (r *moqUsual_InterfaceParam_fnRecorder) any() *moqUsual_InterfaceParam_anyParams {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_InterfaceParam(r.params))
		return nil
	}
	return &moqUsual_InterfaceParam_anyParams{recorder: r}
}

func (a *moqUsual_InterfaceParam_anyParams) w() *moqUsual_InterfaceParam_fnRecorder {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (r *moqUsual_InterfaceParam_fnRecorder) seq() *moqUsual_InterfaceParam_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_InterfaceParam(r.params))
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqUsual_InterfaceParam_fnRecorder) noSeq() *moqUsual_InterfaceParam_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_InterfaceParam(r.params))
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqUsual_InterfaceParam_fnRecorder) returnResults(sResult string, err error) *moqUsual_InterfaceParam_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			sResult string
			err     error
		}
		sequence   uint32
		doFn       moqUsual_InterfaceParam_doFn
		doReturnFn moqUsual_InterfaceParam_doReturnFn
	}{
		values: &struct {
			sResult string
			err     error
		}{
			sResult: sResult,
			err:     err,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqUsual_InterfaceParam_fnRecorder) andDo(fn moqUsual_InterfaceParam_doFn) *moqUsual_InterfaceParam_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqUsual_InterfaceParam_fnRecorder) doReturnResults(fn moqUsual_InterfaceParam_doReturnFn) *moqUsual_InterfaceParam_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			sResult string
			err     error
		}
		sequence   uint32
		doFn       moqUsual_InterfaceParam_doFn
		doReturnFn moqUsual_InterfaceParam_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqUsual_InterfaceParam_fnRecorder) findResults() {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqUsual_InterfaceParam_resultsByParams
	for n, res := range r.moq.resultsByParams_InterfaceParam {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqUsual_InterfaceParam_resultsByParams{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqUsual_InterfaceParam_paramsKey]*moqUsual_InterfaceParam_results{},
		}
		r.moq.resultsByParams_InterfaceParam = append(r.moq.resultsByParams_InterfaceParam, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams_InterfaceParam) {
			copy(r.moq.resultsByParams_InterfaceParam[insertAt+1:], r.moq.resultsByParams_InterfaceParam[insertAt:0])
			r.moq.resultsByParams_InterfaceParam[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey_InterfaceParam(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqUsual_InterfaceParam_results{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqUsual_InterfaceParam_fnRecorder) repeat(repeaters ...moq.Repeater) *moqUsual_InterfaceParam_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values *struct {
					sResult string
					err     error
				}
				sequence   uint32
				doFn       moqUsual_InterfaceParam_doFn
				doReturnFn moqUsual_InterfaceParam_doReturnFn
			}{
				values:   last.values,
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqUsual) prettyParams_InterfaceParam(params moqUsual_InterfaceParam_params) string {
	return fmt.Sprintf("InterfaceParam(%#v)", params.w)
}

func (m *moqUsual) paramsKey_InterfaceParam(params moqUsual_InterfaceParam_params, anyParams uint64) moqUsual_InterfaceParam_paramsKey {
	m.scene.T.Helper()
	var wUsed io.Writer
	var wUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.InterfaceParam.w == moq.ParamIndexByValue {
			wUsed = params.w
		} else {
			wUsedHash = hash.DeepHash(params.w)
		}
	}
	return moqUsual_InterfaceParam_paramsKey{
		params: struct{ w io.Writer }{
			w: wUsed,
		},
		hashes: struct{ w hash.Hash }{
			w: wUsedHash,
		},
	}
}

func (m *moqUsual_recorder) InterfaceResult(sParam string, bParam bool) *moqUsual_InterfaceResult_fnRecorder {
	return &moqUsual_InterfaceResult_fnRecorder{
		params: moqUsual_InterfaceResult_params{
			sParam: sParam,
			bParam: bParam,
		},
		sequence: m.moq.config.Sequence == moq.SeqDefaultOn,
		moq:      m.moq,
	}
}

func (r *moqUsual_InterfaceResult_fnRecorder) any() *moqUsual_InterfaceResult_anyParams {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_InterfaceResult(r.params))
		return nil
	}
	return &moqUsual_InterfaceResult_anyParams{recorder: r}
}

func (a *moqUsual_InterfaceResult_anyParams) sParam() *moqUsual_InterfaceResult_fnRecorder {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (a *moqUsual_InterfaceResult_anyParams) bParam() *moqUsual_InterfaceResult_fnRecorder {
	a.recorder.anyParams |= 1 << 1
	return a.recorder
}

func (r *moqUsual_InterfaceResult_fnRecorder) seq() *moqUsual_InterfaceResult_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_InterfaceResult(r.params))
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqUsual_InterfaceResult_fnRecorder) noSeq() *moqUsual_InterfaceResult_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_InterfaceResult(r.params))
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqUsual_InterfaceResult_fnRecorder) returnResults(result1 io.Reader) *moqUsual_InterfaceResult_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values     *struct{ result1 io.Reader }
		sequence   uint32
		doFn       moqUsual_InterfaceResult_doFn
		doReturnFn moqUsual_InterfaceResult_doReturnFn
	}{
		values: &struct{ result1 io.Reader }{
			result1: result1,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqUsual_InterfaceResult_fnRecorder) andDo(fn moqUsual_InterfaceResult_doFn) *moqUsual_InterfaceResult_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqUsual_InterfaceResult_fnRecorder) doReturnResults(fn moqUsual_InterfaceResult_doReturnFn) *moqUsual_InterfaceResult_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values     *struct{ result1 io.Reader }
		sequence   uint32
		doFn       moqUsual_InterfaceResult_doFn
		doReturnFn moqUsual_InterfaceResult_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqUsual_InterfaceResult_fnRecorder) findResults() {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqUsual_InterfaceResult_resultsByParams
	for n, res := range r.moq.resultsByParams_InterfaceResult {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqUsual_InterfaceResult_resultsByParams{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqUsual_InterfaceResult_paramsKey]*moqUsual_InterfaceResult_results{},
		}
		r.moq.resultsByParams_InterfaceResult = append(r.moq.resultsByParams_InterfaceResult, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams_InterfaceResult) {
			copy(r.moq.resultsByParams_InterfaceResult[insertAt+1:], r.moq.resultsByParams_InterfaceResult[insertAt:0])
			r.moq.resultsByParams_InterfaceResult[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey_InterfaceResult(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqUsual_InterfaceResult_results{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqUsual_InterfaceResult_fnRecorder) repeat(repeaters ...moq.Repeater) *moqUsual_InterfaceResult_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values     *struct{ result1 io.Reader }
				sequence   uint32
				doFn       moqUsual_InterfaceResult_doFn
				doReturnFn moqUsual_InterfaceResult_doReturnFn
			}{
				values:   last.values,
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqUsual) prettyParams_InterfaceResult(params moqUsual_InterfaceResult_params) string {
	return fmt.Sprintf("InterfaceResult(%#v, %#v)", params.sParam, params.bParam)
}

func (m *moqUsual) paramsKey_InterfaceResult(params moqUsual_InterfaceResult_params, anyParams uint64) moqUsual_InterfaceResult_paramsKey {
	m.scene.T.Helper()
	var sParamUsed string
	var sParamUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.InterfaceResult.sParam == moq.ParamIndexByValue {
			sParamUsed = params.sParam
		} else {
			sParamUsedHash = hash.DeepHash(params.sParam)
		}
	}
	var bParamUsed bool
	var bParamUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.runtime.parameterIndexing.InterfaceResult.bParam == moq.ParamIndexByValue {
			bParamUsed = params.bParam
		} else {
			bParamUsedHash = hash.DeepHash(params.bParam)
		}
	}
	return moqUsual_InterfaceResult_paramsKey{
		params: struct {
			sParam string
			bParam bool
		}{
			sParam: sParamUsed,
			bParam: bParamUsed,
		},
		hashes: struct {
			sParam hash.Hash
			bParam hash.Hash
		}{
			sParam: sParamUsedHash,
			bParam: bParamUsedHash,
		},
	}
}

func (m *moqUsual_recorder) FnParam(fn func()) *moqUsual_FnParam_fnRecorder {
	return &moqUsual_FnParam_fnRecorder{
		params: moqUsual_FnParam_params{
			fn: fn,
		},
		sequence: m.moq.config.Sequence == moq.SeqDefaultOn,
		moq:      m.moq,
	}
}

func (r *moqUsual_FnParam_fnRecorder) any() *moqUsual_FnParam_anyParams {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_FnParam(r.params))
		return nil
	}
	return &moqUsual_FnParam_anyParams{recorder: r}
}

func (a *moqUsual_FnParam_anyParams) fn() *moqUsual_FnParam_fnRecorder {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (r *moqUsual_FnParam_fnRecorder) seq() *moqUsual_FnParam_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_FnParam(r.params))
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqUsual_FnParam_fnRecorder) noSeq() *moqUsual_FnParam_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_FnParam(r.params))
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqUsual_FnParam_fnRecorder) returnResults() *moqUsual_FnParam_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values     *struct{}
		sequence   uint32
		doFn       moqUsual_FnParam_doFn
		doReturnFn moqUsual_FnParam_doReturnFn
	}{
		values:   &struct{}{},
		sequence: sequence,
	})
	return r
}

func (r *moqUsual_FnParam_fnRecorder) andDo(fn moqUsual_FnParam_doFn) *moqUsual_FnParam_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqUsual_FnParam_fnRecorder) doReturnResults(fn moqUsual_FnParam_doReturnFn) *moqUsual_FnParam_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values     *struct{}
		sequence   uint32
		doFn       moqUsual_FnParam_doFn
		doReturnFn moqUsual_FnParam_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqUsual_FnParam_fnRecorder) findResults() {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqUsual_FnParam_resultsByParams
	for n, res := range r.moq.resultsByParams_FnParam {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqUsual_FnParam_resultsByParams{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqUsual_FnParam_paramsKey]*moqUsual_FnParam_results{},
		}
		r.moq.resultsByParams_FnParam = append(r.moq.resultsByParams_FnParam, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams_FnParam) {
			copy(r.moq.resultsByParams_FnParam[insertAt+1:], r.moq.resultsByParams_FnParam[insertAt:0])
			r.moq.resultsByParams_FnParam[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey_FnParam(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqUsual_FnParam_results{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqUsual_FnParam_fnRecorder) repeat(repeaters ...moq.Repeater) *moqUsual_FnParam_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values     *struct{}
				sequence   uint32
				doFn       moqUsual_FnParam_doFn
				doReturnFn moqUsual_FnParam_doReturnFn
			}{
				values:   last.values,
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqUsual) prettyParams_FnParam(params moqUsual_FnParam_params) string {
	return fmt.Sprintf("FnParam(%#v)", moq.FnString(params.fn))
}

func (m *moqUsual) paramsKey_FnParam(params moqUsual_FnParam_params, anyParams uint64) moqUsual_FnParam_paramsKey {
	m.scene.T.Helper()
	var fnUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.FnParam.fn == moq.ParamIndexByValue {
			m.scene.T.Fatalf("The fn parameter of the FnParam function can't be indexed by value")
		}
		fnUsedHash = hash.DeepHash(params.fn)
	}
	return moqUsual_FnParam_paramsKey{
		params: struct{}{},
		hashes: struct{ fn hash.Hash }{
			fn: fnUsedHash,
		},
	}
}

func (m *moqUsual_recorder) Other(param1 other.Params) *moqUsual_Other_fnRecorder {
	return &moqUsual_Other_fnRecorder{
		params: moqUsual_Other_params{
			param1: param1,
		},
		sequence: m.moq.config.Sequence == moq.SeqDefaultOn,
		moq:      m.moq,
	}
}

func (r *moqUsual_Other_fnRecorder) any() *moqUsual_Other_anyParams {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_Other(r.params))
		return nil
	}
	return &moqUsual_Other_anyParams{recorder: r}
}

func (a *moqUsual_Other_anyParams) param1() *moqUsual_Other_fnRecorder {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (r *moqUsual_Other_fnRecorder) seq() *moqUsual_Other_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_Other(r.params))
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqUsual_Other_fnRecorder) noSeq() *moqUsual_Other_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_Other(r.params))
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqUsual_Other_fnRecorder) returnResults(result1 other.Results) *moqUsual_Other_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 other.Results
		}
		sequence   uint32
		doFn       moqUsual_Other_doFn
		doReturnFn moqUsual_Other_doReturnFn
	}{
		values: &struct {
			result1 other.Results
		}{
			result1: result1,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqUsual_Other_fnRecorder) andDo(fn moqUsual_Other_doFn) *moqUsual_Other_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqUsual_Other_fnRecorder) doReturnResults(fn moqUsual_Other_doReturnFn) *moqUsual_Other_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 other.Results
		}
		sequence   uint32
		doFn       moqUsual_Other_doFn
		doReturnFn moqUsual_Other_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqUsual_Other_fnRecorder) findResults() {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqUsual_Other_resultsByParams
	for n, res := range r.moq.resultsByParams_Other {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqUsual_Other_resultsByParams{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqUsual_Other_paramsKey]*moqUsual_Other_results{},
		}
		r.moq.resultsByParams_Other = append(r.moq.resultsByParams_Other, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams_Other) {
			copy(r.moq.resultsByParams_Other[insertAt+1:], r.moq.resultsByParams_Other[insertAt:0])
			r.moq.resultsByParams_Other[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey_Other(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqUsual_Other_results{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqUsual_Other_fnRecorder) repeat(repeaters ...moq.Repeater) *moqUsual_Other_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values *struct {
					result1 other.Results
				}
				sequence   uint32
				doFn       moqUsual_Other_doFn
				doReturnFn moqUsual_Other_doReturnFn
			}{
				values:   last.values,
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqUsual) prettyParams_Other(params moqUsual_Other_params) string {
	return fmt.Sprintf("Other(%#v)", params.param1)
}

func (m *moqUsual) paramsKey_Other(params moqUsual_Other_params, anyParams uint64) moqUsual_Other_paramsKey {
	m.scene.T.Helper()
	var param1Used other.Params
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.Other.param1 == moq.ParamIndexByValue {
			param1Used = params.param1
		} else {
			param1UsedHash = hash.DeepHash(params.param1)
		}
	}
	return moqUsual_Other_paramsKey{
		params: struct{ param1 other.Params }{
			param1: param1Used,
		},
		hashes: struct{ param1 hash.Hash }{
			param1: param1UsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *moqUsual) Reset() {
	m.resultsByParams_Usual = nil
	m.resultsByParams_NoNames = nil
	m.resultsByParams_NoResults = nil
	m.resultsByParams_NoParams = nil
	m.resultsByParams_Nothing = nil
	m.resultsByParams_Variadic = nil
	m.resultsByParams_RepeatedIds = nil
	m.resultsByParams_Times = nil
	m.resultsByParams_DifficultParamNames = nil
	m.resultsByParams_DifficultResultNames = nil
	m.resultsByParams_PassByArray = nil
	m.resultsByParams_PassByChan = nil
	m.resultsByParams_PassByEllipsis = nil
	m.resultsByParams_PassByMap = nil
	m.resultsByParams_PassByReference = nil
	m.resultsByParams_PassBySlice = nil
	m.resultsByParams_PassByValue = nil
	m.resultsByParams_InterfaceParam = nil
	m.resultsByParams_InterfaceResult = nil
	m.resultsByParams_FnParam = nil
	m.resultsByParams_Other = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *moqUsual) AssertExpectationsMet() {
	m.scene.T.Helper()
	for _, res := range m.resultsByParams_Usual {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.prettyParams_Usual(results.params))
			}
		}
	}
	for _, res := range m.resultsByParams_NoNames {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.prettyParams_NoNames(results.params))
			}
		}
	}
	for _, res := range m.resultsByParams_NoResults {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.prettyParams_NoResults(results.params))
			}
		}
	}
	for _, res := range m.resultsByParams_NoParams {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.prettyParams_NoParams(results.params))
			}
		}
	}
	for _, res := range m.resultsByParams_Nothing {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.prettyParams_Nothing(results.params))
			}
		}
	}
	for _, res := range m.resultsByParams_Variadic {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.prettyParams_Variadic(results.params))
			}
		}
	}
	for _, res := range m.resultsByParams_RepeatedIds {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.prettyParams_RepeatedIds(results.params))
			}
		}
	}
	for _, res := range m.resultsByParams_Times {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.prettyParams_Times(results.params))
			}
		}
	}
	for _, res := range m.resultsByParams_DifficultParamNames {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.prettyParams_DifficultParamNames(results.params))
			}
		}
	}
	for _, res := range m.resultsByParams_DifficultResultNames {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.prettyParams_DifficultResultNames(results.params))
			}
		}
	}
	for _, res := range m.resultsByParams_PassByArray {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.prettyParams_PassByArray(results.params))
			}
		}
	}
	for _, res := range m.resultsByParams_PassByChan {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.prettyParams_PassByChan(results.params))
			}
		}
	}
	for _, res := range m.resultsByParams_PassByEllipsis {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.prettyParams_PassByEllipsis(results.params))
			}
		}
	}
	for _, res := range m.resultsByParams_PassByMap {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.prettyParams_PassByMap(results.params))
			}
		}
	}
	for _, res := range m.resultsByParams_PassByReference {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.prettyParams_PassByReference(results.params))
			}
		}
	}
	for _, res := range m.resultsByParams_PassBySlice {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.prettyParams_PassBySlice(results.params))
			}
		}
	}
	for _, res := range m.resultsByParams_PassByValue {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.prettyParams_PassByValue(results.params))
			}
		}
	}
	for _, res := range m.resultsByParams_InterfaceParam {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.prettyParams_InterfaceParam(results.params))
			}
		}
	}
	for _, res := range m.resultsByParams_InterfaceResult {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.prettyParams_InterfaceResult(results.params))
			}
		}
	}
	for _, res := range m.resultsByParams_FnParam {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.prettyParams_FnParam(results.params))
			}
		}
	}
	for _, res := range m.resultsByParams_Other {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.prettyParams_Other(results.params))
			}
		}
	}
}

// The following type assertion assures that testmoqs.GenericParams is mocked
// completely
var _ testmoqs.GenericParams[any, any] = (*moqGenericParams_mock[any, any])(nil)

// moqGenericParams holds the state of a moq of the GenericParams type
type moqGenericParams[S, B any] struct {
	scene  *moq.Scene
	config moq.Config
	moq    *moqGenericParams_mock[S, B]

	resultsByParams_Usual []moqGenericParams_Usual_resultsByParams[S, B]

	runtime struct {
		parameterIndexing struct {
			Usual struct {
				param1 moq.ParamIndexing
				param2 moq.ParamIndexing
			}
		}
	}
	// moqGenericParams_mock isolates the mock interface of the GenericParams type
}

type moqGenericParams_mock[S, B any] struct {
	moq *moqGenericParams[S, B]
}

// moqGenericParams_recorder isolates the recorder interface of the
// GenericParams type
type moqGenericParams_recorder[S, B any] struct {
	moq *moqGenericParams[S, B]
}

// moqGenericParams_Usual_params holds the params of the GenericParams type
type moqGenericParams_Usual_params[S, B any] struct {
	param1 S
	param2 B
}

// moqGenericParams_Usual_paramsKey holds the map key params of the
// GenericParams type
type moqGenericParams_Usual_paramsKey[S, B any] struct {
	params struct{}
	hashes struct {
		param1 hash.Hash
		param2 hash.Hash
	}
}

// moqGenericParams_Usual_resultsByParams contains the results for a given set
// of parameters for the GenericParams type
type moqGenericParams_Usual_resultsByParams[S, B any] struct {
	anyCount  int
	anyParams uint64
	results   map[moqGenericParams_Usual_paramsKey[S, B]]*moqGenericParams_Usual_results[S, B]
}

// moqGenericParams_Usual_doFn defines the type of function needed when calling
// andDo for the GenericParams type
type moqGenericParams_Usual_doFn[S, B any] func(S, B)

// moqGenericParams_Usual_doReturnFn defines the type of function needed when
// calling doReturnResults for the GenericParams type
type moqGenericParams_Usual_doReturnFn[S, B any] func(S, B) (string, error)

// moqGenericParams_Usual_results holds the results of the GenericParams type
type moqGenericParams_Usual_results[S, B any] struct {
	params  moqGenericParams_Usual_params[S, B]
	results []struct {
		values *struct {
			result1 string
			result2 error
		}
		sequence   uint32
		doFn       moqGenericParams_Usual_doFn[S, B]
		doReturnFn moqGenericParams_Usual_doReturnFn[S, B]
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqGenericParams_Usual_fnRecorder routes recorded function calls to the
// moqGenericParams moq
type moqGenericParams_Usual_fnRecorder[S, B any] struct {
	params    moqGenericParams_Usual_params[S, B]
	anyParams uint64
	sequence  bool
	results   *moqGenericParams_Usual_results[S, B]
	moq       *moqGenericParams[S, B]
}

// moqGenericParams_Usual_anyParams isolates the any params functions of the
// GenericParams type
type moqGenericParams_Usual_anyParams[S, B any] struct {
	recorder *moqGenericParams_Usual_fnRecorder[S, B]
}

// newMoqGenericParams creates a new moq of the GenericParams type
func newMoqGenericParams[S, B any](scene *moq.Scene, config *moq.Config) *moqGenericParams[S, B] {
	if config == nil {
		config = &moq.Config{}
	}
	m := &moqGenericParams[S, B]{
		scene:  scene,
		config: *config,
		moq:    &moqGenericParams_mock[S, B]{},

		runtime: struct {
			parameterIndexing struct {
				Usual struct {
					param1 moq.ParamIndexing
					param2 moq.ParamIndexing
				}
			}
		}{parameterIndexing: struct {
			Usual struct {
				param1 moq.ParamIndexing
				param2 moq.ParamIndexing
			}
		}{
			Usual: struct {
				param1 moq.ParamIndexing
				param2 moq.ParamIndexing
			}{
				param1: moq.ParamIndexByHash,
				param2: moq.ParamIndexByHash,
			},
		}},
	}
	m.moq.moq = m

	scene.AddMoq(m)
	return m
}

// mock returns the mock implementation of the GenericParams type
func (m *moqGenericParams[S, B]) mock() *moqGenericParams_mock[S, B] { return m.moq }

func (m *moqGenericParams_mock[S, B]) Usual(param1 S, param2 B) (result1 string, result2 error) {
	m.moq.scene.T.Helper()
	params := moqGenericParams_Usual_params[S, B]{
		param1: param1,
		param2: param2,
	}
	var results *moqGenericParams_Usual_results[S, B]
	for _, resultsByParams := range m.moq.resultsByParams_Usual {
		paramsKey := m.moq.paramsKey_Usual(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call to %s", m.moq.prettyParams_Usual(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to %s", m.moq.prettyParams_Usual(params))
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match call to %s", m.moq.prettyParams_Usual(params))
		}
	}

	if result.doFn != nil {
		result.doFn(param1, param2)
	}

	if result.values != nil {
		result1 = result.values.result1
		result2 = result.values.result2
	}
	if result.doReturnFn != nil {
		result1, result2 = result.doReturnFn(param1, param2)
	}
	return
}

// onCall returns the recorder implementation of the GenericParams type
func (m *moqGenericParams[S, B]) onCall() *moqGenericParams_recorder[S, B] {
	return &moqGenericParams_recorder[S, B]{
		moq: m,
	}
}

func (m *moqGenericParams_recorder[S, B]) Usual(param1 S, param2 B) *moqGenericParams_Usual_fnRecorder[S, B] {
	return &moqGenericParams_Usual_fnRecorder[S, B]{
		params: moqGenericParams_Usual_params[S, B]{
			param1: param1,
			param2: param2,
		},
		sequence: m.moq.config.Sequence == moq.SeqDefaultOn,
		moq:      m.moq,
	}
}

func (r *moqGenericParams_Usual_fnRecorder[S, B]) any() *moqGenericParams_Usual_anyParams[S, B] {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_Usual(r.params))
		return nil
	}
	return &moqGenericParams_Usual_anyParams[S, B]{recorder: r}
}

func (a *moqGenericParams_Usual_anyParams[S, B]) param1() *moqGenericParams_Usual_fnRecorder[S, B] {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (a *moqGenericParams_Usual_anyParams[S, B]) param2() *moqGenericParams_Usual_fnRecorder[S, B] {
	a.recorder.anyParams |= 1 << 1
	return a.recorder
}

func (r *moqGenericParams_Usual_fnRecorder[S, B]) seq() *moqGenericParams_Usual_fnRecorder[S, B] {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_Usual(r.params))
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqGenericParams_Usual_fnRecorder[S, B]) noSeq() *moqGenericParams_Usual_fnRecorder[S, B] {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_Usual(r.params))
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqGenericParams_Usual_fnRecorder[S, B]) returnResults(result1 string, result2 error) *moqGenericParams_Usual_fnRecorder[S, B] {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 string
			result2 error
		}
		sequence   uint32
		doFn       moqGenericParams_Usual_doFn[S, B]
		doReturnFn moqGenericParams_Usual_doReturnFn[S, B]
	}{
		values: &struct {
			result1 string
			result2 error
		}{
			result1: result1,
			result2: result2,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqGenericParams_Usual_fnRecorder[S, B]) andDo(fn moqGenericParams_Usual_doFn[S, B]) *moqGenericParams_Usual_fnRecorder[S, B] {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqGenericParams_Usual_fnRecorder[S, B]) doReturnResults(fn moqGenericParams_Usual_doReturnFn[S, B]) *moqGenericParams_Usual_fnRecorder[S, B] {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 string
			result2 error
		}
		sequence   uint32
		doFn       moqGenericParams_Usual_doFn[S, B]
		doReturnFn moqGenericParams_Usual_doReturnFn[S, B]
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqGenericParams_Usual_fnRecorder[S, B]) findResults() {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqGenericParams_Usual_resultsByParams[S, B]
	for n, res := range r.moq.resultsByParams_Usual {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqGenericParams_Usual_resultsByParams[S, B]{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqGenericParams_Usual_paramsKey[S, B]]*moqGenericParams_Usual_results[S, B]{},
		}
		r.moq.resultsByParams_Usual = append(r.moq.resultsByParams_Usual, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams_Usual) {
			copy(r.moq.resultsByParams_Usual[insertAt+1:], r.moq.resultsByParams_Usual[insertAt:0])
			r.moq.resultsByParams_Usual[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey_Usual(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqGenericParams_Usual_results[S, B]{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqGenericParams_Usual_fnRecorder[S, B]) repeat(repeaters ...moq.Repeater) *moqGenericParams_Usual_fnRecorder[S, B] {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values *struct {
					result1 string
					result2 error
				}
				sequence   uint32
				doFn       moqGenericParams_Usual_doFn[S, B]
				doReturnFn moqGenericParams_Usual_doReturnFn[S, B]
			}{
				values:   last.values,
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqGenericParams[S, B]) prettyParams_Usual(params moqGenericParams_Usual_params[S, B]) string {
	return fmt.Sprintf("Usual(%#v, %#v)", params.param1, params.param2)
}

func (m *moqGenericParams[S, B]) paramsKey_Usual(params moqGenericParams_Usual_params[S, B], anyParams uint64) moqGenericParams_Usual_paramsKey[S, B] {
	m.scene.T.Helper()
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.Usual.param1 == moq.ParamIndexByValue {
			m.scene.T.Fatalf("The param1 parameter of the Usual function can't be indexed by value")
		}
		param1UsedHash = hash.DeepHash(params.param1)
	}
	var param2UsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.runtime.parameterIndexing.Usual.param2 == moq.ParamIndexByValue {
			m.scene.T.Fatalf("The param2 parameter of the Usual function can't be indexed by value")
		}
		param2UsedHash = hash.DeepHash(params.param2)
	}
	return moqGenericParams_Usual_paramsKey[S, B]{
		params: struct{}{},
		hashes: struct {
			param1 hash.Hash
			param2 hash.Hash
		}{
			param1: param1UsedHash,
			param2: param2UsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *moqGenericParams[S, B]) Reset() { m.resultsByParams_Usual = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *moqGenericParams[S, B]) AssertExpectationsMet() {
	m.scene.T.Helper()
	for _, res := range m.resultsByParams_Usual {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.prettyParams_Usual(results.params))
			}
		}
	}
}

// The following type assertion assures that testmoqs.PartialGenericParams is
// mocked completely
var _ testmoqs.PartialGenericParams[any] = (*moqPartialGenericParams_mock[any])(nil)

// moqPartialGenericParams holds the state of a moq of the PartialGenericParams
// type
type moqPartialGenericParams[S any] struct {
	scene  *moq.Scene
	config moq.Config
	moq    *moqPartialGenericParams_mock[S]

	resultsByParams_Usual []moqPartialGenericParams_Usual_resultsByParams[S]

	runtime struct {
		parameterIndexing struct {
			Usual struct {
				param1 moq.ParamIndexing
				param2 moq.ParamIndexing
			}
		}
	}
	// moqPartialGenericParams_mock isolates the mock interface of the
}

// PartialGenericParams type
type moqPartialGenericParams_mock[S any] struct {
	moq *moqPartialGenericParams[S]
}

// moqPartialGenericParams_recorder isolates the recorder interface of the
// PartialGenericParams type
type moqPartialGenericParams_recorder[S any] struct {
	moq *moqPartialGenericParams[S]
}

// moqPartialGenericParams_Usual_params holds the params of the
// PartialGenericParams type
type moqPartialGenericParams_Usual_params[S any] struct {
	param1 S
	param2 bool
}

// moqPartialGenericParams_Usual_paramsKey holds the map key params of the
// PartialGenericParams type
type moqPartialGenericParams_Usual_paramsKey[S any] struct {
	params struct{ param2 bool }
	hashes struct {
		param1 hash.Hash
		param2 hash.Hash
	}
}

// moqPartialGenericParams_Usual_resultsByParams contains the results for a
// given set of parameters for the PartialGenericParams type
type moqPartialGenericParams_Usual_resultsByParams[S any] struct {
	anyCount  int
	anyParams uint64
	results   map[moqPartialGenericParams_Usual_paramsKey[S]]*moqPartialGenericParams_Usual_results[S]
}

// moqPartialGenericParams_Usual_doFn defines the type of function needed when
// calling andDo for the PartialGenericParams type
type moqPartialGenericParams_Usual_doFn[S any] func(S, bool)

// moqPartialGenericParams_Usual_doReturnFn defines the type of function needed
// when calling doReturnResults for the PartialGenericParams type
type moqPartialGenericParams_Usual_doReturnFn[S any] func(S, bool) (string, error)

// moqPartialGenericParams_Usual_results holds the results of the
// PartialGenericParams type
type moqPartialGenericParams_Usual_results[S any] struct {
	params  moqPartialGenericParams_Usual_params[S]
	results []struct {
		values *struct {
			result1 string
			result2 error
		}
		sequence   uint32
		doFn       moqPartialGenericParams_Usual_doFn[S]
		doReturnFn moqPartialGenericParams_Usual_doReturnFn[S]
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqPartialGenericParams_Usual_fnRecorder routes recorded function calls to
// the moqPartialGenericParams moq
type moqPartialGenericParams_Usual_fnRecorder[S any] struct {
	params    moqPartialGenericParams_Usual_params[S]
	anyParams uint64
	sequence  bool
	results   *moqPartialGenericParams_Usual_results[S]
	moq       *moqPartialGenericParams[S]
}

// moqPartialGenericParams_Usual_anyParams isolates the any params functions of
// the PartialGenericParams type
type moqPartialGenericParams_Usual_anyParams[S any] struct {
	recorder *moqPartialGenericParams_Usual_fnRecorder[S]
}

// newMoqPartialGenericParams creates a new moq of the PartialGenericParams
// type
func newMoqPartialGenericParams[S any](scene *moq.Scene, config *moq.Config) *moqPartialGenericParams[S] {
	if config == nil {
		config = &moq.Config{}
	}
	m := &moqPartialGenericParams[S]{
		scene:  scene,
		config: *config,
		moq:    &moqPartialGenericParams_mock[S]{},

		runtime: struct {
			parameterIndexing struct {
				Usual struct {
					param1 moq.ParamIndexing
					param2 moq.ParamIndexing
				}
			}
		}{parameterIndexing: struct {
			Usual struct {
				param1 moq.ParamIndexing
				param2 moq.ParamIndexing
			}
		}{
			Usual: struct {
				param1 moq.ParamIndexing
				param2 moq.ParamIndexing
			}{
				param1: moq.ParamIndexByHash,
				param2: moq.ParamIndexByValue,
			},
		}},
	}
	m.moq.moq = m

	scene.AddMoq(m)
	return m
}

// mock returns the mock implementation of the PartialGenericParams type
func (m *moqPartialGenericParams[S]) mock() *moqPartialGenericParams_mock[S] { return m.moq }

func (m *moqPartialGenericParams_mock[S]) Usual(param1 S, param2 bool) (result1 string, result2 error) {
	m.moq.scene.T.Helper()
	params := moqPartialGenericParams_Usual_params[S]{
		param1: param1,
		param2: param2,
	}
	var results *moqPartialGenericParams_Usual_results[S]
	for _, resultsByParams := range m.moq.resultsByParams_Usual {
		paramsKey := m.moq.paramsKey_Usual(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call to %s", m.moq.prettyParams_Usual(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to %s", m.moq.prettyParams_Usual(params))
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match call to %s", m.moq.prettyParams_Usual(params))
		}
	}

	if result.doFn != nil {
		result.doFn(param1, param2)
	}

	if result.values != nil {
		result1 = result.values.result1
		result2 = result.values.result2
	}
	if result.doReturnFn != nil {
		result1, result2 = result.doReturnFn(param1, param2)
	}
	return
}

// onCall returns the recorder implementation of the PartialGenericParams type
func (m *moqPartialGenericParams[S]) onCall() *moqPartialGenericParams_recorder[S] {
	return &moqPartialGenericParams_recorder[S]{
		moq: m,
	}
}

func (m *moqPartialGenericParams_recorder[S]) Usual(param1 S, param2 bool) *moqPartialGenericParams_Usual_fnRecorder[S] {
	return &moqPartialGenericParams_Usual_fnRecorder[S]{
		params: moqPartialGenericParams_Usual_params[S]{
			param1: param1,
			param2: param2,
		},
		sequence: m.moq.config.Sequence == moq.SeqDefaultOn,
		moq:      m.moq,
	}
}

func (r *moqPartialGenericParams_Usual_fnRecorder[S]) any() *moqPartialGenericParams_Usual_anyParams[S] {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_Usual(r.params))
		return nil
	}
	return &moqPartialGenericParams_Usual_anyParams[S]{recorder: r}
}

func (a *moqPartialGenericParams_Usual_anyParams[S]) param1() *moqPartialGenericParams_Usual_fnRecorder[S] {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (a *moqPartialGenericParams_Usual_anyParams[S]) param2() *moqPartialGenericParams_Usual_fnRecorder[S] {
	a.recorder.anyParams |= 1 << 1
	return a.recorder
}

func (r *moqPartialGenericParams_Usual_fnRecorder[S]) seq() *moqPartialGenericParams_Usual_fnRecorder[S] {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_Usual(r.params))
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqPartialGenericParams_Usual_fnRecorder[S]) noSeq() *moqPartialGenericParams_Usual_fnRecorder[S] {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_Usual(r.params))
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqPartialGenericParams_Usual_fnRecorder[S]) returnResults(result1 string, result2 error) *moqPartialGenericParams_Usual_fnRecorder[S] {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 string
			result2 error
		}
		sequence   uint32
		doFn       moqPartialGenericParams_Usual_doFn[S]
		doReturnFn moqPartialGenericParams_Usual_doReturnFn[S]
	}{
		values: &struct {
			result1 string
			result2 error
		}{
			result1: result1,
			result2: result2,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqPartialGenericParams_Usual_fnRecorder[S]) andDo(fn moqPartialGenericParams_Usual_doFn[S]) *moqPartialGenericParams_Usual_fnRecorder[S] {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqPartialGenericParams_Usual_fnRecorder[S]) doReturnResults(fn moqPartialGenericParams_Usual_doReturnFn[S]) *moqPartialGenericParams_Usual_fnRecorder[S] {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 string
			result2 error
		}
		sequence   uint32
		doFn       moqPartialGenericParams_Usual_doFn[S]
		doReturnFn moqPartialGenericParams_Usual_doReturnFn[S]
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqPartialGenericParams_Usual_fnRecorder[S]) findResults() {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqPartialGenericParams_Usual_resultsByParams[S]
	for n, res := range r.moq.resultsByParams_Usual {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqPartialGenericParams_Usual_resultsByParams[S]{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqPartialGenericParams_Usual_paramsKey[S]]*moqPartialGenericParams_Usual_results[S]{},
		}
		r.moq.resultsByParams_Usual = append(r.moq.resultsByParams_Usual, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams_Usual) {
			copy(r.moq.resultsByParams_Usual[insertAt+1:], r.moq.resultsByParams_Usual[insertAt:0])
			r.moq.resultsByParams_Usual[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey_Usual(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqPartialGenericParams_Usual_results[S]{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqPartialGenericParams_Usual_fnRecorder[S]) repeat(repeaters ...moq.Repeater) *moqPartialGenericParams_Usual_fnRecorder[S] {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values *struct {
					result1 string
					result2 error
				}
				sequence   uint32
				doFn       moqPartialGenericParams_Usual_doFn[S]
				doReturnFn moqPartialGenericParams_Usual_doReturnFn[S]
			}{
				values:   last.values,
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqPartialGenericParams[S]) prettyParams_Usual(params moqPartialGenericParams_Usual_params[S]) string {
	return fmt.Sprintf("Usual(%#v, %#v)", params.param1, params.param2)
}

func (m *moqPartialGenericParams[S]) paramsKey_Usual(params moqPartialGenericParams_Usual_params[S], anyParams uint64) moqPartialGenericParams_Usual_paramsKey[S] {
	m.scene.T.Helper()
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.Usual.param1 == moq.ParamIndexByValue {
			m.scene.T.Fatalf("The param1 parameter of the Usual function can't be indexed by value")
		}
		param1UsedHash = hash.DeepHash(params.param1)
	}
	var param2Used bool
	var param2UsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.runtime.parameterIndexing.Usual.param2 == moq.ParamIndexByValue {
			param2Used = params.param2
		} else {
			param2UsedHash = hash.DeepHash(params.param2)
		}
	}
	return moqPartialGenericParams_Usual_paramsKey[S]{
		params: struct{ param2 bool }{
			param2: param2Used,
		},
		hashes: struct {
			param1 hash.Hash
			param2 hash.Hash
		}{
			param1: param1UsedHash,
			param2: param2UsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *moqPartialGenericParams[S]) Reset() { m.resultsByParams_Usual = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *moqPartialGenericParams[S]) AssertExpectationsMet() {
	m.scene.T.Helper()
	for _, res := range m.resultsByParams_Usual {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.prettyParams_Usual(results.params))
			}
		}
	}
}

// The following type assertion assures that testmoqs.GenericResults is mocked
// completely
var _ testmoqs.GenericResults[string, error] = (*moqGenericResults_mock[string, error])(nil)

// moqGenericResults holds the state of a moq of the GenericResults type
type moqGenericResults[S ~string, E error] struct {
	scene  *moq.Scene
	config moq.Config
	moq    *moqGenericResults_mock[S, E]

	resultsByParams_Usual []moqGenericResults_Usual_resultsByParams[S, E]

	runtime struct {
		parameterIndexing struct {
			Usual struct {
				param1 moq.ParamIndexing
				param2 moq.ParamIndexing
			}
		}
	}
	// moqGenericResults_mock isolates the mock interface of the GenericResults
}

// type
type moqGenericResults_mock[S ~string, E error] struct {
	moq *moqGenericResults[S, E]
}

// moqGenericResults_recorder isolates the recorder interface of the
// GenericResults type
type moqGenericResults_recorder[S ~string, E error] struct {
	moq *moqGenericResults[S, E]
}

// moqGenericResults_Usual_params holds the params of the GenericResults type
type moqGenericResults_Usual_params[S ~string, E error] struct {
	param1 string
	param2 bool
}

// moqGenericResults_Usual_paramsKey holds the map key params of the
// GenericResults type
type moqGenericResults_Usual_paramsKey[S ~string, E error] struct {
	params struct {
		param1 string
		param2 bool
	}
	hashes struct {
		param1 hash.Hash
		param2 hash.Hash
	}
}

// moqGenericResults_Usual_resultsByParams contains the results for a given set
// of parameters for the GenericResults type
type moqGenericResults_Usual_resultsByParams[S ~string, E error] struct {
	anyCount  int
	anyParams uint64
	results   map[moqGenericResults_Usual_paramsKey[S, E]]*moqGenericResults_Usual_results[S, E]
}

// moqGenericResults_Usual_doFn defines the type of function needed when
// calling andDo for the GenericResults type
type moqGenericResults_Usual_doFn[S ~string, E error] func(string, bool)

// moqGenericResults_Usual_doReturnFn defines the type of function needed when
// calling doReturnResults for the GenericResults type
type moqGenericResults_Usual_doReturnFn[S ~string, E error] func(string, bool) (S, E)

// moqGenericResults_Usual_results holds the results of the GenericResults type
type moqGenericResults_Usual_results[S ~string, E error] struct {
	params  moqGenericResults_Usual_params[S, E]
	results []struct {
		values *struct {
			result1 S
			result2 E
		}
		sequence   uint32
		doFn       moqGenericResults_Usual_doFn[S, E]
		doReturnFn moqGenericResults_Usual_doReturnFn[S, E]
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqGenericResults_Usual_fnRecorder routes recorded function calls to the
// moqGenericResults moq
type moqGenericResults_Usual_fnRecorder[S ~string, E error] struct {
	params    moqGenericResults_Usual_params[S, E]
	anyParams uint64
	sequence  bool
	results   *moqGenericResults_Usual_results[S, E]
	moq       *moqGenericResults[S, E]
}

// moqGenericResults_Usual_anyParams isolates the any params functions of the
// GenericResults type
type moqGenericResults_Usual_anyParams[S ~string, E error] struct {
	recorder *moqGenericResults_Usual_fnRecorder[S, E]
}

// newMoqGenericResults creates a new moq of the GenericResults type
func newMoqGenericResults[S ~string, E error](scene *moq.Scene, config *moq.Config) *moqGenericResults[S, E] {
	if config == nil {
		config = &moq.Config{}
	}
	m := &moqGenericResults[S, E]{
		scene:  scene,
		config: *config,
		moq:    &moqGenericResults_mock[S, E]{},

		runtime: struct {
			parameterIndexing struct {
				Usual struct {
					param1 moq.ParamIndexing
					param2 moq.ParamIndexing
				}
			}
		}{parameterIndexing: struct {
			Usual struct {
				param1 moq.ParamIndexing
				param2 moq.ParamIndexing
			}
		}{
			Usual: struct {
				param1 moq.ParamIndexing
				param2 moq.ParamIndexing
			}{
				param1: moq.ParamIndexByValue,
				param2: moq.ParamIndexByValue,
			},
		}},
	}
	m.moq.moq = m

	scene.AddMoq(m)
	return m
}

// mock returns the mock implementation of the GenericResults type
func (m *moqGenericResults[S, E]) mock() *moqGenericResults_mock[S, E] { return m.moq }

func (m *moqGenericResults_mock[S, E]) Usual(param1 string, param2 bool) (result1 S, result2 E) {
	m.moq.scene.T.Helper()
	params := moqGenericResults_Usual_params[S, E]{
		param1: param1,
		param2: param2,
	}
	var results *moqGenericResults_Usual_results[S, E]
	for _, resultsByParams := range m.moq.resultsByParams_Usual {
		paramsKey := m.moq.paramsKey_Usual(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call to %s", m.moq.prettyParams_Usual(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to %s", m.moq.prettyParams_Usual(params))
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match call to %s", m.moq.prettyParams_Usual(params))
		}
	}

	if result.doFn != nil {
		result.doFn(param1, param2)
	}

	if result.values != nil {
		result1 = result.values.result1
		result2 = result.values.result2
	}
	if result.doReturnFn != nil {
		result1, result2 = result.doReturnFn(param1, param2)
	}
	return
}

// onCall returns the recorder implementation of the GenericResults type
func (m *moqGenericResults[S, E]) onCall() *moqGenericResults_recorder[S, E] {
	return &moqGenericResults_recorder[S, E]{
		moq: m,
	}
}

func (m *moqGenericResults_recorder[S, E]) Usual(param1 string, param2 bool) *moqGenericResults_Usual_fnRecorder[S, E] {
	return &moqGenericResults_Usual_fnRecorder[S, E]{
		params: moqGenericResults_Usual_params[S, E]{
			param1: param1,
			param2: param2,
		},
		sequence: m.moq.config.Sequence == moq.SeqDefaultOn,
		moq:      m.moq,
	}
}

func (r *moqGenericResults_Usual_fnRecorder[S, E]) any() *moqGenericResults_Usual_anyParams[S, E] {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_Usual(r.params))
		return nil
	}
	return &moqGenericResults_Usual_anyParams[S, E]{recorder: r}
}

func (a *moqGenericResults_Usual_anyParams[S, E]) param1() *moqGenericResults_Usual_fnRecorder[S, E] {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (a *moqGenericResults_Usual_anyParams[S, E]) param2() *moqGenericResults_Usual_fnRecorder[S, E] {
	a.recorder.anyParams |= 1 << 1
	return a.recorder
}

func (r *moqGenericResults_Usual_fnRecorder[S, E]) seq() *moqGenericResults_Usual_fnRecorder[S, E] {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_Usual(r.params))
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqGenericResults_Usual_fnRecorder[S, E]) noSeq() *moqGenericResults_Usual_fnRecorder[S, E] {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_Usual(r.params))
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqGenericResults_Usual_fnRecorder[S, E]) returnResults(result1 S, result2 E) *moqGenericResults_Usual_fnRecorder[S, E] {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 S
			result2 E
		}
		sequence   uint32
		doFn       moqGenericResults_Usual_doFn[S, E]
		doReturnFn moqGenericResults_Usual_doReturnFn[S, E]
	}{
		values: &struct {
			result1 S
			result2 E
		}{
			result1: result1,
			result2: result2,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqGenericResults_Usual_fnRecorder[S, E]) andDo(fn moqGenericResults_Usual_doFn[S, E]) *moqGenericResults_Usual_fnRecorder[S, E] {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqGenericResults_Usual_fnRecorder[S, E]) doReturnResults(fn moqGenericResults_Usual_doReturnFn[S, E]) *moqGenericResults_Usual_fnRecorder[S, E] {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 S
			result2 E
		}
		sequence   uint32
		doFn       moqGenericResults_Usual_doFn[S, E]
		doReturnFn moqGenericResults_Usual_doReturnFn[S, E]
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqGenericResults_Usual_fnRecorder[S, E]) findResults() {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqGenericResults_Usual_resultsByParams[S, E]
	for n, res := range r.moq.resultsByParams_Usual {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqGenericResults_Usual_resultsByParams[S, E]{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqGenericResults_Usual_paramsKey[S, E]]*moqGenericResults_Usual_results[S, E]{},
		}
		r.moq.resultsByParams_Usual = append(r.moq.resultsByParams_Usual, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams_Usual) {
			copy(r.moq.resultsByParams_Usual[insertAt+1:], r.moq.resultsByParams_Usual[insertAt:0])
			r.moq.resultsByParams_Usual[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey_Usual(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqGenericResults_Usual_results[S, E]{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqGenericResults_Usual_fnRecorder[S, E]) repeat(repeaters ...moq.Repeater) *moqGenericResults_Usual_fnRecorder[S, E] {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values *struct {
					result1 S
					result2 E
				}
				sequence   uint32
				doFn       moqGenericResults_Usual_doFn[S, E]
				doReturnFn moqGenericResults_Usual_doReturnFn[S, E]
			}{
				values:   last.values,
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqGenericResults[S, E]) prettyParams_Usual(params moqGenericResults_Usual_params[S, E]) string {
	return fmt.Sprintf("Usual(%#v, %#v)", params.param1, params.param2)
}

func (m *moqGenericResults[S, E]) paramsKey_Usual(params moqGenericResults_Usual_params[S, E], anyParams uint64) moqGenericResults_Usual_paramsKey[S, E] {
	m.scene.T.Helper()
	var param1Used string
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.Usual.param1 == moq.ParamIndexByValue {
			param1Used = params.param1
		} else {
			param1UsedHash = hash.DeepHash(params.param1)
		}
	}
	var param2Used bool
	var param2UsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.runtime.parameterIndexing.Usual.param2 == moq.ParamIndexByValue {
			param2Used = params.param2
		} else {
			param2UsedHash = hash.DeepHash(params.param2)
		}
	}
	return moqGenericResults_Usual_paramsKey[S, E]{
		params: struct {
			param1 string
			param2 bool
		}{
			param1: param1Used,
			param2: param2Used,
		},
		hashes: struct {
			param1 hash.Hash
			param2 hash.Hash
		}{
			param1: param1UsedHash,
			param2: param2UsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *moqGenericResults[S, E]) Reset() { m.resultsByParams_Usual = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *moqGenericResults[S, E]) AssertExpectationsMet() {
	m.scene.T.Helper()
	for _, res := range m.resultsByParams_Usual {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.prettyParams_Usual(results.params))
			}
		}
	}
}

// The following type assertion assures that testmoqs.PartialGenericResults is
// mocked completely
var _ testmoqs.PartialGenericResults[string] = (*moqPartialGenericResults_mock[string])(nil)

// moqPartialGenericResults holds the state of a moq of the
// PartialGenericResults type
type moqPartialGenericResults[S ~string] struct {
	scene  *moq.Scene
	config moq.Config
	moq    *moqPartialGenericResults_mock[S]

	resultsByParams_Usual []moqPartialGenericResults_Usual_resultsByParams[S]

	runtime struct {
		parameterIndexing struct {
			Usual struct {
				param1 moq.ParamIndexing
				param2 moq.ParamIndexing
			}
		}
	}
	// moqPartialGenericResults_mock isolates the mock interface of the
}

// PartialGenericResults type
type moqPartialGenericResults_mock[S ~string] struct {
	moq *moqPartialGenericResults[S]
}

// moqPartialGenericResults_recorder isolates the recorder interface of the
// PartialGenericResults type
type moqPartialGenericResults_recorder[S ~string] struct {
	moq *moqPartialGenericResults[S]
}

// moqPartialGenericResults_Usual_params holds the params of the
// PartialGenericResults type
type moqPartialGenericResults_Usual_params[S ~string] struct {
	param1 string
	param2 bool
}

// moqPartialGenericResults_Usual_paramsKey holds the map key params of the
// PartialGenericResults type
type moqPartialGenericResults_Usual_paramsKey[S ~string] struct {
	params struct {
		param1 string
		param2 bool
	}
	hashes struct {
		param1 hash.Hash
		param2 hash.Hash
	}
}

// moqPartialGenericResults_Usual_resultsByParams contains the results for a
// given set of parameters for the PartialGenericResults type
type moqPartialGenericResults_Usual_resultsByParams[S ~string] struct {
	anyCount  int
	anyParams uint64
	results   map[moqPartialGenericResults_Usual_paramsKey[S]]*moqPartialGenericResults_Usual_results[S]
}

// moqPartialGenericResults_Usual_doFn defines the type of function needed when
// calling andDo for the PartialGenericResults type
type moqPartialGenericResults_Usual_doFn[S ~string] func(string, bool)

// moqPartialGenericResults_Usual_doReturnFn defines the type of function
// needed when calling doReturnResults for the PartialGenericResults type
type moqPartialGenericResults_Usual_doReturnFn[S ~string] func(string, bool) (S, error)

// moqPartialGenericResults_Usual_results holds the results of the
// PartialGenericResults type
type moqPartialGenericResults_Usual_results[S ~string] struct {
	params  moqPartialGenericResults_Usual_params[S]
	results []struct {
		values *struct {
			result1 S
			result2 error
		}
		sequence   uint32
		doFn       moqPartialGenericResults_Usual_doFn[S]
		doReturnFn moqPartialGenericResults_Usual_doReturnFn[S]
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqPartialGenericResults_Usual_fnRecorder routes recorded function calls to
// the moqPartialGenericResults moq
type moqPartialGenericResults_Usual_fnRecorder[S ~string] struct {
	params    moqPartialGenericResults_Usual_params[S]
	anyParams uint64
	sequence  bool
	results   *moqPartialGenericResults_Usual_results[S]
	moq       *moqPartialGenericResults[S]
}

// moqPartialGenericResults_Usual_anyParams isolates the any params functions
// of the PartialGenericResults type
type moqPartialGenericResults_Usual_anyParams[S ~string] struct {
	recorder *moqPartialGenericResults_Usual_fnRecorder[S]
}

// newMoqPartialGenericResults creates a new moq of the PartialGenericResults
// type
func newMoqPartialGenericResults[S ~string](scene *moq.Scene, config *moq.Config) *moqPartialGenericResults[S] {
	if config == nil {
		config = &moq.Config{}
	}
	m := &moqPartialGenericResults[S]{
		scene:  scene,
		config: *config,
		moq:    &moqPartialGenericResults_mock[S]{},

		runtime: struct {
			parameterIndexing struct {
				Usual struct {
					param1 moq.ParamIndexing
					param2 moq.ParamIndexing
				}
			}
		}{parameterIndexing: struct {
			Usual struct {
				param1 moq.ParamIndexing
				param2 moq.ParamIndexing
			}
		}{
			Usual: struct {
				param1 moq.ParamIndexing
				param2 moq.ParamIndexing
			}{
				param1: moq.ParamIndexByValue,
				param2: moq.ParamIndexByValue,
			},
		}},
	}
	m.moq.moq = m

	scene.AddMoq(m)
	return m
}

// mock returns the mock implementation of the PartialGenericResults type
func (m *moqPartialGenericResults[S]) mock() *moqPartialGenericResults_mock[S] { return m.moq }

func (m *moqPartialGenericResults_mock[S]) Usual(param1 string, param2 bool) (result1 S, result2 error) {
	m.moq.scene.T.Helper()
	params := moqPartialGenericResults_Usual_params[S]{
		param1: param1,
		param2: param2,
	}
	var results *moqPartialGenericResults_Usual_results[S]
	for _, resultsByParams := range m.moq.resultsByParams_Usual {
		paramsKey := m.moq.paramsKey_Usual(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call to %s", m.moq.prettyParams_Usual(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to %s", m.moq.prettyParams_Usual(params))
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match call to %s", m.moq.prettyParams_Usual(params))
		}
	}

	if result.doFn != nil {
		result.doFn(param1, param2)
	}

	if result.values != nil {
		result1 = result.values.result1
		result2 = result.values.result2
	}
	if result.doReturnFn != nil {
		result1, result2 = result.doReturnFn(param1, param2)
	}
	return
}

// onCall returns the recorder implementation of the PartialGenericResults type
func (m *moqPartialGenericResults[S]) onCall() *moqPartialGenericResults_recorder[S] {
	return &moqPartialGenericResults_recorder[S]{
		moq: m,
	}
}

func (m *moqPartialGenericResults_recorder[S]) Usual(param1 string, param2 bool) *moqPartialGenericResults_Usual_fnRecorder[S] {
	return &moqPartialGenericResults_Usual_fnRecorder[S]{
		params: moqPartialGenericResults_Usual_params[S]{
			param1: param1,
			param2: param2,
		},
		sequence: m.moq.config.Sequence == moq.SeqDefaultOn,
		moq:      m.moq,
	}
}

func (r *moqPartialGenericResults_Usual_fnRecorder[S]) any() *moqPartialGenericResults_Usual_anyParams[S] {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_Usual(r.params))
		return nil
	}
	return &moqPartialGenericResults_Usual_anyParams[S]{recorder: r}
}

func (a *moqPartialGenericResults_Usual_anyParams[S]) param1() *moqPartialGenericResults_Usual_fnRecorder[S] {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (a *moqPartialGenericResults_Usual_anyParams[S]) param2() *moqPartialGenericResults_Usual_fnRecorder[S] {
	a.recorder.anyParams |= 1 << 1
	return a.recorder
}

func (r *moqPartialGenericResults_Usual_fnRecorder[S]) seq() *moqPartialGenericResults_Usual_fnRecorder[S] {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_Usual(r.params))
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqPartialGenericResults_Usual_fnRecorder[S]) noSeq() *moqPartialGenericResults_Usual_fnRecorder[S] {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_Usual(r.params))
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqPartialGenericResults_Usual_fnRecorder[S]) returnResults(result1 S, result2 error) *moqPartialGenericResults_Usual_fnRecorder[S] {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 S
			result2 error
		}
		sequence   uint32
		doFn       moqPartialGenericResults_Usual_doFn[S]
		doReturnFn moqPartialGenericResults_Usual_doReturnFn[S]
	}{
		values: &struct {
			result1 S
			result2 error
		}{
			result1: result1,
			result2: result2,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqPartialGenericResults_Usual_fnRecorder[S]) andDo(fn moqPartialGenericResults_Usual_doFn[S]) *moqPartialGenericResults_Usual_fnRecorder[S] {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqPartialGenericResults_Usual_fnRecorder[S]) doReturnResults(fn moqPartialGenericResults_Usual_doReturnFn[S]) *moqPartialGenericResults_Usual_fnRecorder[S] {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 S
			result2 error
		}
		sequence   uint32
		doFn       moqPartialGenericResults_Usual_doFn[S]
		doReturnFn moqPartialGenericResults_Usual_doReturnFn[S]
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqPartialGenericResults_Usual_fnRecorder[S]) findResults() {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqPartialGenericResults_Usual_resultsByParams[S]
	for n, res := range r.moq.resultsByParams_Usual {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqPartialGenericResults_Usual_resultsByParams[S]{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqPartialGenericResults_Usual_paramsKey[S]]*moqPartialGenericResults_Usual_results[S]{},
		}
		r.moq.resultsByParams_Usual = append(r.moq.resultsByParams_Usual, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams_Usual) {
			copy(r.moq.resultsByParams_Usual[insertAt+1:], r.moq.resultsByParams_Usual[insertAt:0])
			r.moq.resultsByParams_Usual[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey_Usual(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqPartialGenericResults_Usual_results[S]{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqPartialGenericResults_Usual_fnRecorder[S]) repeat(repeaters ...moq.Repeater) *moqPartialGenericResults_Usual_fnRecorder[S] {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values *struct {
					result1 S
					result2 error
				}
				sequence   uint32
				doFn       moqPartialGenericResults_Usual_doFn[S]
				doReturnFn moqPartialGenericResults_Usual_doReturnFn[S]
			}{
				values:   last.values,
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqPartialGenericResults[S]) prettyParams_Usual(params moqPartialGenericResults_Usual_params[S]) string {
	return fmt.Sprintf("Usual(%#v, %#v)", params.param1, params.param2)
}

func (m *moqPartialGenericResults[S]) paramsKey_Usual(params moqPartialGenericResults_Usual_params[S], anyParams uint64) moqPartialGenericResults_Usual_paramsKey[S] {
	m.scene.T.Helper()
	var param1Used string
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.Usual.param1 == moq.ParamIndexByValue {
			param1Used = params.param1
		} else {
			param1UsedHash = hash.DeepHash(params.param1)
		}
	}
	var param2Used bool
	var param2UsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.runtime.parameterIndexing.Usual.param2 == moq.ParamIndexByValue {
			param2Used = params.param2
		} else {
			param2UsedHash = hash.DeepHash(params.param2)
		}
	}
	return moqPartialGenericResults_Usual_paramsKey[S]{
		params: struct {
			param1 string
			param2 bool
		}{
			param1: param1Used,
			param2: param2Used,
		},
		hashes: struct {
			param1 hash.Hash
			param2 hash.Hash
		}{
			param1: param1UsedHash,
			param2: param2UsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *moqPartialGenericResults[S]) Reset() { m.resultsByParams_Usual = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *moqPartialGenericResults[S]) AssertExpectationsMet() {
	m.scene.T.Helper()
	for _, res := range m.resultsByParams_Usual {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.prettyParams_Usual(results.params))
			}
		}
	}
}

// The following type assertion assures that testmoqs.GenericInterfaceParam is
// mocked completely
var _ testmoqs.GenericInterfaceParam[testmoqs.MyWriter] = (*moqGenericInterfaceParam_mock[testmoqs.MyWriter])(nil)

// moqGenericInterfaceParam holds the state of a moq of the
// GenericInterfaceParam type
type moqGenericInterfaceParam[W testmoqs.MyWriter] struct {
	scene  *moq.Scene
	config moq.Config
	moq    *moqGenericInterfaceParam_mock[W]

	resultsByParams_Usual []moqGenericInterfaceParam_Usual_resultsByParams[W]

	runtime struct {
		parameterIndexing struct {
			Usual struct {
				w moq.ParamIndexing
			}
		}
	}
	// moqGenericInterfaceParam_mock isolates the mock interface of the
}

// GenericInterfaceParam type
type moqGenericInterfaceParam_mock[W testmoqs.MyWriter] struct {
	moq *moqGenericInterfaceParam[W]
}

// moqGenericInterfaceParam_recorder isolates the recorder interface of the
// GenericInterfaceParam type
type moqGenericInterfaceParam_recorder[W testmoqs.MyWriter] struct {
	moq *moqGenericInterfaceParam[W]
}

// moqGenericInterfaceParam_Usual_params holds the params of the
// GenericInterfaceParam type
type moqGenericInterfaceParam_Usual_params[W testmoqs.MyWriter] struct{ w W }

// moqGenericInterfaceParam_Usual_paramsKey holds the map key params of the
// GenericInterfaceParam type
type moqGenericInterfaceParam_Usual_paramsKey[W testmoqs.MyWriter] struct {
	params struct{}
	hashes struct{ w hash.Hash }
}

// moqGenericInterfaceParam_Usual_resultsByParams contains the results for a
// given set of parameters for the GenericInterfaceParam type
type moqGenericInterfaceParam_Usual_resultsByParams[W testmoqs.MyWriter] struct {
	anyCount  int
	anyParams uint64
	results   map[moqGenericInterfaceParam_Usual_paramsKey[W]]*moqGenericInterfaceParam_Usual_results[W]
}

// moqGenericInterfaceParam_Usual_doFn defines the type of function needed when
// calling andDo for the GenericInterfaceParam type
type moqGenericInterfaceParam_Usual_doFn[W testmoqs.MyWriter] func(w W)

// moqGenericInterfaceParam_Usual_doReturnFn defines the type of function
// needed when calling doReturnResults for the GenericInterfaceParam type
type moqGenericInterfaceParam_Usual_doReturnFn[W testmoqs.MyWriter] func(w W) (sResult string, err error)

// moqGenericInterfaceParam_Usual_results holds the results of the
// GenericInterfaceParam type
type moqGenericInterfaceParam_Usual_results[W testmoqs.MyWriter] struct {
	params  moqGenericInterfaceParam_Usual_params[W]
	results []struct {
		values *struct {
			sResult string
			err     error
		}
		sequence   uint32
		doFn       moqGenericInterfaceParam_Usual_doFn[W]
		doReturnFn moqGenericInterfaceParam_Usual_doReturnFn[W]
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqGenericInterfaceParam_Usual_fnRecorder routes recorded function calls to
// the moqGenericInterfaceParam moq
type moqGenericInterfaceParam_Usual_fnRecorder[W testmoqs.MyWriter] struct {
	params    moqGenericInterfaceParam_Usual_params[W]
	anyParams uint64
	sequence  bool
	results   *moqGenericInterfaceParam_Usual_results[W]
	moq       *moqGenericInterfaceParam[W]
}

// moqGenericInterfaceParam_Usual_anyParams isolates the any params functions
// of the GenericInterfaceParam type
type moqGenericInterfaceParam_Usual_anyParams[W testmoqs.MyWriter] struct {
	recorder *moqGenericInterfaceParam_Usual_fnRecorder[W]
}

// newMoqGenericInterfaceParam creates a new moq of the GenericInterfaceParam
// type
func newMoqGenericInterfaceParam[W testmoqs.MyWriter](scene *moq.Scene, config *moq.Config) *moqGenericInterfaceParam[W] {
	if config == nil {
		config = &moq.Config{}
	}
	m := &moqGenericInterfaceParam[W]{
		scene:  scene,
		config: *config,
		moq:    &moqGenericInterfaceParam_mock[W]{},

		runtime: struct {
			parameterIndexing struct {
				Usual struct {
					w moq.ParamIndexing
				}
			}
		}{parameterIndexing: struct {
			Usual struct {
				w moq.ParamIndexing
			}
		}{
			Usual: struct {
				w moq.ParamIndexing
			}{
				w: moq.ParamIndexByHash,
			},
		}},
	}
	m.moq.moq = m

	scene.AddMoq(m)
	return m
}

// mock returns the mock implementation of the GenericInterfaceParam type
func (m *moqGenericInterfaceParam[W]) mock() *moqGenericInterfaceParam_mock[W] { return m.moq }

func (m *moqGenericInterfaceParam_mock[W]) Usual(w W) (sResult string, err error) {
	m.moq.scene.T.Helper()
	params := moqGenericInterfaceParam_Usual_params[W]{
		w: w,
	}
	var results *moqGenericInterfaceParam_Usual_results[W]
	for _, resultsByParams := range m.moq.resultsByParams_Usual {
		paramsKey := m.moq.paramsKey_Usual(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call to %s", m.moq.prettyParams_Usual(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to %s", m.moq.prettyParams_Usual(params))
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match call to %s", m.moq.prettyParams_Usual(params))
		}
	}

	if result.doFn != nil {
		result.doFn(w)
	}

	if result.values != nil {
		sResult = result.values.sResult
		err = result.values.err
	}
	if result.doReturnFn != nil {
		sResult, err = result.doReturnFn(w)
	}
	return
}

// onCall returns the recorder implementation of the GenericInterfaceParam type
func (m *moqGenericInterfaceParam[W]) onCall() *moqGenericInterfaceParam_recorder[W] {
	return &moqGenericInterfaceParam_recorder[W]{
		moq: m,
	}
}

func (m *moqGenericInterfaceParam_recorder[W]) Usual(w W) *moqGenericInterfaceParam_Usual_fnRecorder[W] {
	return &moqGenericInterfaceParam_Usual_fnRecorder[W]{
		params: moqGenericInterfaceParam_Usual_params[W]{
			w: w,
		},
		sequence: m.moq.config.Sequence == moq.SeqDefaultOn,
		moq:      m.moq,
	}
}

func (r *moqGenericInterfaceParam_Usual_fnRecorder[W]) any() *moqGenericInterfaceParam_Usual_anyParams[W] {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_Usual(r.params))
		return nil
	}
	return &moqGenericInterfaceParam_Usual_anyParams[W]{recorder: r}
}

func (a *moqGenericInterfaceParam_Usual_anyParams[W]) w() *moqGenericInterfaceParam_Usual_fnRecorder[W] {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (r *moqGenericInterfaceParam_Usual_fnRecorder[W]) seq() *moqGenericInterfaceParam_Usual_fnRecorder[W] {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_Usual(r.params))
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqGenericInterfaceParam_Usual_fnRecorder[W]) noSeq() *moqGenericInterfaceParam_Usual_fnRecorder[W] {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_Usual(r.params))
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqGenericInterfaceParam_Usual_fnRecorder[W]) returnResults(sResult string, err error) *moqGenericInterfaceParam_Usual_fnRecorder[W] {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			sResult string
			err     error
		}
		sequence   uint32
		doFn       moqGenericInterfaceParam_Usual_doFn[W]
		doReturnFn moqGenericInterfaceParam_Usual_doReturnFn[W]
	}{
		values: &struct {
			sResult string
			err     error
		}{
			sResult: sResult,
			err:     err,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqGenericInterfaceParam_Usual_fnRecorder[W]) andDo(fn moqGenericInterfaceParam_Usual_doFn[W]) *moqGenericInterfaceParam_Usual_fnRecorder[W] {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqGenericInterfaceParam_Usual_fnRecorder[W]) doReturnResults(fn moqGenericInterfaceParam_Usual_doReturnFn[W]) *moqGenericInterfaceParam_Usual_fnRecorder[W] {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			sResult string
			err     error
		}
		sequence   uint32
		doFn       moqGenericInterfaceParam_Usual_doFn[W]
		doReturnFn moqGenericInterfaceParam_Usual_doReturnFn[W]
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqGenericInterfaceParam_Usual_fnRecorder[W]) findResults() {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqGenericInterfaceParam_Usual_resultsByParams[W]
	for n, res := range r.moq.resultsByParams_Usual {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqGenericInterfaceParam_Usual_resultsByParams[W]{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqGenericInterfaceParam_Usual_paramsKey[W]]*moqGenericInterfaceParam_Usual_results[W]{},
		}
		r.moq.resultsByParams_Usual = append(r.moq.resultsByParams_Usual, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams_Usual) {
			copy(r.moq.resultsByParams_Usual[insertAt+1:], r.moq.resultsByParams_Usual[insertAt:0])
			r.moq.resultsByParams_Usual[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey_Usual(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqGenericInterfaceParam_Usual_results[W]{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqGenericInterfaceParam_Usual_fnRecorder[W]) repeat(repeaters ...moq.Repeater) *moqGenericInterfaceParam_Usual_fnRecorder[W] {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values *struct {
					sResult string
					err     error
				}
				sequence   uint32
				doFn       moqGenericInterfaceParam_Usual_doFn[W]
				doReturnFn moqGenericInterfaceParam_Usual_doReturnFn[W]
			}{
				values:   last.values,
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqGenericInterfaceParam[W]) prettyParams_Usual(params moqGenericInterfaceParam_Usual_params[W]) string {
	return fmt.Sprintf("Usual(%#v)", params.w)
}

func (m *moqGenericInterfaceParam[W]) paramsKey_Usual(params moqGenericInterfaceParam_Usual_params[W], anyParams uint64) moqGenericInterfaceParam_Usual_paramsKey[W] {
	m.scene.T.Helper()
	var wUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.Usual.w == moq.ParamIndexByValue {
			m.scene.T.Fatalf("The w parameter of the Usual function can't be indexed by value")
		}
		wUsedHash = hash.DeepHash(params.w)
	}
	return moqGenericInterfaceParam_Usual_paramsKey[W]{
		params: struct{}{},
		hashes: struct{ w hash.Hash }{
			w: wUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *moqGenericInterfaceParam[W]) Reset() { m.resultsByParams_Usual = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *moqGenericInterfaceParam[W]) AssertExpectationsMet() {
	m.scene.T.Helper()
	for _, res := range m.resultsByParams_Usual {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.prettyParams_Usual(results.params))
			}
		}
	}
}

// The following type assertion assures that testmoqs.GenericInterfaceResult is
// mocked completely
var _ testmoqs.GenericInterfaceResult[testmoqs.MyReader] = (*moqGenericInterfaceResult_mock[testmoqs.MyReader])(nil)

// moqGenericInterfaceResult holds the state of a moq of the
// GenericInterfaceResult type
type moqGenericInterfaceResult[R testmoqs.MyReader] struct {
	scene  *moq.Scene
	config moq.Config
	moq    *moqGenericInterfaceResult_mock[R]

	resultsByParams_Usual []moqGenericInterfaceResult_Usual_resultsByParams[R]

	runtime struct {
		parameterIndexing struct {
			Usual struct {
				sParam moq.ParamIndexing
				bParam moq.ParamIndexing
			}
		}
	}
	// moqGenericInterfaceResult_mock isolates the mock interface of the
}

// GenericInterfaceResult type
type moqGenericInterfaceResult_mock[R testmoqs.MyReader] struct {
	moq *moqGenericInterfaceResult[R]
}

// moqGenericInterfaceResult_recorder isolates the recorder interface of the
// GenericInterfaceResult type
type moqGenericInterfaceResult_recorder[R testmoqs.MyReader] struct {
	moq *moqGenericInterfaceResult[R]
}

// moqGenericInterfaceResult_Usual_params holds the params of the
// GenericInterfaceResult type
type moqGenericInterfaceResult_Usual_params[R testmoqs.MyReader] struct {
	sParam string
	bParam bool
}

// moqGenericInterfaceResult_Usual_paramsKey holds the map key params of the
// GenericInterfaceResult type
type moqGenericInterfaceResult_Usual_paramsKey[R testmoqs.MyReader] struct {
	params struct {
		sParam string
		bParam bool
	}
	hashes struct {
		sParam hash.Hash
		bParam hash.Hash
	}
}

// moqGenericInterfaceResult_Usual_resultsByParams contains the results for a
// given set of parameters for the GenericInterfaceResult type
type moqGenericInterfaceResult_Usual_resultsByParams[R testmoqs.MyReader] struct {
	anyCount  int
	anyParams uint64
	results   map[moqGenericInterfaceResult_Usual_paramsKey[R]]*moqGenericInterfaceResult_Usual_results[R]
}

// moqGenericInterfaceResult_Usual_doFn defines the type of function needed
// when calling andDo for the GenericInterfaceResult type
type moqGenericInterfaceResult_Usual_doFn[R testmoqs.MyReader] func(sParam string, bParam bool)

// moqGenericInterfaceResult_Usual_doReturnFn defines the type of function
// needed when calling doReturnResults for the GenericInterfaceResult type
type moqGenericInterfaceResult_Usual_doReturnFn[R testmoqs.MyReader] func(sParam string, bParam bool) (r R)

// moqGenericInterfaceResult_Usual_results holds the results of the
// GenericInterfaceResult type
type moqGenericInterfaceResult_Usual_results[R testmoqs.MyReader] struct {
	params  moqGenericInterfaceResult_Usual_params[R]
	results []struct {
		values     *struct{ result1 R }
		sequence   uint32
		doFn       moqGenericInterfaceResult_Usual_doFn[R]
		doReturnFn moqGenericInterfaceResult_Usual_doReturnFn[R]
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqGenericInterfaceResult_Usual_fnRecorder routes recorded function calls to
// the moqGenericInterfaceResult moq
type moqGenericInterfaceResult_Usual_fnRecorder[R testmoqs.MyReader] struct {
	params    moqGenericInterfaceResult_Usual_params[R]
	anyParams uint64
	sequence  bool
	results   *moqGenericInterfaceResult_Usual_results[R]
	moq       *moqGenericInterfaceResult[R]
}

// moqGenericInterfaceResult_Usual_anyParams isolates the any params functions
// of the GenericInterfaceResult type
type moqGenericInterfaceResult_Usual_anyParams[R testmoqs.MyReader] struct {
	recorder *moqGenericInterfaceResult_Usual_fnRecorder[R]
}

// newMoqGenericInterfaceResult creates a new moq of the GenericInterfaceResult
// type
func newMoqGenericInterfaceResult[R testmoqs.MyReader](scene *moq.Scene, config *moq.Config) *moqGenericInterfaceResult[R] {
	if config == nil {
		config = &moq.Config{}
	}
	m := &moqGenericInterfaceResult[R]{
		scene:  scene,
		config: *config,
		moq:    &moqGenericInterfaceResult_mock[R]{},

		runtime: struct {
			parameterIndexing struct {
				Usual struct {
					sParam moq.ParamIndexing
					bParam moq.ParamIndexing
				}
			}
		}{parameterIndexing: struct {
			Usual struct {
				sParam moq.ParamIndexing
				bParam moq.ParamIndexing
			}
		}{
			Usual: struct {
				sParam moq.ParamIndexing
				bParam moq.ParamIndexing
			}{
				sParam: moq.ParamIndexByValue,
				bParam: moq.ParamIndexByValue,
			},
		}},
	}
	m.moq.moq = m

	scene.AddMoq(m)
	return m
}

// mock returns the mock implementation of the GenericInterfaceResult type
func (m *moqGenericInterfaceResult[R]) mock() *moqGenericInterfaceResult_mock[R] { return m.moq }

func (m *moqGenericInterfaceResult_mock[R]) Usual(sParam string, bParam bool) (result1 R) {
	m.moq.scene.T.Helper()
	params := moqGenericInterfaceResult_Usual_params[R]{
		sParam: sParam,
		bParam: bParam,
	}
	var results *moqGenericInterfaceResult_Usual_results[R]
	for _, resultsByParams := range m.moq.resultsByParams_Usual {
		paramsKey := m.moq.paramsKey_Usual(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call to %s", m.moq.prettyParams_Usual(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to %s", m.moq.prettyParams_Usual(params))
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match call to %s", m.moq.prettyParams_Usual(params))
		}
	}

	if result.doFn != nil {
		result.doFn(sParam, bParam)
	}

	if result.values != nil {
		result1 = result.values.result1
	}
	if result.doReturnFn != nil {
		result1 = result.doReturnFn(sParam, bParam)
	}
	return
}

// onCall returns the recorder implementation of the GenericInterfaceResult
// type
func (m *moqGenericInterfaceResult[R]) onCall() *moqGenericInterfaceResult_recorder[R] {
	return &moqGenericInterfaceResult_recorder[R]{
		moq: m,
	}
}

func (m *moqGenericInterfaceResult_recorder[R]) Usual(sParam string, bParam bool) *moqGenericInterfaceResult_Usual_fnRecorder[R] {
	return &moqGenericInterfaceResult_Usual_fnRecorder[R]{
		params: moqGenericInterfaceResult_Usual_params[R]{
			sParam: sParam,
			bParam: bParam,
		},
		sequence: m.moq.config.Sequence == moq.SeqDefaultOn,
		moq:      m.moq,
	}
}

func (r *moqGenericInterfaceResult_Usual_fnRecorder[R]) any() *moqGenericInterfaceResult_Usual_anyParams[R] {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_Usual(r.params))
		return nil
	}
	return &moqGenericInterfaceResult_Usual_anyParams[R]{recorder: r}
}

func (a *moqGenericInterfaceResult_Usual_anyParams[R]) sParam() *moqGenericInterfaceResult_Usual_fnRecorder[R] {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (a *moqGenericInterfaceResult_Usual_anyParams[R]) bParam() *moqGenericInterfaceResult_Usual_fnRecorder[R] {
	a.recorder.anyParams |= 1 << 1
	return a.recorder
}

func (r *moqGenericInterfaceResult_Usual_fnRecorder[R]) seq() *moqGenericInterfaceResult_Usual_fnRecorder[R] {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_Usual(r.params))
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqGenericInterfaceResult_Usual_fnRecorder[R]) noSeq() *moqGenericInterfaceResult_Usual_fnRecorder[R] {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_Usual(r.params))
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqGenericInterfaceResult_Usual_fnRecorder[R]) returnResults(result1 R) *moqGenericInterfaceResult_Usual_fnRecorder[R] {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values     *struct{ result1 R }
		sequence   uint32
		doFn       moqGenericInterfaceResult_Usual_doFn[R]
		doReturnFn moqGenericInterfaceResult_Usual_doReturnFn[R]
	}{
		values: &struct{ result1 R }{
			result1: result1,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqGenericInterfaceResult_Usual_fnRecorder[R]) andDo(fn moqGenericInterfaceResult_Usual_doFn[R]) *moqGenericInterfaceResult_Usual_fnRecorder[R] {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqGenericInterfaceResult_Usual_fnRecorder[R]) doReturnResults(fn moqGenericInterfaceResult_Usual_doReturnFn[R]) *moqGenericInterfaceResult_Usual_fnRecorder[R] {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values     *struct{ result1 R }
		sequence   uint32
		doFn       moqGenericInterfaceResult_Usual_doFn[R]
		doReturnFn moqGenericInterfaceResult_Usual_doReturnFn[R]
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqGenericInterfaceResult_Usual_fnRecorder[R]) findResults() {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqGenericInterfaceResult_Usual_resultsByParams[R]
	for n, res := range r.moq.resultsByParams_Usual {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqGenericInterfaceResult_Usual_resultsByParams[R]{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqGenericInterfaceResult_Usual_paramsKey[R]]*moqGenericInterfaceResult_Usual_results[R]{},
		}
		r.moq.resultsByParams_Usual = append(r.moq.resultsByParams_Usual, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams_Usual) {
			copy(r.moq.resultsByParams_Usual[insertAt+1:], r.moq.resultsByParams_Usual[insertAt:0])
			r.moq.resultsByParams_Usual[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey_Usual(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqGenericInterfaceResult_Usual_results[R]{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqGenericInterfaceResult_Usual_fnRecorder[R]) repeat(repeaters ...moq.Repeater) *moqGenericInterfaceResult_Usual_fnRecorder[R] {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values     *struct{ result1 R }
				sequence   uint32
				doFn       moqGenericInterfaceResult_Usual_doFn[R]
				doReturnFn moqGenericInterfaceResult_Usual_doReturnFn[R]
			}{
				values:   last.values,
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqGenericInterfaceResult[R]) prettyParams_Usual(params moqGenericInterfaceResult_Usual_params[R]) string {
	return fmt.Sprintf("Usual(%#v, %#v)", params.sParam, params.bParam)
}

func (m *moqGenericInterfaceResult[R]) paramsKey_Usual(params moqGenericInterfaceResult_Usual_params[R], anyParams uint64) moqGenericInterfaceResult_Usual_paramsKey[R] {
	m.scene.T.Helper()
	var sParamUsed string
	var sParamUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.Usual.sParam == moq.ParamIndexByValue {
			sParamUsed = params.sParam
		} else {
			sParamUsedHash = hash.DeepHash(params.sParam)
		}
	}
	var bParamUsed bool
	var bParamUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.runtime.parameterIndexing.Usual.bParam == moq.ParamIndexByValue {
			bParamUsed = params.bParam
		} else {
			bParamUsedHash = hash.DeepHash(params.bParam)
		}
	}
	return moqGenericInterfaceResult_Usual_paramsKey[R]{
		params: struct {
			sParam string
			bParam bool
		}{
			sParam: sParamUsed,
			bParam: bParamUsed,
		},
		hashes: struct {
			sParam hash.Hash
			bParam hash.Hash
		}{
			sParam: sParamUsedHash,
			bParam: bParamUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *moqGenericInterfaceResult[R]) Reset() { m.resultsByParams_Usual = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *moqGenericInterfaceResult[R]) AssertExpectationsMet() {
	m.scene.T.Helper()
	for _, res := range m.resultsByParams_Usual {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.prettyParams_Usual(results.params))
			}
		}
	}
}
