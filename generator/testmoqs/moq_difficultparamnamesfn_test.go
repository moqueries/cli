// Code generated by Moqueries - https://github.com/myshkin5/moqueries - DO NOT EDIT!

package testmoqs_test

import (
	"math/bits"
	"sync/atomic"

	"github.com/myshkin5/moqueries/generator/testmoqs"
	"github.com/myshkin5/moqueries/hash"
	"github.com/myshkin5/moqueries/moq"
)

// moqDifficultParamNamesFn holds the state of a moq of the DifficultParamNamesFn type
type moqDifficultParamNamesFn struct {
	scene  *moq.Scene
	config moq.Config
	moq    *moqDifficultParamNamesFn_mock

	resultsByParams []moqDifficultParamNamesFn_resultsByParams

	runtime struct {
		parameterIndexing struct {
			param1 moq.ParamIndexing
			param2 moq.ParamIndexing
			param3 moq.ParamIndexing
			param  moq.ParamIndexing
			param5 moq.ParamIndexing
			param6 moq.ParamIndexing
			param7 moq.ParamIndexing
		}
	}
}

// moqDifficultParamNamesFn_mock isolates the mock interface of the DifficultParamNamesFn type
type moqDifficultParamNamesFn_mock struct {
	moq *moqDifficultParamNamesFn
}

// moqDifficultParamNamesFn_params holds the params of the DifficultParamNamesFn type
type moqDifficultParamNamesFn_params struct {
	param1, param2 bool
	param3         string
	param, param5  int
	param6, param7 float32
}

// moqDifficultParamNamesFn_paramsKey holds the map key params of the DifficultParamNamesFn type
type moqDifficultParamNamesFn_paramsKey struct {
	params struct {
		param1, param2 bool
		param3         string
		param, param5  int
		param6, param7 float32
	}
	hashes struct {
		param1, param2 hash.Hash
		param3         hash.Hash
		param, param5  hash.Hash
		param6, param7 hash.Hash
	}
}

// moqDifficultParamNamesFn_resultsByParams contains the results for a given set of parameters for the DifficultParamNamesFn type
type moqDifficultParamNamesFn_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqDifficultParamNamesFn_paramsKey]*moqDifficultParamNamesFn_results
}

// moqDifficultParamNamesFn_doFn defines the type of function needed when calling andDo for the DifficultParamNamesFn type
type moqDifficultParamNamesFn_doFn func(m, r bool, sequence string, param, params int, result, results float32)

// moqDifficultParamNamesFn_doReturnFn defines the type of function needed when calling doReturnResults for the DifficultParamNamesFn type
type moqDifficultParamNamesFn_doReturnFn func(m, r bool, sequence string, param, params int, result, results float32)

// moqDifficultParamNamesFn_results holds the results of the DifficultParamNamesFn type
type moqDifficultParamNamesFn_results struct {
	params  moqDifficultParamNamesFn_params
	results []struct {
		values     *struct{}
		sequence   uint32
		doFn       moqDifficultParamNamesFn_doFn
		doReturnFn moqDifficultParamNamesFn_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqDifficultParamNamesFn_fnRecorder routes recorded function calls to the moqDifficultParamNamesFn moq
type moqDifficultParamNamesFn_fnRecorder struct {
	params    moqDifficultParamNamesFn_params
	anyParams uint64
	sequence  bool
	results   *moqDifficultParamNamesFn_results
	moq       *moqDifficultParamNamesFn
}

// moqDifficultParamNamesFn_anyParams isolates the any params functions of the DifficultParamNamesFn type
type moqDifficultParamNamesFn_anyParams struct {
	recorder *moqDifficultParamNamesFn_fnRecorder
}

// newMoqDifficultParamNamesFn creates a new moq of the DifficultParamNamesFn type
func newMoqDifficultParamNamesFn(scene *moq.Scene, config *moq.Config) *moqDifficultParamNamesFn {
	if config == nil {
		config = &moq.Config{}
	}
	m := &moqDifficultParamNamesFn{
		scene:  scene,
		config: *config,
		moq:    &moqDifficultParamNamesFn_mock{},

		runtime: struct {
			parameterIndexing struct {
				param1 moq.ParamIndexing
				param2 moq.ParamIndexing
				param3 moq.ParamIndexing
				param  moq.ParamIndexing
				param5 moq.ParamIndexing
				param6 moq.ParamIndexing
				param7 moq.ParamIndexing
			}
		}{parameterIndexing: struct {
			param1 moq.ParamIndexing
			param2 moq.ParamIndexing
			param3 moq.ParamIndexing
			param  moq.ParamIndexing
			param5 moq.ParamIndexing
			param6 moq.ParamIndexing
			param7 moq.ParamIndexing
		}{
			param1: moq.ParamIndexByValue,
			param2: moq.ParamIndexByValue,
			param3: moq.ParamIndexByValue,
			param:  moq.ParamIndexByValue,
			param5: moq.ParamIndexByValue,
			param6: moq.ParamIndexByValue,
			param7: moq.ParamIndexByValue,
		}},
	}
	m.moq.moq = m

	scene.AddMoq(m)
	return m
}

// mock returns the moq implementation of the DifficultParamNamesFn type
func (m *moqDifficultParamNamesFn) mock() testmoqs.DifficultParamNamesFn {
	return func(param1, param2 bool, param3 string, param, param5 int, param6, param7 float32) {
		moq := &moqDifficultParamNamesFn_mock{moq: m}
		moq.fn(param1, param2, param3, param, param5, param6, param7)
	}
}

func (m *moqDifficultParamNamesFn_mock) fn(param1, param2 bool, param3 string, param, param5 int, param6, param7 float32) {
	m.moq.scene.T.Helper()
	params := moqDifficultParamNamesFn_params{
		param1: param1,
		param2: param2,
		param3: param3,
		param:  param,
		param5: param5,
		param6: param6,
		param7: param7,
	}
	var results *moqDifficultParamNamesFn_results
	for _, resultsByParams := range m.moq.resultsByParams {
		paramsKey := m.moq.paramsKey(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match %#v", params)
		}
	}

	if result.doFn != nil {
		result.doFn(param1, param2, param3, param, param5, param6, param7)
	}

	if result.doReturnFn != nil {
		result.doReturnFn(param1, param2, param3, param, param5, param6, param7)
	}
	return
}

func (m *moqDifficultParamNamesFn) onCall(param1, param2 bool, param3 string, param, param5 int, param6, param7 float32) *moqDifficultParamNamesFn_fnRecorder {
	return &moqDifficultParamNamesFn_fnRecorder{
		params: moqDifficultParamNamesFn_params{
			param1: param1,
			param2: param2,
			param3: param3,
			param:  param,
			param5: param5,
			param6: param6,
			param7: param7,
		},
		sequence: m.config.Sequence == moq.SeqDefaultOn,
		moq:      m,
	}
}

func (r *moqDifficultParamNamesFn_fnRecorder) any() *moqDifficultParamNamesFn_anyParams {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	return &moqDifficultParamNamesFn_anyParams{recorder: r}
}

func (a *moqDifficultParamNamesFn_anyParams) param1() *moqDifficultParamNamesFn_fnRecorder {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (a *moqDifficultParamNamesFn_anyParams) param2() *moqDifficultParamNamesFn_fnRecorder {
	a.recorder.anyParams |= 1 << 1
	return a.recorder
}

func (a *moqDifficultParamNamesFn_anyParams) param3() *moqDifficultParamNamesFn_fnRecorder {
	a.recorder.anyParams |= 1 << 2
	return a.recorder
}

func (a *moqDifficultParamNamesFn_anyParams) param() *moqDifficultParamNamesFn_fnRecorder {
	a.recorder.anyParams |= 1 << 3
	return a.recorder
}

func (a *moqDifficultParamNamesFn_anyParams) param5() *moqDifficultParamNamesFn_fnRecorder {
	a.recorder.anyParams |= 1 << 4
	return a.recorder
}

func (a *moqDifficultParamNamesFn_anyParams) param6() *moqDifficultParamNamesFn_fnRecorder {
	a.recorder.anyParams |= 1 << 5
	return a.recorder
}

func (a *moqDifficultParamNamesFn_anyParams) param7() *moqDifficultParamNamesFn_fnRecorder {
	a.recorder.anyParams |= 1 << 6
	return a.recorder
}

func (r *moqDifficultParamNamesFn_fnRecorder) seq() *moqDifficultParamNamesFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqDifficultParamNamesFn_fnRecorder) noSeq() *moqDifficultParamNamesFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqDifficultParamNamesFn_fnRecorder) returnResults() *moqDifficultParamNamesFn_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values     *struct{}
		sequence   uint32
		doFn       moqDifficultParamNamesFn_doFn
		doReturnFn moqDifficultParamNamesFn_doReturnFn
	}{
		values:   &struct{}{},
		sequence: sequence,
	})
	return r
}

func (r *moqDifficultParamNamesFn_fnRecorder) andDo(fn moqDifficultParamNamesFn_doFn) *moqDifficultParamNamesFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqDifficultParamNamesFn_fnRecorder) doReturnResults(fn moqDifficultParamNamesFn_doReturnFn) *moqDifficultParamNamesFn_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values     *struct{}
		sequence   uint32
		doFn       moqDifficultParamNamesFn_doFn
		doReturnFn moqDifficultParamNamesFn_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqDifficultParamNamesFn_fnRecorder) findResults() {
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqDifficultParamNamesFn_resultsByParams
	for n, res := range r.moq.resultsByParams {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqDifficultParamNamesFn_resultsByParams{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqDifficultParamNamesFn_paramsKey]*moqDifficultParamNamesFn_results{},
		}
		r.moq.resultsByParams = append(r.moq.resultsByParams, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams) {
			copy(r.moq.resultsByParams[insertAt+1:], r.moq.resultsByParams[insertAt:0])
			r.moq.resultsByParams[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqDifficultParamNamesFn_results{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqDifficultParamNamesFn_fnRecorder) repeat(repeaters ...moq.Repeater) *moqDifficultParamNamesFn_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values     *struct{}
				sequence   uint32
				doFn       moqDifficultParamNamesFn_doFn
				doReturnFn moqDifficultParamNamesFn_doReturnFn
			}{
				values:   &struct{}{},
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqDifficultParamNamesFn) paramsKey(params moqDifficultParamNamesFn_params, anyParams uint64) moqDifficultParamNamesFn_paramsKey {
	var param1Used bool
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.param1 == moq.ParamIndexByValue {
			param1Used = params.param1
		} else {
			param1UsedHash = hash.DeepHash(params.param1)
		}
	}
	var param2Used bool
	var param2UsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.runtime.parameterIndexing.param2 == moq.ParamIndexByValue {
			param2Used = params.param2
		} else {
			param2UsedHash = hash.DeepHash(params.param2)
		}
	}
	var param3Used string
	var param3UsedHash hash.Hash
	if anyParams&(1<<2) == 0 {
		if m.runtime.parameterIndexing.param3 == moq.ParamIndexByValue {
			param3Used = params.param3
		} else {
			param3UsedHash = hash.DeepHash(params.param3)
		}
	}
	var paramUsed int
	var paramUsedHash hash.Hash
	if anyParams&(1<<3) == 0 {
		if m.runtime.parameterIndexing.param == moq.ParamIndexByValue {
			paramUsed = params.param
		} else {
			paramUsedHash = hash.DeepHash(params.param)
		}
	}
	var param5Used int
	var param5UsedHash hash.Hash
	if anyParams&(1<<4) == 0 {
		if m.runtime.parameterIndexing.param5 == moq.ParamIndexByValue {
			param5Used = params.param5
		} else {
			param5UsedHash = hash.DeepHash(params.param5)
		}
	}
	var param6Used float32
	var param6UsedHash hash.Hash
	if anyParams&(1<<5) == 0 {
		if m.runtime.parameterIndexing.param6 == moq.ParamIndexByValue {
			param6Used = params.param6
		} else {
			param6UsedHash = hash.DeepHash(params.param6)
		}
	}
	var param7Used float32
	var param7UsedHash hash.Hash
	if anyParams&(1<<6) == 0 {
		if m.runtime.parameterIndexing.param7 == moq.ParamIndexByValue {
			param7Used = params.param7
		} else {
			param7UsedHash = hash.DeepHash(params.param7)
		}
	}
	return moqDifficultParamNamesFn_paramsKey{
		params: struct {
			param1, param2 bool
			param3         string
			param, param5  int
			param6, param7 float32
		}{
			param1: param1Used,
			param2: param2Used,
			param3: param3Used,
			param:  paramUsed,
			param5: param5Used,
			param6: param6Used,
			param7: param7Used,
		},
		hashes: struct {
			param1, param2 hash.Hash
			param3         hash.Hash
			param, param5  hash.Hash
			param6, param7 hash.Hash
		}{
			param1: param1UsedHash,
			param2: param2UsedHash,
			param3: param3UsedHash,
			param:  paramUsedHash,
			param5: param5UsedHash,
			param6: param6UsedHash,
			param7: param7UsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *moqDifficultParamNamesFn) Reset() { m.resultsByParams = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *moqDifficultParamNamesFn) AssertExpectationsMet() {
	m.scene.T.Helper()
	for _, res := range m.resultsByParams {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.params)
			}
		}
	}
}
