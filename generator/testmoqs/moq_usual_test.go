// Code generated by Moqueries - https://github.com/myshkin5/moqueries - DO NOT EDIT!

package testmoqs_test

import (
	"math/bits"
	"sync/atomic"

	"github.com/myshkin5/moqueries/hash"
	"github.com/myshkin5/moqueries/moq"
)

// moqUsual holds the state of a moq of the Usual type
type moqUsual struct {
	scene                       *moq.Scene
	config                      moq.Config
	resultsByParams_Usual       []moqUsual_Usual_resultsByParams
	resultsByParams_NoNames     []moqUsual_NoNames_resultsByParams
	resultsByParams_NoResults   []moqUsual_NoResults_resultsByParams
	resultsByParams_NoParams    []moqUsual_NoParams_resultsByParams
	resultsByParams_Nothing     []moqUsual_Nothing_resultsByParams
	resultsByParams_Variadic    []moqUsual_Variadic_resultsByParams
	resultsByParams_RepeatedIds []moqUsual_RepeatedIds_resultsByParams
}

// moqUsual_mock isolates the mock interface of the Usual type
type moqUsual_mock struct {
	moq *moqUsual
}

// moqUsual_recorder isolates the recorder interface of the Usual type
type moqUsual_recorder struct {
	moq *moqUsual
}

// moqUsual_Usual_params holds the params of the Usual type
type moqUsual_Usual_params struct {
	sParam string
	bParam bool
}

// moqUsual_Usual_paramsKey holds the map key params of the Usual type
type moqUsual_Usual_paramsKey struct {
	sParam string
	bParam bool
}

// moqUsual_Usual_resultsByParams contains the results for a given set of parameters for the Usual type
type moqUsual_Usual_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqUsual_Usual_paramsKey]*moqUsual_Usual_results
}

// moqUsual_Usual_doFn defines the type of function needed when calling andDo for the Usual type
type moqUsual_Usual_doFn func(sParam string, bParam bool)

// moqUsual_Usual_doReturnFn defines the type of function needed when calling doReturnResults for the Usual type
type moqUsual_Usual_doReturnFn func(sParam string, bParam bool) (sResult string, err error)

// moqUsual_Usual_results holds the results of the Usual type
type moqUsual_Usual_results struct {
	params  moqUsual_Usual_params
	results []struct {
		values *struct {
			sResult string
			err     error
		}
		sequence   uint32
		doFn       moqUsual_Usual_doFn
		doReturnFn moqUsual_Usual_doReturnFn
	}
	index    uint32
	anyTimes bool
}

// moqUsual_Usual_fnRecorder routes recorded function calls to the moqUsual moq
type moqUsual_Usual_fnRecorder struct {
	params    moqUsual_Usual_params
	paramsKey moqUsual_Usual_paramsKey
	anyParams uint64
	sequence  bool
	results   *moqUsual_Usual_results
	moq       *moqUsual
}

// moqUsual_NoNames_params holds the params of the Usual type
type moqUsual_NoNames_params struct {
	param1 string
	param2 bool
}

// moqUsual_NoNames_paramsKey holds the map key params of the Usual type
type moqUsual_NoNames_paramsKey struct {
	param1 string
	param2 bool
}

// moqUsual_NoNames_resultsByParams contains the results for a given set of parameters for the Usual type
type moqUsual_NoNames_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqUsual_NoNames_paramsKey]*moqUsual_NoNames_results
}

// moqUsual_NoNames_doFn defines the type of function needed when calling andDo for the Usual type
type moqUsual_NoNames_doFn func(string, bool)

// moqUsual_NoNames_doReturnFn defines the type of function needed when calling doReturnResults for the Usual type
type moqUsual_NoNames_doReturnFn func(string, bool) (string, error)

// moqUsual_NoNames_results holds the results of the Usual type
type moqUsual_NoNames_results struct {
	params  moqUsual_NoNames_params
	results []struct {
		values *struct {
			result1 string
			result2 error
		}
		sequence   uint32
		doFn       moqUsual_NoNames_doFn
		doReturnFn moqUsual_NoNames_doReturnFn
	}
	index    uint32
	anyTimes bool
}

// moqUsual_NoNames_fnRecorder routes recorded function calls to the moqUsual moq
type moqUsual_NoNames_fnRecorder struct {
	params    moqUsual_NoNames_params
	paramsKey moqUsual_NoNames_paramsKey
	anyParams uint64
	sequence  bool
	results   *moqUsual_NoNames_results
	moq       *moqUsual
}

// moqUsual_NoResults_params holds the params of the Usual type
type moqUsual_NoResults_params struct {
	sParam string
	bParam bool
}

// moqUsual_NoResults_paramsKey holds the map key params of the Usual type
type moqUsual_NoResults_paramsKey struct {
	sParam string
	bParam bool
}

// moqUsual_NoResults_resultsByParams contains the results for a given set of parameters for the Usual type
type moqUsual_NoResults_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqUsual_NoResults_paramsKey]*moqUsual_NoResults_results
}

// moqUsual_NoResults_doFn defines the type of function needed when calling andDo for the Usual type
type moqUsual_NoResults_doFn func(sParam string, bParam bool)

// moqUsual_NoResults_doReturnFn defines the type of function needed when calling doReturnResults for the Usual type
type moqUsual_NoResults_doReturnFn func(sParam string, bParam bool)

// moqUsual_NoResults_results holds the results of the Usual type
type moqUsual_NoResults_results struct {
	params  moqUsual_NoResults_params
	results []struct {
		values *struct {
		}
		sequence   uint32
		doFn       moqUsual_NoResults_doFn
		doReturnFn moqUsual_NoResults_doReturnFn
	}
	index    uint32
	anyTimes bool
}

// moqUsual_NoResults_fnRecorder routes recorded function calls to the moqUsual moq
type moqUsual_NoResults_fnRecorder struct {
	params    moqUsual_NoResults_params
	paramsKey moqUsual_NoResults_paramsKey
	anyParams uint64
	sequence  bool
	results   *moqUsual_NoResults_results
	moq       *moqUsual
}

// moqUsual_NoParams_params holds the params of the Usual type
type moqUsual_NoParams_params struct{}

// moqUsual_NoParams_paramsKey holds the map key params of the Usual type
type moqUsual_NoParams_paramsKey struct{}

// moqUsual_NoParams_resultsByParams contains the results for a given set of parameters for the Usual type
type moqUsual_NoParams_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqUsual_NoParams_paramsKey]*moqUsual_NoParams_results
}

// moqUsual_NoParams_doFn defines the type of function needed when calling andDo for the Usual type
type moqUsual_NoParams_doFn func()

// moqUsual_NoParams_doReturnFn defines the type of function needed when calling doReturnResults for the Usual type
type moqUsual_NoParams_doReturnFn func() (sResult string, err error)

// moqUsual_NoParams_results holds the results of the Usual type
type moqUsual_NoParams_results struct {
	params  moqUsual_NoParams_params
	results []struct {
		values *struct {
			sResult string
			err     error
		}
		sequence   uint32
		doFn       moqUsual_NoParams_doFn
		doReturnFn moqUsual_NoParams_doReturnFn
	}
	index    uint32
	anyTimes bool
}

// moqUsual_NoParams_fnRecorder routes recorded function calls to the moqUsual moq
type moqUsual_NoParams_fnRecorder struct {
	params    moqUsual_NoParams_params
	paramsKey moqUsual_NoParams_paramsKey
	anyParams uint64
	sequence  bool
	results   *moqUsual_NoParams_results
	moq       *moqUsual
}

// moqUsual_Nothing_params holds the params of the Usual type
type moqUsual_Nothing_params struct{}

// moqUsual_Nothing_paramsKey holds the map key params of the Usual type
type moqUsual_Nothing_paramsKey struct{}

// moqUsual_Nothing_resultsByParams contains the results for a given set of parameters for the Usual type
type moqUsual_Nothing_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqUsual_Nothing_paramsKey]*moqUsual_Nothing_results
}

// moqUsual_Nothing_doFn defines the type of function needed when calling andDo for the Usual type
type moqUsual_Nothing_doFn func()

// moqUsual_Nothing_doReturnFn defines the type of function needed when calling doReturnResults for the Usual type
type moqUsual_Nothing_doReturnFn func()

// moqUsual_Nothing_results holds the results of the Usual type
type moqUsual_Nothing_results struct {
	params  moqUsual_Nothing_params
	results []struct {
		values *struct {
		}
		sequence   uint32
		doFn       moqUsual_Nothing_doFn
		doReturnFn moqUsual_Nothing_doReturnFn
	}
	index    uint32
	anyTimes bool
}

// moqUsual_Nothing_fnRecorder routes recorded function calls to the moqUsual moq
type moqUsual_Nothing_fnRecorder struct {
	params    moqUsual_Nothing_params
	paramsKey moqUsual_Nothing_paramsKey
	anyParams uint64
	sequence  bool
	results   *moqUsual_Nothing_results
	moq       *moqUsual
}

// moqUsual_Variadic_params holds the params of the Usual type
type moqUsual_Variadic_params struct {
	other bool
	args  []string
}

// moqUsual_Variadic_paramsKey holds the map key params of the Usual type
type moqUsual_Variadic_paramsKey struct {
	other bool
	args  hash.Hash
}

// moqUsual_Variadic_resultsByParams contains the results for a given set of parameters for the Usual type
type moqUsual_Variadic_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqUsual_Variadic_paramsKey]*moqUsual_Variadic_results
}

// moqUsual_Variadic_doFn defines the type of function needed when calling andDo for the Usual type
type moqUsual_Variadic_doFn func(other bool, args ...string)

// moqUsual_Variadic_doReturnFn defines the type of function needed when calling doReturnResults for the Usual type
type moqUsual_Variadic_doReturnFn func(other bool, args ...string) (sResult string, err error)

// moqUsual_Variadic_results holds the results of the Usual type
type moqUsual_Variadic_results struct {
	params  moqUsual_Variadic_params
	results []struct {
		values *struct {
			sResult string
			err     error
		}
		sequence   uint32
		doFn       moqUsual_Variadic_doFn
		doReturnFn moqUsual_Variadic_doReturnFn
	}
	index    uint32
	anyTimes bool
}

// moqUsual_Variadic_fnRecorder routes recorded function calls to the moqUsual moq
type moqUsual_Variadic_fnRecorder struct {
	params    moqUsual_Variadic_params
	paramsKey moqUsual_Variadic_paramsKey
	anyParams uint64
	sequence  bool
	results   *moqUsual_Variadic_results
	moq       *moqUsual
}

// moqUsual_RepeatedIds_params holds the params of the Usual type
type moqUsual_RepeatedIds_params struct {
	sParam1, sParam2 string
	bParam           bool
}

// moqUsual_RepeatedIds_paramsKey holds the map key params of the Usual type
type moqUsual_RepeatedIds_paramsKey struct {
	sParam1, sParam2 string
	bParam           bool
}

// moqUsual_RepeatedIds_resultsByParams contains the results for a given set of parameters for the Usual type
type moqUsual_RepeatedIds_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqUsual_RepeatedIds_paramsKey]*moqUsual_RepeatedIds_results
}

// moqUsual_RepeatedIds_doFn defines the type of function needed when calling andDo for the Usual type
type moqUsual_RepeatedIds_doFn func(sParam1, sParam2 string, bParam bool)

// moqUsual_RepeatedIds_doReturnFn defines the type of function needed when calling doReturnResults for the Usual type
type moqUsual_RepeatedIds_doReturnFn func(sParam1, sParam2 string, bParam bool) (sResult1, sResult2 string, err error)

// moqUsual_RepeatedIds_results holds the results of the Usual type
type moqUsual_RepeatedIds_results struct {
	params  moqUsual_RepeatedIds_params
	results []struct {
		values *struct {
			sResult1, sResult2 string
			err                error
		}
		sequence   uint32
		doFn       moqUsual_RepeatedIds_doFn
		doReturnFn moqUsual_RepeatedIds_doReturnFn
	}
	index    uint32
	anyTimes bool
}

// moqUsual_RepeatedIds_fnRecorder routes recorded function calls to the moqUsual moq
type moqUsual_RepeatedIds_fnRecorder struct {
	params    moqUsual_RepeatedIds_params
	paramsKey moqUsual_RepeatedIds_paramsKey
	anyParams uint64
	sequence  bool
	results   *moqUsual_RepeatedIds_results
	moq       *moqUsual
}

// newMoqUsual creates a new moq of the Usual type
func newMoqUsual(scene *moq.Scene, config *moq.Config) *moqUsual {
	if config == nil {
		config = &moq.Config{}
	}
	m := &moqUsual{
		scene:  scene,
		config: *config,
	}
	scene.AddMoq(m)
	return m
}

// mock returns the mock implementation of the Usual type
func (m *moqUsual) mock() *moqUsual_mock {
	return &moqUsual_mock{
		moq: m,
	}
}

func (m *moqUsual_mock) Usual(sParam string, bParam bool) (sResult string, err error) {
	params := moqUsual_Usual_params{
		sParam: sParam,
		bParam: bParam,
	}
	var results *moqUsual_Usual_results
	for _, resultsByParams := range m.moq.resultsByParams_Usual {
		var sParamUsed string
		if resultsByParams.anyParams&(1<<0) == 0 {
			sParamUsed = sParam
		}
		var bParamUsed bool
		if resultsByParams.anyParams&(1<<1) == 0 {
			bParamUsed = bParam
		}
		paramsKey := moqUsual_Usual_paramsKey{
			sParam: sParamUsed,
			bParam: bParamUsed,
		}
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= len(results.results) {
		if !results.anyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = len(results.results) - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.anyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match %#v", params)
		}
	}

	if result.doFn != nil {
		result.doFn(sParam, bParam)
	}

	if result.values != nil {
		sResult = result.values.sResult
		err = result.values.err
	}
	if result.doReturnFn != nil {
		sResult, err = result.doReturnFn(sParam, bParam)
	}
	return
}

func (m *moqUsual_mock) NoNames(param1 string, param2 bool) (result1 string, result2 error) {
	params := moqUsual_NoNames_params{
		param1: param1,
		param2: param2,
	}
	var results *moqUsual_NoNames_results
	for _, resultsByParams := range m.moq.resultsByParams_NoNames {
		var param1Used string
		if resultsByParams.anyParams&(1<<0) == 0 {
			param1Used = param1
		}
		var param2Used bool
		if resultsByParams.anyParams&(1<<1) == 0 {
			param2Used = param2
		}
		paramsKey := moqUsual_NoNames_paramsKey{
			param1: param1Used,
			param2: param2Used,
		}
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= len(results.results) {
		if !results.anyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = len(results.results) - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.anyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match %#v", params)
		}
	}

	if result.doFn != nil {
		result.doFn(param1, param2)
	}

	if result.values != nil {
		result1 = result.values.result1
		result2 = result.values.result2
	}
	if result.doReturnFn != nil {
		result1, result2 = result.doReturnFn(param1, param2)
	}
	return
}

func (m *moqUsual_mock) NoResults(sParam string, bParam bool) {
	params := moqUsual_NoResults_params{
		sParam: sParam,
		bParam: bParam,
	}
	var results *moqUsual_NoResults_results
	for _, resultsByParams := range m.moq.resultsByParams_NoResults {
		var sParamUsed string
		if resultsByParams.anyParams&(1<<0) == 0 {
			sParamUsed = sParam
		}
		var bParamUsed bool
		if resultsByParams.anyParams&(1<<1) == 0 {
			bParamUsed = bParam
		}
		paramsKey := moqUsual_NoResults_paramsKey{
			sParam: sParamUsed,
			bParam: bParamUsed,
		}
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= len(results.results) {
		if !results.anyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = len(results.results) - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.anyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match %#v", params)
		}
	}

	if result.doFn != nil {
		result.doFn(sParam, bParam)
	}

	if result.doReturnFn != nil {
		result.doReturnFn(sParam, bParam)
	}
	return
}

func (m *moqUsual_mock) NoParams() (sResult string, err error) {
	params := moqUsual_NoParams_params{}
	var results *moqUsual_NoParams_results
	for _, resultsByParams := range m.moq.resultsByParams_NoParams {
		paramsKey := moqUsual_NoParams_paramsKey{}
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= len(results.results) {
		if !results.anyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = len(results.results) - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.anyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match %#v", params)
		}
	}

	if result.doFn != nil {
		result.doFn()
	}

	if result.values != nil {
		sResult = result.values.sResult
		err = result.values.err
	}
	if result.doReturnFn != nil {
		sResult, err = result.doReturnFn()
	}
	return
}

func (m *moqUsual_mock) Nothing() {
	params := moqUsual_Nothing_params{}
	var results *moqUsual_Nothing_results
	for _, resultsByParams := range m.moq.resultsByParams_Nothing {
		paramsKey := moqUsual_Nothing_paramsKey{}
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= len(results.results) {
		if !results.anyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = len(results.results) - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.anyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match %#v", params)
		}
	}

	if result.doFn != nil {
		result.doFn()
	}

	if result.doReturnFn != nil {
		result.doReturnFn()
	}
	return
}

func (m *moqUsual_mock) Variadic(other bool, args ...string) (sResult string, err error) {
	params := moqUsual_Variadic_params{
		other: other,
		args:  args,
	}
	var results *moqUsual_Variadic_results
	for _, resultsByParams := range m.moq.resultsByParams_Variadic {
		var otherUsed bool
		if resultsByParams.anyParams&(1<<0) == 0 {
			otherUsed = other
		}
		var argsUsed hash.Hash
		if resultsByParams.anyParams&(1<<1) == 0 {
			argsUsed = hash.DeepHash(args)
		}
		paramsKey := moqUsual_Variadic_paramsKey{
			other: otherUsed,
			args:  argsUsed,
		}
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= len(results.results) {
		if !results.anyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = len(results.results) - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.anyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match %#v", params)
		}
	}

	if result.doFn != nil {
		result.doFn(other, args...)
	}

	if result.values != nil {
		sResult = result.values.sResult
		err = result.values.err
	}
	if result.doReturnFn != nil {
		sResult, err = result.doReturnFn(other, args...)
	}
	return
}

func (m *moqUsual_mock) RepeatedIds(sParam1, sParam2 string, bParam bool) (sResult1, sResult2 string, err error) {
	params := moqUsual_RepeatedIds_params{
		sParam1: sParam1,
		sParam2: sParam2,
		bParam:  bParam,
	}
	var results *moqUsual_RepeatedIds_results
	for _, resultsByParams := range m.moq.resultsByParams_RepeatedIds {
		var sParam1Used string
		if resultsByParams.anyParams&(1<<0) == 0 {
			sParam1Used = sParam1
		}
		var sParam2Used string
		if resultsByParams.anyParams&(1<<1) == 0 {
			sParam2Used = sParam2
		}
		var bParamUsed bool
		if resultsByParams.anyParams&(1<<2) == 0 {
			bParamUsed = bParam
		}
		paramsKey := moqUsual_RepeatedIds_paramsKey{
			sParam1: sParam1Used,
			sParam2: sParam2Used,
			bParam:  bParamUsed,
		}
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= len(results.results) {
		if !results.anyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = len(results.results) - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.anyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match %#v", params)
		}
	}

	if result.doFn != nil {
		result.doFn(sParam1, sParam2, bParam)
	}

	if result.values != nil {
		sResult1 = result.values.sResult1
		sResult2 = result.values.sResult2
		err = result.values.err
	}
	if result.doReturnFn != nil {
		sResult1, sResult2, err = result.doReturnFn(sParam1, sParam2, bParam)
	}
	return
}

// onCall returns the recorder implementation of the Usual type
func (m *moqUsual) onCall() *moqUsual_recorder {
	return &moqUsual_recorder{
		moq: m,
	}
}

func (m *moqUsual_recorder) Usual(sParam string, bParam bool) *moqUsual_Usual_fnRecorder {
	return &moqUsual_Usual_fnRecorder{
		params: moqUsual_Usual_params{
			sParam: sParam,
			bParam: bParam,
		},
		paramsKey: moqUsual_Usual_paramsKey{
			sParam: sParam,
			bParam: bParam,
		},
		sequence: m.moq.config.Sequence == moq.SeqDefaultOn,
		moq:      m.moq,
	}
}

func (r *moqUsual_Usual_fnRecorder) anySParam() *moqUsual_Usual_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.anyParams |= 1 << 0
	return r
}

func (r *moqUsual_Usual_fnRecorder) anyBParam() *moqUsual_Usual_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.anyParams |= 1 << 1
	return r
}

func (r *moqUsual_Usual_fnRecorder) seq() *moqUsual_Usual_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqUsual_Usual_fnRecorder) noSeq() *moqUsual_Usual_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqUsual_Usual_fnRecorder) returnResults(sResult string, err error) *moqUsual_Usual_fnRecorder {
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			sResult string
			err     error
		}
		sequence   uint32
		doFn       moqUsual_Usual_doFn
		doReturnFn moqUsual_Usual_doReturnFn
	}{
		values: &struct {
			sResult string
			err     error
		}{
			sResult: sResult,
			err:     err,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqUsual_Usual_fnRecorder) andDo(fn moqUsual_Usual_doFn) *moqUsual_Usual_fnRecorder {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqUsual_Usual_fnRecorder) doReturnResults(fn moqUsual_Usual_doReturnFn) *moqUsual_Usual_fnRecorder {
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			sResult string
			err     error
		}
		sequence   uint32
		doFn       moqUsual_Usual_doFn
		doReturnFn moqUsual_Usual_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqUsual_Usual_fnRecorder) findResults() {
	if r.results == nil {
		anyCount := bits.OnesCount64(r.anyParams)
		insertAt := -1
		var results *moqUsual_Usual_resultsByParams
		for n, res := range r.moq.resultsByParams_Usual {
			if res.anyParams == r.anyParams {
				results = &res
				break
			}
			if res.anyCount > anyCount {
				insertAt = n
			}
		}
		if results == nil {
			results = &moqUsual_Usual_resultsByParams{
				anyCount:  anyCount,
				anyParams: r.anyParams,
				results:   map[moqUsual_Usual_paramsKey]*moqUsual_Usual_results{},
			}
			r.moq.resultsByParams_Usual = append(r.moq.resultsByParams_Usual, *results)
			if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams_Usual) {
				copy(r.moq.resultsByParams_Usual[insertAt+1:], r.moq.resultsByParams_Usual[insertAt:0])
				r.moq.resultsByParams_Usual[insertAt] = *results
			}
		}

		var sParamUsed string
		if r.anyParams&(1<<0) == 0 {
			sParamUsed = r.paramsKey.sParam
		}
		var bParamUsed bool
		if r.anyParams&(1<<1) == 0 {
			bParamUsed = r.paramsKey.bParam
		}
		paramsKey := moqUsual_Usual_paramsKey{
			sParam: sParamUsed,
			bParam: bParamUsed,
		}

		var ok bool
		r.results, ok = results.results[paramsKey]
		if !ok {
			r.results = &moqUsual_Usual_results{
				params:   r.params,
				results:  nil,
				index:    0,
				anyTimes: false,
			}
			results.results[paramsKey] = r.results
		}
	}
}

func (r *moqUsual_Usual_fnRecorder) times(count int) *moqUsual_Usual_fnRecorder {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling times")
		return nil
	}
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < count-1; n++ {
		if last.sequence != 0 {
			last = struct {
				values *struct {
					sResult string
					err     error
				}
				sequence   uint32
				doFn       moqUsual_Usual_doFn
				doReturnFn moqUsual_Usual_doReturnFn
			}{
				values: &struct {
					sResult string
					err     error
				}{
					sResult: last.values.sResult,
					err:     last.values.err,
				},
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (r *moqUsual_Usual_fnRecorder) anyTimes() {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling anyTimes")
		return
	}
	r.results.anyTimes = true
}

func (m *moqUsual_recorder) NoNames(param1 string, param2 bool) *moqUsual_NoNames_fnRecorder {
	return &moqUsual_NoNames_fnRecorder{
		params: moqUsual_NoNames_params{
			param1: param1,
			param2: param2,
		},
		paramsKey: moqUsual_NoNames_paramsKey{
			param1: param1,
			param2: param2,
		},
		sequence: m.moq.config.Sequence == moq.SeqDefaultOn,
		moq:      m.moq,
	}
}

func (r *moqUsual_NoNames_fnRecorder) anyParam1() *moqUsual_NoNames_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.anyParams |= 1 << 0
	return r
}

func (r *moqUsual_NoNames_fnRecorder) anyParam2() *moqUsual_NoNames_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.anyParams |= 1 << 1
	return r
}

func (r *moqUsual_NoNames_fnRecorder) seq() *moqUsual_NoNames_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqUsual_NoNames_fnRecorder) noSeq() *moqUsual_NoNames_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqUsual_NoNames_fnRecorder) returnResults(result1 string, result2 error) *moqUsual_NoNames_fnRecorder {
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 string
			result2 error
		}
		sequence   uint32
		doFn       moqUsual_NoNames_doFn
		doReturnFn moqUsual_NoNames_doReturnFn
	}{
		values: &struct {
			result1 string
			result2 error
		}{
			result1: result1,
			result2: result2,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqUsual_NoNames_fnRecorder) andDo(fn moqUsual_NoNames_doFn) *moqUsual_NoNames_fnRecorder {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqUsual_NoNames_fnRecorder) doReturnResults(fn moqUsual_NoNames_doReturnFn) *moqUsual_NoNames_fnRecorder {
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 string
			result2 error
		}
		sequence   uint32
		doFn       moqUsual_NoNames_doFn
		doReturnFn moqUsual_NoNames_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqUsual_NoNames_fnRecorder) findResults() {
	if r.results == nil {
		anyCount := bits.OnesCount64(r.anyParams)
		insertAt := -1
		var results *moqUsual_NoNames_resultsByParams
		for n, res := range r.moq.resultsByParams_NoNames {
			if res.anyParams == r.anyParams {
				results = &res
				break
			}
			if res.anyCount > anyCount {
				insertAt = n
			}
		}
		if results == nil {
			results = &moqUsual_NoNames_resultsByParams{
				anyCount:  anyCount,
				anyParams: r.anyParams,
				results:   map[moqUsual_NoNames_paramsKey]*moqUsual_NoNames_results{},
			}
			r.moq.resultsByParams_NoNames = append(r.moq.resultsByParams_NoNames, *results)
			if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams_NoNames) {
				copy(r.moq.resultsByParams_NoNames[insertAt+1:], r.moq.resultsByParams_NoNames[insertAt:0])
				r.moq.resultsByParams_NoNames[insertAt] = *results
			}
		}

		var param1Used string
		if r.anyParams&(1<<0) == 0 {
			param1Used = r.paramsKey.param1
		}
		var param2Used bool
		if r.anyParams&(1<<1) == 0 {
			param2Used = r.paramsKey.param2
		}
		paramsKey := moqUsual_NoNames_paramsKey{
			param1: param1Used,
			param2: param2Used,
		}

		var ok bool
		r.results, ok = results.results[paramsKey]
		if !ok {
			r.results = &moqUsual_NoNames_results{
				params:   r.params,
				results:  nil,
				index:    0,
				anyTimes: false,
			}
			results.results[paramsKey] = r.results
		}
	}
}

func (r *moqUsual_NoNames_fnRecorder) times(count int) *moqUsual_NoNames_fnRecorder {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling times")
		return nil
	}
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < count-1; n++ {
		if last.sequence != 0 {
			last = struct {
				values *struct {
					result1 string
					result2 error
				}
				sequence   uint32
				doFn       moqUsual_NoNames_doFn
				doReturnFn moqUsual_NoNames_doReturnFn
			}{
				values: &struct {
					result1 string
					result2 error
				}{
					result1: last.values.result1,
					result2: last.values.result2,
				},
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (r *moqUsual_NoNames_fnRecorder) anyTimes() {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling anyTimes")
		return
	}
	r.results.anyTimes = true
}

func (m *moqUsual_recorder) NoResults(sParam string, bParam bool) *moqUsual_NoResults_fnRecorder {
	return &moqUsual_NoResults_fnRecorder{
		params: moqUsual_NoResults_params{
			sParam: sParam,
			bParam: bParam,
		},
		paramsKey: moqUsual_NoResults_paramsKey{
			sParam: sParam,
			bParam: bParam,
		},
		sequence: m.moq.config.Sequence == moq.SeqDefaultOn,
		moq:      m.moq,
	}
}

func (r *moqUsual_NoResults_fnRecorder) anySParam() *moqUsual_NoResults_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.anyParams |= 1 << 0
	return r
}

func (r *moqUsual_NoResults_fnRecorder) anyBParam() *moqUsual_NoResults_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.anyParams |= 1 << 1
	return r
}

func (r *moqUsual_NoResults_fnRecorder) seq() *moqUsual_NoResults_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqUsual_NoResults_fnRecorder) noSeq() *moqUsual_NoResults_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqUsual_NoResults_fnRecorder) returnResults() *moqUsual_NoResults_fnRecorder {
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
		}
		sequence   uint32
		doFn       moqUsual_NoResults_doFn
		doReturnFn moqUsual_NoResults_doReturnFn
	}{
		values: &struct {
		}{},
		sequence: sequence,
	})
	return r
}

func (r *moqUsual_NoResults_fnRecorder) andDo(fn moqUsual_NoResults_doFn) *moqUsual_NoResults_fnRecorder {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqUsual_NoResults_fnRecorder) doReturnResults(fn moqUsual_NoResults_doReturnFn) *moqUsual_NoResults_fnRecorder {
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
		}
		sequence   uint32
		doFn       moqUsual_NoResults_doFn
		doReturnFn moqUsual_NoResults_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqUsual_NoResults_fnRecorder) findResults() {
	if r.results == nil {
		anyCount := bits.OnesCount64(r.anyParams)
		insertAt := -1
		var results *moqUsual_NoResults_resultsByParams
		for n, res := range r.moq.resultsByParams_NoResults {
			if res.anyParams == r.anyParams {
				results = &res
				break
			}
			if res.anyCount > anyCount {
				insertAt = n
			}
		}
		if results == nil {
			results = &moqUsual_NoResults_resultsByParams{
				anyCount:  anyCount,
				anyParams: r.anyParams,
				results:   map[moqUsual_NoResults_paramsKey]*moqUsual_NoResults_results{},
			}
			r.moq.resultsByParams_NoResults = append(r.moq.resultsByParams_NoResults, *results)
			if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams_NoResults) {
				copy(r.moq.resultsByParams_NoResults[insertAt+1:], r.moq.resultsByParams_NoResults[insertAt:0])
				r.moq.resultsByParams_NoResults[insertAt] = *results
			}
		}

		var sParamUsed string
		if r.anyParams&(1<<0) == 0 {
			sParamUsed = r.paramsKey.sParam
		}
		var bParamUsed bool
		if r.anyParams&(1<<1) == 0 {
			bParamUsed = r.paramsKey.bParam
		}
		paramsKey := moqUsual_NoResults_paramsKey{
			sParam: sParamUsed,
			bParam: bParamUsed,
		}

		var ok bool
		r.results, ok = results.results[paramsKey]
		if !ok {
			r.results = &moqUsual_NoResults_results{
				params:   r.params,
				results:  nil,
				index:    0,
				anyTimes: false,
			}
			results.results[paramsKey] = r.results
		}
	}
}

func (r *moqUsual_NoResults_fnRecorder) times(count int) *moqUsual_NoResults_fnRecorder {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling times")
		return nil
	}
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < count-1; n++ {
		if last.sequence != 0 {
			last = struct {
				values *struct {
				}
				sequence   uint32
				doFn       moqUsual_NoResults_doFn
				doReturnFn moqUsual_NoResults_doReturnFn
			}{
				values: &struct {
				}{},
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (r *moqUsual_NoResults_fnRecorder) anyTimes() {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling anyTimes")
		return
	}
	r.results.anyTimes = true
}

func (m *moqUsual_recorder) NoParams() *moqUsual_NoParams_fnRecorder {
	return &moqUsual_NoParams_fnRecorder{
		params:    moqUsual_NoParams_params{},
		paramsKey: moqUsual_NoParams_paramsKey{},
		sequence:  m.moq.config.Sequence == moq.SeqDefaultOn,
		moq:       m.moq,
	}
}

func (r *moqUsual_NoParams_fnRecorder) seq() *moqUsual_NoParams_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqUsual_NoParams_fnRecorder) noSeq() *moqUsual_NoParams_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqUsual_NoParams_fnRecorder) returnResults(sResult string, err error) *moqUsual_NoParams_fnRecorder {
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			sResult string
			err     error
		}
		sequence   uint32
		doFn       moqUsual_NoParams_doFn
		doReturnFn moqUsual_NoParams_doReturnFn
	}{
		values: &struct {
			sResult string
			err     error
		}{
			sResult: sResult,
			err:     err,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqUsual_NoParams_fnRecorder) andDo(fn moqUsual_NoParams_doFn) *moqUsual_NoParams_fnRecorder {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqUsual_NoParams_fnRecorder) doReturnResults(fn moqUsual_NoParams_doReturnFn) *moqUsual_NoParams_fnRecorder {
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			sResult string
			err     error
		}
		sequence   uint32
		doFn       moqUsual_NoParams_doFn
		doReturnFn moqUsual_NoParams_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqUsual_NoParams_fnRecorder) findResults() {
	if r.results == nil {
		anyCount := bits.OnesCount64(r.anyParams)
		insertAt := -1
		var results *moqUsual_NoParams_resultsByParams
		for n, res := range r.moq.resultsByParams_NoParams {
			if res.anyParams == r.anyParams {
				results = &res
				break
			}
			if res.anyCount > anyCount {
				insertAt = n
			}
		}
		if results == nil {
			results = &moqUsual_NoParams_resultsByParams{
				anyCount:  anyCount,
				anyParams: r.anyParams,
				results:   map[moqUsual_NoParams_paramsKey]*moqUsual_NoParams_results{},
			}
			r.moq.resultsByParams_NoParams = append(r.moq.resultsByParams_NoParams, *results)
			if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams_NoParams) {
				copy(r.moq.resultsByParams_NoParams[insertAt+1:], r.moq.resultsByParams_NoParams[insertAt:0])
				r.moq.resultsByParams_NoParams[insertAt] = *results
			}
		}

		paramsKey := moqUsual_NoParams_paramsKey{}

		var ok bool
		r.results, ok = results.results[paramsKey]
		if !ok {
			r.results = &moqUsual_NoParams_results{
				params:   r.params,
				results:  nil,
				index:    0,
				anyTimes: false,
			}
			results.results[paramsKey] = r.results
		}
	}
}

func (r *moqUsual_NoParams_fnRecorder) times(count int) *moqUsual_NoParams_fnRecorder {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling times")
		return nil
	}
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < count-1; n++ {
		if last.sequence != 0 {
			last = struct {
				values *struct {
					sResult string
					err     error
				}
				sequence   uint32
				doFn       moqUsual_NoParams_doFn
				doReturnFn moqUsual_NoParams_doReturnFn
			}{
				values: &struct {
					sResult string
					err     error
				}{
					sResult: last.values.sResult,
					err:     last.values.err,
				},
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (r *moqUsual_NoParams_fnRecorder) anyTimes() {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling anyTimes")
		return
	}
	r.results.anyTimes = true
}

func (m *moqUsual_recorder) Nothing() *moqUsual_Nothing_fnRecorder {
	return &moqUsual_Nothing_fnRecorder{
		params:    moqUsual_Nothing_params{},
		paramsKey: moqUsual_Nothing_paramsKey{},
		sequence:  m.moq.config.Sequence == moq.SeqDefaultOn,
		moq:       m.moq,
	}
}

func (r *moqUsual_Nothing_fnRecorder) seq() *moqUsual_Nothing_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqUsual_Nothing_fnRecorder) noSeq() *moqUsual_Nothing_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqUsual_Nothing_fnRecorder) returnResults() *moqUsual_Nothing_fnRecorder {
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
		}
		sequence   uint32
		doFn       moqUsual_Nothing_doFn
		doReturnFn moqUsual_Nothing_doReturnFn
	}{
		values: &struct {
		}{},
		sequence: sequence,
	})
	return r
}

func (r *moqUsual_Nothing_fnRecorder) andDo(fn moqUsual_Nothing_doFn) *moqUsual_Nothing_fnRecorder {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqUsual_Nothing_fnRecorder) doReturnResults(fn moqUsual_Nothing_doReturnFn) *moqUsual_Nothing_fnRecorder {
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
		}
		sequence   uint32
		doFn       moqUsual_Nothing_doFn
		doReturnFn moqUsual_Nothing_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqUsual_Nothing_fnRecorder) findResults() {
	if r.results == nil {
		anyCount := bits.OnesCount64(r.anyParams)
		insertAt := -1
		var results *moqUsual_Nothing_resultsByParams
		for n, res := range r.moq.resultsByParams_Nothing {
			if res.anyParams == r.anyParams {
				results = &res
				break
			}
			if res.anyCount > anyCount {
				insertAt = n
			}
		}
		if results == nil {
			results = &moqUsual_Nothing_resultsByParams{
				anyCount:  anyCount,
				anyParams: r.anyParams,
				results:   map[moqUsual_Nothing_paramsKey]*moqUsual_Nothing_results{},
			}
			r.moq.resultsByParams_Nothing = append(r.moq.resultsByParams_Nothing, *results)
			if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams_Nothing) {
				copy(r.moq.resultsByParams_Nothing[insertAt+1:], r.moq.resultsByParams_Nothing[insertAt:0])
				r.moq.resultsByParams_Nothing[insertAt] = *results
			}
		}

		paramsKey := moqUsual_Nothing_paramsKey{}

		var ok bool
		r.results, ok = results.results[paramsKey]
		if !ok {
			r.results = &moqUsual_Nothing_results{
				params:   r.params,
				results:  nil,
				index:    0,
				anyTimes: false,
			}
			results.results[paramsKey] = r.results
		}
	}
}

func (r *moqUsual_Nothing_fnRecorder) times(count int) *moqUsual_Nothing_fnRecorder {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling times")
		return nil
	}
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < count-1; n++ {
		if last.sequence != 0 {
			last = struct {
				values *struct {
				}
				sequence   uint32
				doFn       moqUsual_Nothing_doFn
				doReturnFn moqUsual_Nothing_doReturnFn
			}{
				values: &struct {
				}{},
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (r *moqUsual_Nothing_fnRecorder) anyTimes() {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling anyTimes")
		return
	}
	r.results.anyTimes = true
}

func (m *moqUsual_recorder) Variadic(other bool, args ...string) *moqUsual_Variadic_fnRecorder {
	return &moqUsual_Variadic_fnRecorder{
		params: moqUsual_Variadic_params{
			other: other,
			args:  args,
		},
		paramsKey: moqUsual_Variadic_paramsKey{
			other: other,
			args:  hash.DeepHash(args),
		},
		sequence: m.moq.config.Sequence == moq.SeqDefaultOn,
		moq:      m.moq,
	}
}

func (r *moqUsual_Variadic_fnRecorder) anyOther() *moqUsual_Variadic_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.anyParams |= 1 << 0
	return r
}

func (r *moqUsual_Variadic_fnRecorder) anyArgs() *moqUsual_Variadic_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.anyParams |= 1 << 1
	return r
}

func (r *moqUsual_Variadic_fnRecorder) seq() *moqUsual_Variadic_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqUsual_Variadic_fnRecorder) noSeq() *moqUsual_Variadic_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqUsual_Variadic_fnRecorder) returnResults(sResult string, err error) *moqUsual_Variadic_fnRecorder {
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			sResult string
			err     error
		}
		sequence   uint32
		doFn       moqUsual_Variadic_doFn
		doReturnFn moqUsual_Variadic_doReturnFn
	}{
		values: &struct {
			sResult string
			err     error
		}{
			sResult: sResult,
			err:     err,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqUsual_Variadic_fnRecorder) andDo(fn moqUsual_Variadic_doFn) *moqUsual_Variadic_fnRecorder {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqUsual_Variadic_fnRecorder) doReturnResults(fn moqUsual_Variadic_doReturnFn) *moqUsual_Variadic_fnRecorder {
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			sResult string
			err     error
		}
		sequence   uint32
		doFn       moqUsual_Variadic_doFn
		doReturnFn moqUsual_Variadic_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqUsual_Variadic_fnRecorder) findResults() {
	if r.results == nil {
		anyCount := bits.OnesCount64(r.anyParams)
		insertAt := -1
		var results *moqUsual_Variadic_resultsByParams
		for n, res := range r.moq.resultsByParams_Variadic {
			if res.anyParams == r.anyParams {
				results = &res
				break
			}
			if res.anyCount > anyCount {
				insertAt = n
			}
		}
		if results == nil {
			results = &moqUsual_Variadic_resultsByParams{
				anyCount:  anyCount,
				anyParams: r.anyParams,
				results:   map[moqUsual_Variadic_paramsKey]*moqUsual_Variadic_results{},
			}
			r.moq.resultsByParams_Variadic = append(r.moq.resultsByParams_Variadic, *results)
			if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams_Variadic) {
				copy(r.moq.resultsByParams_Variadic[insertAt+1:], r.moq.resultsByParams_Variadic[insertAt:0])
				r.moq.resultsByParams_Variadic[insertAt] = *results
			}
		}

		var otherUsed bool
		if r.anyParams&(1<<0) == 0 {
			otherUsed = r.paramsKey.other
		}
		var argsUsed hash.Hash
		if r.anyParams&(1<<1) == 0 {
			argsUsed = r.paramsKey.args
		}
		paramsKey := moqUsual_Variadic_paramsKey{
			other: otherUsed,
			args:  argsUsed,
		}

		var ok bool
		r.results, ok = results.results[paramsKey]
		if !ok {
			r.results = &moqUsual_Variadic_results{
				params:   r.params,
				results:  nil,
				index:    0,
				anyTimes: false,
			}
			results.results[paramsKey] = r.results
		}
	}
}

func (r *moqUsual_Variadic_fnRecorder) times(count int) *moqUsual_Variadic_fnRecorder {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling times")
		return nil
	}
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < count-1; n++ {
		if last.sequence != 0 {
			last = struct {
				values *struct {
					sResult string
					err     error
				}
				sequence   uint32
				doFn       moqUsual_Variadic_doFn
				doReturnFn moqUsual_Variadic_doReturnFn
			}{
				values: &struct {
					sResult string
					err     error
				}{
					sResult: last.values.sResult,
					err:     last.values.err,
				},
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (r *moqUsual_Variadic_fnRecorder) anyTimes() {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling anyTimes")
		return
	}
	r.results.anyTimes = true
}

func (m *moqUsual_recorder) RepeatedIds(sParam1, sParam2 string, bParam bool) *moqUsual_RepeatedIds_fnRecorder {
	return &moqUsual_RepeatedIds_fnRecorder{
		params: moqUsual_RepeatedIds_params{
			sParam1: sParam1,
			sParam2: sParam2,
			bParam:  bParam,
		},
		paramsKey: moqUsual_RepeatedIds_paramsKey{
			sParam1: sParam1,
			sParam2: sParam2,
			bParam:  bParam,
		},
		sequence: m.moq.config.Sequence == moq.SeqDefaultOn,
		moq:      m.moq,
	}
}

func (r *moqUsual_RepeatedIds_fnRecorder) anySParam1() *moqUsual_RepeatedIds_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.anyParams |= 1 << 0
	return r
}

func (r *moqUsual_RepeatedIds_fnRecorder) anySParam2() *moqUsual_RepeatedIds_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.anyParams |= 1 << 1
	return r
}

func (r *moqUsual_RepeatedIds_fnRecorder) anyBParam() *moqUsual_RepeatedIds_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.anyParams |= 1 << 2
	return r
}

func (r *moqUsual_RepeatedIds_fnRecorder) seq() *moqUsual_RepeatedIds_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqUsual_RepeatedIds_fnRecorder) noSeq() *moqUsual_RepeatedIds_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqUsual_RepeatedIds_fnRecorder) returnResults(sResult1, sResult2 string, err error) *moqUsual_RepeatedIds_fnRecorder {
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			sResult1, sResult2 string
			err                error
		}
		sequence   uint32
		doFn       moqUsual_RepeatedIds_doFn
		doReturnFn moqUsual_RepeatedIds_doReturnFn
	}{
		values: &struct {
			sResult1, sResult2 string
			err                error
		}{
			sResult1: sResult1,
			sResult2: sResult2,
			err:      err,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqUsual_RepeatedIds_fnRecorder) andDo(fn moqUsual_RepeatedIds_doFn) *moqUsual_RepeatedIds_fnRecorder {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqUsual_RepeatedIds_fnRecorder) doReturnResults(fn moqUsual_RepeatedIds_doReturnFn) *moqUsual_RepeatedIds_fnRecorder {
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			sResult1, sResult2 string
			err                error
		}
		sequence   uint32
		doFn       moqUsual_RepeatedIds_doFn
		doReturnFn moqUsual_RepeatedIds_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqUsual_RepeatedIds_fnRecorder) findResults() {
	if r.results == nil {
		anyCount := bits.OnesCount64(r.anyParams)
		insertAt := -1
		var results *moqUsual_RepeatedIds_resultsByParams
		for n, res := range r.moq.resultsByParams_RepeatedIds {
			if res.anyParams == r.anyParams {
				results = &res
				break
			}
			if res.anyCount > anyCount {
				insertAt = n
			}
		}
		if results == nil {
			results = &moqUsual_RepeatedIds_resultsByParams{
				anyCount:  anyCount,
				anyParams: r.anyParams,
				results:   map[moqUsual_RepeatedIds_paramsKey]*moqUsual_RepeatedIds_results{},
			}
			r.moq.resultsByParams_RepeatedIds = append(r.moq.resultsByParams_RepeatedIds, *results)
			if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams_RepeatedIds) {
				copy(r.moq.resultsByParams_RepeatedIds[insertAt+1:], r.moq.resultsByParams_RepeatedIds[insertAt:0])
				r.moq.resultsByParams_RepeatedIds[insertAt] = *results
			}
		}

		var sParam1Used string
		if r.anyParams&(1<<0) == 0 {
			sParam1Used = r.paramsKey.sParam1
		}
		var sParam2Used string
		if r.anyParams&(1<<1) == 0 {
			sParam2Used = r.paramsKey.sParam2
		}
		var bParamUsed bool
		if r.anyParams&(1<<2) == 0 {
			bParamUsed = r.paramsKey.bParam
		}
		paramsKey := moqUsual_RepeatedIds_paramsKey{
			sParam1: sParam1Used,
			sParam2: sParam2Used,
			bParam:  bParamUsed,
		}

		var ok bool
		r.results, ok = results.results[paramsKey]
		if !ok {
			r.results = &moqUsual_RepeatedIds_results{
				params:   r.params,
				results:  nil,
				index:    0,
				anyTimes: false,
			}
			results.results[paramsKey] = r.results
		}
	}
}

func (r *moqUsual_RepeatedIds_fnRecorder) times(count int) *moqUsual_RepeatedIds_fnRecorder {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling times")
		return nil
	}
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < count-1; n++ {
		if last.sequence != 0 {
			last = struct {
				values *struct {
					sResult1, sResult2 string
					err                error
				}
				sequence   uint32
				doFn       moqUsual_RepeatedIds_doFn
				doReturnFn moqUsual_RepeatedIds_doReturnFn
			}{
				values: &struct {
					sResult1, sResult2 string
					err                error
				}{
					sResult1: last.values.sResult1,
					sResult2: last.values.sResult2,
					err:      last.values.err,
				},
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (r *moqUsual_RepeatedIds_fnRecorder) anyTimes() {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling anyTimes")
		return
	}
	r.results.anyTimes = true
}

// Reset resets the state of the moq
func (m *moqUsual) Reset() {
	m.resultsByParams_Usual = nil
	m.resultsByParams_NoNames = nil
	m.resultsByParams_NoResults = nil
	m.resultsByParams_NoParams = nil
	m.resultsByParams_Nothing = nil
	m.resultsByParams_Variadic = nil
	m.resultsByParams_RepeatedIds = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *moqUsual) AssertExpectationsMet() {
	for _, res := range m.resultsByParams_Usual {
		for _, results := range res.results {
			missing := len(results.results) - int(atomic.LoadUint32(&results.index))
			if missing == 1 && results.anyTimes == true {
				continue
			}
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.params)
			}
		}
	}
	for _, res := range m.resultsByParams_NoNames {
		for _, results := range res.results {
			missing := len(results.results) - int(atomic.LoadUint32(&results.index))
			if missing == 1 && results.anyTimes == true {
				continue
			}
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.params)
			}
		}
	}
	for _, res := range m.resultsByParams_NoResults {
		for _, results := range res.results {
			missing := len(results.results) - int(atomic.LoadUint32(&results.index))
			if missing == 1 && results.anyTimes == true {
				continue
			}
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.params)
			}
		}
	}
	for _, res := range m.resultsByParams_NoParams {
		for _, results := range res.results {
			missing := len(results.results) - int(atomic.LoadUint32(&results.index))
			if missing == 1 && results.anyTimes == true {
				continue
			}
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.params)
			}
		}
	}
	for _, res := range m.resultsByParams_Nothing {
		for _, results := range res.results {
			missing := len(results.results) - int(atomic.LoadUint32(&results.index))
			if missing == 1 && results.anyTimes == true {
				continue
			}
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.params)
			}
		}
	}
	for _, res := range m.resultsByParams_Variadic {
		for _, results := range res.results {
			missing := len(results.results) - int(atomic.LoadUint32(&results.index))
			if missing == 1 && results.anyTimes == true {
				continue
			}
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.params)
			}
		}
	}
	for _, res := range m.resultsByParams_RepeatedIds {
		for _, results := range res.results {
			missing := len(results.results) - int(atomic.LoadUint32(&results.index))
			if missing == 1 && results.anyTimes == true {
				continue
			}
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.params)
			}
		}
	}
}
