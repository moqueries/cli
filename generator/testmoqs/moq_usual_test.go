// Code generated by Moqueries - https://github.com/myshkin5/moqueries - DO NOT EDIT!

package testmoqs_test

import (
	"math/bits"
	"sync/atomic"

	"github.com/myshkin5/moqueries/hash"
	"github.com/myshkin5/moqueries/moq"
)

// moqUsual holds the state of a moq of the Usual type
type moqUsual struct {
	scene                                *moq.Scene
	config                               moq.Config
	resultsByParams_Usual                []moqUsual_Usual_resultsByParams
	resultsByParams_NoNames              []moqUsual_NoNames_resultsByParams
	resultsByParams_NoResults            []moqUsual_NoResults_resultsByParams
	resultsByParams_NoParams             []moqUsual_NoParams_resultsByParams
	resultsByParams_Nothing              []moqUsual_Nothing_resultsByParams
	resultsByParams_Variadic             []moqUsual_Variadic_resultsByParams
	resultsByParams_RepeatedIds          []moqUsual_RepeatedIds_resultsByParams
	resultsByParams_Times                []moqUsual_Times_resultsByParams
	resultsByParams_DifficultParamNames  []moqUsual_DifficultParamNames_resultsByParams
	resultsByParams_DifficultResultNames []moqUsual_DifficultResultNames_resultsByParams
}

// moqUsual_mock isolates the mock interface of the Usual type
type moqUsual_mock struct {
	moq *moqUsual
}

// moqUsual_recorder isolates the recorder interface of the Usual type
type moqUsual_recorder struct {
	moq *moqUsual
}

// moqUsual_Usual_params holds the params of the Usual type
type moqUsual_Usual_params struct {
	sParam string
	bParam bool
}

// moqUsual_Usual_paramsKey holds the map key params of the Usual type
type moqUsual_Usual_paramsKey struct {
	sParam string
	bParam bool
}

// moqUsual_Usual_resultsByParams contains the results for a given set of parameters for the Usual type
type moqUsual_Usual_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqUsual_Usual_paramsKey]*moqUsual_Usual_results
}

// moqUsual_Usual_doFn defines the type of function needed when calling andDo for the Usual type
type moqUsual_Usual_doFn func(sParam string, bParam bool)

// moqUsual_Usual_doReturnFn defines the type of function needed when calling doReturnResults for the Usual type
type moqUsual_Usual_doReturnFn func(sParam string, bParam bool) (sResult string, err error)

// moqUsual_Usual_results holds the results of the Usual type
type moqUsual_Usual_results struct {
	params  moqUsual_Usual_params
	results []struct {
		values *struct {
			sResult string
			err     error
		}
		sequence   uint32
		doFn       moqUsual_Usual_doFn
		doReturnFn moqUsual_Usual_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqUsual_Usual_fnRecorder routes recorded function calls to the moqUsual moq
type moqUsual_Usual_fnRecorder struct {
	params    moqUsual_Usual_params
	paramsKey moqUsual_Usual_paramsKey
	anyParams uint64
	sequence  bool
	results   *moqUsual_Usual_results
	moq       *moqUsual
}

// moqUsual_Usual_anyParams isolates the any params functions of the Usual type
type moqUsual_Usual_anyParams struct {
	recorder *moqUsual_Usual_fnRecorder
}

// moqUsual_NoNames_params holds the params of the Usual type
type moqUsual_NoNames_params struct {
	param1 string
	param2 bool
}

// moqUsual_NoNames_paramsKey holds the map key params of the Usual type
type moqUsual_NoNames_paramsKey struct {
	param1 string
	param2 bool
}

// moqUsual_NoNames_resultsByParams contains the results for a given set of parameters for the Usual type
type moqUsual_NoNames_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqUsual_NoNames_paramsKey]*moqUsual_NoNames_results
}

// moqUsual_NoNames_doFn defines the type of function needed when calling andDo for the Usual type
type moqUsual_NoNames_doFn func(string, bool)

// moqUsual_NoNames_doReturnFn defines the type of function needed when calling doReturnResults for the Usual type
type moqUsual_NoNames_doReturnFn func(string, bool) (string, error)

// moqUsual_NoNames_results holds the results of the Usual type
type moqUsual_NoNames_results struct {
	params  moqUsual_NoNames_params
	results []struct {
		values *struct {
			result1 string
			result2 error
		}
		sequence   uint32
		doFn       moqUsual_NoNames_doFn
		doReturnFn moqUsual_NoNames_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqUsual_NoNames_fnRecorder routes recorded function calls to the moqUsual moq
type moqUsual_NoNames_fnRecorder struct {
	params    moqUsual_NoNames_params
	paramsKey moqUsual_NoNames_paramsKey
	anyParams uint64
	sequence  bool
	results   *moqUsual_NoNames_results
	moq       *moqUsual
}

// moqUsual_NoNames_anyParams isolates the any params functions of the Usual type
type moqUsual_NoNames_anyParams struct {
	recorder *moqUsual_NoNames_fnRecorder
}

// moqUsual_NoResults_params holds the params of the Usual type
type moqUsual_NoResults_params struct {
	sParam string
	bParam bool
}

// moqUsual_NoResults_paramsKey holds the map key params of the Usual type
type moqUsual_NoResults_paramsKey struct {
	sParam string
	bParam bool
}

// moqUsual_NoResults_resultsByParams contains the results for a given set of parameters for the Usual type
type moqUsual_NoResults_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqUsual_NoResults_paramsKey]*moqUsual_NoResults_results
}

// moqUsual_NoResults_doFn defines the type of function needed when calling andDo for the Usual type
type moqUsual_NoResults_doFn func(sParam string, bParam bool)

// moqUsual_NoResults_doReturnFn defines the type of function needed when calling doReturnResults for the Usual type
type moqUsual_NoResults_doReturnFn func(sParam string, bParam bool)

// moqUsual_NoResults_results holds the results of the Usual type
type moqUsual_NoResults_results struct {
	params  moqUsual_NoResults_params
	results []struct {
		values     *struct{}
		sequence   uint32
		doFn       moqUsual_NoResults_doFn
		doReturnFn moqUsual_NoResults_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqUsual_NoResults_fnRecorder routes recorded function calls to the moqUsual moq
type moqUsual_NoResults_fnRecorder struct {
	params    moqUsual_NoResults_params
	paramsKey moqUsual_NoResults_paramsKey
	anyParams uint64
	sequence  bool
	results   *moqUsual_NoResults_results
	moq       *moqUsual
}

// moqUsual_NoResults_anyParams isolates the any params functions of the Usual type
type moqUsual_NoResults_anyParams struct {
	recorder *moqUsual_NoResults_fnRecorder
}

// moqUsual_NoParams_params holds the params of the Usual type
type moqUsual_NoParams_params struct{}

// moqUsual_NoParams_paramsKey holds the map key params of the Usual type
type moqUsual_NoParams_paramsKey struct{}

// moqUsual_NoParams_resultsByParams contains the results for a given set of parameters for the Usual type
type moqUsual_NoParams_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqUsual_NoParams_paramsKey]*moqUsual_NoParams_results
}

// moqUsual_NoParams_doFn defines the type of function needed when calling andDo for the Usual type
type moqUsual_NoParams_doFn func()

// moqUsual_NoParams_doReturnFn defines the type of function needed when calling doReturnResults for the Usual type
type moqUsual_NoParams_doReturnFn func() (sResult string, err error)

// moqUsual_NoParams_results holds the results of the Usual type
type moqUsual_NoParams_results struct {
	params  moqUsual_NoParams_params
	results []struct {
		values *struct {
			sResult string
			err     error
		}
		sequence   uint32
		doFn       moqUsual_NoParams_doFn
		doReturnFn moqUsual_NoParams_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqUsual_NoParams_fnRecorder routes recorded function calls to the moqUsual moq
type moqUsual_NoParams_fnRecorder struct {
	params    moqUsual_NoParams_params
	paramsKey moqUsual_NoParams_paramsKey
	anyParams uint64
	sequence  bool
	results   *moqUsual_NoParams_results
	moq       *moqUsual
}

// moqUsual_NoParams_anyParams isolates the any params functions of the Usual type
type moqUsual_NoParams_anyParams struct {
	recorder *moqUsual_NoParams_fnRecorder
}

// moqUsual_Nothing_params holds the params of the Usual type
type moqUsual_Nothing_params struct{}

// moqUsual_Nothing_paramsKey holds the map key params of the Usual type
type moqUsual_Nothing_paramsKey struct{}

// moqUsual_Nothing_resultsByParams contains the results for a given set of parameters for the Usual type
type moqUsual_Nothing_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqUsual_Nothing_paramsKey]*moqUsual_Nothing_results
}

// moqUsual_Nothing_doFn defines the type of function needed when calling andDo for the Usual type
type moqUsual_Nothing_doFn func()

// moqUsual_Nothing_doReturnFn defines the type of function needed when calling doReturnResults for the Usual type
type moqUsual_Nothing_doReturnFn func()

// moqUsual_Nothing_results holds the results of the Usual type
type moqUsual_Nothing_results struct {
	params  moqUsual_Nothing_params
	results []struct {
		values     *struct{}
		sequence   uint32
		doFn       moqUsual_Nothing_doFn
		doReturnFn moqUsual_Nothing_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqUsual_Nothing_fnRecorder routes recorded function calls to the moqUsual moq
type moqUsual_Nothing_fnRecorder struct {
	params    moqUsual_Nothing_params
	paramsKey moqUsual_Nothing_paramsKey
	anyParams uint64
	sequence  bool
	results   *moqUsual_Nothing_results
	moq       *moqUsual
}

// moqUsual_Nothing_anyParams isolates the any params functions of the Usual type
type moqUsual_Nothing_anyParams struct {
	recorder *moqUsual_Nothing_fnRecorder
}

// moqUsual_Variadic_params holds the params of the Usual type
type moqUsual_Variadic_params struct {
	other bool
	args  []string
}

// moqUsual_Variadic_paramsKey holds the map key params of the Usual type
type moqUsual_Variadic_paramsKey struct {
	other bool
	args  hash.Hash
}

// moqUsual_Variadic_resultsByParams contains the results for a given set of parameters for the Usual type
type moqUsual_Variadic_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqUsual_Variadic_paramsKey]*moqUsual_Variadic_results
}

// moqUsual_Variadic_doFn defines the type of function needed when calling andDo for the Usual type
type moqUsual_Variadic_doFn func(other bool, args ...string)

// moqUsual_Variadic_doReturnFn defines the type of function needed when calling doReturnResults for the Usual type
type moqUsual_Variadic_doReturnFn func(other bool, args ...string) (sResult string, err error)

// moqUsual_Variadic_results holds the results of the Usual type
type moqUsual_Variadic_results struct {
	params  moqUsual_Variadic_params
	results []struct {
		values *struct {
			sResult string
			err     error
		}
		sequence   uint32
		doFn       moqUsual_Variadic_doFn
		doReturnFn moqUsual_Variadic_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqUsual_Variadic_fnRecorder routes recorded function calls to the moqUsual moq
type moqUsual_Variadic_fnRecorder struct {
	params    moqUsual_Variadic_params
	paramsKey moqUsual_Variadic_paramsKey
	anyParams uint64
	sequence  bool
	results   *moqUsual_Variadic_results
	moq       *moqUsual
}

// moqUsual_Variadic_anyParams isolates the any params functions of the Usual type
type moqUsual_Variadic_anyParams struct {
	recorder *moqUsual_Variadic_fnRecorder
}

// moqUsual_RepeatedIds_params holds the params of the Usual type
type moqUsual_RepeatedIds_params struct {
	sParam1, sParam2 string
	bParam           bool
}

// moqUsual_RepeatedIds_paramsKey holds the map key params of the Usual type
type moqUsual_RepeatedIds_paramsKey struct {
	sParam1, sParam2 string
	bParam           bool
}

// moqUsual_RepeatedIds_resultsByParams contains the results for a given set of parameters for the Usual type
type moqUsual_RepeatedIds_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqUsual_RepeatedIds_paramsKey]*moqUsual_RepeatedIds_results
}

// moqUsual_RepeatedIds_doFn defines the type of function needed when calling andDo for the Usual type
type moqUsual_RepeatedIds_doFn func(sParam1, sParam2 string, bParam bool)

// moqUsual_RepeatedIds_doReturnFn defines the type of function needed when calling doReturnResults for the Usual type
type moqUsual_RepeatedIds_doReturnFn func(sParam1, sParam2 string, bParam bool) (sResult1, sResult2 string, err error)

// moqUsual_RepeatedIds_results holds the results of the Usual type
type moqUsual_RepeatedIds_results struct {
	params  moqUsual_RepeatedIds_params
	results []struct {
		values *struct {
			sResult1, sResult2 string
			err                error
		}
		sequence   uint32
		doFn       moqUsual_RepeatedIds_doFn
		doReturnFn moqUsual_RepeatedIds_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqUsual_RepeatedIds_fnRecorder routes recorded function calls to the moqUsual moq
type moqUsual_RepeatedIds_fnRecorder struct {
	params    moqUsual_RepeatedIds_params
	paramsKey moqUsual_RepeatedIds_paramsKey
	anyParams uint64
	sequence  bool
	results   *moqUsual_RepeatedIds_results
	moq       *moqUsual
}

// moqUsual_RepeatedIds_anyParams isolates the any params functions of the Usual type
type moqUsual_RepeatedIds_anyParams struct {
	recorder *moqUsual_RepeatedIds_fnRecorder
}

// moqUsual_Times_params holds the params of the Usual type
type moqUsual_Times_params struct {
	sParam string
	times  bool
}

// moqUsual_Times_paramsKey holds the map key params of the Usual type
type moqUsual_Times_paramsKey struct {
	sParam string
	times  bool
}

// moqUsual_Times_resultsByParams contains the results for a given set of parameters for the Usual type
type moqUsual_Times_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqUsual_Times_paramsKey]*moqUsual_Times_results
}

// moqUsual_Times_doFn defines the type of function needed when calling andDo for the Usual type
type moqUsual_Times_doFn func(sParam string, times bool)

// moqUsual_Times_doReturnFn defines the type of function needed when calling doReturnResults for the Usual type
type moqUsual_Times_doReturnFn func(sParam string, times bool) (sResult string, err error)

// moqUsual_Times_results holds the results of the Usual type
type moqUsual_Times_results struct {
	params  moqUsual_Times_params
	results []struct {
		values *struct {
			sResult string
			err     error
		}
		sequence   uint32
		doFn       moqUsual_Times_doFn
		doReturnFn moqUsual_Times_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqUsual_Times_fnRecorder routes recorded function calls to the moqUsual moq
type moqUsual_Times_fnRecorder struct {
	params    moqUsual_Times_params
	paramsKey moqUsual_Times_paramsKey
	anyParams uint64
	sequence  bool
	results   *moqUsual_Times_results
	moq       *moqUsual
}

// moqUsual_Times_anyParams isolates the any params functions of the Usual type
type moqUsual_Times_anyParams struct {
	recorder *moqUsual_Times_fnRecorder
}

// moqUsual_DifficultParamNames_params holds the params of the Usual type
type moqUsual_DifficultParamNames_params struct {
	param1, param2 bool
	param3         string
	param, param5  int
	param6, param7 float32
}

// moqUsual_DifficultParamNames_paramsKey holds the map key params of the Usual type
type moqUsual_DifficultParamNames_paramsKey struct {
	param1, param2 bool
	param3         string
	param, param5  int
	param6, param7 float32
}

// moqUsual_DifficultParamNames_resultsByParams contains the results for a given set of parameters for the Usual type
type moqUsual_DifficultParamNames_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqUsual_DifficultParamNames_paramsKey]*moqUsual_DifficultParamNames_results
}

// moqUsual_DifficultParamNames_doFn defines the type of function needed when calling andDo for the Usual type
type moqUsual_DifficultParamNames_doFn func(m, r bool, sequence string, param, params int, result, results float32)

// moqUsual_DifficultParamNames_doReturnFn defines the type of function needed when calling doReturnResults for the Usual type
type moqUsual_DifficultParamNames_doReturnFn func(m, r bool, sequence string, param, params int, result, results float32)

// moqUsual_DifficultParamNames_results holds the results of the Usual type
type moqUsual_DifficultParamNames_results struct {
	params  moqUsual_DifficultParamNames_params
	results []struct {
		values     *struct{}
		sequence   uint32
		doFn       moqUsual_DifficultParamNames_doFn
		doReturnFn moqUsual_DifficultParamNames_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqUsual_DifficultParamNames_fnRecorder routes recorded function calls to the moqUsual moq
type moqUsual_DifficultParamNames_fnRecorder struct {
	params    moqUsual_DifficultParamNames_params
	paramsKey moqUsual_DifficultParamNames_paramsKey
	anyParams uint64
	sequence  bool
	results   *moqUsual_DifficultParamNames_results
	moq       *moqUsual
}

// moqUsual_DifficultParamNames_anyParams isolates the any params functions of the Usual type
type moqUsual_DifficultParamNames_anyParams struct {
	recorder *moqUsual_DifficultParamNames_fnRecorder
}

// moqUsual_DifficultResultNames_params holds the params of the Usual type
type moqUsual_DifficultResultNames_params struct{}

// moqUsual_DifficultResultNames_paramsKey holds the map key params of the Usual type
type moqUsual_DifficultResultNames_paramsKey struct{}

// moqUsual_DifficultResultNames_resultsByParams contains the results for a given set of parameters for the Usual type
type moqUsual_DifficultResultNames_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqUsual_DifficultResultNames_paramsKey]*moqUsual_DifficultResultNames_results
}

// moqUsual_DifficultResultNames_doFn defines the type of function needed when calling andDo for the Usual type
type moqUsual_DifficultResultNames_doFn func()

// moqUsual_DifficultResultNames_doReturnFn defines the type of function needed when calling doReturnResults for the Usual type
type moqUsual_DifficultResultNames_doReturnFn func() (m, r string, sequence error, param, params int, result, results float32)

// moqUsual_DifficultResultNames_results holds the results of the Usual type
type moqUsual_DifficultResultNames_results struct {
	params  moqUsual_DifficultResultNames_params
	results []struct {
		values *struct {
			result1, result2 string
			result3          error
			param, result5   int
			result6, result7 float32
		}
		sequence   uint32
		doFn       moqUsual_DifficultResultNames_doFn
		doReturnFn moqUsual_DifficultResultNames_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqUsual_DifficultResultNames_fnRecorder routes recorded function calls to the moqUsual moq
type moqUsual_DifficultResultNames_fnRecorder struct {
	params    moqUsual_DifficultResultNames_params
	paramsKey moqUsual_DifficultResultNames_paramsKey
	anyParams uint64
	sequence  bool
	results   *moqUsual_DifficultResultNames_results
	moq       *moqUsual
}

// moqUsual_DifficultResultNames_anyParams isolates the any params functions of the Usual type
type moqUsual_DifficultResultNames_anyParams struct {
	recorder *moqUsual_DifficultResultNames_fnRecorder
}

// newMoqUsual creates a new moq of the Usual type
func newMoqUsual(scene *moq.Scene, config *moq.Config) *moqUsual {
	if config == nil {
		config = &moq.Config{}
	}
	m := &moqUsual{
		scene:  scene,
		config: *config,
	}
	scene.AddMoq(m)
	return m
}

// mock returns the mock implementation of the Usual type
func (m *moqUsual) mock() *moqUsual_mock {
	return &moqUsual_mock{
		moq: m,
	}
}

func (m *moqUsual_mock) Usual(sParam string, bParam bool) (sResult string, err error) {
	params := moqUsual_Usual_params{
		sParam: sParam,
		bParam: bParam,
	}
	var results *moqUsual_Usual_results
	for _, resultsByParams := range m.moq.resultsByParams_Usual {
		var sParamUsed string
		if resultsByParams.anyParams&(1<<0) == 0 {
			sParamUsed = sParam
		}
		var bParamUsed bool
		if resultsByParams.anyParams&(1<<1) == 0 {
			bParamUsed = bParam
		}
		paramsKey := moqUsual_Usual_paramsKey{
			sParam: sParamUsed,
			bParam: bParamUsed,
		}
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match %#v", params)
		}
	}

	if result.doFn != nil {
		result.doFn(sParam, bParam)
	}

	if result.values != nil {
		sResult = result.values.sResult
		err = result.values.err
	}
	if result.doReturnFn != nil {
		sResult, err = result.doReturnFn(sParam, bParam)
	}
	return
}

func (m *moqUsual_mock) NoNames(param1 string, param2 bool) (result1 string, result2 error) {
	params := moqUsual_NoNames_params{
		param1: param1,
		param2: param2,
	}
	var results *moqUsual_NoNames_results
	for _, resultsByParams := range m.moq.resultsByParams_NoNames {
		var param1Used string
		if resultsByParams.anyParams&(1<<0) == 0 {
			param1Used = param1
		}
		var param2Used bool
		if resultsByParams.anyParams&(1<<1) == 0 {
			param2Used = param2
		}
		paramsKey := moqUsual_NoNames_paramsKey{
			param1: param1Used,
			param2: param2Used,
		}
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match %#v", params)
		}
	}

	if result.doFn != nil {
		result.doFn(param1, param2)
	}

	if result.values != nil {
		result1 = result.values.result1
		result2 = result.values.result2
	}
	if result.doReturnFn != nil {
		result1, result2 = result.doReturnFn(param1, param2)
	}
	return
}

func (m *moqUsual_mock) NoResults(sParam string, bParam bool) {
	params := moqUsual_NoResults_params{
		sParam: sParam,
		bParam: bParam,
	}
	var results *moqUsual_NoResults_results
	for _, resultsByParams := range m.moq.resultsByParams_NoResults {
		var sParamUsed string
		if resultsByParams.anyParams&(1<<0) == 0 {
			sParamUsed = sParam
		}
		var bParamUsed bool
		if resultsByParams.anyParams&(1<<1) == 0 {
			bParamUsed = bParam
		}
		paramsKey := moqUsual_NoResults_paramsKey{
			sParam: sParamUsed,
			bParam: bParamUsed,
		}
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match %#v", params)
		}
	}

	if result.doFn != nil {
		result.doFn(sParam, bParam)
	}

	if result.doReturnFn != nil {
		result.doReturnFn(sParam, bParam)
	}
	return
}

func (m *moqUsual_mock) NoParams() (sResult string, err error) {
	params := moqUsual_NoParams_params{}
	var results *moqUsual_NoParams_results
	for _, resultsByParams := range m.moq.resultsByParams_NoParams {
		paramsKey := moqUsual_NoParams_paramsKey{}
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match %#v", params)
		}
	}

	if result.doFn != nil {
		result.doFn()
	}

	if result.values != nil {
		sResult = result.values.sResult
		err = result.values.err
	}
	if result.doReturnFn != nil {
		sResult, err = result.doReturnFn()
	}
	return
}

func (m *moqUsual_mock) Nothing() {
	params := moqUsual_Nothing_params{}
	var results *moqUsual_Nothing_results
	for _, resultsByParams := range m.moq.resultsByParams_Nothing {
		paramsKey := moqUsual_Nothing_paramsKey{}
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match %#v", params)
		}
	}

	if result.doFn != nil {
		result.doFn()
	}

	if result.doReturnFn != nil {
		result.doReturnFn()
	}
	return
}

func (m *moqUsual_mock) Variadic(other bool, args ...string) (sResult string, err error) {
	params := moqUsual_Variadic_params{
		other: other,
		args:  args,
	}
	var results *moqUsual_Variadic_results
	for _, resultsByParams := range m.moq.resultsByParams_Variadic {
		var otherUsed bool
		if resultsByParams.anyParams&(1<<0) == 0 {
			otherUsed = other
		}
		var argsUsed hash.Hash
		if resultsByParams.anyParams&(1<<1) == 0 {
			argsUsed = hash.DeepHash(args)
		}
		paramsKey := moqUsual_Variadic_paramsKey{
			other: otherUsed,
			args:  argsUsed,
		}
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match %#v", params)
		}
	}

	if result.doFn != nil {
		result.doFn(other, args...)
	}

	if result.values != nil {
		sResult = result.values.sResult
		err = result.values.err
	}
	if result.doReturnFn != nil {
		sResult, err = result.doReturnFn(other, args...)
	}
	return
}

func (m *moqUsual_mock) RepeatedIds(sParam1, sParam2 string, bParam bool) (sResult1, sResult2 string, err error) {
	params := moqUsual_RepeatedIds_params{
		sParam1: sParam1,
		sParam2: sParam2,
		bParam:  bParam,
	}
	var results *moqUsual_RepeatedIds_results
	for _, resultsByParams := range m.moq.resultsByParams_RepeatedIds {
		var sParam1Used string
		if resultsByParams.anyParams&(1<<0) == 0 {
			sParam1Used = sParam1
		}
		var sParam2Used string
		if resultsByParams.anyParams&(1<<1) == 0 {
			sParam2Used = sParam2
		}
		var bParamUsed bool
		if resultsByParams.anyParams&(1<<2) == 0 {
			bParamUsed = bParam
		}
		paramsKey := moqUsual_RepeatedIds_paramsKey{
			sParam1: sParam1Used,
			sParam2: sParam2Used,
			bParam:  bParamUsed,
		}
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match %#v", params)
		}
	}

	if result.doFn != nil {
		result.doFn(sParam1, sParam2, bParam)
	}

	if result.values != nil {
		sResult1 = result.values.sResult1
		sResult2 = result.values.sResult2
		err = result.values.err
	}
	if result.doReturnFn != nil {
		sResult1, sResult2, err = result.doReturnFn(sParam1, sParam2, bParam)
	}
	return
}

func (m *moqUsual_mock) Times(sParam string, times bool) (sResult string, err error) {
	params := moqUsual_Times_params{
		sParam: sParam,
		times:  times,
	}
	var results *moqUsual_Times_results
	for _, resultsByParams := range m.moq.resultsByParams_Times {
		var sParamUsed string
		if resultsByParams.anyParams&(1<<0) == 0 {
			sParamUsed = sParam
		}
		var timesUsed bool
		if resultsByParams.anyParams&(1<<1) == 0 {
			timesUsed = times
		}
		paramsKey := moqUsual_Times_paramsKey{
			sParam: sParamUsed,
			times:  timesUsed,
		}
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match %#v", params)
		}
	}

	if result.doFn != nil {
		result.doFn(sParam, times)
	}

	if result.values != nil {
		sResult = result.values.sResult
		err = result.values.err
	}
	if result.doReturnFn != nil {
		sResult, err = result.doReturnFn(sParam, times)
	}
	return
}

func (m *moqUsual_mock) DifficultParamNames(param1, param2 bool, param3 string, param, param5 int, param6, param7 float32) {
	params := moqUsual_DifficultParamNames_params{
		param1: param1,
		param2: param2,
		param3: param3,
		param:  param,
		param5: param5,
		param6: param6,
		param7: param7,
	}
	var results *moqUsual_DifficultParamNames_results
	for _, resultsByParams := range m.moq.resultsByParams_DifficultParamNames {
		var param1Used bool
		if resultsByParams.anyParams&(1<<0) == 0 {
			param1Used = param1
		}
		var param2Used bool
		if resultsByParams.anyParams&(1<<1) == 0 {
			param2Used = param2
		}
		var param3Used string
		if resultsByParams.anyParams&(1<<2) == 0 {
			param3Used = param3
		}
		var paramUsed int
		if resultsByParams.anyParams&(1<<3) == 0 {
			paramUsed = param
		}
		var param5Used int
		if resultsByParams.anyParams&(1<<4) == 0 {
			param5Used = param5
		}
		var param6Used float32
		if resultsByParams.anyParams&(1<<5) == 0 {
			param6Used = param6
		}
		var param7Used float32
		if resultsByParams.anyParams&(1<<6) == 0 {
			param7Used = param7
		}
		paramsKey := moqUsual_DifficultParamNames_paramsKey{
			param1: param1Used,
			param2: param2Used,
			param3: param3Used,
			param:  paramUsed,
			param5: param5Used,
			param6: param6Used,
			param7: param7Used,
		}
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match %#v", params)
		}
	}

	if result.doFn != nil {
		result.doFn(param1, param2, param3, param, param5, param6, param7)
	}

	if result.doReturnFn != nil {
		result.doReturnFn(param1, param2, param3, param, param5, param6, param7)
	}
	return
}

func (m *moqUsual_mock) DifficultResultNames() (result1, result2 string, result3 error, param, result5 int, result6, result7 float32) {
	params := moqUsual_DifficultResultNames_params{}
	var results *moqUsual_DifficultResultNames_results
	for _, resultsByParams := range m.moq.resultsByParams_DifficultResultNames {
		paramsKey := moqUsual_DifficultResultNames_paramsKey{}
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match %#v", params)
		}
	}

	if result.doFn != nil {
		result.doFn()
	}

	if result.values != nil {
		result1 = result.values.result1
		result2 = result.values.result2
		result3 = result.values.result3
		param = result.values.param
		result5 = result.values.result5
		result6 = result.values.result6
		result7 = result.values.result7
	}
	if result.doReturnFn != nil {
		result1, result2, result3, param, result5, result6, result7 = result.doReturnFn()
	}
	return
}

// onCall returns the recorder implementation of the Usual type
func (m *moqUsual) onCall() *moqUsual_recorder {
	return &moqUsual_recorder{
		moq: m,
	}
}

func (m *moqUsual_recorder) Usual(sParam string, bParam bool) *moqUsual_Usual_fnRecorder {
	return &moqUsual_Usual_fnRecorder{
		params: moqUsual_Usual_params{
			sParam: sParam,
			bParam: bParam,
		},
		paramsKey: moqUsual_Usual_paramsKey{
			sParam: sParam,
			bParam: bParam,
		},
		sequence: m.moq.config.Sequence == moq.SeqDefaultOn,
		moq:      m.moq,
	}
}

func (r *moqUsual_Usual_fnRecorder) any() *moqUsual_Usual_anyParams {
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	return &moqUsual_Usual_anyParams{recorder: r}
}

func (a *moqUsual_Usual_anyParams) sParam() *moqUsual_Usual_fnRecorder {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (a *moqUsual_Usual_anyParams) bParam() *moqUsual_Usual_fnRecorder {
	a.recorder.anyParams |= 1 << 1
	return a.recorder
}

func (r *moqUsual_Usual_fnRecorder) seq() *moqUsual_Usual_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqUsual_Usual_fnRecorder) noSeq() *moqUsual_Usual_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqUsual_Usual_fnRecorder) returnResults(sResult string, err error) *moqUsual_Usual_fnRecorder {
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			sResult string
			err     error
		}
		sequence   uint32
		doFn       moqUsual_Usual_doFn
		doReturnFn moqUsual_Usual_doReturnFn
	}{
		values: &struct {
			sResult string
			err     error
		}{
			sResult: sResult,
			err:     err,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqUsual_Usual_fnRecorder) andDo(fn moqUsual_Usual_doFn) *moqUsual_Usual_fnRecorder {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqUsual_Usual_fnRecorder) doReturnResults(fn moqUsual_Usual_doReturnFn) *moqUsual_Usual_fnRecorder {
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			sResult string
			err     error
		}
		sequence   uint32
		doFn       moqUsual_Usual_doFn
		doReturnFn moqUsual_Usual_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqUsual_Usual_fnRecorder) findResults() {
	if r.results == nil {
		anyCount := bits.OnesCount64(r.anyParams)
		insertAt := -1
		var results *moqUsual_Usual_resultsByParams
		for n, res := range r.moq.resultsByParams_Usual {
			if res.anyParams == r.anyParams {
				results = &res
				break
			}
			if res.anyCount > anyCount {
				insertAt = n
			}
		}
		if results == nil {
			results = &moqUsual_Usual_resultsByParams{
				anyCount:  anyCount,
				anyParams: r.anyParams,
				results:   map[moqUsual_Usual_paramsKey]*moqUsual_Usual_results{},
			}
			r.moq.resultsByParams_Usual = append(r.moq.resultsByParams_Usual, *results)
			if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams_Usual) {
				copy(r.moq.resultsByParams_Usual[insertAt+1:], r.moq.resultsByParams_Usual[insertAt:0])
				r.moq.resultsByParams_Usual[insertAt] = *results
			}
		}

		var sParamUsed string
		if r.anyParams&(1<<0) == 0 {
			sParamUsed = r.paramsKey.sParam
		}
		var bParamUsed bool
		if r.anyParams&(1<<1) == 0 {
			bParamUsed = r.paramsKey.bParam
		}
		paramsKey := moqUsual_Usual_paramsKey{
			sParam: sParamUsed,
			bParam: bParamUsed,
		}

		var ok bool
		r.results, ok = results.results[paramsKey]
		if !ok {
			r.results = &moqUsual_Usual_results{
				params:  r.params,
				results: nil,
				index:   0,
				repeat:  &moq.RepeatVal{},
			}
			results.results[paramsKey] = r.results
		}
	}
	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqUsual_Usual_fnRecorder) repeat(repeaters ...moq.Repeater) *moqUsual_Usual_fnRecorder {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values *struct {
					sResult string
					err     error
				}
				sequence   uint32
				doFn       moqUsual_Usual_doFn
				doReturnFn moqUsual_Usual_doReturnFn
			}{
				values: &struct {
					sResult string
					err     error
				}{
					sResult: last.values.sResult,
					err:     last.values.err,
				},
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqUsual_recorder) NoNames(param1 string, param2 bool) *moqUsual_NoNames_fnRecorder {
	return &moqUsual_NoNames_fnRecorder{
		params: moqUsual_NoNames_params{
			param1: param1,
			param2: param2,
		},
		paramsKey: moqUsual_NoNames_paramsKey{
			param1: param1,
			param2: param2,
		},
		sequence: m.moq.config.Sequence == moq.SeqDefaultOn,
		moq:      m.moq,
	}
}

func (r *moqUsual_NoNames_fnRecorder) any() *moqUsual_NoNames_anyParams {
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	return &moqUsual_NoNames_anyParams{recorder: r}
}

func (a *moqUsual_NoNames_anyParams) param1() *moqUsual_NoNames_fnRecorder {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (a *moqUsual_NoNames_anyParams) param2() *moqUsual_NoNames_fnRecorder {
	a.recorder.anyParams |= 1 << 1
	return a.recorder
}

func (r *moqUsual_NoNames_fnRecorder) seq() *moqUsual_NoNames_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqUsual_NoNames_fnRecorder) noSeq() *moqUsual_NoNames_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqUsual_NoNames_fnRecorder) returnResults(result1 string, result2 error) *moqUsual_NoNames_fnRecorder {
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 string
			result2 error
		}
		sequence   uint32
		doFn       moqUsual_NoNames_doFn
		doReturnFn moqUsual_NoNames_doReturnFn
	}{
		values: &struct {
			result1 string
			result2 error
		}{
			result1: result1,
			result2: result2,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqUsual_NoNames_fnRecorder) andDo(fn moqUsual_NoNames_doFn) *moqUsual_NoNames_fnRecorder {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqUsual_NoNames_fnRecorder) doReturnResults(fn moqUsual_NoNames_doReturnFn) *moqUsual_NoNames_fnRecorder {
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 string
			result2 error
		}
		sequence   uint32
		doFn       moqUsual_NoNames_doFn
		doReturnFn moqUsual_NoNames_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqUsual_NoNames_fnRecorder) findResults() {
	if r.results == nil {
		anyCount := bits.OnesCount64(r.anyParams)
		insertAt := -1
		var results *moqUsual_NoNames_resultsByParams
		for n, res := range r.moq.resultsByParams_NoNames {
			if res.anyParams == r.anyParams {
				results = &res
				break
			}
			if res.anyCount > anyCount {
				insertAt = n
			}
		}
		if results == nil {
			results = &moqUsual_NoNames_resultsByParams{
				anyCount:  anyCount,
				anyParams: r.anyParams,
				results:   map[moqUsual_NoNames_paramsKey]*moqUsual_NoNames_results{},
			}
			r.moq.resultsByParams_NoNames = append(r.moq.resultsByParams_NoNames, *results)
			if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams_NoNames) {
				copy(r.moq.resultsByParams_NoNames[insertAt+1:], r.moq.resultsByParams_NoNames[insertAt:0])
				r.moq.resultsByParams_NoNames[insertAt] = *results
			}
		}

		var param1Used string
		if r.anyParams&(1<<0) == 0 {
			param1Used = r.paramsKey.param1
		}
		var param2Used bool
		if r.anyParams&(1<<1) == 0 {
			param2Used = r.paramsKey.param2
		}
		paramsKey := moqUsual_NoNames_paramsKey{
			param1: param1Used,
			param2: param2Used,
		}

		var ok bool
		r.results, ok = results.results[paramsKey]
		if !ok {
			r.results = &moqUsual_NoNames_results{
				params:  r.params,
				results: nil,
				index:   0,
				repeat:  &moq.RepeatVal{},
			}
			results.results[paramsKey] = r.results
		}
	}
	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqUsual_NoNames_fnRecorder) repeat(repeaters ...moq.Repeater) *moqUsual_NoNames_fnRecorder {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values *struct {
					result1 string
					result2 error
				}
				sequence   uint32
				doFn       moqUsual_NoNames_doFn
				doReturnFn moqUsual_NoNames_doReturnFn
			}{
				values: &struct {
					result1 string
					result2 error
				}{
					result1: last.values.result1,
					result2: last.values.result2,
				},
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqUsual_recorder) NoResults(sParam string, bParam bool) *moqUsual_NoResults_fnRecorder {
	return &moqUsual_NoResults_fnRecorder{
		params: moqUsual_NoResults_params{
			sParam: sParam,
			bParam: bParam,
		},
		paramsKey: moqUsual_NoResults_paramsKey{
			sParam: sParam,
			bParam: bParam,
		},
		sequence: m.moq.config.Sequence == moq.SeqDefaultOn,
		moq:      m.moq,
	}
}

func (r *moqUsual_NoResults_fnRecorder) any() *moqUsual_NoResults_anyParams {
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	return &moqUsual_NoResults_anyParams{recorder: r}
}

func (a *moqUsual_NoResults_anyParams) sParam() *moqUsual_NoResults_fnRecorder {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (a *moqUsual_NoResults_anyParams) bParam() *moqUsual_NoResults_fnRecorder {
	a.recorder.anyParams |= 1 << 1
	return a.recorder
}

func (r *moqUsual_NoResults_fnRecorder) seq() *moqUsual_NoResults_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqUsual_NoResults_fnRecorder) noSeq() *moqUsual_NoResults_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqUsual_NoResults_fnRecorder) returnResults() *moqUsual_NoResults_fnRecorder {
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values     *struct{}
		sequence   uint32
		doFn       moqUsual_NoResults_doFn
		doReturnFn moqUsual_NoResults_doReturnFn
	}{
		values:   &struct{}{},
		sequence: sequence,
	})
	return r
}

func (r *moqUsual_NoResults_fnRecorder) andDo(fn moqUsual_NoResults_doFn) *moqUsual_NoResults_fnRecorder {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqUsual_NoResults_fnRecorder) doReturnResults(fn moqUsual_NoResults_doReturnFn) *moqUsual_NoResults_fnRecorder {
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values     *struct{}
		sequence   uint32
		doFn       moqUsual_NoResults_doFn
		doReturnFn moqUsual_NoResults_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqUsual_NoResults_fnRecorder) findResults() {
	if r.results == nil {
		anyCount := bits.OnesCount64(r.anyParams)
		insertAt := -1
		var results *moqUsual_NoResults_resultsByParams
		for n, res := range r.moq.resultsByParams_NoResults {
			if res.anyParams == r.anyParams {
				results = &res
				break
			}
			if res.anyCount > anyCount {
				insertAt = n
			}
		}
		if results == nil {
			results = &moqUsual_NoResults_resultsByParams{
				anyCount:  anyCount,
				anyParams: r.anyParams,
				results:   map[moqUsual_NoResults_paramsKey]*moqUsual_NoResults_results{},
			}
			r.moq.resultsByParams_NoResults = append(r.moq.resultsByParams_NoResults, *results)
			if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams_NoResults) {
				copy(r.moq.resultsByParams_NoResults[insertAt+1:], r.moq.resultsByParams_NoResults[insertAt:0])
				r.moq.resultsByParams_NoResults[insertAt] = *results
			}
		}

		var sParamUsed string
		if r.anyParams&(1<<0) == 0 {
			sParamUsed = r.paramsKey.sParam
		}
		var bParamUsed bool
		if r.anyParams&(1<<1) == 0 {
			bParamUsed = r.paramsKey.bParam
		}
		paramsKey := moqUsual_NoResults_paramsKey{
			sParam: sParamUsed,
			bParam: bParamUsed,
		}

		var ok bool
		r.results, ok = results.results[paramsKey]
		if !ok {
			r.results = &moqUsual_NoResults_results{
				params:  r.params,
				results: nil,
				index:   0,
				repeat:  &moq.RepeatVal{},
			}
			results.results[paramsKey] = r.results
		}
	}
	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqUsual_NoResults_fnRecorder) repeat(repeaters ...moq.Repeater) *moqUsual_NoResults_fnRecorder {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values     *struct{}
				sequence   uint32
				doFn       moqUsual_NoResults_doFn
				doReturnFn moqUsual_NoResults_doReturnFn
			}{
				values:   &struct{}{},
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqUsual_recorder) NoParams() *moqUsual_NoParams_fnRecorder {
	return &moqUsual_NoParams_fnRecorder{
		params:    moqUsual_NoParams_params{},
		paramsKey: moqUsual_NoParams_paramsKey{},
		sequence:  m.moq.config.Sequence == moq.SeqDefaultOn,
		moq:       m.moq,
	}
}

func (r *moqUsual_NoParams_fnRecorder) any() *moqUsual_NoParams_anyParams {
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	return &moqUsual_NoParams_anyParams{recorder: r}
}

func (r *moqUsual_NoParams_fnRecorder) seq() *moqUsual_NoParams_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqUsual_NoParams_fnRecorder) noSeq() *moqUsual_NoParams_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqUsual_NoParams_fnRecorder) returnResults(sResult string, err error) *moqUsual_NoParams_fnRecorder {
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			sResult string
			err     error
		}
		sequence   uint32
		doFn       moqUsual_NoParams_doFn
		doReturnFn moqUsual_NoParams_doReturnFn
	}{
		values: &struct {
			sResult string
			err     error
		}{
			sResult: sResult,
			err:     err,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqUsual_NoParams_fnRecorder) andDo(fn moqUsual_NoParams_doFn) *moqUsual_NoParams_fnRecorder {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqUsual_NoParams_fnRecorder) doReturnResults(fn moqUsual_NoParams_doReturnFn) *moqUsual_NoParams_fnRecorder {
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			sResult string
			err     error
		}
		sequence   uint32
		doFn       moqUsual_NoParams_doFn
		doReturnFn moqUsual_NoParams_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqUsual_NoParams_fnRecorder) findResults() {
	if r.results == nil {
		anyCount := bits.OnesCount64(r.anyParams)
		insertAt := -1
		var results *moqUsual_NoParams_resultsByParams
		for n, res := range r.moq.resultsByParams_NoParams {
			if res.anyParams == r.anyParams {
				results = &res
				break
			}
			if res.anyCount > anyCount {
				insertAt = n
			}
		}
		if results == nil {
			results = &moqUsual_NoParams_resultsByParams{
				anyCount:  anyCount,
				anyParams: r.anyParams,
				results:   map[moqUsual_NoParams_paramsKey]*moqUsual_NoParams_results{},
			}
			r.moq.resultsByParams_NoParams = append(r.moq.resultsByParams_NoParams, *results)
			if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams_NoParams) {
				copy(r.moq.resultsByParams_NoParams[insertAt+1:], r.moq.resultsByParams_NoParams[insertAt:0])
				r.moq.resultsByParams_NoParams[insertAt] = *results
			}
		}

		paramsKey := moqUsual_NoParams_paramsKey{}

		var ok bool
		r.results, ok = results.results[paramsKey]
		if !ok {
			r.results = &moqUsual_NoParams_results{
				params:  r.params,
				results: nil,
				index:   0,
				repeat:  &moq.RepeatVal{},
			}
			results.results[paramsKey] = r.results
		}
	}
	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqUsual_NoParams_fnRecorder) repeat(repeaters ...moq.Repeater) *moqUsual_NoParams_fnRecorder {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values *struct {
					sResult string
					err     error
				}
				sequence   uint32
				doFn       moqUsual_NoParams_doFn
				doReturnFn moqUsual_NoParams_doReturnFn
			}{
				values: &struct {
					sResult string
					err     error
				}{
					sResult: last.values.sResult,
					err:     last.values.err,
				},
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqUsual_recorder) Nothing() *moqUsual_Nothing_fnRecorder {
	return &moqUsual_Nothing_fnRecorder{
		params:    moqUsual_Nothing_params{},
		paramsKey: moqUsual_Nothing_paramsKey{},
		sequence:  m.moq.config.Sequence == moq.SeqDefaultOn,
		moq:       m.moq,
	}
}

func (r *moqUsual_Nothing_fnRecorder) any() *moqUsual_Nothing_anyParams {
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	return &moqUsual_Nothing_anyParams{recorder: r}
}

func (r *moqUsual_Nothing_fnRecorder) seq() *moqUsual_Nothing_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqUsual_Nothing_fnRecorder) noSeq() *moqUsual_Nothing_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqUsual_Nothing_fnRecorder) returnResults() *moqUsual_Nothing_fnRecorder {
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values     *struct{}
		sequence   uint32
		doFn       moqUsual_Nothing_doFn
		doReturnFn moqUsual_Nothing_doReturnFn
	}{
		values:   &struct{}{},
		sequence: sequence,
	})
	return r
}

func (r *moqUsual_Nothing_fnRecorder) andDo(fn moqUsual_Nothing_doFn) *moqUsual_Nothing_fnRecorder {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqUsual_Nothing_fnRecorder) doReturnResults(fn moqUsual_Nothing_doReturnFn) *moqUsual_Nothing_fnRecorder {
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values     *struct{}
		sequence   uint32
		doFn       moqUsual_Nothing_doFn
		doReturnFn moqUsual_Nothing_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqUsual_Nothing_fnRecorder) findResults() {
	if r.results == nil {
		anyCount := bits.OnesCount64(r.anyParams)
		insertAt := -1
		var results *moqUsual_Nothing_resultsByParams
		for n, res := range r.moq.resultsByParams_Nothing {
			if res.anyParams == r.anyParams {
				results = &res
				break
			}
			if res.anyCount > anyCount {
				insertAt = n
			}
		}
		if results == nil {
			results = &moqUsual_Nothing_resultsByParams{
				anyCount:  anyCount,
				anyParams: r.anyParams,
				results:   map[moqUsual_Nothing_paramsKey]*moqUsual_Nothing_results{},
			}
			r.moq.resultsByParams_Nothing = append(r.moq.resultsByParams_Nothing, *results)
			if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams_Nothing) {
				copy(r.moq.resultsByParams_Nothing[insertAt+1:], r.moq.resultsByParams_Nothing[insertAt:0])
				r.moq.resultsByParams_Nothing[insertAt] = *results
			}
		}

		paramsKey := moqUsual_Nothing_paramsKey{}

		var ok bool
		r.results, ok = results.results[paramsKey]
		if !ok {
			r.results = &moqUsual_Nothing_results{
				params:  r.params,
				results: nil,
				index:   0,
				repeat:  &moq.RepeatVal{},
			}
			results.results[paramsKey] = r.results
		}
	}
	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqUsual_Nothing_fnRecorder) repeat(repeaters ...moq.Repeater) *moqUsual_Nothing_fnRecorder {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values     *struct{}
				sequence   uint32
				doFn       moqUsual_Nothing_doFn
				doReturnFn moqUsual_Nothing_doReturnFn
			}{
				values:   &struct{}{},
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqUsual_recorder) Variadic(other bool, args ...string) *moqUsual_Variadic_fnRecorder {
	return &moqUsual_Variadic_fnRecorder{
		params: moqUsual_Variadic_params{
			other: other,
			args:  args,
		},
		paramsKey: moqUsual_Variadic_paramsKey{
			other: other,
			args:  hash.DeepHash(args),
		},
		sequence: m.moq.config.Sequence == moq.SeqDefaultOn,
		moq:      m.moq,
	}
}

func (r *moqUsual_Variadic_fnRecorder) any() *moqUsual_Variadic_anyParams {
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	return &moqUsual_Variadic_anyParams{recorder: r}
}

func (a *moqUsual_Variadic_anyParams) other() *moqUsual_Variadic_fnRecorder {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (a *moqUsual_Variadic_anyParams) args() *moqUsual_Variadic_fnRecorder {
	a.recorder.anyParams |= 1 << 1
	return a.recorder
}

func (r *moqUsual_Variadic_fnRecorder) seq() *moqUsual_Variadic_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqUsual_Variadic_fnRecorder) noSeq() *moqUsual_Variadic_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqUsual_Variadic_fnRecorder) returnResults(sResult string, err error) *moqUsual_Variadic_fnRecorder {
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			sResult string
			err     error
		}
		sequence   uint32
		doFn       moqUsual_Variadic_doFn
		doReturnFn moqUsual_Variadic_doReturnFn
	}{
		values: &struct {
			sResult string
			err     error
		}{
			sResult: sResult,
			err:     err,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqUsual_Variadic_fnRecorder) andDo(fn moqUsual_Variadic_doFn) *moqUsual_Variadic_fnRecorder {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqUsual_Variadic_fnRecorder) doReturnResults(fn moqUsual_Variadic_doReturnFn) *moqUsual_Variadic_fnRecorder {
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			sResult string
			err     error
		}
		sequence   uint32
		doFn       moqUsual_Variadic_doFn
		doReturnFn moqUsual_Variadic_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqUsual_Variadic_fnRecorder) findResults() {
	if r.results == nil {
		anyCount := bits.OnesCount64(r.anyParams)
		insertAt := -1
		var results *moqUsual_Variadic_resultsByParams
		for n, res := range r.moq.resultsByParams_Variadic {
			if res.anyParams == r.anyParams {
				results = &res
				break
			}
			if res.anyCount > anyCount {
				insertAt = n
			}
		}
		if results == nil {
			results = &moqUsual_Variadic_resultsByParams{
				anyCount:  anyCount,
				anyParams: r.anyParams,
				results:   map[moqUsual_Variadic_paramsKey]*moqUsual_Variadic_results{},
			}
			r.moq.resultsByParams_Variadic = append(r.moq.resultsByParams_Variadic, *results)
			if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams_Variadic) {
				copy(r.moq.resultsByParams_Variadic[insertAt+1:], r.moq.resultsByParams_Variadic[insertAt:0])
				r.moq.resultsByParams_Variadic[insertAt] = *results
			}
		}

		var otherUsed bool
		if r.anyParams&(1<<0) == 0 {
			otherUsed = r.paramsKey.other
		}
		var argsUsed hash.Hash
		if r.anyParams&(1<<1) == 0 {
			argsUsed = r.paramsKey.args
		}
		paramsKey := moqUsual_Variadic_paramsKey{
			other: otherUsed,
			args:  argsUsed,
		}

		var ok bool
		r.results, ok = results.results[paramsKey]
		if !ok {
			r.results = &moqUsual_Variadic_results{
				params:  r.params,
				results: nil,
				index:   0,
				repeat:  &moq.RepeatVal{},
			}
			results.results[paramsKey] = r.results
		}
	}
	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqUsual_Variadic_fnRecorder) repeat(repeaters ...moq.Repeater) *moqUsual_Variadic_fnRecorder {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values *struct {
					sResult string
					err     error
				}
				sequence   uint32
				doFn       moqUsual_Variadic_doFn
				doReturnFn moqUsual_Variadic_doReturnFn
			}{
				values: &struct {
					sResult string
					err     error
				}{
					sResult: last.values.sResult,
					err:     last.values.err,
				},
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqUsual_recorder) RepeatedIds(sParam1, sParam2 string, bParam bool) *moqUsual_RepeatedIds_fnRecorder {
	return &moqUsual_RepeatedIds_fnRecorder{
		params: moqUsual_RepeatedIds_params{
			sParam1: sParam1,
			sParam2: sParam2,
			bParam:  bParam,
		},
		paramsKey: moqUsual_RepeatedIds_paramsKey{
			sParam1: sParam1,
			sParam2: sParam2,
			bParam:  bParam,
		},
		sequence: m.moq.config.Sequence == moq.SeqDefaultOn,
		moq:      m.moq,
	}
}

func (r *moqUsual_RepeatedIds_fnRecorder) any() *moqUsual_RepeatedIds_anyParams {
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	return &moqUsual_RepeatedIds_anyParams{recorder: r}
}

func (a *moqUsual_RepeatedIds_anyParams) sParam1() *moqUsual_RepeatedIds_fnRecorder {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (a *moqUsual_RepeatedIds_anyParams) sParam2() *moqUsual_RepeatedIds_fnRecorder {
	a.recorder.anyParams |= 1 << 1
	return a.recorder
}

func (a *moqUsual_RepeatedIds_anyParams) bParam() *moqUsual_RepeatedIds_fnRecorder {
	a.recorder.anyParams |= 1 << 2
	return a.recorder
}

func (r *moqUsual_RepeatedIds_fnRecorder) seq() *moqUsual_RepeatedIds_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqUsual_RepeatedIds_fnRecorder) noSeq() *moqUsual_RepeatedIds_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqUsual_RepeatedIds_fnRecorder) returnResults(sResult1, sResult2 string, err error) *moqUsual_RepeatedIds_fnRecorder {
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			sResult1, sResult2 string
			err                error
		}
		sequence   uint32
		doFn       moqUsual_RepeatedIds_doFn
		doReturnFn moqUsual_RepeatedIds_doReturnFn
	}{
		values: &struct {
			sResult1, sResult2 string
			err                error
		}{
			sResult1: sResult1,
			sResult2: sResult2,
			err:      err,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqUsual_RepeatedIds_fnRecorder) andDo(fn moqUsual_RepeatedIds_doFn) *moqUsual_RepeatedIds_fnRecorder {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqUsual_RepeatedIds_fnRecorder) doReturnResults(fn moqUsual_RepeatedIds_doReturnFn) *moqUsual_RepeatedIds_fnRecorder {
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			sResult1, sResult2 string
			err                error
		}
		sequence   uint32
		doFn       moqUsual_RepeatedIds_doFn
		doReturnFn moqUsual_RepeatedIds_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqUsual_RepeatedIds_fnRecorder) findResults() {
	if r.results == nil {
		anyCount := bits.OnesCount64(r.anyParams)
		insertAt := -1
		var results *moqUsual_RepeatedIds_resultsByParams
		for n, res := range r.moq.resultsByParams_RepeatedIds {
			if res.anyParams == r.anyParams {
				results = &res
				break
			}
			if res.anyCount > anyCount {
				insertAt = n
			}
		}
		if results == nil {
			results = &moqUsual_RepeatedIds_resultsByParams{
				anyCount:  anyCount,
				anyParams: r.anyParams,
				results:   map[moqUsual_RepeatedIds_paramsKey]*moqUsual_RepeatedIds_results{},
			}
			r.moq.resultsByParams_RepeatedIds = append(r.moq.resultsByParams_RepeatedIds, *results)
			if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams_RepeatedIds) {
				copy(r.moq.resultsByParams_RepeatedIds[insertAt+1:], r.moq.resultsByParams_RepeatedIds[insertAt:0])
				r.moq.resultsByParams_RepeatedIds[insertAt] = *results
			}
		}

		var sParam1Used string
		if r.anyParams&(1<<0) == 0 {
			sParam1Used = r.paramsKey.sParam1
		}
		var sParam2Used string
		if r.anyParams&(1<<1) == 0 {
			sParam2Used = r.paramsKey.sParam2
		}
		var bParamUsed bool
		if r.anyParams&(1<<2) == 0 {
			bParamUsed = r.paramsKey.bParam
		}
		paramsKey := moqUsual_RepeatedIds_paramsKey{
			sParam1: sParam1Used,
			sParam2: sParam2Used,
			bParam:  bParamUsed,
		}

		var ok bool
		r.results, ok = results.results[paramsKey]
		if !ok {
			r.results = &moqUsual_RepeatedIds_results{
				params:  r.params,
				results: nil,
				index:   0,
				repeat:  &moq.RepeatVal{},
			}
			results.results[paramsKey] = r.results
		}
	}
	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqUsual_RepeatedIds_fnRecorder) repeat(repeaters ...moq.Repeater) *moqUsual_RepeatedIds_fnRecorder {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values *struct {
					sResult1, sResult2 string
					err                error
				}
				sequence   uint32
				doFn       moqUsual_RepeatedIds_doFn
				doReturnFn moqUsual_RepeatedIds_doReturnFn
			}{
				values: &struct {
					sResult1, sResult2 string
					err                error
				}{
					sResult1: last.values.sResult1,
					sResult2: last.values.sResult2,
					err:      last.values.err,
				},
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqUsual_recorder) Times(sParam string, times bool) *moqUsual_Times_fnRecorder {
	return &moqUsual_Times_fnRecorder{
		params: moqUsual_Times_params{
			sParam: sParam,
			times:  times,
		},
		paramsKey: moqUsual_Times_paramsKey{
			sParam: sParam,
			times:  times,
		},
		sequence: m.moq.config.Sequence == moq.SeqDefaultOn,
		moq:      m.moq,
	}
}

func (r *moqUsual_Times_fnRecorder) any() *moqUsual_Times_anyParams {
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	return &moqUsual_Times_anyParams{recorder: r}
}

func (a *moqUsual_Times_anyParams) sParam() *moqUsual_Times_fnRecorder {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (a *moqUsual_Times_anyParams) times() *moqUsual_Times_fnRecorder {
	a.recorder.anyParams |= 1 << 1
	return a.recorder
}

func (r *moqUsual_Times_fnRecorder) seq() *moqUsual_Times_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqUsual_Times_fnRecorder) noSeq() *moqUsual_Times_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqUsual_Times_fnRecorder) returnResults(sResult string, err error) *moqUsual_Times_fnRecorder {
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			sResult string
			err     error
		}
		sequence   uint32
		doFn       moqUsual_Times_doFn
		doReturnFn moqUsual_Times_doReturnFn
	}{
		values: &struct {
			sResult string
			err     error
		}{
			sResult: sResult,
			err:     err,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqUsual_Times_fnRecorder) andDo(fn moqUsual_Times_doFn) *moqUsual_Times_fnRecorder {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqUsual_Times_fnRecorder) doReturnResults(fn moqUsual_Times_doReturnFn) *moqUsual_Times_fnRecorder {
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			sResult string
			err     error
		}
		sequence   uint32
		doFn       moqUsual_Times_doFn
		doReturnFn moqUsual_Times_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqUsual_Times_fnRecorder) findResults() {
	if r.results == nil {
		anyCount := bits.OnesCount64(r.anyParams)
		insertAt := -1
		var results *moqUsual_Times_resultsByParams
		for n, res := range r.moq.resultsByParams_Times {
			if res.anyParams == r.anyParams {
				results = &res
				break
			}
			if res.anyCount > anyCount {
				insertAt = n
			}
		}
		if results == nil {
			results = &moqUsual_Times_resultsByParams{
				anyCount:  anyCount,
				anyParams: r.anyParams,
				results:   map[moqUsual_Times_paramsKey]*moqUsual_Times_results{},
			}
			r.moq.resultsByParams_Times = append(r.moq.resultsByParams_Times, *results)
			if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams_Times) {
				copy(r.moq.resultsByParams_Times[insertAt+1:], r.moq.resultsByParams_Times[insertAt:0])
				r.moq.resultsByParams_Times[insertAt] = *results
			}
		}

		var sParamUsed string
		if r.anyParams&(1<<0) == 0 {
			sParamUsed = r.paramsKey.sParam
		}
		var timesUsed bool
		if r.anyParams&(1<<1) == 0 {
			timesUsed = r.paramsKey.times
		}
		paramsKey := moqUsual_Times_paramsKey{
			sParam: sParamUsed,
			times:  timesUsed,
		}

		var ok bool
		r.results, ok = results.results[paramsKey]
		if !ok {
			r.results = &moqUsual_Times_results{
				params:  r.params,
				results: nil,
				index:   0,
				repeat:  &moq.RepeatVal{},
			}
			results.results[paramsKey] = r.results
		}
	}
	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqUsual_Times_fnRecorder) repeat(repeaters ...moq.Repeater) *moqUsual_Times_fnRecorder {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values *struct {
					sResult string
					err     error
				}
				sequence   uint32
				doFn       moqUsual_Times_doFn
				doReturnFn moqUsual_Times_doReturnFn
			}{
				values: &struct {
					sResult string
					err     error
				}{
					sResult: last.values.sResult,
					err:     last.values.err,
				},
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqUsual_recorder) DifficultParamNames(param1, param2 bool, param3 string, param, param5 int, param6, param7 float32) *moqUsual_DifficultParamNames_fnRecorder {
	return &moqUsual_DifficultParamNames_fnRecorder{
		params: moqUsual_DifficultParamNames_params{
			param1: param1,
			param2: param2,
			param3: param3,
			param:  param,
			param5: param5,
			param6: param6,
			param7: param7,
		},
		paramsKey: moqUsual_DifficultParamNames_paramsKey{
			param1: param1,
			param2: param2,
			param3: param3,
			param:  param,
			param5: param5,
			param6: param6,
			param7: param7,
		},
		sequence: m.moq.config.Sequence == moq.SeqDefaultOn,
		moq:      m.moq,
	}
}

func (r *moqUsual_DifficultParamNames_fnRecorder) any() *moqUsual_DifficultParamNames_anyParams {
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	return &moqUsual_DifficultParamNames_anyParams{recorder: r}
}

func (a *moqUsual_DifficultParamNames_anyParams) param1() *moqUsual_DifficultParamNames_fnRecorder {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (a *moqUsual_DifficultParamNames_anyParams) param2() *moqUsual_DifficultParamNames_fnRecorder {
	a.recorder.anyParams |= 1 << 1
	return a.recorder
}

func (a *moqUsual_DifficultParamNames_anyParams) param3() *moqUsual_DifficultParamNames_fnRecorder {
	a.recorder.anyParams |= 1 << 2
	return a.recorder
}

func (a *moqUsual_DifficultParamNames_anyParams) param() *moqUsual_DifficultParamNames_fnRecorder {
	a.recorder.anyParams |= 1 << 3
	return a.recorder
}

func (a *moqUsual_DifficultParamNames_anyParams) param5() *moqUsual_DifficultParamNames_fnRecorder {
	a.recorder.anyParams |= 1 << 4
	return a.recorder
}

func (a *moqUsual_DifficultParamNames_anyParams) param6() *moqUsual_DifficultParamNames_fnRecorder {
	a.recorder.anyParams |= 1 << 5
	return a.recorder
}

func (a *moqUsual_DifficultParamNames_anyParams) param7() *moqUsual_DifficultParamNames_fnRecorder {
	a.recorder.anyParams |= 1 << 6
	return a.recorder
}

func (r *moqUsual_DifficultParamNames_fnRecorder) seq() *moqUsual_DifficultParamNames_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqUsual_DifficultParamNames_fnRecorder) noSeq() *moqUsual_DifficultParamNames_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqUsual_DifficultParamNames_fnRecorder) returnResults() *moqUsual_DifficultParamNames_fnRecorder {
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values     *struct{}
		sequence   uint32
		doFn       moqUsual_DifficultParamNames_doFn
		doReturnFn moqUsual_DifficultParamNames_doReturnFn
	}{
		values:   &struct{}{},
		sequence: sequence,
	})
	return r
}

func (r *moqUsual_DifficultParamNames_fnRecorder) andDo(fn moqUsual_DifficultParamNames_doFn) *moqUsual_DifficultParamNames_fnRecorder {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqUsual_DifficultParamNames_fnRecorder) doReturnResults(fn moqUsual_DifficultParamNames_doReturnFn) *moqUsual_DifficultParamNames_fnRecorder {
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values     *struct{}
		sequence   uint32
		doFn       moqUsual_DifficultParamNames_doFn
		doReturnFn moqUsual_DifficultParamNames_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqUsual_DifficultParamNames_fnRecorder) findResults() {
	if r.results == nil {
		anyCount := bits.OnesCount64(r.anyParams)
		insertAt := -1
		var results *moqUsual_DifficultParamNames_resultsByParams
		for n, res := range r.moq.resultsByParams_DifficultParamNames {
			if res.anyParams == r.anyParams {
				results = &res
				break
			}
			if res.anyCount > anyCount {
				insertAt = n
			}
		}
		if results == nil {
			results = &moqUsual_DifficultParamNames_resultsByParams{
				anyCount:  anyCount,
				anyParams: r.anyParams,
				results:   map[moqUsual_DifficultParamNames_paramsKey]*moqUsual_DifficultParamNames_results{},
			}
			r.moq.resultsByParams_DifficultParamNames = append(r.moq.resultsByParams_DifficultParamNames, *results)
			if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams_DifficultParamNames) {
				copy(r.moq.resultsByParams_DifficultParamNames[insertAt+1:], r.moq.resultsByParams_DifficultParamNames[insertAt:0])
				r.moq.resultsByParams_DifficultParamNames[insertAt] = *results
			}
		}

		var param1Used bool
		if r.anyParams&(1<<0) == 0 {
			param1Used = r.paramsKey.param1
		}
		var param2Used bool
		if r.anyParams&(1<<1) == 0 {
			param2Used = r.paramsKey.param2
		}
		var param3Used string
		if r.anyParams&(1<<2) == 0 {
			param3Used = r.paramsKey.param3
		}
		var paramUsed int
		if r.anyParams&(1<<3) == 0 {
			paramUsed = r.paramsKey.param
		}
		var param5Used int
		if r.anyParams&(1<<4) == 0 {
			param5Used = r.paramsKey.param5
		}
		var param6Used float32
		if r.anyParams&(1<<5) == 0 {
			param6Used = r.paramsKey.param6
		}
		var param7Used float32
		if r.anyParams&(1<<6) == 0 {
			param7Used = r.paramsKey.param7
		}
		paramsKey := moqUsual_DifficultParamNames_paramsKey{
			param1: param1Used,
			param2: param2Used,
			param3: param3Used,
			param:  paramUsed,
			param5: param5Used,
			param6: param6Used,
			param7: param7Used,
		}

		var ok bool
		r.results, ok = results.results[paramsKey]
		if !ok {
			r.results = &moqUsual_DifficultParamNames_results{
				params:  r.params,
				results: nil,
				index:   0,
				repeat:  &moq.RepeatVal{},
			}
			results.results[paramsKey] = r.results
		}
	}
	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqUsual_DifficultParamNames_fnRecorder) repeat(repeaters ...moq.Repeater) *moqUsual_DifficultParamNames_fnRecorder {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values     *struct{}
				sequence   uint32
				doFn       moqUsual_DifficultParamNames_doFn
				doReturnFn moqUsual_DifficultParamNames_doReturnFn
			}{
				values:   &struct{}{},
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqUsual_recorder) DifficultResultNames() *moqUsual_DifficultResultNames_fnRecorder {
	return &moqUsual_DifficultResultNames_fnRecorder{
		params:    moqUsual_DifficultResultNames_params{},
		paramsKey: moqUsual_DifficultResultNames_paramsKey{},
		sequence:  m.moq.config.Sequence == moq.SeqDefaultOn,
		moq:       m.moq,
	}
}

func (r *moqUsual_DifficultResultNames_fnRecorder) any() *moqUsual_DifficultResultNames_anyParams {
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	return &moqUsual_DifficultResultNames_anyParams{recorder: r}
}

func (r *moqUsual_DifficultResultNames_fnRecorder) seq() *moqUsual_DifficultResultNames_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqUsual_DifficultResultNames_fnRecorder) noSeq() *moqUsual_DifficultResultNames_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqUsual_DifficultResultNames_fnRecorder) returnResults(result1, result2 string, result3 error, param, result5 int, result6, result7 float32) *moqUsual_DifficultResultNames_fnRecorder {
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1, result2 string
			result3          error
			param, result5   int
			result6, result7 float32
		}
		sequence   uint32
		doFn       moqUsual_DifficultResultNames_doFn
		doReturnFn moqUsual_DifficultResultNames_doReturnFn
	}{
		values: &struct {
			result1, result2 string
			result3          error
			param, result5   int
			result6, result7 float32
		}{
			result1: result1,
			result2: result2,
			result3: result3,
			param:   param,
			result5: result5,
			result6: result6,
			result7: result7,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqUsual_DifficultResultNames_fnRecorder) andDo(fn moqUsual_DifficultResultNames_doFn) *moqUsual_DifficultResultNames_fnRecorder {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqUsual_DifficultResultNames_fnRecorder) doReturnResults(fn moqUsual_DifficultResultNames_doReturnFn) *moqUsual_DifficultResultNames_fnRecorder {
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1, result2 string
			result3          error
			param, result5   int
			result6, result7 float32
		}
		sequence   uint32
		doFn       moqUsual_DifficultResultNames_doFn
		doReturnFn moqUsual_DifficultResultNames_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqUsual_DifficultResultNames_fnRecorder) findResults() {
	if r.results == nil {
		anyCount := bits.OnesCount64(r.anyParams)
		insertAt := -1
		var results *moqUsual_DifficultResultNames_resultsByParams
		for n, res := range r.moq.resultsByParams_DifficultResultNames {
			if res.anyParams == r.anyParams {
				results = &res
				break
			}
			if res.anyCount > anyCount {
				insertAt = n
			}
		}
		if results == nil {
			results = &moqUsual_DifficultResultNames_resultsByParams{
				anyCount:  anyCount,
				anyParams: r.anyParams,
				results:   map[moqUsual_DifficultResultNames_paramsKey]*moqUsual_DifficultResultNames_results{},
			}
			r.moq.resultsByParams_DifficultResultNames = append(r.moq.resultsByParams_DifficultResultNames, *results)
			if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams_DifficultResultNames) {
				copy(r.moq.resultsByParams_DifficultResultNames[insertAt+1:], r.moq.resultsByParams_DifficultResultNames[insertAt:0])
				r.moq.resultsByParams_DifficultResultNames[insertAt] = *results
			}
		}

		paramsKey := moqUsual_DifficultResultNames_paramsKey{}

		var ok bool
		r.results, ok = results.results[paramsKey]
		if !ok {
			r.results = &moqUsual_DifficultResultNames_results{
				params:  r.params,
				results: nil,
				index:   0,
				repeat:  &moq.RepeatVal{},
			}
			results.results[paramsKey] = r.results
		}
	}
	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqUsual_DifficultResultNames_fnRecorder) repeat(repeaters ...moq.Repeater) *moqUsual_DifficultResultNames_fnRecorder {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values *struct {
					result1, result2 string
					result3          error
					param, result5   int
					result6, result7 float32
				}
				sequence   uint32
				doFn       moqUsual_DifficultResultNames_doFn
				doReturnFn moqUsual_DifficultResultNames_doReturnFn
			}{
				values: &struct {
					result1, result2 string
					result3          error
					param, result5   int
					result6, result7 float32
				}{
					result1: last.values.result1,
					result2: last.values.result2,
					result3: last.values.result3,
					param:   last.values.param,
					result5: last.values.result5,
					result6: last.values.result6,
					result7: last.values.result7,
				},
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

// Reset resets the state of the moq
func (m *moqUsual) Reset() {
	m.resultsByParams_Usual = nil
	m.resultsByParams_NoNames = nil
	m.resultsByParams_NoResults = nil
	m.resultsByParams_NoParams = nil
	m.resultsByParams_Nothing = nil
	m.resultsByParams_Variadic = nil
	m.resultsByParams_RepeatedIds = nil
	m.resultsByParams_Times = nil
	m.resultsByParams_DifficultParamNames = nil
	m.resultsByParams_DifficultResultNames = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *moqUsual) AssertExpectationsMet() {
	for _, res := range m.resultsByParams_Usual {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.params)
			}
		}
	}
	for _, res := range m.resultsByParams_NoNames {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.params)
			}
		}
	}
	for _, res := range m.resultsByParams_NoResults {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.params)
			}
		}
	}
	for _, res := range m.resultsByParams_NoParams {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.params)
			}
		}
	}
	for _, res := range m.resultsByParams_Nothing {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.params)
			}
		}
	}
	for _, res := range m.resultsByParams_Variadic {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.params)
			}
		}
	}
	for _, res := range m.resultsByParams_RepeatedIds {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.params)
			}
		}
	}
	for _, res := range m.resultsByParams_Times {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.params)
			}
		}
	}
	for _, res := range m.resultsByParams_DifficultParamNames {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.params)
			}
		}
	}
	for _, res := range m.resultsByParams_DifficultResultNames {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.params)
			}
		}
	}
}
