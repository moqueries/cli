// Code generated by Moqueries - https://github.com/myshkin5/moqueries - DO NOT EDIT!

package testmoqs_test

import (
	"math/bits"
	"sync/atomic"

	"github.com/myshkin5/moqueries/generator/testmoqs"
	"github.com/myshkin5/moqueries/moq"
)

// moqDifficultResultNamesFn holds the state of a moq of the DifficultResultNamesFn type
type moqDifficultResultNamesFn struct {
	scene  *moq.Scene
	config moq.Config
	moq    *moqDifficultResultNamesFn_mock

	resultsByParams []moqDifficultResultNamesFn_resultsByParams

	runtime struct {
		parameterIndexing struct{}
	}
}

// moqDifficultResultNamesFn_mock isolates the mock interface of the DifficultResultNamesFn type
type moqDifficultResultNamesFn_mock struct {
	moq *moqDifficultResultNamesFn
}

// moqDifficultResultNamesFn_params holds the params of the DifficultResultNamesFn type
type moqDifficultResultNamesFn_params struct{}

// moqDifficultResultNamesFn_paramsKey holds the map key params of the DifficultResultNamesFn type
type moqDifficultResultNamesFn_paramsKey struct {
	params struct{}
	hashes struct{}
}

// moqDifficultResultNamesFn_resultsByParams contains the results for a given set of parameters for the DifficultResultNamesFn type
type moqDifficultResultNamesFn_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqDifficultResultNamesFn_paramsKey]*moqDifficultResultNamesFn_results
}

// moqDifficultResultNamesFn_doFn defines the type of function needed when calling andDo for the DifficultResultNamesFn type
type moqDifficultResultNamesFn_doFn func()

// moqDifficultResultNamesFn_doReturnFn defines the type of function needed when calling doReturnResults for the DifficultResultNamesFn type
type moqDifficultResultNamesFn_doReturnFn func() (m, r string, sequence error, param, params int, result, results float32)

// moqDifficultResultNamesFn_results holds the results of the DifficultResultNamesFn type
type moqDifficultResultNamesFn_results struct {
	params  moqDifficultResultNamesFn_params
	results []struct {
		values *struct {
			result1, result2 string
			result3          error
			param, result5   int
			result6, result7 float32
		}
		sequence   uint32
		doFn       moqDifficultResultNamesFn_doFn
		doReturnFn moqDifficultResultNamesFn_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqDifficultResultNamesFn_fnRecorder routes recorded function calls to the moqDifficultResultNamesFn moq
type moqDifficultResultNamesFn_fnRecorder struct {
	params    moqDifficultResultNamesFn_params
	anyParams uint64
	sequence  bool
	results   *moqDifficultResultNamesFn_results
	moq       *moqDifficultResultNamesFn
}

// moqDifficultResultNamesFn_anyParams isolates the any params functions of the DifficultResultNamesFn type
type moqDifficultResultNamesFn_anyParams struct {
	recorder *moqDifficultResultNamesFn_fnRecorder
}

// newMoqDifficultResultNamesFn creates a new moq of the DifficultResultNamesFn type
func newMoqDifficultResultNamesFn(scene *moq.Scene, config *moq.Config) *moqDifficultResultNamesFn {
	if config == nil {
		config = &moq.Config{}
	}
	m := &moqDifficultResultNamesFn{
		scene:  scene,
		config: *config,
		moq:    &moqDifficultResultNamesFn_mock{},

		runtime: struct {
			parameterIndexing struct{}
		}{parameterIndexing: struct{}{}},
	}
	m.moq.moq = m

	scene.AddMoq(m)
	return m
}

// mock returns the moq implementation of the DifficultResultNamesFn type
func (m *moqDifficultResultNamesFn) mock() testmoqs.DifficultResultNamesFn {
	return func() (_, _ string, _ error, _, _ int, _, _ float32) {
		moq := &moqDifficultResultNamesFn_mock{moq: m}
		return moq.fn()
	}
}

func (m *moqDifficultResultNamesFn_mock) fn() (result1, result2 string, result3 error, param, result5 int, result6, result7 float32) {
	params := moqDifficultResultNamesFn_params{}
	var results *moqDifficultResultNamesFn_results
	for _, resultsByParams := range m.moq.resultsByParams {
		paramsKey := m.moq.paramsKey(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match %#v", params)
		}
	}

	if result.doFn != nil {
		result.doFn()
	}

	if result.values != nil {
		result1 = result.values.result1
		result2 = result.values.result2
		result3 = result.values.result3
		param = result.values.param
		result5 = result.values.result5
		result6 = result.values.result6
		result7 = result.values.result7
	}
	if result.doReturnFn != nil {
		result1, result2, result3, param, result5, result6, result7 = result.doReturnFn()
	}
	return
}

func (m *moqDifficultResultNamesFn) onCall() *moqDifficultResultNamesFn_fnRecorder {
	return &moqDifficultResultNamesFn_fnRecorder{
		params:   moqDifficultResultNamesFn_params{},
		sequence: m.config.Sequence == moq.SeqDefaultOn,
		moq:      m,
	}
}

func (r *moqDifficultResultNamesFn_fnRecorder) any() *moqDifficultResultNamesFn_anyParams {
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	return &moqDifficultResultNamesFn_anyParams{recorder: r}
}

func (r *moqDifficultResultNamesFn_fnRecorder) seq() *moqDifficultResultNamesFn_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqDifficultResultNamesFn_fnRecorder) noSeq() *moqDifficultResultNamesFn_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqDifficultResultNamesFn_fnRecorder) returnResults(result1, result2 string, result3 error, param, result5 int, result6, result7 float32) *moqDifficultResultNamesFn_fnRecorder {
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1, result2 string
			result3          error
			param, result5   int
			result6, result7 float32
		}
		sequence   uint32
		doFn       moqDifficultResultNamesFn_doFn
		doReturnFn moqDifficultResultNamesFn_doReturnFn
	}{
		values: &struct {
			result1, result2 string
			result3          error
			param, result5   int
			result6, result7 float32
		}{
			result1: result1,
			result2: result2,
			result3: result3,
			param:   param,
			result5: result5,
			result6: result6,
			result7: result7,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqDifficultResultNamesFn_fnRecorder) andDo(fn moqDifficultResultNamesFn_doFn) *moqDifficultResultNamesFn_fnRecorder {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqDifficultResultNamesFn_fnRecorder) doReturnResults(fn moqDifficultResultNamesFn_doReturnFn) *moqDifficultResultNamesFn_fnRecorder {
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1, result2 string
			result3          error
			param, result5   int
			result6, result7 float32
		}
		sequence   uint32
		doFn       moqDifficultResultNamesFn_doFn
		doReturnFn moqDifficultResultNamesFn_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqDifficultResultNamesFn_fnRecorder) findResults() {
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqDifficultResultNamesFn_resultsByParams
	for n, res := range r.moq.resultsByParams {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqDifficultResultNamesFn_resultsByParams{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqDifficultResultNamesFn_paramsKey]*moqDifficultResultNamesFn_results{},
		}
		r.moq.resultsByParams = append(r.moq.resultsByParams, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams) {
			copy(r.moq.resultsByParams[insertAt+1:], r.moq.resultsByParams[insertAt:0])
			r.moq.resultsByParams[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqDifficultResultNamesFn_results{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqDifficultResultNamesFn_fnRecorder) repeat(repeaters ...moq.Repeater) *moqDifficultResultNamesFn_fnRecorder {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values *struct {
					result1, result2 string
					result3          error
					param, result5   int
					result6, result7 float32
				}
				sequence   uint32
				doFn       moqDifficultResultNamesFn_doFn
				doReturnFn moqDifficultResultNamesFn_doReturnFn
			}{
				values: &struct {
					result1, result2 string
					result3          error
					param, result5   int
					result6, result7 float32
				}{
					result1: last.values.result1,
					result2: last.values.result2,
					result3: last.values.result3,
					param:   last.values.param,
					result5: last.values.result5,
					result6: last.values.result6,
					result7: last.values.result7,
				},
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqDifficultResultNamesFn) paramsKey(params moqDifficultResultNamesFn_params, anyParams uint64) moqDifficultResultNamesFn_paramsKey {
	return moqDifficultResultNamesFn_paramsKey{
		params: struct{}{},
		hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *moqDifficultResultNamesFn) Reset() { m.resultsByParams = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *moqDifficultResultNamesFn) AssertExpectationsMet() {
	for _, res := range m.resultsByParams {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.params)
			}
		}
	}
}
