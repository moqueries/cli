// Code generated by Moqueries - https://github.com/myshkin5/moqueries - DO NOT EDIT!

package exported

import (
	"math/bits"
	"sync/atomic"

	"github.com/myshkin5/moqueries/generator/testmoqs"
	"github.com/myshkin5/moqueries/moq"
)

// MoqTimesFn holds the state of a moq of the TimesFn type
type MoqTimesFn struct {
	Scene           *moq.Scene
	Config          moq.Config
	ResultsByParams []MoqTimesFn_resultsByParams
}

// MoqTimesFn_mock isolates the mock interface of the TimesFn type
type MoqTimesFn_mock struct {
	Moq *MoqTimesFn
}

// MoqTimesFn_params holds the params of the TimesFn type
type MoqTimesFn_params struct {
	Times  string
	BParam bool
}

// MoqTimesFn_paramsKey holds the map key params of the TimesFn type
type MoqTimesFn_paramsKey struct {
	Times  string
	BParam bool
}

// MoqTimesFn_resultsByParams contains the results for a given set of parameters for the TimesFn type
type MoqTimesFn_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqTimesFn_paramsKey]*MoqTimesFn_results
}

// MoqTimesFn_doFn defines the type of function needed when calling AndDo for the TimesFn type
type MoqTimesFn_doFn func(times string, bParam bool)

// MoqTimesFn_doReturnFn defines the type of function needed when calling DoReturnResults for the TimesFn type
type MoqTimesFn_doReturnFn func(times string, bParam bool) (sResult string, err error)

// MoqTimesFn_results holds the results of the TimesFn type
type MoqTimesFn_results struct {
	Params  MoqTimesFn_params
	Results []struct {
		Values *struct {
			SResult string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqTimesFn_doFn
		DoReturnFn MoqTimesFn_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqTimesFn_fnRecorder routes recorded function calls to the MoqTimesFn moq
type MoqTimesFn_fnRecorder struct {
	Params    MoqTimesFn_params
	ParamsKey MoqTimesFn_paramsKey
	AnyParams uint64
	Sequence  bool
	Results   *MoqTimesFn_results
	Moq       *MoqTimesFn
}

// MoqTimesFn_anyParams isolates the any params functions of the TimesFn type
type MoqTimesFn_anyParams struct {
	Recorder *MoqTimesFn_fnRecorder
}

// NewMoqTimesFn creates a new moq of the TimesFn type
func NewMoqTimesFn(scene *moq.Scene, config *moq.Config) *MoqTimesFn {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqTimesFn{
		Scene:  scene,
		Config: *config,
	}
	scene.AddMoq(m)
	return m
}

// Mock returns the moq implementation of the TimesFn type
func (m *MoqTimesFn) Mock() testmoqs.TimesFn {
	return func(times string, bParam bool) (_ string, _ error) {
		moq := &MoqTimesFn_mock{Moq: m}
		return moq.Fn(times, bParam)
	}
}

func (m *MoqTimesFn_mock) Fn(times string, bParam bool) (sResult string, err error) {
	params := MoqTimesFn_params{
		Times:  times,
		BParam: bParam,
	}
	var results *MoqTimesFn_results
	for _, resultsByParams := range m.Moq.ResultsByParams {
		var timesUsed string
		if resultsByParams.AnyParams&(1<<0) == 0 {
			timesUsed = times
		}
		var bParamUsed bool
		if resultsByParams.AnyParams&(1<<1) == 0 {
			bParamUsed = bParam
		}
		paramsKey := MoqTimesFn_paramsKey{
			Times:  timesUsed,
			BParam: bParamUsed,
		}
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match %#v", params)
		}
	}

	if result.DoFn != nil {
		result.DoFn(times, bParam)
	}

	if result.Values != nil {
		sResult = result.Values.SResult
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		sResult, err = result.DoReturnFn(times, bParam)
	}
	return
}

func (m *MoqTimesFn) OnCall(times string, bParam bool) *MoqTimesFn_fnRecorder {
	return &MoqTimesFn_fnRecorder{
		Params: MoqTimesFn_params{
			Times:  times,
			BParam: bParam,
		},
		ParamsKey: MoqTimesFn_paramsKey{
			Times:  times,
			BParam: bParam,
		},
		Sequence: m.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m,
	}
}

func (r *MoqTimesFn_fnRecorder) Any() *MoqTimesFn_anyParams {
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, parameters: %#v", r.Params)
		return nil
	}
	return &MoqTimesFn_anyParams{Recorder: r}
}

func (a *MoqTimesFn_anyParams) Times() *MoqTimesFn_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqTimesFn_anyParams) BParam() *MoqTimesFn_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqTimesFn_fnRecorder) Seq() *MoqTimesFn_fnRecorder {
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, parameters: %#v", r.Params)
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqTimesFn_fnRecorder) NoSeq() *MoqTimesFn_fnRecorder {
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, parameters: %#v", r.Params)
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqTimesFn_fnRecorder) ReturnResults(sResult string, err error) *MoqTimesFn_fnRecorder {
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			SResult string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqTimesFn_doFn
		DoReturnFn MoqTimesFn_doReturnFn
	}{
		Values: &struct {
			SResult string
			Err     error
		}{
			SResult: sResult,
			Err:     err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqTimesFn_fnRecorder) AndDo(fn MoqTimesFn_doFn) *MoqTimesFn_fnRecorder {
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqTimesFn_fnRecorder) DoReturnResults(fn MoqTimesFn_doReturnFn) *MoqTimesFn_fnRecorder {
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			SResult string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqTimesFn_doFn
		DoReturnFn MoqTimesFn_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqTimesFn_fnRecorder) FindResults() {
	if r.Results == nil {
		anyCount := bits.OnesCount64(r.AnyParams)
		insertAt := -1
		var results *MoqTimesFn_resultsByParams
		for n, res := range r.Moq.ResultsByParams {
			if res.AnyParams == r.AnyParams {
				results = &res
				break
			}
			if res.AnyCount > anyCount {
				insertAt = n
			}
		}
		if results == nil {
			results = &MoqTimesFn_resultsByParams{
				AnyCount:  anyCount,
				AnyParams: r.AnyParams,
				Results:   map[MoqTimesFn_paramsKey]*MoqTimesFn_results{},
			}
			r.Moq.ResultsByParams = append(r.Moq.ResultsByParams, *results)
			if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams) {
				copy(r.Moq.ResultsByParams[insertAt+1:], r.Moq.ResultsByParams[insertAt:0])
				r.Moq.ResultsByParams[insertAt] = *results
			}
		}

		var timesUsed string
		if r.AnyParams&(1<<0) == 0 {
			timesUsed = r.ParamsKey.Times
		}
		var bParamUsed bool
		if r.AnyParams&(1<<1) == 0 {
			bParamUsed = r.ParamsKey.BParam
		}
		paramsKey := MoqTimesFn_paramsKey{
			Times:  timesUsed,
			BParam: bParamUsed,
		}

		var ok bool
		r.Results, ok = results.Results[paramsKey]
		if !ok {
			r.Results = &MoqTimesFn_results{
				Params:  r.Params,
				Results: nil,
				Index:   0,
				Repeat:  &moq.RepeatVal{},
			}
			results.Results[paramsKey] = r.Results
		}
	}
	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqTimesFn_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqTimesFn_fnRecorder {
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					SResult string
					Err     error
				}
				Sequence   uint32
				DoFn       MoqTimesFn_doFn
				DoReturnFn MoqTimesFn_doReturnFn
			}{
				Values: &struct {
					SResult string
					Err     error
				}{
					SResult: last.Values.SResult,
					Err:     last.Values.Err,
				},
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

// Reset resets the state of the moq
func (m *MoqTimesFn) Reset() { m.ResultsByParams = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqTimesFn) AssertExpectationsMet() {
	for _, res := range m.ResultsByParams {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.Params)
			}
		}
	}
}
