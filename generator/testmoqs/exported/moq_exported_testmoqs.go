// Code generated by Moqueries - https://github.com/myshkin5/moqueries - DO NOT EDIT!

package exported

import (
	"fmt"
	"io"
	"math/bits"
	"sync/atomic"

	"github.com/myshkin5/moqueries/generator/testmoqs"
	"github.com/myshkin5/moqueries/hash"
	"github.com/myshkin5/moqueries/moq"
)

// MoqUsualFn holds the state of a moq of the UsualFn type
type MoqUsualFn struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqUsualFn_mock

	ResultsByParams []MoqUsualFn_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			SParam moq.ParamIndexing
			BParam moq.ParamIndexing
		}
	}
}

// MoqUsualFn_mock isolates the mock interface of the UsualFn type
type MoqUsualFn_mock struct {
	Moq *MoqUsualFn
}

// MoqUsualFn_params holds the params of the UsualFn type
type MoqUsualFn_params struct {
	SParam string
	BParam bool
}

// MoqUsualFn_paramsKey holds the map key params of the UsualFn type
type MoqUsualFn_paramsKey struct {
	Params struct {
		SParam string
		BParam bool
	}
	Hashes struct {
		SParam hash.Hash
		BParam hash.Hash
	}
}

// MoqUsualFn_resultsByParams contains the results for a given set of parameters for the UsualFn type
type MoqUsualFn_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqUsualFn_paramsKey]*MoqUsualFn_results
}

// MoqUsualFn_doFn defines the type of function needed when calling AndDo for the UsualFn type
type MoqUsualFn_doFn func(sParam string, bParam bool)

// MoqUsualFn_doReturnFn defines the type of function needed when calling DoReturnResults for the UsualFn type
type MoqUsualFn_doReturnFn func(sParam string, bParam bool) (sResult string, err error)

// MoqUsualFn_results holds the results of the UsualFn type
type MoqUsualFn_results struct {
	Params  MoqUsualFn_params
	Results []struct {
		Values *struct {
			SResult string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqUsualFn_doFn
		DoReturnFn MoqUsualFn_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqUsualFn_fnRecorder routes recorded function calls to the MoqUsualFn moq
type MoqUsualFn_fnRecorder struct {
	Params    MoqUsualFn_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqUsualFn_results
	Moq       *MoqUsualFn
}

// MoqUsualFn_anyParams isolates the any params functions of the UsualFn type
type MoqUsualFn_anyParams struct {
	Recorder *MoqUsualFn_fnRecorder
}

// NewMoqUsualFn creates a new moq of the UsualFn type
func NewMoqUsualFn(scene *moq.Scene, config *moq.Config) *MoqUsualFn {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqUsualFn{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqUsualFn_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				SParam moq.ParamIndexing
				BParam moq.ParamIndexing
			}
		}{ParameterIndexing: struct {
			SParam moq.ParamIndexing
			BParam moq.ParamIndexing
		}{
			SParam: moq.ParamIndexByValue,
			BParam: moq.ParamIndexByValue,
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the moq implementation of the UsualFn type
func (m *MoqUsualFn) Mock() testmoqs.UsualFn {
	return func(sParam string, bParam bool) (_ string, _ error) {
		moq := &MoqUsualFn_mock{Moq: m}
		return moq.Fn(sParam, bParam)
	}
}

func (m *MoqUsualFn_mock) Fn(sParam string, bParam bool) (sResult string, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqUsualFn_params{
		SParam: sParam,
		BParam: bParam,
	}
	var results *MoqUsualFn_results
	for _, resultsByParams := range m.Moq.ResultsByParams {
		paramsKey := m.Moq.ParamsKey(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(sParam, bParam)
	}

	if result.Values != nil {
		sResult = result.Values.SResult
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		sResult, err = result.DoReturnFn(sParam, bParam)
	}
	return
}

func (m *MoqUsualFn) OnCall(sParam string, bParam bool) *MoqUsualFn_fnRecorder {
	return &MoqUsualFn_fnRecorder{
		Params: MoqUsualFn_params{
			SParam: sParam,
			BParam: bParam,
		},
		Sequence: m.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m,
	}
}

func (r *MoqUsualFn_fnRecorder) Any() *MoqUsualFn_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams(r.Params))
		return nil
	}
	return &MoqUsualFn_anyParams{Recorder: r}
}

func (a *MoqUsualFn_anyParams) SParam() *MoqUsualFn_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqUsualFn_anyParams) BParam() *MoqUsualFn_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqUsualFn_fnRecorder) Seq() *MoqUsualFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqUsualFn_fnRecorder) NoSeq() *MoqUsualFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqUsualFn_fnRecorder) ReturnResults(sResult string, err error) *MoqUsualFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			SResult string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqUsualFn_doFn
		DoReturnFn MoqUsualFn_doReturnFn
	}{
		Values: &struct {
			SResult string
			Err     error
		}{
			SResult: sResult,
			Err:     err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqUsualFn_fnRecorder) AndDo(fn MoqUsualFn_doFn) *MoqUsualFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqUsualFn_fnRecorder) DoReturnResults(fn MoqUsualFn_doReturnFn) *MoqUsualFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			SResult string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqUsualFn_doFn
		DoReturnFn MoqUsualFn_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqUsualFn_fnRecorder) FindResults() {
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqUsualFn_resultsByParams
	for n, res := range r.Moq.ResultsByParams {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqUsualFn_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqUsualFn_paramsKey]*MoqUsualFn_results{},
		}
		r.Moq.ResultsByParams = append(r.Moq.ResultsByParams, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams) {
			copy(r.Moq.ResultsByParams[insertAt+1:], r.Moq.ResultsByParams[insertAt:0])
			r.Moq.ResultsByParams[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqUsualFn_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqUsualFn_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqUsualFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					SResult string
					Err     error
				}
				Sequence   uint32
				DoFn       MoqUsualFn_doFn
				DoReturnFn MoqUsualFn_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqUsualFn) PrettyParams(params MoqUsualFn_params) string {
	return fmt.Sprintf("UsualFn(%#v, %#v)", params.SParam, params.BParam)
}

func (m *MoqUsualFn) ParamsKey(params MoqUsualFn_params, anyParams uint64) MoqUsualFn_paramsKey {
	var sParamUsed string
	var sParamUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.SParam == moq.ParamIndexByValue {
			sParamUsed = params.SParam
		} else {
			sParamUsedHash = hash.DeepHash(params.SParam)
		}
	}
	var bParamUsed bool
	var bParamUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.BParam == moq.ParamIndexByValue {
			bParamUsed = params.BParam
		} else {
			bParamUsedHash = hash.DeepHash(params.BParam)
		}
	}
	return MoqUsualFn_paramsKey{
		Params: struct {
			SParam string
			BParam bool
		}{
			SParam: sParamUsed,
			BParam: bParamUsed,
		},
		Hashes: struct {
			SParam hash.Hash
			BParam hash.Hash
		}{
			SParam: sParamUsedHash,
			BParam: bParamUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqUsualFn) Reset() { m.ResultsByParams = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqUsualFn) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams(results.Params))
			}
		}
	}
}

// MoqNoNamesFn holds the state of a moq of the NoNamesFn type
type MoqNoNamesFn struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqNoNamesFn_mock

	ResultsByParams []MoqNoNamesFn_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Param1 moq.ParamIndexing
			Param2 moq.ParamIndexing
		}
	}
}

// MoqNoNamesFn_mock isolates the mock interface of the NoNamesFn type
type MoqNoNamesFn_mock struct {
	Moq *MoqNoNamesFn
}

// MoqNoNamesFn_params holds the params of the NoNamesFn type
type MoqNoNamesFn_params struct {
	Param1 string
	Param2 bool
}

// MoqNoNamesFn_paramsKey holds the map key params of the NoNamesFn type
type MoqNoNamesFn_paramsKey struct {
	Params struct {
		Param1 string
		Param2 bool
	}
	Hashes struct {
		Param1 hash.Hash
		Param2 hash.Hash
	}
}

// MoqNoNamesFn_resultsByParams contains the results for a given set of parameters for the NoNamesFn type
type MoqNoNamesFn_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqNoNamesFn_paramsKey]*MoqNoNamesFn_results
}

// MoqNoNamesFn_doFn defines the type of function needed when calling AndDo for the NoNamesFn type
type MoqNoNamesFn_doFn func(string, bool)

// MoqNoNamesFn_doReturnFn defines the type of function needed when calling DoReturnResults for the NoNamesFn type
type MoqNoNamesFn_doReturnFn func(string, bool) (string, error)

// MoqNoNamesFn_results holds the results of the NoNamesFn type
type MoqNoNamesFn_results struct {
	Params  MoqNoNamesFn_params
	Results []struct {
		Values *struct {
			Result1 string
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqNoNamesFn_doFn
		DoReturnFn MoqNoNamesFn_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqNoNamesFn_fnRecorder routes recorded function calls to the MoqNoNamesFn moq
type MoqNoNamesFn_fnRecorder struct {
	Params    MoqNoNamesFn_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqNoNamesFn_results
	Moq       *MoqNoNamesFn
}

// MoqNoNamesFn_anyParams isolates the any params functions of the NoNamesFn type
type MoqNoNamesFn_anyParams struct {
	Recorder *MoqNoNamesFn_fnRecorder
}

// NewMoqNoNamesFn creates a new moq of the NoNamesFn type
func NewMoqNoNamesFn(scene *moq.Scene, config *moq.Config) *MoqNoNamesFn {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqNoNamesFn{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqNoNamesFn_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Param1 moq.ParamIndexing
				Param2 moq.ParamIndexing
			}
		}{ParameterIndexing: struct {
			Param1 moq.ParamIndexing
			Param2 moq.ParamIndexing
		}{
			Param1: moq.ParamIndexByValue,
			Param2: moq.ParamIndexByValue,
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the moq implementation of the NoNamesFn type
func (m *MoqNoNamesFn) Mock() testmoqs.NoNamesFn {
	return func(param1 string, param2 bool) (string, error) {
		moq := &MoqNoNamesFn_mock{Moq: m}
		return moq.Fn(param1, param2)
	}
}

func (m *MoqNoNamesFn_mock) Fn(param1 string, param2 bool) (result1 string, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqNoNamesFn_params{
		Param1: param1,
		Param2: param2,
	}
	var results *MoqNoNamesFn_results
	for _, resultsByParams := range m.Moq.ResultsByParams {
		paramsKey := m.Moq.ParamsKey(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(param1, param2)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(param1, param2)
	}
	return
}

func (m *MoqNoNamesFn) OnCall(param1 string, param2 bool) *MoqNoNamesFn_fnRecorder {
	return &MoqNoNamesFn_fnRecorder{
		Params: MoqNoNamesFn_params{
			Param1: param1,
			Param2: param2,
		},
		Sequence: m.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m,
	}
}

func (r *MoqNoNamesFn_fnRecorder) Any() *MoqNoNamesFn_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams(r.Params))
		return nil
	}
	return &MoqNoNamesFn_anyParams{Recorder: r}
}

func (a *MoqNoNamesFn_anyParams) Param1() *MoqNoNamesFn_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqNoNamesFn_anyParams) Param2() *MoqNoNamesFn_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqNoNamesFn_fnRecorder) Seq() *MoqNoNamesFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqNoNamesFn_fnRecorder) NoSeq() *MoqNoNamesFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqNoNamesFn_fnRecorder) ReturnResults(result1 string, result2 error) *MoqNoNamesFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqNoNamesFn_doFn
		DoReturnFn MoqNoNamesFn_doReturnFn
	}{
		Values: &struct {
			Result1 string
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqNoNamesFn_fnRecorder) AndDo(fn MoqNoNamesFn_doFn) *MoqNoNamesFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqNoNamesFn_fnRecorder) DoReturnResults(fn MoqNoNamesFn_doReturnFn) *MoqNoNamesFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqNoNamesFn_doFn
		DoReturnFn MoqNoNamesFn_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqNoNamesFn_fnRecorder) FindResults() {
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqNoNamesFn_resultsByParams
	for n, res := range r.Moq.ResultsByParams {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqNoNamesFn_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqNoNamesFn_paramsKey]*MoqNoNamesFn_results{},
		}
		r.Moq.ResultsByParams = append(r.Moq.ResultsByParams, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams) {
			copy(r.Moq.ResultsByParams[insertAt+1:], r.Moq.ResultsByParams[insertAt:0])
			r.Moq.ResultsByParams[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqNoNamesFn_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqNoNamesFn_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqNoNamesFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 string
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqNoNamesFn_doFn
				DoReturnFn MoqNoNamesFn_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqNoNamesFn) PrettyParams(params MoqNoNamesFn_params) string {
	return fmt.Sprintf("NoNamesFn(%#v, %#v)", params.Param1, params.Param2)
}

func (m *MoqNoNamesFn) ParamsKey(params MoqNoNamesFn_params, anyParams uint64) MoqNoNamesFn_paramsKey {
	var param1Used string
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Param1 == moq.ParamIndexByValue {
			param1Used = params.Param1
		} else {
			param1UsedHash = hash.DeepHash(params.Param1)
		}
	}
	var param2Used bool
	var param2UsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Param2 == moq.ParamIndexByValue {
			param2Used = params.Param2
		} else {
			param2UsedHash = hash.DeepHash(params.Param2)
		}
	}
	return MoqNoNamesFn_paramsKey{
		Params: struct {
			Param1 string
			Param2 bool
		}{
			Param1: param1Used,
			Param2: param2Used,
		},
		Hashes: struct {
			Param1 hash.Hash
			Param2 hash.Hash
		}{
			Param1: param1UsedHash,
			Param2: param2UsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqNoNamesFn) Reset() { m.ResultsByParams = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqNoNamesFn) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams(results.Params))
			}
		}
	}
}

// MoqNoResultsFn holds the state of a moq of the NoResultsFn type
type MoqNoResultsFn struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqNoResultsFn_mock

	ResultsByParams []MoqNoResultsFn_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			SParam moq.ParamIndexing
			BParam moq.ParamIndexing
		}
	}
}

// MoqNoResultsFn_mock isolates the mock interface of the NoResultsFn type
type MoqNoResultsFn_mock struct {
	Moq *MoqNoResultsFn
}

// MoqNoResultsFn_params holds the params of the NoResultsFn type
type MoqNoResultsFn_params struct {
	SParam string
	BParam bool
}

// MoqNoResultsFn_paramsKey holds the map key params of the NoResultsFn type
type MoqNoResultsFn_paramsKey struct {
	Params struct {
		SParam string
		BParam bool
	}
	Hashes struct {
		SParam hash.Hash
		BParam hash.Hash
	}
}

// MoqNoResultsFn_resultsByParams contains the results for a given set of parameters for the NoResultsFn type
type MoqNoResultsFn_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqNoResultsFn_paramsKey]*MoqNoResultsFn_results
}

// MoqNoResultsFn_doFn defines the type of function needed when calling AndDo for the NoResultsFn type
type MoqNoResultsFn_doFn func(sParam string, bParam bool)

// MoqNoResultsFn_doReturnFn defines the type of function needed when calling DoReturnResults for the NoResultsFn type
type MoqNoResultsFn_doReturnFn func(sParam string, bParam bool)

// MoqNoResultsFn_results holds the results of the NoResultsFn type
type MoqNoResultsFn_results struct {
	Params  MoqNoResultsFn_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqNoResultsFn_doFn
		DoReturnFn MoqNoResultsFn_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqNoResultsFn_fnRecorder routes recorded function calls to the MoqNoResultsFn moq
type MoqNoResultsFn_fnRecorder struct {
	Params    MoqNoResultsFn_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqNoResultsFn_results
	Moq       *MoqNoResultsFn
}

// MoqNoResultsFn_anyParams isolates the any params functions of the NoResultsFn type
type MoqNoResultsFn_anyParams struct {
	Recorder *MoqNoResultsFn_fnRecorder
}

// NewMoqNoResultsFn creates a new moq of the NoResultsFn type
func NewMoqNoResultsFn(scene *moq.Scene, config *moq.Config) *MoqNoResultsFn {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqNoResultsFn{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqNoResultsFn_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				SParam moq.ParamIndexing
				BParam moq.ParamIndexing
			}
		}{ParameterIndexing: struct {
			SParam moq.ParamIndexing
			BParam moq.ParamIndexing
		}{
			SParam: moq.ParamIndexByValue,
			BParam: moq.ParamIndexByValue,
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the moq implementation of the NoResultsFn type
func (m *MoqNoResultsFn) Mock() testmoqs.NoResultsFn {
	return func(sParam string, bParam bool) { moq := &MoqNoResultsFn_mock{Moq: m}; moq.Fn(sParam, bParam) }
}

func (m *MoqNoResultsFn_mock) Fn(sParam string, bParam bool) {
	m.Moq.Scene.T.Helper()
	params := MoqNoResultsFn_params{
		SParam: sParam,
		BParam: bParam,
	}
	var results *MoqNoResultsFn_results
	for _, resultsByParams := range m.Moq.ResultsByParams {
		paramsKey := m.Moq.ParamsKey(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(sParam, bParam)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(sParam, bParam)
	}
	return
}

func (m *MoqNoResultsFn) OnCall(sParam string, bParam bool) *MoqNoResultsFn_fnRecorder {
	return &MoqNoResultsFn_fnRecorder{
		Params: MoqNoResultsFn_params{
			SParam: sParam,
			BParam: bParam,
		},
		Sequence: m.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m,
	}
}

func (r *MoqNoResultsFn_fnRecorder) Any() *MoqNoResultsFn_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams(r.Params))
		return nil
	}
	return &MoqNoResultsFn_anyParams{Recorder: r}
}

func (a *MoqNoResultsFn_anyParams) SParam() *MoqNoResultsFn_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqNoResultsFn_anyParams) BParam() *MoqNoResultsFn_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqNoResultsFn_fnRecorder) Seq() *MoqNoResultsFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqNoResultsFn_fnRecorder) NoSeq() *MoqNoResultsFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqNoResultsFn_fnRecorder) ReturnResults() *MoqNoResultsFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqNoResultsFn_doFn
		DoReturnFn MoqNoResultsFn_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqNoResultsFn_fnRecorder) AndDo(fn MoqNoResultsFn_doFn) *MoqNoResultsFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqNoResultsFn_fnRecorder) DoReturnResults(fn MoqNoResultsFn_doReturnFn) *MoqNoResultsFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqNoResultsFn_doFn
		DoReturnFn MoqNoResultsFn_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqNoResultsFn_fnRecorder) FindResults() {
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqNoResultsFn_resultsByParams
	for n, res := range r.Moq.ResultsByParams {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqNoResultsFn_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqNoResultsFn_paramsKey]*MoqNoResultsFn_results{},
		}
		r.Moq.ResultsByParams = append(r.Moq.ResultsByParams, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams) {
			copy(r.Moq.ResultsByParams[insertAt+1:], r.Moq.ResultsByParams[insertAt:0])
			r.Moq.ResultsByParams[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqNoResultsFn_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqNoResultsFn_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqNoResultsFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqNoResultsFn_doFn
				DoReturnFn MoqNoResultsFn_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqNoResultsFn) PrettyParams(params MoqNoResultsFn_params) string {
	return fmt.Sprintf("NoResultsFn(%#v, %#v)", params.SParam, params.BParam)
}

func (m *MoqNoResultsFn) ParamsKey(params MoqNoResultsFn_params, anyParams uint64) MoqNoResultsFn_paramsKey {
	var sParamUsed string
	var sParamUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.SParam == moq.ParamIndexByValue {
			sParamUsed = params.SParam
		} else {
			sParamUsedHash = hash.DeepHash(params.SParam)
		}
	}
	var bParamUsed bool
	var bParamUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.BParam == moq.ParamIndexByValue {
			bParamUsed = params.BParam
		} else {
			bParamUsedHash = hash.DeepHash(params.BParam)
		}
	}
	return MoqNoResultsFn_paramsKey{
		Params: struct {
			SParam string
			BParam bool
		}{
			SParam: sParamUsed,
			BParam: bParamUsed,
		},
		Hashes: struct {
			SParam hash.Hash
			BParam hash.Hash
		}{
			SParam: sParamUsedHash,
			BParam: bParamUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqNoResultsFn) Reset() { m.ResultsByParams = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqNoResultsFn) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams(results.Params))
			}
		}
	}
}

// MoqNoParamsFn holds the state of a moq of the NoParamsFn type
type MoqNoParamsFn struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqNoParamsFn_mock

	ResultsByParams []MoqNoParamsFn_resultsByParams

	Runtime struct {
		ParameterIndexing struct{}
	}
}

// MoqNoParamsFn_mock isolates the mock interface of the NoParamsFn type
type MoqNoParamsFn_mock struct {
	Moq *MoqNoParamsFn
}

// MoqNoParamsFn_params holds the params of the NoParamsFn type
type MoqNoParamsFn_params struct{}

// MoqNoParamsFn_paramsKey holds the map key params of the NoParamsFn type
type MoqNoParamsFn_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqNoParamsFn_resultsByParams contains the results for a given set of parameters for the NoParamsFn type
type MoqNoParamsFn_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqNoParamsFn_paramsKey]*MoqNoParamsFn_results
}

// MoqNoParamsFn_doFn defines the type of function needed when calling AndDo for the NoParamsFn type
type MoqNoParamsFn_doFn func()

// MoqNoParamsFn_doReturnFn defines the type of function needed when calling DoReturnResults for the NoParamsFn type
type MoqNoParamsFn_doReturnFn func() (sResult string, err error)

// MoqNoParamsFn_results holds the results of the NoParamsFn type
type MoqNoParamsFn_results struct {
	Params  MoqNoParamsFn_params
	Results []struct {
		Values *struct {
			SResult string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqNoParamsFn_doFn
		DoReturnFn MoqNoParamsFn_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqNoParamsFn_fnRecorder routes recorded function calls to the MoqNoParamsFn moq
type MoqNoParamsFn_fnRecorder struct {
	Params    MoqNoParamsFn_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqNoParamsFn_results
	Moq       *MoqNoParamsFn
}

// MoqNoParamsFn_anyParams isolates the any params functions of the NoParamsFn type
type MoqNoParamsFn_anyParams struct {
	Recorder *MoqNoParamsFn_fnRecorder
}

// NewMoqNoParamsFn creates a new moq of the NoParamsFn type
func NewMoqNoParamsFn(scene *moq.Scene, config *moq.Config) *MoqNoParamsFn {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqNoParamsFn{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqNoParamsFn_mock{},

		Runtime: struct {
			ParameterIndexing struct{}
		}{ParameterIndexing: struct{}{}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the moq implementation of the NoParamsFn type
func (m *MoqNoParamsFn) Mock() testmoqs.NoParamsFn {
	return func() (_ string, _ error) { moq := &MoqNoParamsFn_mock{Moq: m}; return moq.Fn() }
}

func (m *MoqNoParamsFn_mock) Fn() (sResult string, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqNoParamsFn_params{}
	var results *MoqNoParamsFn_results
	for _, resultsByParams := range m.Moq.ResultsByParams {
		paramsKey := m.Moq.ParamsKey(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		sResult = result.Values.SResult
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		sResult, err = result.DoReturnFn()
	}
	return
}

func (m *MoqNoParamsFn) OnCall() *MoqNoParamsFn_fnRecorder {
	return &MoqNoParamsFn_fnRecorder{
		Params:   MoqNoParamsFn_params{},
		Sequence: m.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m,
	}
}

func (r *MoqNoParamsFn_fnRecorder) Any() *MoqNoParamsFn_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams(r.Params))
		return nil
	}
	return &MoqNoParamsFn_anyParams{Recorder: r}
}

func (r *MoqNoParamsFn_fnRecorder) Seq() *MoqNoParamsFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqNoParamsFn_fnRecorder) NoSeq() *MoqNoParamsFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqNoParamsFn_fnRecorder) ReturnResults(sResult string, err error) *MoqNoParamsFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			SResult string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqNoParamsFn_doFn
		DoReturnFn MoqNoParamsFn_doReturnFn
	}{
		Values: &struct {
			SResult string
			Err     error
		}{
			SResult: sResult,
			Err:     err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqNoParamsFn_fnRecorder) AndDo(fn MoqNoParamsFn_doFn) *MoqNoParamsFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqNoParamsFn_fnRecorder) DoReturnResults(fn MoqNoParamsFn_doReturnFn) *MoqNoParamsFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			SResult string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqNoParamsFn_doFn
		DoReturnFn MoqNoParamsFn_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqNoParamsFn_fnRecorder) FindResults() {
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqNoParamsFn_resultsByParams
	for n, res := range r.Moq.ResultsByParams {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqNoParamsFn_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqNoParamsFn_paramsKey]*MoqNoParamsFn_results{},
		}
		r.Moq.ResultsByParams = append(r.Moq.ResultsByParams, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams) {
			copy(r.Moq.ResultsByParams[insertAt+1:], r.Moq.ResultsByParams[insertAt:0])
			r.Moq.ResultsByParams[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqNoParamsFn_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqNoParamsFn_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqNoParamsFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					SResult string
					Err     error
				}
				Sequence   uint32
				DoFn       MoqNoParamsFn_doFn
				DoReturnFn MoqNoParamsFn_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqNoParamsFn) PrettyParams(params MoqNoParamsFn_params) string {
	return fmt.Sprintf("NoParamsFn()")
}

func (m *MoqNoParamsFn) ParamsKey(params MoqNoParamsFn_params, anyParams uint64) MoqNoParamsFn_paramsKey {
	return MoqNoParamsFn_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *MoqNoParamsFn) Reset() { m.ResultsByParams = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqNoParamsFn) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams(results.Params))
			}
		}
	}
}

// MoqNothingFn holds the state of a moq of the NothingFn type
type MoqNothingFn struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqNothingFn_mock

	ResultsByParams []MoqNothingFn_resultsByParams

	Runtime struct {
		ParameterIndexing struct{}
	}
}

// MoqNothingFn_mock isolates the mock interface of the NothingFn type
type MoqNothingFn_mock struct {
	Moq *MoqNothingFn
}

// MoqNothingFn_params holds the params of the NothingFn type
type MoqNothingFn_params struct{}

// MoqNothingFn_paramsKey holds the map key params of the NothingFn type
type MoqNothingFn_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqNothingFn_resultsByParams contains the results for a given set of parameters for the NothingFn type
type MoqNothingFn_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqNothingFn_paramsKey]*MoqNothingFn_results
}

// MoqNothingFn_doFn defines the type of function needed when calling AndDo for the NothingFn type
type MoqNothingFn_doFn func()

// MoqNothingFn_doReturnFn defines the type of function needed when calling DoReturnResults for the NothingFn type
type MoqNothingFn_doReturnFn func()

// MoqNothingFn_results holds the results of the NothingFn type
type MoqNothingFn_results struct {
	Params  MoqNothingFn_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqNothingFn_doFn
		DoReturnFn MoqNothingFn_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqNothingFn_fnRecorder routes recorded function calls to the MoqNothingFn moq
type MoqNothingFn_fnRecorder struct {
	Params    MoqNothingFn_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqNothingFn_results
	Moq       *MoqNothingFn
}

// MoqNothingFn_anyParams isolates the any params functions of the NothingFn type
type MoqNothingFn_anyParams struct {
	Recorder *MoqNothingFn_fnRecorder
}

// NewMoqNothingFn creates a new moq of the NothingFn type
func NewMoqNothingFn(scene *moq.Scene, config *moq.Config) *MoqNothingFn {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqNothingFn{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqNothingFn_mock{},

		Runtime: struct {
			ParameterIndexing struct{}
		}{ParameterIndexing: struct{}{}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the moq implementation of the NothingFn type
func (m *MoqNothingFn) Mock() testmoqs.NothingFn {
	return func() { moq := &MoqNothingFn_mock{Moq: m}; moq.Fn() }
}

func (m *MoqNothingFn_mock) Fn() {
	m.Moq.Scene.T.Helper()
	params := MoqNothingFn_params{}
	var results *MoqNothingFn_results
	for _, resultsByParams := range m.Moq.ResultsByParams {
		paramsKey := m.Moq.ParamsKey(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn()
	}
	return
}

func (m *MoqNothingFn) OnCall() *MoqNothingFn_fnRecorder {
	return &MoqNothingFn_fnRecorder{
		Params:   MoqNothingFn_params{},
		Sequence: m.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m,
	}
}

func (r *MoqNothingFn_fnRecorder) Any() *MoqNothingFn_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams(r.Params))
		return nil
	}
	return &MoqNothingFn_anyParams{Recorder: r}
}

func (r *MoqNothingFn_fnRecorder) Seq() *MoqNothingFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqNothingFn_fnRecorder) NoSeq() *MoqNothingFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqNothingFn_fnRecorder) ReturnResults() *MoqNothingFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqNothingFn_doFn
		DoReturnFn MoqNothingFn_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqNothingFn_fnRecorder) AndDo(fn MoqNothingFn_doFn) *MoqNothingFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqNothingFn_fnRecorder) DoReturnResults(fn MoqNothingFn_doReturnFn) *MoqNothingFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqNothingFn_doFn
		DoReturnFn MoqNothingFn_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqNothingFn_fnRecorder) FindResults() {
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqNothingFn_resultsByParams
	for n, res := range r.Moq.ResultsByParams {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqNothingFn_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqNothingFn_paramsKey]*MoqNothingFn_results{},
		}
		r.Moq.ResultsByParams = append(r.Moq.ResultsByParams, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams) {
			copy(r.Moq.ResultsByParams[insertAt+1:], r.Moq.ResultsByParams[insertAt:0])
			r.Moq.ResultsByParams[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqNothingFn_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqNothingFn_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqNothingFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqNothingFn_doFn
				DoReturnFn MoqNothingFn_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqNothingFn) PrettyParams(params MoqNothingFn_params) string {
	return fmt.Sprintf("NothingFn()")
}

func (m *MoqNothingFn) ParamsKey(params MoqNothingFn_params, anyParams uint64) MoqNothingFn_paramsKey {
	return MoqNothingFn_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *MoqNothingFn) Reset() { m.ResultsByParams = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqNothingFn) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams(results.Params))
			}
		}
	}
}

// MoqVariadicFn holds the state of a moq of the VariadicFn type
type MoqVariadicFn struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqVariadicFn_mock

	ResultsByParams []MoqVariadicFn_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Other moq.ParamIndexing
			Args  moq.ParamIndexing
		}
	}
}

// MoqVariadicFn_mock isolates the mock interface of the VariadicFn type
type MoqVariadicFn_mock struct {
	Moq *MoqVariadicFn
}

// MoqVariadicFn_params holds the params of the VariadicFn type
type MoqVariadicFn_params struct {
	Other bool
	Args  []string
}

// MoqVariadicFn_paramsKey holds the map key params of the VariadicFn type
type MoqVariadicFn_paramsKey struct {
	Params struct{ Other bool }
	Hashes struct {
		Other hash.Hash
		Args  hash.Hash
	}
}

// MoqVariadicFn_resultsByParams contains the results for a given set of parameters for the VariadicFn type
type MoqVariadicFn_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqVariadicFn_paramsKey]*MoqVariadicFn_results
}

// MoqVariadicFn_doFn defines the type of function needed when calling AndDo for the VariadicFn type
type MoqVariadicFn_doFn func(other bool, args ...string)

// MoqVariadicFn_doReturnFn defines the type of function needed when calling DoReturnResults for the VariadicFn type
type MoqVariadicFn_doReturnFn func(other bool, args ...string) (sResult string, err error)

// MoqVariadicFn_results holds the results of the VariadicFn type
type MoqVariadicFn_results struct {
	Params  MoqVariadicFn_params
	Results []struct {
		Values *struct {
			SResult string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqVariadicFn_doFn
		DoReturnFn MoqVariadicFn_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqVariadicFn_fnRecorder routes recorded function calls to the MoqVariadicFn moq
type MoqVariadicFn_fnRecorder struct {
	Params    MoqVariadicFn_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqVariadicFn_results
	Moq       *MoqVariadicFn
}

// MoqVariadicFn_anyParams isolates the any params functions of the VariadicFn type
type MoqVariadicFn_anyParams struct {
	Recorder *MoqVariadicFn_fnRecorder
}

// NewMoqVariadicFn creates a new moq of the VariadicFn type
func NewMoqVariadicFn(scene *moq.Scene, config *moq.Config) *MoqVariadicFn {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqVariadicFn{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqVariadicFn_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Other moq.ParamIndexing
				Args  moq.ParamIndexing
			}
		}{ParameterIndexing: struct {
			Other moq.ParamIndexing
			Args  moq.ParamIndexing
		}{
			Other: moq.ParamIndexByValue,
			Args:  moq.ParamIndexByHash,
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the moq implementation of the VariadicFn type
func (m *MoqVariadicFn) Mock() testmoqs.VariadicFn {
	return func(other bool, args ...string) (_ string, _ error) {
		moq := &MoqVariadicFn_mock{Moq: m}
		return moq.Fn(other, args...)
	}
}

func (m *MoqVariadicFn_mock) Fn(other bool, args ...string) (sResult string, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqVariadicFn_params{
		Other: other,
		Args:  args,
	}
	var results *MoqVariadicFn_results
	for _, resultsByParams := range m.Moq.ResultsByParams {
		paramsKey := m.Moq.ParamsKey(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(other, args...)
	}

	if result.Values != nil {
		sResult = result.Values.SResult
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		sResult, err = result.DoReturnFn(other, args...)
	}
	return
}

func (m *MoqVariadicFn) OnCall(other bool, args ...string) *MoqVariadicFn_fnRecorder {
	return &MoqVariadicFn_fnRecorder{
		Params: MoqVariadicFn_params{
			Other: other,
			Args:  args,
		},
		Sequence: m.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m,
	}
}

func (r *MoqVariadicFn_fnRecorder) Any() *MoqVariadicFn_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams(r.Params))
		return nil
	}
	return &MoqVariadicFn_anyParams{Recorder: r}
}

func (a *MoqVariadicFn_anyParams) Other() *MoqVariadicFn_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqVariadicFn_anyParams) Args() *MoqVariadicFn_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqVariadicFn_fnRecorder) Seq() *MoqVariadicFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqVariadicFn_fnRecorder) NoSeq() *MoqVariadicFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqVariadicFn_fnRecorder) ReturnResults(sResult string, err error) *MoqVariadicFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			SResult string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqVariadicFn_doFn
		DoReturnFn MoqVariadicFn_doReturnFn
	}{
		Values: &struct {
			SResult string
			Err     error
		}{
			SResult: sResult,
			Err:     err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqVariadicFn_fnRecorder) AndDo(fn MoqVariadicFn_doFn) *MoqVariadicFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqVariadicFn_fnRecorder) DoReturnResults(fn MoqVariadicFn_doReturnFn) *MoqVariadicFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			SResult string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqVariadicFn_doFn
		DoReturnFn MoqVariadicFn_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqVariadicFn_fnRecorder) FindResults() {
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqVariadicFn_resultsByParams
	for n, res := range r.Moq.ResultsByParams {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqVariadicFn_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqVariadicFn_paramsKey]*MoqVariadicFn_results{},
		}
		r.Moq.ResultsByParams = append(r.Moq.ResultsByParams, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams) {
			copy(r.Moq.ResultsByParams[insertAt+1:], r.Moq.ResultsByParams[insertAt:0])
			r.Moq.ResultsByParams[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqVariadicFn_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqVariadicFn_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqVariadicFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					SResult string
					Err     error
				}
				Sequence   uint32
				DoFn       MoqVariadicFn_doFn
				DoReturnFn MoqVariadicFn_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqVariadicFn) PrettyParams(params MoqVariadicFn_params) string {
	return fmt.Sprintf("VariadicFn(%#v, %#v)", params.Other, params.Args)
}

func (m *MoqVariadicFn) ParamsKey(params MoqVariadicFn_params, anyParams uint64) MoqVariadicFn_paramsKey {
	var otherUsed bool
	var otherUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Other == moq.ParamIndexByValue {
			otherUsed = params.Other
		} else {
			otherUsedHash = hash.DeepHash(params.Other)
		}
	}
	var argsUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Args == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The args parameter can't be indexed by value")
		}
		argsUsedHash = hash.DeepHash(params.Args)
	}
	return MoqVariadicFn_paramsKey{
		Params: struct{ Other bool }{
			Other: otherUsed,
		},
		Hashes: struct {
			Other hash.Hash
			Args  hash.Hash
		}{
			Other: otherUsedHash,
			Args:  argsUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqVariadicFn) Reset() { m.ResultsByParams = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqVariadicFn) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams(results.Params))
			}
		}
	}
}

// MoqRepeatedIdsFn holds the state of a moq of the RepeatedIdsFn type
type MoqRepeatedIdsFn struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqRepeatedIdsFn_mock

	ResultsByParams []MoqRepeatedIdsFn_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			SParam1 moq.ParamIndexing
			SParam2 moq.ParamIndexing
			BParam  moq.ParamIndexing
		}
	}
}

// MoqRepeatedIdsFn_mock isolates the mock interface of the RepeatedIdsFn type
type MoqRepeatedIdsFn_mock struct {
	Moq *MoqRepeatedIdsFn
}

// MoqRepeatedIdsFn_params holds the params of the RepeatedIdsFn type
type MoqRepeatedIdsFn_params struct {
	SParam1, SParam2 string
	BParam           bool
}

// MoqRepeatedIdsFn_paramsKey holds the map key params of the RepeatedIdsFn type
type MoqRepeatedIdsFn_paramsKey struct {
	Params struct {
		SParam1, SParam2 string
		BParam           bool
	}
	Hashes struct {
		SParam1, SParam2 hash.Hash
		BParam           hash.Hash
	}
}

// MoqRepeatedIdsFn_resultsByParams contains the results for a given set of parameters for the RepeatedIdsFn type
type MoqRepeatedIdsFn_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqRepeatedIdsFn_paramsKey]*MoqRepeatedIdsFn_results
}

// MoqRepeatedIdsFn_doFn defines the type of function needed when calling AndDo for the RepeatedIdsFn type
type MoqRepeatedIdsFn_doFn func(sParam1, sParam2 string, bParam bool)

// MoqRepeatedIdsFn_doReturnFn defines the type of function needed when calling DoReturnResults for the RepeatedIdsFn type
type MoqRepeatedIdsFn_doReturnFn func(sParam1, sParam2 string, bParam bool) (sResult1, sResult2 string, err error)

// MoqRepeatedIdsFn_results holds the results of the RepeatedIdsFn type
type MoqRepeatedIdsFn_results struct {
	Params  MoqRepeatedIdsFn_params
	Results []struct {
		Values *struct {
			SResult1, SResult2 string
			Err                error
		}
		Sequence   uint32
		DoFn       MoqRepeatedIdsFn_doFn
		DoReturnFn MoqRepeatedIdsFn_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqRepeatedIdsFn_fnRecorder routes recorded function calls to the MoqRepeatedIdsFn moq
type MoqRepeatedIdsFn_fnRecorder struct {
	Params    MoqRepeatedIdsFn_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqRepeatedIdsFn_results
	Moq       *MoqRepeatedIdsFn
}

// MoqRepeatedIdsFn_anyParams isolates the any params functions of the RepeatedIdsFn type
type MoqRepeatedIdsFn_anyParams struct {
	Recorder *MoqRepeatedIdsFn_fnRecorder
}

// NewMoqRepeatedIdsFn creates a new moq of the RepeatedIdsFn type
func NewMoqRepeatedIdsFn(scene *moq.Scene, config *moq.Config) *MoqRepeatedIdsFn {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqRepeatedIdsFn{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqRepeatedIdsFn_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				SParam1 moq.ParamIndexing
				SParam2 moq.ParamIndexing
				BParam  moq.ParamIndexing
			}
		}{ParameterIndexing: struct {
			SParam1 moq.ParamIndexing
			SParam2 moq.ParamIndexing
			BParam  moq.ParamIndexing
		}{
			SParam1: moq.ParamIndexByValue,
			SParam2: moq.ParamIndexByValue,
			BParam:  moq.ParamIndexByValue,
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the moq implementation of the RepeatedIdsFn type
func (m *MoqRepeatedIdsFn) Mock() testmoqs.RepeatedIdsFn {
	return func(sParam1, sParam2 string, bParam bool) (_, _ string, _ error) {
		moq := &MoqRepeatedIdsFn_mock{Moq: m}
		return moq.Fn(sParam1, sParam2, bParam)
	}
}

func (m *MoqRepeatedIdsFn_mock) Fn(sParam1, sParam2 string, bParam bool) (sResult1, sResult2 string, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqRepeatedIdsFn_params{
		SParam1: sParam1,
		SParam2: sParam2,
		BParam:  bParam,
	}
	var results *MoqRepeatedIdsFn_results
	for _, resultsByParams := range m.Moq.ResultsByParams {
		paramsKey := m.Moq.ParamsKey(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(sParam1, sParam2, bParam)
	}

	if result.Values != nil {
		sResult1 = result.Values.SResult1
		sResult2 = result.Values.SResult2
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		sResult1, sResult2, err = result.DoReturnFn(sParam1, sParam2, bParam)
	}
	return
}

func (m *MoqRepeatedIdsFn) OnCall(sParam1, sParam2 string, bParam bool) *MoqRepeatedIdsFn_fnRecorder {
	return &MoqRepeatedIdsFn_fnRecorder{
		Params: MoqRepeatedIdsFn_params{
			SParam1: sParam1,
			SParam2: sParam2,
			BParam:  bParam,
		},
		Sequence: m.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m,
	}
}

func (r *MoqRepeatedIdsFn_fnRecorder) Any() *MoqRepeatedIdsFn_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams(r.Params))
		return nil
	}
	return &MoqRepeatedIdsFn_anyParams{Recorder: r}
}

func (a *MoqRepeatedIdsFn_anyParams) SParam1() *MoqRepeatedIdsFn_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqRepeatedIdsFn_anyParams) SParam2() *MoqRepeatedIdsFn_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (a *MoqRepeatedIdsFn_anyParams) BParam() *MoqRepeatedIdsFn_fnRecorder {
	a.Recorder.AnyParams |= 1 << 2
	return a.Recorder
}

func (r *MoqRepeatedIdsFn_fnRecorder) Seq() *MoqRepeatedIdsFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqRepeatedIdsFn_fnRecorder) NoSeq() *MoqRepeatedIdsFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqRepeatedIdsFn_fnRecorder) ReturnResults(sResult1, sResult2 string, err error) *MoqRepeatedIdsFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			SResult1, SResult2 string
			Err                error
		}
		Sequence   uint32
		DoFn       MoqRepeatedIdsFn_doFn
		DoReturnFn MoqRepeatedIdsFn_doReturnFn
	}{
		Values: &struct {
			SResult1, SResult2 string
			Err                error
		}{
			SResult1: sResult1,
			SResult2: sResult2,
			Err:      err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqRepeatedIdsFn_fnRecorder) AndDo(fn MoqRepeatedIdsFn_doFn) *MoqRepeatedIdsFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqRepeatedIdsFn_fnRecorder) DoReturnResults(fn MoqRepeatedIdsFn_doReturnFn) *MoqRepeatedIdsFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			SResult1, SResult2 string
			Err                error
		}
		Sequence   uint32
		DoFn       MoqRepeatedIdsFn_doFn
		DoReturnFn MoqRepeatedIdsFn_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqRepeatedIdsFn_fnRecorder) FindResults() {
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqRepeatedIdsFn_resultsByParams
	for n, res := range r.Moq.ResultsByParams {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqRepeatedIdsFn_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqRepeatedIdsFn_paramsKey]*MoqRepeatedIdsFn_results{},
		}
		r.Moq.ResultsByParams = append(r.Moq.ResultsByParams, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams) {
			copy(r.Moq.ResultsByParams[insertAt+1:], r.Moq.ResultsByParams[insertAt:0])
			r.Moq.ResultsByParams[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqRepeatedIdsFn_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqRepeatedIdsFn_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqRepeatedIdsFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					SResult1, SResult2 string
					Err                error
				}
				Sequence   uint32
				DoFn       MoqRepeatedIdsFn_doFn
				DoReturnFn MoqRepeatedIdsFn_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqRepeatedIdsFn) PrettyParams(params MoqRepeatedIdsFn_params) string {
	return fmt.Sprintf("RepeatedIdsFn(%#v, %#v, %#v)", params.SParam1, params.SParam2, params.BParam)
}

func (m *MoqRepeatedIdsFn) ParamsKey(params MoqRepeatedIdsFn_params, anyParams uint64) MoqRepeatedIdsFn_paramsKey {
	var sParam1Used string
	var sParam1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.SParam1 == moq.ParamIndexByValue {
			sParam1Used = params.SParam1
		} else {
			sParam1UsedHash = hash.DeepHash(params.SParam1)
		}
	}
	var sParam2Used string
	var sParam2UsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.SParam2 == moq.ParamIndexByValue {
			sParam2Used = params.SParam2
		} else {
			sParam2UsedHash = hash.DeepHash(params.SParam2)
		}
	}
	var bParamUsed bool
	var bParamUsedHash hash.Hash
	if anyParams&(1<<2) == 0 {
		if m.Runtime.ParameterIndexing.BParam == moq.ParamIndexByValue {
			bParamUsed = params.BParam
		} else {
			bParamUsedHash = hash.DeepHash(params.BParam)
		}
	}
	return MoqRepeatedIdsFn_paramsKey{
		Params: struct {
			SParam1, SParam2 string
			BParam           bool
		}{
			SParam1: sParam1Used,
			SParam2: sParam2Used,
			BParam:  bParamUsed,
		},
		Hashes: struct {
			SParam1, SParam2 hash.Hash
			BParam           hash.Hash
		}{
			SParam1: sParam1UsedHash,
			SParam2: sParam2UsedHash,
			BParam:  bParamUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqRepeatedIdsFn) Reset() { m.ResultsByParams = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqRepeatedIdsFn) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams(results.Params))
			}
		}
	}
}

// MoqTimesFn holds the state of a moq of the TimesFn type
type MoqTimesFn struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqTimesFn_mock

	ResultsByParams []MoqTimesFn_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Times  moq.ParamIndexing
			BParam moq.ParamIndexing
		}
	}
}

// MoqTimesFn_mock isolates the mock interface of the TimesFn type
type MoqTimesFn_mock struct {
	Moq *MoqTimesFn
}

// MoqTimesFn_params holds the params of the TimesFn type
type MoqTimesFn_params struct {
	Times  string
	BParam bool
}

// MoqTimesFn_paramsKey holds the map key params of the TimesFn type
type MoqTimesFn_paramsKey struct {
	Params struct {
		Times  string
		BParam bool
	}
	Hashes struct {
		Times  hash.Hash
		BParam hash.Hash
	}
}

// MoqTimesFn_resultsByParams contains the results for a given set of parameters for the TimesFn type
type MoqTimesFn_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqTimesFn_paramsKey]*MoqTimesFn_results
}

// MoqTimesFn_doFn defines the type of function needed when calling AndDo for the TimesFn type
type MoqTimesFn_doFn func(times string, bParam bool)

// MoqTimesFn_doReturnFn defines the type of function needed when calling DoReturnResults for the TimesFn type
type MoqTimesFn_doReturnFn func(times string, bParam bool) (sResult string, err error)

// MoqTimesFn_results holds the results of the TimesFn type
type MoqTimesFn_results struct {
	Params  MoqTimesFn_params
	Results []struct {
		Values *struct {
			SResult string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqTimesFn_doFn
		DoReturnFn MoqTimesFn_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqTimesFn_fnRecorder routes recorded function calls to the MoqTimesFn moq
type MoqTimesFn_fnRecorder struct {
	Params    MoqTimesFn_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqTimesFn_results
	Moq       *MoqTimesFn
}

// MoqTimesFn_anyParams isolates the any params functions of the TimesFn type
type MoqTimesFn_anyParams struct {
	Recorder *MoqTimesFn_fnRecorder
}

// NewMoqTimesFn creates a new moq of the TimesFn type
func NewMoqTimesFn(scene *moq.Scene, config *moq.Config) *MoqTimesFn {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqTimesFn{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqTimesFn_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Times  moq.ParamIndexing
				BParam moq.ParamIndexing
			}
		}{ParameterIndexing: struct {
			Times  moq.ParamIndexing
			BParam moq.ParamIndexing
		}{
			Times:  moq.ParamIndexByValue,
			BParam: moq.ParamIndexByValue,
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the moq implementation of the TimesFn type
func (m *MoqTimesFn) Mock() testmoqs.TimesFn {
	return func(times string, bParam bool) (_ string, _ error) {
		moq := &MoqTimesFn_mock{Moq: m}
		return moq.Fn(times, bParam)
	}
}

func (m *MoqTimesFn_mock) Fn(times string, bParam bool) (sResult string, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqTimesFn_params{
		Times:  times,
		BParam: bParam,
	}
	var results *MoqTimesFn_results
	for _, resultsByParams := range m.Moq.ResultsByParams {
		paramsKey := m.Moq.ParamsKey(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(times, bParam)
	}

	if result.Values != nil {
		sResult = result.Values.SResult
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		sResult, err = result.DoReturnFn(times, bParam)
	}
	return
}

func (m *MoqTimesFn) OnCall(times string, bParam bool) *MoqTimesFn_fnRecorder {
	return &MoqTimesFn_fnRecorder{
		Params: MoqTimesFn_params{
			Times:  times,
			BParam: bParam,
		},
		Sequence: m.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m,
	}
}

func (r *MoqTimesFn_fnRecorder) Any() *MoqTimesFn_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams(r.Params))
		return nil
	}
	return &MoqTimesFn_anyParams{Recorder: r}
}

func (a *MoqTimesFn_anyParams) Times() *MoqTimesFn_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqTimesFn_anyParams) BParam() *MoqTimesFn_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqTimesFn_fnRecorder) Seq() *MoqTimesFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqTimesFn_fnRecorder) NoSeq() *MoqTimesFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqTimesFn_fnRecorder) ReturnResults(sResult string, err error) *MoqTimesFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			SResult string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqTimesFn_doFn
		DoReturnFn MoqTimesFn_doReturnFn
	}{
		Values: &struct {
			SResult string
			Err     error
		}{
			SResult: sResult,
			Err:     err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqTimesFn_fnRecorder) AndDo(fn MoqTimesFn_doFn) *MoqTimesFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqTimesFn_fnRecorder) DoReturnResults(fn MoqTimesFn_doReturnFn) *MoqTimesFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			SResult string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqTimesFn_doFn
		DoReturnFn MoqTimesFn_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqTimesFn_fnRecorder) FindResults() {
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqTimesFn_resultsByParams
	for n, res := range r.Moq.ResultsByParams {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqTimesFn_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqTimesFn_paramsKey]*MoqTimesFn_results{},
		}
		r.Moq.ResultsByParams = append(r.Moq.ResultsByParams, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams) {
			copy(r.Moq.ResultsByParams[insertAt+1:], r.Moq.ResultsByParams[insertAt:0])
			r.Moq.ResultsByParams[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqTimesFn_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqTimesFn_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqTimesFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					SResult string
					Err     error
				}
				Sequence   uint32
				DoFn       MoqTimesFn_doFn
				DoReturnFn MoqTimesFn_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqTimesFn) PrettyParams(params MoqTimesFn_params) string {
	return fmt.Sprintf("TimesFn(%#v, %#v)", params.Times, params.BParam)
}

func (m *MoqTimesFn) ParamsKey(params MoqTimesFn_params, anyParams uint64) MoqTimesFn_paramsKey {
	var timesUsed string
	var timesUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Times == moq.ParamIndexByValue {
			timesUsed = params.Times
		} else {
			timesUsedHash = hash.DeepHash(params.Times)
		}
	}
	var bParamUsed bool
	var bParamUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.BParam == moq.ParamIndexByValue {
			bParamUsed = params.BParam
		} else {
			bParamUsedHash = hash.DeepHash(params.BParam)
		}
	}
	return MoqTimesFn_paramsKey{
		Params: struct {
			Times  string
			BParam bool
		}{
			Times:  timesUsed,
			BParam: bParamUsed,
		},
		Hashes: struct {
			Times  hash.Hash
			BParam hash.Hash
		}{
			Times:  timesUsedHash,
			BParam: bParamUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqTimesFn) Reset() { m.ResultsByParams = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqTimesFn) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams(results.Params))
			}
		}
	}
}

// MoqDifficultParamNamesFn holds the state of a moq of the DifficultParamNamesFn type
type MoqDifficultParamNamesFn struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqDifficultParamNamesFn_mock

	ResultsByParams []MoqDifficultParamNamesFn_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Param1 moq.ParamIndexing
			Param2 moq.ParamIndexing
			Param3 moq.ParamIndexing
			Param  moq.ParamIndexing
			Param5 moq.ParamIndexing
			Param6 moq.ParamIndexing
			Param7 moq.ParamIndexing
			Param8 moq.ParamIndexing
			Param9 moq.ParamIndexing
		}
	}
}

// MoqDifficultParamNamesFn_mock isolates the mock interface of the DifficultParamNamesFn type
type MoqDifficultParamNamesFn_mock struct {
	Moq *MoqDifficultParamNamesFn
}

// MoqDifficultParamNamesFn_params holds the params of the DifficultParamNamesFn type
type MoqDifficultParamNamesFn_params struct {
	Param1, Param2         bool
	Param3                 string
	Param, Param5, Param6  int
	Param7, Param8, Param9 float32
}

// MoqDifficultParamNamesFn_paramsKey holds the map key params of the DifficultParamNamesFn type
type MoqDifficultParamNamesFn_paramsKey struct {
	Params struct {
		Param1, Param2         bool
		Param3                 string
		Param, Param5, Param6  int
		Param7, Param8, Param9 float32
	}
	Hashes struct {
		Param1, Param2         hash.Hash
		Param3                 hash.Hash
		Param, Param5, Param6  hash.Hash
		Param7, Param8, Param9 hash.Hash
	}
}

// MoqDifficultParamNamesFn_resultsByParams contains the results for a given set of parameters for the DifficultParamNamesFn type
type MoqDifficultParamNamesFn_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqDifficultParamNamesFn_paramsKey]*MoqDifficultParamNamesFn_results
}

// MoqDifficultParamNamesFn_doFn defines the type of function needed when calling AndDo for the DifficultParamNamesFn type
type MoqDifficultParamNamesFn_doFn func(m, r bool, sequence string, param, params, i int, result, results, _ float32)

// MoqDifficultParamNamesFn_doReturnFn defines the type of function needed when calling DoReturnResults for the DifficultParamNamesFn type
type MoqDifficultParamNamesFn_doReturnFn func(m, r bool, sequence string, param, params, i int, result, results, _ float32)

// MoqDifficultParamNamesFn_results holds the results of the DifficultParamNamesFn type
type MoqDifficultParamNamesFn_results struct {
	Params  MoqDifficultParamNamesFn_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqDifficultParamNamesFn_doFn
		DoReturnFn MoqDifficultParamNamesFn_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqDifficultParamNamesFn_fnRecorder routes recorded function calls to the MoqDifficultParamNamesFn moq
type MoqDifficultParamNamesFn_fnRecorder struct {
	Params    MoqDifficultParamNamesFn_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqDifficultParamNamesFn_results
	Moq       *MoqDifficultParamNamesFn
}

// MoqDifficultParamNamesFn_anyParams isolates the any params functions of the DifficultParamNamesFn type
type MoqDifficultParamNamesFn_anyParams struct {
	Recorder *MoqDifficultParamNamesFn_fnRecorder
}

// NewMoqDifficultParamNamesFn creates a new moq of the DifficultParamNamesFn type
func NewMoqDifficultParamNamesFn(scene *moq.Scene, config *moq.Config) *MoqDifficultParamNamesFn {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqDifficultParamNamesFn{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqDifficultParamNamesFn_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Param1 moq.ParamIndexing
				Param2 moq.ParamIndexing
				Param3 moq.ParamIndexing
				Param  moq.ParamIndexing
				Param5 moq.ParamIndexing
				Param6 moq.ParamIndexing
				Param7 moq.ParamIndexing
				Param8 moq.ParamIndexing
				Param9 moq.ParamIndexing
			}
		}{ParameterIndexing: struct {
			Param1 moq.ParamIndexing
			Param2 moq.ParamIndexing
			Param3 moq.ParamIndexing
			Param  moq.ParamIndexing
			Param5 moq.ParamIndexing
			Param6 moq.ParamIndexing
			Param7 moq.ParamIndexing
			Param8 moq.ParamIndexing
			Param9 moq.ParamIndexing
		}{
			Param1: moq.ParamIndexByValue,
			Param2: moq.ParamIndexByValue,
			Param3: moq.ParamIndexByValue,
			Param:  moq.ParamIndexByValue,
			Param5: moq.ParamIndexByValue,
			Param6: moq.ParamIndexByValue,
			Param7: moq.ParamIndexByValue,
			Param8: moq.ParamIndexByValue,
			Param9: moq.ParamIndexByValue,
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the moq implementation of the DifficultParamNamesFn type
func (m *MoqDifficultParamNamesFn) Mock() testmoqs.DifficultParamNamesFn {
	return func(param1, param2 bool, param3 string, param, param5, param6 int, param7, param8, param9 float32) {
		moq := &MoqDifficultParamNamesFn_mock{Moq: m}
		moq.Fn(param1, param2, param3, param, param5, param6, param7, param8, param9)
	}
}

func (m *MoqDifficultParamNamesFn_mock) Fn(param1, param2 bool, param3 string, param, param5, param6 int, param7, param8, param9 float32) {
	m.Moq.Scene.T.Helper()
	params := MoqDifficultParamNamesFn_params{
		Param1: param1,
		Param2: param2,
		Param3: param3,
		Param:  param,
		Param5: param5,
		Param6: param6,
		Param7: param7,
		Param8: param8,
		Param9: param9,
	}
	var results *MoqDifficultParamNamesFn_results
	for _, resultsByParams := range m.Moq.ResultsByParams {
		paramsKey := m.Moq.ParamsKey(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(param1, param2, param3, param, param5, param6, param7, param8, param9)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(param1, param2, param3, param, param5, param6, param7, param8, param9)
	}
	return
}

func (m *MoqDifficultParamNamesFn) OnCall(param1, param2 bool, param3 string, param, param5, param6 int, param7, param8, param9 float32) *MoqDifficultParamNamesFn_fnRecorder {
	return &MoqDifficultParamNamesFn_fnRecorder{
		Params: MoqDifficultParamNamesFn_params{
			Param1: param1,
			Param2: param2,
			Param3: param3,
			Param:  param,
			Param5: param5,
			Param6: param6,
			Param7: param7,
			Param8: param8,
			Param9: param9,
		},
		Sequence: m.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m,
	}
}

func (r *MoqDifficultParamNamesFn_fnRecorder) Any() *MoqDifficultParamNamesFn_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams(r.Params))
		return nil
	}
	return &MoqDifficultParamNamesFn_anyParams{Recorder: r}
}

func (a *MoqDifficultParamNamesFn_anyParams) Param1() *MoqDifficultParamNamesFn_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqDifficultParamNamesFn_anyParams) Param2() *MoqDifficultParamNamesFn_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (a *MoqDifficultParamNamesFn_anyParams) Param3() *MoqDifficultParamNamesFn_fnRecorder {
	a.Recorder.AnyParams |= 1 << 2
	return a.Recorder
}

func (a *MoqDifficultParamNamesFn_anyParams) Param() *MoqDifficultParamNamesFn_fnRecorder {
	a.Recorder.AnyParams |= 1 << 3
	return a.Recorder
}

func (a *MoqDifficultParamNamesFn_anyParams) Param5() *MoqDifficultParamNamesFn_fnRecorder {
	a.Recorder.AnyParams |= 1 << 4
	return a.Recorder
}

func (a *MoqDifficultParamNamesFn_anyParams) Param6() *MoqDifficultParamNamesFn_fnRecorder {
	a.Recorder.AnyParams |= 1 << 5
	return a.Recorder
}

func (a *MoqDifficultParamNamesFn_anyParams) Param7() *MoqDifficultParamNamesFn_fnRecorder {
	a.Recorder.AnyParams |= 1 << 6
	return a.Recorder
}

func (a *MoqDifficultParamNamesFn_anyParams) Param8() *MoqDifficultParamNamesFn_fnRecorder {
	a.Recorder.AnyParams |= 1 << 7
	return a.Recorder
}

func (a *MoqDifficultParamNamesFn_anyParams) Param9() *MoqDifficultParamNamesFn_fnRecorder {
	a.Recorder.AnyParams |= 1 << 8
	return a.Recorder
}

func (r *MoqDifficultParamNamesFn_fnRecorder) Seq() *MoqDifficultParamNamesFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqDifficultParamNamesFn_fnRecorder) NoSeq() *MoqDifficultParamNamesFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqDifficultParamNamesFn_fnRecorder) ReturnResults() *MoqDifficultParamNamesFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqDifficultParamNamesFn_doFn
		DoReturnFn MoqDifficultParamNamesFn_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqDifficultParamNamesFn_fnRecorder) AndDo(fn MoqDifficultParamNamesFn_doFn) *MoqDifficultParamNamesFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqDifficultParamNamesFn_fnRecorder) DoReturnResults(fn MoqDifficultParamNamesFn_doReturnFn) *MoqDifficultParamNamesFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqDifficultParamNamesFn_doFn
		DoReturnFn MoqDifficultParamNamesFn_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqDifficultParamNamesFn_fnRecorder) FindResults() {
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqDifficultParamNamesFn_resultsByParams
	for n, res := range r.Moq.ResultsByParams {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqDifficultParamNamesFn_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqDifficultParamNamesFn_paramsKey]*MoqDifficultParamNamesFn_results{},
		}
		r.Moq.ResultsByParams = append(r.Moq.ResultsByParams, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams) {
			copy(r.Moq.ResultsByParams[insertAt+1:], r.Moq.ResultsByParams[insertAt:0])
			r.Moq.ResultsByParams[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqDifficultParamNamesFn_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqDifficultParamNamesFn_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqDifficultParamNamesFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqDifficultParamNamesFn_doFn
				DoReturnFn MoqDifficultParamNamesFn_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqDifficultParamNamesFn) PrettyParams(params MoqDifficultParamNamesFn_params) string {
	return fmt.Sprintf("DifficultParamNamesFn(%#v, %#v, %#v, %#v, %#v, %#v, %#v, %#v, %#v)", params.Param1, params.Param2, params.Param3, params.Param, params.Param5, params.Param6, params.Param7, params.Param8, params.Param9)
}

func (m *MoqDifficultParamNamesFn) ParamsKey(params MoqDifficultParamNamesFn_params, anyParams uint64) MoqDifficultParamNamesFn_paramsKey {
	var param1Used bool
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Param1 == moq.ParamIndexByValue {
			param1Used = params.Param1
		} else {
			param1UsedHash = hash.DeepHash(params.Param1)
		}
	}
	var param2Used bool
	var param2UsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Param2 == moq.ParamIndexByValue {
			param2Used = params.Param2
		} else {
			param2UsedHash = hash.DeepHash(params.Param2)
		}
	}
	var param3Used string
	var param3UsedHash hash.Hash
	if anyParams&(1<<2) == 0 {
		if m.Runtime.ParameterIndexing.Param3 == moq.ParamIndexByValue {
			param3Used = params.Param3
		} else {
			param3UsedHash = hash.DeepHash(params.Param3)
		}
	}
	var paramUsed int
	var paramUsedHash hash.Hash
	if anyParams&(1<<3) == 0 {
		if m.Runtime.ParameterIndexing.Param == moq.ParamIndexByValue {
			paramUsed = params.Param
		} else {
			paramUsedHash = hash.DeepHash(params.Param)
		}
	}
	var param5Used int
	var param5UsedHash hash.Hash
	if anyParams&(1<<4) == 0 {
		if m.Runtime.ParameterIndexing.Param5 == moq.ParamIndexByValue {
			param5Used = params.Param5
		} else {
			param5UsedHash = hash.DeepHash(params.Param5)
		}
	}
	var param6Used int
	var param6UsedHash hash.Hash
	if anyParams&(1<<5) == 0 {
		if m.Runtime.ParameterIndexing.Param6 == moq.ParamIndexByValue {
			param6Used = params.Param6
		} else {
			param6UsedHash = hash.DeepHash(params.Param6)
		}
	}
	var param7Used float32
	var param7UsedHash hash.Hash
	if anyParams&(1<<6) == 0 {
		if m.Runtime.ParameterIndexing.Param7 == moq.ParamIndexByValue {
			param7Used = params.Param7
		} else {
			param7UsedHash = hash.DeepHash(params.Param7)
		}
	}
	var param8Used float32
	var param8UsedHash hash.Hash
	if anyParams&(1<<7) == 0 {
		if m.Runtime.ParameterIndexing.Param8 == moq.ParamIndexByValue {
			param8Used = params.Param8
		} else {
			param8UsedHash = hash.DeepHash(params.Param8)
		}
	}
	var param9Used float32
	var param9UsedHash hash.Hash
	if anyParams&(1<<8) == 0 {
		if m.Runtime.ParameterIndexing.Param9 == moq.ParamIndexByValue {
			param9Used = params.Param9
		} else {
			param9UsedHash = hash.DeepHash(params.Param9)
		}
	}
	return MoqDifficultParamNamesFn_paramsKey{
		Params: struct {
			Param1, Param2         bool
			Param3                 string
			Param, Param5, Param6  int
			Param7, Param8, Param9 float32
		}{
			Param1: param1Used,
			Param2: param2Used,
			Param3: param3Used,
			Param:  paramUsed,
			Param5: param5Used,
			Param6: param6Used,
			Param7: param7Used,
			Param8: param8Used,
			Param9: param9Used,
		},
		Hashes: struct {
			Param1, Param2         hash.Hash
			Param3                 hash.Hash
			Param, Param5, Param6  hash.Hash
			Param7, Param8, Param9 hash.Hash
		}{
			Param1: param1UsedHash,
			Param2: param2UsedHash,
			Param3: param3UsedHash,
			Param:  paramUsedHash,
			Param5: param5UsedHash,
			Param6: param6UsedHash,
			Param7: param7UsedHash,
			Param8: param8UsedHash,
			Param9: param9UsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqDifficultParamNamesFn) Reset() { m.ResultsByParams = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqDifficultParamNamesFn) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams(results.Params))
			}
		}
	}
}

// MoqDifficultResultNamesFn holds the state of a moq of the DifficultResultNamesFn type
type MoqDifficultResultNamesFn struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqDifficultResultNamesFn_mock

	ResultsByParams []MoqDifficultResultNamesFn_resultsByParams

	Runtime struct {
		ParameterIndexing struct{}
	}
}

// MoqDifficultResultNamesFn_mock isolates the mock interface of the DifficultResultNamesFn type
type MoqDifficultResultNamesFn_mock struct {
	Moq *MoqDifficultResultNamesFn
}

// MoqDifficultResultNamesFn_params holds the params of the DifficultResultNamesFn type
type MoqDifficultResultNamesFn_params struct{}

// MoqDifficultResultNamesFn_paramsKey holds the map key params of the DifficultResultNamesFn type
type MoqDifficultResultNamesFn_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqDifficultResultNamesFn_resultsByParams contains the results for a given set of parameters for the DifficultResultNamesFn type
type MoqDifficultResultNamesFn_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqDifficultResultNamesFn_paramsKey]*MoqDifficultResultNamesFn_results
}

// MoqDifficultResultNamesFn_doFn defines the type of function needed when calling AndDo for the DifficultResultNamesFn type
type MoqDifficultResultNamesFn_doFn func()

// MoqDifficultResultNamesFn_doReturnFn defines the type of function needed when calling DoReturnResults for the DifficultResultNamesFn type
type MoqDifficultResultNamesFn_doReturnFn func() (m, r string, sequence error, param, params, i int, result, results, _ float32)

// MoqDifficultResultNamesFn_results holds the results of the DifficultResultNamesFn type
type MoqDifficultResultNamesFn_results struct {
	Params  MoqDifficultResultNamesFn_params
	Results []struct {
		Values *struct {
			Result1, Result2          string
			Result3                   error
			Param, Result5, Result6   int
			Result7, Result8, Result9 float32
		}
		Sequence   uint32
		DoFn       MoqDifficultResultNamesFn_doFn
		DoReturnFn MoqDifficultResultNamesFn_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqDifficultResultNamesFn_fnRecorder routes recorded function calls to the MoqDifficultResultNamesFn moq
type MoqDifficultResultNamesFn_fnRecorder struct {
	Params    MoqDifficultResultNamesFn_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqDifficultResultNamesFn_results
	Moq       *MoqDifficultResultNamesFn
}

// MoqDifficultResultNamesFn_anyParams isolates the any params functions of the DifficultResultNamesFn type
type MoqDifficultResultNamesFn_anyParams struct {
	Recorder *MoqDifficultResultNamesFn_fnRecorder
}

// NewMoqDifficultResultNamesFn creates a new moq of the DifficultResultNamesFn type
func NewMoqDifficultResultNamesFn(scene *moq.Scene, config *moq.Config) *MoqDifficultResultNamesFn {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqDifficultResultNamesFn{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqDifficultResultNamesFn_mock{},

		Runtime: struct {
			ParameterIndexing struct{}
		}{ParameterIndexing: struct{}{}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the moq implementation of the DifficultResultNamesFn type
func (m *MoqDifficultResultNamesFn) Mock() testmoqs.DifficultResultNamesFn {
	return func() (_, _ string, _ error, _, _, _ int, _, _, _ float32) {
		moq := &MoqDifficultResultNamesFn_mock{Moq: m}
		return moq.Fn()
	}
}

func (m *MoqDifficultResultNamesFn_mock) Fn() (result1, result2 string, result3 error, param, result5, result6 int, result7, result8, result9 float32) {
	m.Moq.Scene.T.Helper()
	params := MoqDifficultResultNamesFn_params{}
	var results *MoqDifficultResultNamesFn_results
	for _, resultsByParams := range m.Moq.ResultsByParams {
		paramsKey := m.Moq.ParamsKey(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
		result3 = result.Values.Result3
		param = result.Values.Param
		result5 = result.Values.Result5
		result6 = result.Values.Result6
		result7 = result.Values.Result7
		result8 = result.Values.Result8
		result9 = result.Values.Result9
	}
	if result.DoReturnFn != nil {
		result1, result2, result3, param, result5, result6, result7, result8, result9 = result.DoReturnFn()
	}
	return
}

func (m *MoqDifficultResultNamesFn) OnCall() *MoqDifficultResultNamesFn_fnRecorder {
	return &MoqDifficultResultNamesFn_fnRecorder{
		Params:   MoqDifficultResultNamesFn_params{},
		Sequence: m.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m,
	}
}

func (r *MoqDifficultResultNamesFn_fnRecorder) Any() *MoqDifficultResultNamesFn_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams(r.Params))
		return nil
	}
	return &MoqDifficultResultNamesFn_anyParams{Recorder: r}
}

func (r *MoqDifficultResultNamesFn_fnRecorder) Seq() *MoqDifficultResultNamesFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqDifficultResultNamesFn_fnRecorder) NoSeq() *MoqDifficultResultNamesFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqDifficultResultNamesFn_fnRecorder) ReturnResults(result1, result2 string, result3 error, param, result5, result6 int, result7, result8, result9 float32) *MoqDifficultResultNamesFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1, Result2          string
			Result3                   error
			Param, Result5, Result6   int
			Result7, Result8, Result9 float32
		}
		Sequence   uint32
		DoFn       MoqDifficultResultNamesFn_doFn
		DoReturnFn MoqDifficultResultNamesFn_doReturnFn
	}{
		Values: &struct {
			Result1, Result2          string
			Result3                   error
			Param, Result5, Result6   int
			Result7, Result8, Result9 float32
		}{
			Result1: result1,
			Result2: result2,
			Result3: result3,
			Param:   param,
			Result5: result5,
			Result6: result6,
			Result7: result7,
			Result8: result8,
			Result9: result9,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqDifficultResultNamesFn_fnRecorder) AndDo(fn MoqDifficultResultNamesFn_doFn) *MoqDifficultResultNamesFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqDifficultResultNamesFn_fnRecorder) DoReturnResults(fn MoqDifficultResultNamesFn_doReturnFn) *MoqDifficultResultNamesFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1, Result2          string
			Result3                   error
			Param, Result5, Result6   int
			Result7, Result8, Result9 float32
		}
		Sequence   uint32
		DoFn       MoqDifficultResultNamesFn_doFn
		DoReturnFn MoqDifficultResultNamesFn_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqDifficultResultNamesFn_fnRecorder) FindResults() {
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqDifficultResultNamesFn_resultsByParams
	for n, res := range r.Moq.ResultsByParams {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqDifficultResultNamesFn_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqDifficultResultNamesFn_paramsKey]*MoqDifficultResultNamesFn_results{},
		}
		r.Moq.ResultsByParams = append(r.Moq.ResultsByParams, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams) {
			copy(r.Moq.ResultsByParams[insertAt+1:], r.Moq.ResultsByParams[insertAt:0])
			r.Moq.ResultsByParams[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqDifficultResultNamesFn_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqDifficultResultNamesFn_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqDifficultResultNamesFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1, Result2          string
					Result3                   error
					Param, Result5, Result6   int
					Result7, Result8, Result9 float32
				}
				Sequence   uint32
				DoFn       MoqDifficultResultNamesFn_doFn
				DoReturnFn MoqDifficultResultNamesFn_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqDifficultResultNamesFn) PrettyParams(params MoqDifficultResultNamesFn_params) string {
	return fmt.Sprintf("DifficultResultNamesFn()")
}

func (m *MoqDifficultResultNamesFn) ParamsKey(params MoqDifficultResultNamesFn_params, anyParams uint64) MoqDifficultResultNamesFn_paramsKey {
	return MoqDifficultResultNamesFn_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *MoqDifficultResultNamesFn) Reset() { m.ResultsByParams = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqDifficultResultNamesFn) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams(results.Params))
			}
		}
	}
}

// MoqPassByReferenceFn holds the state of a moq of the PassByReferenceFn type
type MoqPassByReferenceFn struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqPassByReferenceFn_mock

	ResultsByParams []MoqPassByReferenceFn_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			P moq.ParamIndexing
		}
	}
}

// MoqPassByReferenceFn_mock isolates the mock interface of the PassByReferenceFn type
type MoqPassByReferenceFn_mock struct {
	Moq *MoqPassByReferenceFn
}

// MoqPassByReferenceFn_params holds the params of the PassByReferenceFn type
type MoqPassByReferenceFn_params struct {
	P *testmoqs.PassByReferenceParams
}

// MoqPassByReferenceFn_paramsKey holds the map key params of the PassByReferenceFn type
type MoqPassByReferenceFn_paramsKey struct {
	Params struct {
		P *testmoqs.PassByReferenceParams
	}
	Hashes struct{ P hash.Hash }
}

// MoqPassByReferenceFn_resultsByParams contains the results for a given set of parameters for the PassByReferenceFn type
type MoqPassByReferenceFn_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqPassByReferenceFn_paramsKey]*MoqPassByReferenceFn_results
}

// MoqPassByReferenceFn_doFn defines the type of function needed when calling AndDo for the PassByReferenceFn type
type MoqPassByReferenceFn_doFn func(p *testmoqs.PassByReferenceParams)

// MoqPassByReferenceFn_doReturnFn defines the type of function needed when calling DoReturnResults for the PassByReferenceFn type
type MoqPassByReferenceFn_doReturnFn func(p *testmoqs.PassByReferenceParams) (sResult string, err error)

// MoqPassByReferenceFn_results holds the results of the PassByReferenceFn type
type MoqPassByReferenceFn_results struct {
	Params  MoqPassByReferenceFn_params
	Results []struct {
		Values *struct {
			SResult string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqPassByReferenceFn_doFn
		DoReturnFn MoqPassByReferenceFn_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqPassByReferenceFn_fnRecorder routes recorded function calls to the MoqPassByReferenceFn moq
type MoqPassByReferenceFn_fnRecorder struct {
	Params    MoqPassByReferenceFn_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqPassByReferenceFn_results
	Moq       *MoqPassByReferenceFn
}

// MoqPassByReferenceFn_anyParams isolates the any params functions of the PassByReferenceFn type
type MoqPassByReferenceFn_anyParams struct {
	Recorder *MoqPassByReferenceFn_fnRecorder
}

// NewMoqPassByReferenceFn creates a new moq of the PassByReferenceFn type
func NewMoqPassByReferenceFn(scene *moq.Scene, config *moq.Config) *MoqPassByReferenceFn {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqPassByReferenceFn{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqPassByReferenceFn_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				P moq.ParamIndexing
			}
		}{ParameterIndexing: struct {
			P moq.ParamIndexing
		}{
			P: moq.ParamIndexByHash,
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the moq implementation of the PassByReferenceFn type
func (m *MoqPassByReferenceFn) Mock() testmoqs.PassByReferenceFn {
	return func(p *testmoqs.PassByReferenceParams) (_ string, _ error) {
		moq := &MoqPassByReferenceFn_mock{Moq: m}
		return moq.Fn(p)
	}
}

func (m *MoqPassByReferenceFn_mock) Fn(p *testmoqs.PassByReferenceParams) (sResult string, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqPassByReferenceFn_params{
		P: p,
	}
	var results *MoqPassByReferenceFn_results
	for _, resultsByParams := range m.Moq.ResultsByParams {
		paramsKey := m.Moq.ParamsKey(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(p)
	}

	if result.Values != nil {
		sResult = result.Values.SResult
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		sResult, err = result.DoReturnFn(p)
	}
	return
}

func (m *MoqPassByReferenceFn) OnCall(p *testmoqs.PassByReferenceParams) *MoqPassByReferenceFn_fnRecorder {
	return &MoqPassByReferenceFn_fnRecorder{
		Params: MoqPassByReferenceFn_params{
			P: p,
		},
		Sequence: m.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m,
	}
}

func (r *MoqPassByReferenceFn_fnRecorder) Any() *MoqPassByReferenceFn_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams(r.Params))
		return nil
	}
	return &MoqPassByReferenceFn_anyParams{Recorder: r}
}

func (a *MoqPassByReferenceFn_anyParams) P() *MoqPassByReferenceFn_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqPassByReferenceFn_fnRecorder) Seq() *MoqPassByReferenceFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqPassByReferenceFn_fnRecorder) NoSeq() *MoqPassByReferenceFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqPassByReferenceFn_fnRecorder) ReturnResults(sResult string, err error) *MoqPassByReferenceFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			SResult string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqPassByReferenceFn_doFn
		DoReturnFn MoqPassByReferenceFn_doReturnFn
	}{
		Values: &struct {
			SResult string
			Err     error
		}{
			SResult: sResult,
			Err:     err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqPassByReferenceFn_fnRecorder) AndDo(fn MoqPassByReferenceFn_doFn) *MoqPassByReferenceFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqPassByReferenceFn_fnRecorder) DoReturnResults(fn MoqPassByReferenceFn_doReturnFn) *MoqPassByReferenceFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			SResult string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqPassByReferenceFn_doFn
		DoReturnFn MoqPassByReferenceFn_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqPassByReferenceFn_fnRecorder) FindResults() {
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqPassByReferenceFn_resultsByParams
	for n, res := range r.Moq.ResultsByParams {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqPassByReferenceFn_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqPassByReferenceFn_paramsKey]*MoqPassByReferenceFn_results{},
		}
		r.Moq.ResultsByParams = append(r.Moq.ResultsByParams, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams) {
			copy(r.Moq.ResultsByParams[insertAt+1:], r.Moq.ResultsByParams[insertAt:0])
			r.Moq.ResultsByParams[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqPassByReferenceFn_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqPassByReferenceFn_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqPassByReferenceFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					SResult string
					Err     error
				}
				Sequence   uint32
				DoFn       MoqPassByReferenceFn_doFn
				DoReturnFn MoqPassByReferenceFn_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqPassByReferenceFn) PrettyParams(params MoqPassByReferenceFn_params) string {
	return fmt.Sprintf("PassByReferenceFn(%#v)", params.P)
}

func (m *MoqPassByReferenceFn) ParamsKey(params MoqPassByReferenceFn_params, anyParams uint64) MoqPassByReferenceFn_paramsKey {
	var pUsed *testmoqs.PassByReferenceParams
	var pUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.P == moq.ParamIndexByValue {
			pUsed = params.P
		} else {
			pUsedHash = hash.DeepHash(params.P)
		}
	}
	return MoqPassByReferenceFn_paramsKey{
		Params: struct {
			P *testmoqs.PassByReferenceParams
		}{
			P: pUsed,
		},
		Hashes: struct{ P hash.Hash }{
			P: pUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqPassByReferenceFn) Reset() { m.ResultsByParams = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqPassByReferenceFn) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams(results.Params))
			}
		}
	}
}

// MoqInterfaceParamFn holds the state of a moq of the InterfaceParamFn type
type MoqInterfaceParamFn struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqInterfaceParamFn_mock

	ResultsByParams []MoqInterfaceParamFn_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			W moq.ParamIndexing
		}
	}
}

// MoqInterfaceParamFn_mock isolates the mock interface of the InterfaceParamFn type
type MoqInterfaceParamFn_mock struct {
	Moq *MoqInterfaceParamFn
}

// MoqInterfaceParamFn_params holds the params of the InterfaceParamFn type
type MoqInterfaceParamFn_params struct{ W io.Writer }

// MoqInterfaceParamFn_paramsKey holds the map key params of the InterfaceParamFn type
type MoqInterfaceParamFn_paramsKey struct {
	Params struct{ W io.Writer }
	Hashes struct{ W hash.Hash }
}

// MoqInterfaceParamFn_resultsByParams contains the results for a given set of parameters for the InterfaceParamFn type
type MoqInterfaceParamFn_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqInterfaceParamFn_paramsKey]*MoqInterfaceParamFn_results
}

// MoqInterfaceParamFn_doFn defines the type of function needed when calling AndDo for the InterfaceParamFn type
type MoqInterfaceParamFn_doFn func(w io.Writer)

// MoqInterfaceParamFn_doReturnFn defines the type of function needed when calling DoReturnResults for the InterfaceParamFn type
type MoqInterfaceParamFn_doReturnFn func(w io.Writer) (sResult string, err error)

// MoqInterfaceParamFn_results holds the results of the InterfaceParamFn type
type MoqInterfaceParamFn_results struct {
	Params  MoqInterfaceParamFn_params
	Results []struct {
		Values *struct {
			SResult string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqInterfaceParamFn_doFn
		DoReturnFn MoqInterfaceParamFn_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqInterfaceParamFn_fnRecorder routes recorded function calls to the MoqInterfaceParamFn moq
type MoqInterfaceParamFn_fnRecorder struct {
	Params    MoqInterfaceParamFn_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqInterfaceParamFn_results
	Moq       *MoqInterfaceParamFn
}

// MoqInterfaceParamFn_anyParams isolates the any params functions of the InterfaceParamFn type
type MoqInterfaceParamFn_anyParams struct {
	Recorder *MoqInterfaceParamFn_fnRecorder
}

// NewMoqInterfaceParamFn creates a new moq of the InterfaceParamFn type
func NewMoqInterfaceParamFn(scene *moq.Scene, config *moq.Config) *MoqInterfaceParamFn {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqInterfaceParamFn{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqInterfaceParamFn_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				W moq.ParamIndexing
			}
		}{ParameterIndexing: struct {
			W moq.ParamIndexing
		}{
			W: moq.ParamIndexByHash,
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the moq implementation of the InterfaceParamFn type
func (m *MoqInterfaceParamFn) Mock() testmoqs.InterfaceParamFn {
	return func(w io.Writer) (_ string, _ error) { moq := &MoqInterfaceParamFn_mock{Moq: m}; return moq.Fn(w) }
}

func (m *MoqInterfaceParamFn_mock) Fn(w io.Writer) (sResult string, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqInterfaceParamFn_params{
		W: w,
	}
	var results *MoqInterfaceParamFn_results
	for _, resultsByParams := range m.Moq.ResultsByParams {
		paramsKey := m.Moq.ParamsKey(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(w)
	}

	if result.Values != nil {
		sResult = result.Values.SResult
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		sResult, err = result.DoReturnFn(w)
	}
	return
}

func (m *MoqInterfaceParamFn) OnCall(w io.Writer) *MoqInterfaceParamFn_fnRecorder {
	return &MoqInterfaceParamFn_fnRecorder{
		Params: MoqInterfaceParamFn_params{
			W: w,
		},
		Sequence: m.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m,
	}
}

func (r *MoqInterfaceParamFn_fnRecorder) Any() *MoqInterfaceParamFn_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams(r.Params))
		return nil
	}
	return &MoqInterfaceParamFn_anyParams{Recorder: r}
}

func (a *MoqInterfaceParamFn_anyParams) W() *MoqInterfaceParamFn_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqInterfaceParamFn_fnRecorder) Seq() *MoqInterfaceParamFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqInterfaceParamFn_fnRecorder) NoSeq() *MoqInterfaceParamFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqInterfaceParamFn_fnRecorder) ReturnResults(sResult string, err error) *MoqInterfaceParamFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			SResult string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqInterfaceParamFn_doFn
		DoReturnFn MoqInterfaceParamFn_doReturnFn
	}{
		Values: &struct {
			SResult string
			Err     error
		}{
			SResult: sResult,
			Err:     err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqInterfaceParamFn_fnRecorder) AndDo(fn MoqInterfaceParamFn_doFn) *MoqInterfaceParamFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqInterfaceParamFn_fnRecorder) DoReturnResults(fn MoqInterfaceParamFn_doReturnFn) *MoqInterfaceParamFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			SResult string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqInterfaceParamFn_doFn
		DoReturnFn MoqInterfaceParamFn_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqInterfaceParamFn_fnRecorder) FindResults() {
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqInterfaceParamFn_resultsByParams
	for n, res := range r.Moq.ResultsByParams {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqInterfaceParamFn_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqInterfaceParamFn_paramsKey]*MoqInterfaceParamFn_results{},
		}
		r.Moq.ResultsByParams = append(r.Moq.ResultsByParams, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams) {
			copy(r.Moq.ResultsByParams[insertAt+1:], r.Moq.ResultsByParams[insertAt:0])
			r.Moq.ResultsByParams[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqInterfaceParamFn_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqInterfaceParamFn_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqInterfaceParamFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					SResult string
					Err     error
				}
				Sequence   uint32
				DoFn       MoqInterfaceParamFn_doFn
				DoReturnFn MoqInterfaceParamFn_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqInterfaceParamFn) PrettyParams(params MoqInterfaceParamFn_params) string {
	return fmt.Sprintf("InterfaceParamFn(%#v)", params.W)
}

func (m *MoqInterfaceParamFn) ParamsKey(params MoqInterfaceParamFn_params, anyParams uint64) MoqInterfaceParamFn_paramsKey {
	var wUsed io.Writer
	var wUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.W == moq.ParamIndexByValue {
			wUsed = params.W
		} else {
			wUsedHash = hash.DeepHash(params.W)
		}
	}
	return MoqInterfaceParamFn_paramsKey{
		Params: struct{ W io.Writer }{
			W: wUsed,
		},
		Hashes: struct{ W hash.Hash }{
			W: wUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqInterfaceParamFn) Reset() { m.ResultsByParams = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqInterfaceParamFn) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams(results.Params))
			}
		}
	}
}

// MoqInterfaceResultFn holds the state of a moq of the InterfaceResultFn type
type MoqInterfaceResultFn struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqInterfaceResultFn_mock

	ResultsByParams []MoqInterfaceResultFn_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			SParam moq.ParamIndexing
			BParam moq.ParamIndexing
		}
	}
}

// MoqInterfaceResultFn_mock isolates the mock interface of the InterfaceResultFn type
type MoqInterfaceResultFn_mock struct {
	Moq *MoqInterfaceResultFn
}

// MoqInterfaceResultFn_params holds the params of the InterfaceResultFn type
type MoqInterfaceResultFn_params struct {
	SParam string
	BParam bool
}

// MoqInterfaceResultFn_paramsKey holds the map key params of the InterfaceResultFn type
type MoqInterfaceResultFn_paramsKey struct {
	Params struct {
		SParam string
		BParam bool
	}
	Hashes struct {
		SParam hash.Hash
		BParam hash.Hash
	}
}

// MoqInterfaceResultFn_resultsByParams contains the results for a given set of parameters for the InterfaceResultFn type
type MoqInterfaceResultFn_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqInterfaceResultFn_paramsKey]*MoqInterfaceResultFn_results
}

// MoqInterfaceResultFn_doFn defines the type of function needed when calling AndDo for the InterfaceResultFn type
type MoqInterfaceResultFn_doFn func(sParam string, bParam bool)

// MoqInterfaceResultFn_doReturnFn defines the type of function needed when calling DoReturnResults for the InterfaceResultFn type
type MoqInterfaceResultFn_doReturnFn func(sParam string, bParam bool) (r io.Reader)

// MoqInterfaceResultFn_results holds the results of the InterfaceResultFn type
type MoqInterfaceResultFn_results struct {
	Params  MoqInterfaceResultFn_params
	Results []struct {
		Values     *struct{ Result1 io.Reader }
		Sequence   uint32
		DoFn       MoqInterfaceResultFn_doFn
		DoReturnFn MoqInterfaceResultFn_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqInterfaceResultFn_fnRecorder routes recorded function calls to the MoqInterfaceResultFn moq
type MoqInterfaceResultFn_fnRecorder struct {
	Params    MoqInterfaceResultFn_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqInterfaceResultFn_results
	Moq       *MoqInterfaceResultFn
}

// MoqInterfaceResultFn_anyParams isolates the any params functions of the InterfaceResultFn type
type MoqInterfaceResultFn_anyParams struct {
	Recorder *MoqInterfaceResultFn_fnRecorder
}

// NewMoqInterfaceResultFn creates a new moq of the InterfaceResultFn type
func NewMoqInterfaceResultFn(scene *moq.Scene, config *moq.Config) *MoqInterfaceResultFn {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqInterfaceResultFn{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqInterfaceResultFn_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				SParam moq.ParamIndexing
				BParam moq.ParamIndexing
			}
		}{ParameterIndexing: struct {
			SParam moq.ParamIndexing
			BParam moq.ParamIndexing
		}{
			SParam: moq.ParamIndexByValue,
			BParam: moq.ParamIndexByValue,
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the moq implementation of the InterfaceResultFn type
func (m *MoqInterfaceResultFn) Mock() testmoqs.InterfaceResultFn {
	return func(sParam string, bParam bool) (_ io.Reader) {
		moq := &MoqInterfaceResultFn_mock{Moq: m}
		return moq.Fn(sParam, bParam)
	}
}

func (m *MoqInterfaceResultFn_mock) Fn(sParam string, bParam bool) (result1 io.Reader) {
	m.Moq.Scene.T.Helper()
	params := MoqInterfaceResultFn_params{
		SParam: sParam,
		BParam: bParam,
	}
	var results *MoqInterfaceResultFn_results
	for _, resultsByParams := range m.Moq.ResultsByParams {
		paramsKey := m.Moq.ParamsKey(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(sParam, bParam)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(sParam, bParam)
	}
	return
}

func (m *MoqInterfaceResultFn) OnCall(sParam string, bParam bool) *MoqInterfaceResultFn_fnRecorder {
	return &MoqInterfaceResultFn_fnRecorder{
		Params: MoqInterfaceResultFn_params{
			SParam: sParam,
			BParam: bParam,
		},
		Sequence: m.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m,
	}
}

func (r *MoqInterfaceResultFn_fnRecorder) Any() *MoqInterfaceResultFn_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams(r.Params))
		return nil
	}
	return &MoqInterfaceResultFn_anyParams{Recorder: r}
}

func (a *MoqInterfaceResultFn_anyParams) SParam() *MoqInterfaceResultFn_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqInterfaceResultFn_anyParams) BParam() *MoqInterfaceResultFn_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqInterfaceResultFn_fnRecorder) Seq() *MoqInterfaceResultFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqInterfaceResultFn_fnRecorder) NoSeq() *MoqInterfaceResultFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqInterfaceResultFn_fnRecorder) ReturnResults(result1 io.Reader) *MoqInterfaceResultFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{ Result1 io.Reader }
		Sequence   uint32
		DoFn       MoqInterfaceResultFn_doFn
		DoReturnFn MoqInterfaceResultFn_doReturnFn
	}{
		Values: &struct{ Result1 io.Reader }{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqInterfaceResultFn_fnRecorder) AndDo(fn MoqInterfaceResultFn_doFn) *MoqInterfaceResultFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqInterfaceResultFn_fnRecorder) DoReturnResults(fn MoqInterfaceResultFn_doReturnFn) *MoqInterfaceResultFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{ Result1 io.Reader }
		Sequence   uint32
		DoFn       MoqInterfaceResultFn_doFn
		DoReturnFn MoqInterfaceResultFn_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqInterfaceResultFn_fnRecorder) FindResults() {
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqInterfaceResultFn_resultsByParams
	for n, res := range r.Moq.ResultsByParams {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqInterfaceResultFn_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqInterfaceResultFn_paramsKey]*MoqInterfaceResultFn_results{},
		}
		r.Moq.ResultsByParams = append(r.Moq.ResultsByParams, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams) {
			copy(r.Moq.ResultsByParams[insertAt+1:], r.Moq.ResultsByParams[insertAt:0])
			r.Moq.ResultsByParams[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqInterfaceResultFn_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqInterfaceResultFn_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqInterfaceResultFn_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{ Result1 io.Reader }
				Sequence   uint32
				DoFn       MoqInterfaceResultFn_doFn
				DoReturnFn MoqInterfaceResultFn_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqInterfaceResultFn) PrettyParams(params MoqInterfaceResultFn_params) string {
	return fmt.Sprintf("InterfaceResultFn(%#v, %#v)", params.SParam, params.BParam)
}

func (m *MoqInterfaceResultFn) ParamsKey(params MoqInterfaceResultFn_params, anyParams uint64) MoqInterfaceResultFn_paramsKey {
	var sParamUsed string
	var sParamUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.SParam == moq.ParamIndexByValue {
			sParamUsed = params.SParam
		} else {
			sParamUsedHash = hash.DeepHash(params.SParam)
		}
	}
	var bParamUsed bool
	var bParamUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.BParam == moq.ParamIndexByValue {
			bParamUsed = params.BParam
		} else {
			bParamUsedHash = hash.DeepHash(params.BParam)
		}
	}
	return MoqInterfaceResultFn_paramsKey{
		Params: struct {
			SParam string
			BParam bool
		}{
			SParam: sParamUsed,
			BParam: bParamUsed,
		},
		Hashes: struct {
			SParam hash.Hash
			BParam hash.Hash
		}{
			SParam: sParamUsedHash,
			BParam: bParamUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqInterfaceResultFn) Reset() { m.ResultsByParams = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqInterfaceResultFn) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams(results.Params))
			}
		}
	}
}

// MoqUsual holds the state of a moq of the Usual type
type MoqUsual struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqUsual_mock

	ResultsByParams_Usual                []MoqUsual_Usual_resultsByParams
	ResultsByParams_NoNames              []MoqUsual_NoNames_resultsByParams
	ResultsByParams_NoResults            []MoqUsual_NoResults_resultsByParams
	ResultsByParams_NoParams             []MoqUsual_NoParams_resultsByParams
	ResultsByParams_Nothing              []MoqUsual_Nothing_resultsByParams
	ResultsByParams_Variadic             []MoqUsual_Variadic_resultsByParams
	ResultsByParams_RepeatedIds          []MoqUsual_RepeatedIds_resultsByParams
	ResultsByParams_Times                []MoqUsual_Times_resultsByParams
	ResultsByParams_DifficultParamNames  []MoqUsual_DifficultParamNames_resultsByParams
	ResultsByParams_DifficultResultNames []MoqUsual_DifficultResultNames_resultsByParams
	ResultsByParams_PassByReference      []MoqUsual_PassByReference_resultsByParams
	ResultsByParams_InterfaceParam       []MoqUsual_InterfaceParam_resultsByParams
	ResultsByParams_InterfaceResult      []MoqUsual_InterfaceResult_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Usual struct {
				SParam moq.ParamIndexing
				BParam moq.ParamIndexing
			}
			NoNames struct {
				Param1 moq.ParamIndexing
				Param2 moq.ParamIndexing
			}
			NoResults struct {
				SParam moq.ParamIndexing
				BParam moq.ParamIndexing
			}
			NoParams struct{}
			Nothing  struct{}
			Variadic struct {
				Other moq.ParamIndexing
				Args  moq.ParamIndexing
			}
			RepeatedIds struct {
				SParam1 moq.ParamIndexing
				SParam2 moq.ParamIndexing
				BParam  moq.ParamIndexing
			}
			Times struct {
				SParam moq.ParamIndexing
				Times  moq.ParamIndexing
			}
			DifficultParamNames struct {
				Param1 moq.ParamIndexing
				Param2 moq.ParamIndexing
				Param3 moq.ParamIndexing
				Param  moq.ParamIndexing
				Param5 moq.ParamIndexing
				Param6 moq.ParamIndexing
				Param7 moq.ParamIndexing
				Param8 moq.ParamIndexing
				Param9 moq.ParamIndexing
			}
			DifficultResultNames struct{}
			PassByReference      struct {
				P moq.ParamIndexing
			}
			InterfaceParam struct {
				W moq.ParamIndexing
			}
			InterfaceResult struct {
				SParam moq.ParamIndexing
				BParam moq.ParamIndexing
			}
		}
	}
	// MoqUsual_mock isolates the mock interface of the Usual type
}

type MoqUsual_mock struct {
	Moq *MoqUsual
}

// MoqUsual_recorder isolates the recorder interface of the Usual type
type MoqUsual_recorder struct {
	Moq *MoqUsual
}

// MoqUsual_Usual_params holds the params of the Usual type
type MoqUsual_Usual_params struct {
	SParam string
	BParam bool
}

// MoqUsual_Usual_paramsKey holds the map key params of the Usual type
type MoqUsual_Usual_paramsKey struct {
	Params struct {
		SParam string
		BParam bool
	}
	Hashes struct {
		SParam hash.Hash
		BParam hash.Hash
	}
}

// MoqUsual_Usual_resultsByParams contains the results for a given set of parameters for the Usual type
type MoqUsual_Usual_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqUsual_Usual_paramsKey]*MoqUsual_Usual_results
}

// MoqUsual_Usual_doFn defines the type of function needed when calling AndDo for the Usual type
type MoqUsual_Usual_doFn func(sParam string, bParam bool)

// MoqUsual_Usual_doReturnFn defines the type of function needed when calling DoReturnResults for the Usual type
type MoqUsual_Usual_doReturnFn func(sParam string, bParam bool) (sResult string, err error)

// MoqUsual_Usual_results holds the results of the Usual type
type MoqUsual_Usual_results struct {
	Params  MoqUsual_Usual_params
	Results []struct {
		Values *struct {
			SResult string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqUsual_Usual_doFn
		DoReturnFn MoqUsual_Usual_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqUsual_Usual_fnRecorder routes recorded function calls to the MoqUsual moq
type MoqUsual_Usual_fnRecorder struct {
	Params    MoqUsual_Usual_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqUsual_Usual_results
	Moq       *MoqUsual
}

// MoqUsual_Usual_anyParams isolates the any params functions of the Usual type
type MoqUsual_Usual_anyParams struct {
	Recorder *MoqUsual_Usual_fnRecorder
}

// MoqUsual_NoNames_params holds the params of the Usual type
type MoqUsual_NoNames_params struct {
	Param1 string
	Param2 bool
}

// MoqUsual_NoNames_paramsKey holds the map key params of the Usual type
type MoqUsual_NoNames_paramsKey struct {
	Params struct {
		Param1 string
		Param2 bool
	}
	Hashes struct {
		Param1 hash.Hash
		Param2 hash.Hash
	}
}

// MoqUsual_NoNames_resultsByParams contains the results for a given set of parameters for the Usual type
type MoqUsual_NoNames_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqUsual_NoNames_paramsKey]*MoqUsual_NoNames_results
}

// MoqUsual_NoNames_doFn defines the type of function needed when calling AndDo for the Usual type
type MoqUsual_NoNames_doFn func(string, bool)

// MoqUsual_NoNames_doReturnFn defines the type of function needed when calling DoReturnResults for the Usual type
type MoqUsual_NoNames_doReturnFn func(string, bool) (string, error)

// MoqUsual_NoNames_results holds the results of the Usual type
type MoqUsual_NoNames_results struct {
	Params  MoqUsual_NoNames_params
	Results []struct {
		Values *struct {
			Result1 string
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqUsual_NoNames_doFn
		DoReturnFn MoqUsual_NoNames_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqUsual_NoNames_fnRecorder routes recorded function calls to the MoqUsual moq
type MoqUsual_NoNames_fnRecorder struct {
	Params    MoqUsual_NoNames_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqUsual_NoNames_results
	Moq       *MoqUsual
}

// MoqUsual_NoNames_anyParams isolates the any params functions of the Usual type
type MoqUsual_NoNames_anyParams struct {
	Recorder *MoqUsual_NoNames_fnRecorder
}

// MoqUsual_NoResults_params holds the params of the Usual type
type MoqUsual_NoResults_params struct {
	SParam string
	BParam bool
}

// MoqUsual_NoResults_paramsKey holds the map key params of the Usual type
type MoqUsual_NoResults_paramsKey struct {
	Params struct {
		SParam string
		BParam bool
	}
	Hashes struct {
		SParam hash.Hash
		BParam hash.Hash
	}
}

// MoqUsual_NoResults_resultsByParams contains the results for a given set of parameters for the Usual type
type MoqUsual_NoResults_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqUsual_NoResults_paramsKey]*MoqUsual_NoResults_results
}

// MoqUsual_NoResults_doFn defines the type of function needed when calling AndDo for the Usual type
type MoqUsual_NoResults_doFn func(sParam string, bParam bool)

// MoqUsual_NoResults_doReturnFn defines the type of function needed when calling DoReturnResults for the Usual type
type MoqUsual_NoResults_doReturnFn func(sParam string, bParam bool)

// MoqUsual_NoResults_results holds the results of the Usual type
type MoqUsual_NoResults_results struct {
	Params  MoqUsual_NoResults_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqUsual_NoResults_doFn
		DoReturnFn MoqUsual_NoResults_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqUsual_NoResults_fnRecorder routes recorded function calls to the MoqUsual moq
type MoqUsual_NoResults_fnRecorder struct {
	Params    MoqUsual_NoResults_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqUsual_NoResults_results
	Moq       *MoqUsual
}

// MoqUsual_NoResults_anyParams isolates the any params functions of the Usual type
type MoqUsual_NoResults_anyParams struct {
	Recorder *MoqUsual_NoResults_fnRecorder
}

// MoqUsual_NoParams_params holds the params of the Usual type
type MoqUsual_NoParams_params struct{}

// MoqUsual_NoParams_paramsKey holds the map key params of the Usual type
type MoqUsual_NoParams_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqUsual_NoParams_resultsByParams contains the results for a given set of parameters for the Usual type
type MoqUsual_NoParams_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqUsual_NoParams_paramsKey]*MoqUsual_NoParams_results
}

// MoqUsual_NoParams_doFn defines the type of function needed when calling AndDo for the Usual type
type MoqUsual_NoParams_doFn func()

// MoqUsual_NoParams_doReturnFn defines the type of function needed when calling DoReturnResults for the Usual type
type MoqUsual_NoParams_doReturnFn func() (sResult string, err error)

// MoqUsual_NoParams_results holds the results of the Usual type
type MoqUsual_NoParams_results struct {
	Params  MoqUsual_NoParams_params
	Results []struct {
		Values *struct {
			SResult string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqUsual_NoParams_doFn
		DoReturnFn MoqUsual_NoParams_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqUsual_NoParams_fnRecorder routes recorded function calls to the MoqUsual moq
type MoqUsual_NoParams_fnRecorder struct {
	Params    MoqUsual_NoParams_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqUsual_NoParams_results
	Moq       *MoqUsual
}

// MoqUsual_NoParams_anyParams isolates the any params functions of the Usual type
type MoqUsual_NoParams_anyParams struct {
	Recorder *MoqUsual_NoParams_fnRecorder
}

// MoqUsual_Nothing_params holds the params of the Usual type
type MoqUsual_Nothing_params struct{}

// MoqUsual_Nothing_paramsKey holds the map key params of the Usual type
type MoqUsual_Nothing_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqUsual_Nothing_resultsByParams contains the results for a given set of parameters for the Usual type
type MoqUsual_Nothing_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqUsual_Nothing_paramsKey]*MoqUsual_Nothing_results
}

// MoqUsual_Nothing_doFn defines the type of function needed when calling AndDo for the Usual type
type MoqUsual_Nothing_doFn func()

// MoqUsual_Nothing_doReturnFn defines the type of function needed when calling DoReturnResults for the Usual type
type MoqUsual_Nothing_doReturnFn func()

// MoqUsual_Nothing_results holds the results of the Usual type
type MoqUsual_Nothing_results struct {
	Params  MoqUsual_Nothing_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqUsual_Nothing_doFn
		DoReturnFn MoqUsual_Nothing_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqUsual_Nothing_fnRecorder routes recorded function calls to the MoqUsual moq
type MoqUsual_Nothing_fnRecorder struct {
	Params    MoqUsual_Nothing_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqUsual_Nothing_results
	Moq       *MoqUsual
}

// MoqUsual_Nothing_anyParams isolates the any params functions of the Usual type
type MoqUsual_Nothing_anyParams struct {
	Recorder *MoqUsual_Nothing_fnRecorder
}

// MoqUsual_Variadic_params holds the params of the Usual type
type MoqUsual_Variadic_params struct {
	Other bool
	Args  []string
}

// MoqUsual_Variadic_paramsKey holds the map key params of the Usual type
type MoqUsual_Variadic_paramsKey struct {
	Params struct{ Other bool }
	Hashes struct {
		Other hash.Hash
		Args  hash.Hash
	}
}

// MoqUsual_Variadic_resultsByParams contains the results for a given set of parameters for the Usual type
type MoqUsual_Variadic_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqUsual_Variadic_paramsKey]*MoqUsual_Variadic_results
}

// MoqUsual_Variadic_doFn defines the type of function needed when calling AndDo for the Usual type
type MoqUsual_Variadic_doFn func(other bool, args ...string)

// MoqUsual_Variadic_doReturnFn defines the type of function needed when calling DoReturnResults for the Usual type
type MoqUsual_Variadic_doReturnFn func(other bool, args ...string) (sResult string, err error)

// MoqUsual_Variadic_results holds the results of the Usual type
type MoqUsual_Variadic_results struct {
	Params  MoqUsual_Variadic_params
	Results []struct {
		Values *struct {
			SResult string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqUsual_Variadic_doFn
		DoReturnFn MoqUsual_Variadic_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqUsual_Variadic_fnRecorder routes recorded function calls to the MoqUsual moq
type MoqUsual_Variadic_fnRecorder struct {
	Params    MoqUsual_Variadic_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqUsual_Variadic_results
	Moq       *MoqUsual
}

// MoqUsual_Variadic_anyParams isolates the any params functions of the Usual type
type MoqUsual_Variadic_anyParams struct {
	Recorder *MoqUsual_Variadic_fnRecorder
}

// MoqUsual_RepeatedIds_params holds the params of the Usual type
type MoqUsual_RepeatedIds_params struct {
	SParam1, SParam2 string
	BParam           bool
}

// MoqUsual_RepeatedIds_paramsKey holds the map key params of the Usual type
type MoqUsual_RepeatedIds_paramsKey struct {
	Params struct {
		SParam1, SParam2 string
		BParam           bool
	}
	Hashes struct {
		SParam1, SParam2 hash.Hash
		BParam           hash.Hash
	}
}

// MoqUsual_RepeatedIds_resultsByParams contains the results for a given set of parameters for the Usual type
type MoqUsual_RepeatedIds_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqUsual_RepeatedIds_paramsKey]*MoqUsual_RepeatedIds_results
}

// MoqUsual_RepeatedIds_doFn defines the type of function needed when calling AndDo for the Usual type
type MoqUsual_RepeatedIds_doFn func(sParam1, sParam2 string, bParam bool)

// MoqUsual_RepeatedIds_doReturnFn defines the type of function needed when calling DoReturnResults for the Usual type
type MoqUsual_RepeatedIds_doReturnFn func(sParam1, sParam2 string, bParam bool) (sResult1, sResult2 string, err error)

// MoqUsual_RepeatedIds_results holds the results of the Usual type
type MoqUsual_RepeatedIds_results struct {
	Params  MoqUsual_RepeatedIds_params
	Results []struct {
		Values *struct {
			SResult1, SResult2 string
			Err                error
		}
		Sequence   uint32
		DoFn       MoqUsual_RepeatedIds_doFn
		DoReturnFn MoqUsual_RepeatedIds_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqUsual_RepeatedIds_fnRecorder routes recorded function calls to the MoqUsual moq
type MoqUsual_RepeatedIds_fnRecorder struct {
	Params    MoqUsual_RepeatedIds_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqUsual_RepeatedIds_results
	Moq       *MoqUsual
}

// MoqUsual_RepeatedIds_anyParams isolates the any params functions of the Usual type
type MoqUsual_RepeatedIds_anyParams struct {
	Recorder *MoqUsual_RepeatedIds_fnRecorder
}

// MoqUsual_Times_params holds the params of the Usual type
type MoqUsual_Times_params struct {
	SParam string
	Times  bool
}

// MoqUsual_Times_paramsKey holds the map key params of the Usual type
type MoqUsual_Times_paramsKey struct {
	Params struct {
		SParam string
		Times  bool
	}
	Hashes struct {
		SParam hash.Hash
		Times  hash.Hash
	}
}

// MoqUsual_Times_resultsByParams contains the results for a given set of parameters for the Usual type
type MoqUsual_Times_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqUsual_Times_paramsKey]*MoqUsual_Times_results
}

// MoqUsual_Times_doFn defines the type of function needed when calling AndDo for the Usual type
type MoqUsual_Times_doFn func(sParam string, times bool)

// MoqUsual_Times_doReturnFn defines the type of function needed when calling DoReturnResults for the Usual type
type MoqUsual_Times_doReturnFn func(sParam string, times bool) (sResult string, err error)

// MoqUsual_Times_results holds the results of the Usual type
type MoqUsual_Times_results struct {
	Params  MoqUsual_Times_params
	Results []struct {
		Values *struct {
			SResult string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqUsual_Times_doFn
		DoReturnFn MoqUsual_Times_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqUsual_Times_fnRecorder routes recorded function calls to the MoqUsual moq
type MoqUsual_Times_fnRecorder struct {
	Params    MoqUsual_Times_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqUsual_Times_results
	Moq       *MoqUsual
}

// MoqUsual_Times_anyParams isolates the any params functions of the Usual type
type MoqUsual_Times_anyParams struct {
	Recorder *MoqUsual_Times_fnRecorder
}

// MoqUsual_DifficultParamNames_params holds the params of the Usual type
type MoqUsual_DifficultParamNames_params struct {
	Param1, Param2         bool
	Param3                 string
	Param, Param5, Param6  int
	Param7, Param8, Param9 float32
}

// MoqUsual_DifficultParamNames_paramsKey holds the map key params of the Usual type
type MoqUsual_DifficultParamNames_paramsKey struct {
	Params struct {
		Param1, Param2         bool
		Param3                 string
		Param, Param5, Param6  int
		Param7, Param8, Param9 float32
	}
	Hashes struct {
		Param1, Param2         hash.Hash
		Param3                 hash.Hash
		Param, Param5, Param6  hash.Hash
		Param7, Param8, Param9 hash.Hash
	}
}

// MoqUsual_DifficultParamNames_resultsByParams contains the results for a given set of parameters for the Usual type
type MoqUsual_DifficultParamNames_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqUsual_DifficultParamNames_paramsKey]*MoqUsual_DifficultParamNames_results
}

// MoqUsual_DifficultParamNames_doFn defines the type of function needed when calling AndDo for the Usual type
type MoqUsual_DifficultParamNames_doFn func(m, r bool, sequence string, param, params, i int, result, results, _ float32)

// MoqUsual_DifficultParamNames_doReturnFn defines the type of function needed when calling DoReturnResults for the Usual type
type MoqUsual_DifficultParamNames_doReturnFn func(m, r bool, sequence string, param, params, i int, result, results, _ float32)

// MoqUsual_DifficultParamNames_results holds the results of the Usual type
type MoqUsual_DifficultParamNames_results struct {
	Params  MoqUsual_DifficultParamNames_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqUsual_DifficultParamNames_doFn
		DoReturnFn MoqUsual_DifficultParamNames_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqUsual_DifficultParamNames_fnRecorder routes recorded function calls to the MoqUsual moq
type MoqUsual_DifficultParamNames_fnRecorder struct {
	Params    MoqUsual_DifficultParamNames_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqUsual_DifficultParamNames_results
	Moq       *MoqUsual
}

// MoqUsual_DifficultParamNames_anyParams isolates the any params functions of the Usual type
type MoqUsual_DifficultParamNames_anyParams struct {
	Recorder *MoqUsual_DifficultParamNames_fnRecorder
}

// MoqUsual_DifficultResultNames_params holds the params of the Usual type
type MoqUsual_DifficultResultNames_params struct{}

// MoqUsual_DifficultResultNames_paramsKey holds the map key params of the Usual type
type MoqUsual_DifficultResultNames_paramsKey struct {
	Params struct{}
	Hashes struct{}
}

// MoqUsual_DifficultResultNames_resultsByParams contains the results for a given set of parameters for the Usual type
type MoqUsual_DifficultResultNames_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqUsual_DifficultResultNames_paramsKey]*MoqUsual_DifficultResultNames_results
}

// MoqUsual_DifficultResultNames_doFn defines the type of function needed when calling AndDo for the Usual type
type MoqUsual_DifficultResultNames_doFn func()

// MoqUsual_DifficultResultNames_doReturnFn defines the type of function needed when calling DoReturnResults for the Usual type
type MoqUsual_DifficultResultNames_doReturnFn func() (m, r string, sequence error, param, params, i int, result, results, _ float32)

// MoqUsual_DifficultResultNames_results holds the results of the Usual type
type MoqUsual_DifficultResultNames_results struct {
	Params  MoqUsual_DifficultResultNames_params
	Results []struct {
		Values *struct {
			Result1, Result2          string
			Result3                   error
			Param, Result5, Result6   int
			Result7, Result8, Result9 float32
		}
		Sequence   uint32
		DoFn       MoqUsual_DifficultResultNames_doFn
		DoReturnFn MoqUsual_DifficultResultNames_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqUsual_DifficultResultNames_fnRecorder routes recorded function calls to the MoqUsual moq
type MoqUsual_DifficultResultNames_fnRecorder struct {
	Params    MoqUsual_DifficultResultNames_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqUsual_DifficultResultNames_results
	Moq       *MoqUsual
}

// MoqUsual_DifficultResultNames_anyParams isolates the any params functions of the Usual type
type MoqUsual_DifficultResultNames_anyParams struct {
	Recorder *MoqUsual_DifficultResultNames_fnRecorder
}

// MoqUsual_PassByReference_params holds the params of the Usual type
type MoqUsual_PassByReference_params struct {
	P *testmoqs.PassByReferenceParams
}

// MoqUsual_PassByReference_paramsKey holds the map key params of the Usual type
type MoqUsual_PassByReference_paramsKey struct {
	Params struct {
		P *testmoqs.PassByReferenceParams
	}
	Hashes struct{ P hash.Hash }
}

// MoqUsual_PassByReference_resultsByParams contains the results for a given set of parameters for the Usual type
type MoqUsual_PassByReference_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqUsual_PassByReference_paramsKey]*MoqUsual_PassByReference_results
}

// MoqUsual_PassByReference_doFn defines the type of function needed when calling AndDo for the Usual type
type MoqUsual_PassByReference_doFn func(p *testmoqs.PassByReferenceParams)

// MoqUsual_PassByReference_doReturnFn defines the type of function needed when calling DoReturnResults for the Usual type
type MoqUsual_PassByReference_doReturnFn func(p *testmoqs.PassByReferenceParams) (sResult string, err error)

// MoqUsual_PassByReference_results holds the results of the Usual type
type MoqUsual_PassByReference_results struct {
	Params  MoqUsual_PassByReference_params
	Results []struct {
		Values *struct {
			SResult string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqUsual_PassByReference_doFn
		DoReturnFn MoqUsual_PassByReference_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqUsual_PassByReference_fnRecorder routes recorded function calls to the MoqUsual moq
type MoqUsual_PassByReference_fnRecorder struct {
	Params    MoqUsual_PassByReference_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqUsual_PassByReference_results
	Moq       *MoqUsual
}

// MoqUsual_PassByReference_anyParams isolates the any params functions of the Usual type
type MoqUsual_PassByReference_anyParams struct {
	Recorder *MoqUsual_PassByReference_fnRecorder
}

// MoqUsual_InterfaceParam_params holds the params of the Usual type
type MoqUsual_InterfaceParam_params struct{ W io.Writer }

// MoqUsual_InterfaceParam_paramsKey holds the map key params of the Usual type
type MoqUsual_InterfaceParam_paramsKey struct {
	Params struct{ W io.Writer }
	Hashes struct{ W hash.Hash }
}

// MoqUsual_InterfaceParam_resultsByParams contains the results for a given set of parameters for the Usual type
type MoqUsual_InterfaceParam_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqUsual_InterfaceParam_paramsKey]*MoqUsual_InterfaceParam_results
}

// MoqUsual_InterfaceParam_doFn defines the type of function needed when calling AndDo for the Usual type
type MoqUsual_InterfaceParam_doFn func(w io.Writer)

// MoqUsual_InterfaceParam_doReturnFn defines the type of function needed when calling DoReturnResults for the Usual type
type MoqUsual_InterfaceParam_doReturnFn func(w io.Writer) (sResult string, err error)

// MoqUsual_InterfaceParam_results holds the results of the Usual type
type MoqUsual_InterfaceParam_results struct {
	Params  MoqUsual_InterfaceParam_params
	Results []struct {
		Values *struct {
			SResult string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqUsual_InterfaceParam_doFn
		DoReturnFn MoqUsual_InterfaceParam_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqUsual_InterfaceParam_fnRecorder routes recorded function calls to the MoqUsual moq
type MoqUsual_InterfaceParam_fnRecorder struct {
	Params    MoqUsual_InterfaceParam_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqUsual_InterfaceParam_results
	Moq       *MoqUsual
}

// MoqUsual_InterfaceParam_anyParams isolates the any params functions of the Usual type
type MoqUsual_InterfaceParam_anyParams struct {
	Recorder *MoqUsual_InterfaceParam_fnRecorder
}

// MoqUsual_InterfaceResult_params holds the params of the Usual type
type MoqUsual_InterfaceResult_params struct {
	SParam string
	BParam bool
}

// MoqUsual_InterfaceResult_paramsKey holds the map key params of the Usual type
type MoqUsual_InterfaceResult_paramsKey struct {
	Params struct {
		SParam string
		BParam bool
	}
	Hashes struct {
		SParam hash.Hash
		BParam hash.Hash
	}
}

// MoqUsual_InterfaceResult_resultsByParams contains the results for a given set of parameters for the Usual type
type MoqUsual_InterfaceResult_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqUsual_InterfaceResult_paramsKey]*MoqUsual_InterfaceResult_results
}

// MoqUsual_InterfaceResult_doFn defines the type of function needed when calling AndDo for the Usual type
type MoqUsual_InterfaceResult_doFn func(sParam string, bParam bool)

// MoqUsual_InterfaceResult_doReturnFn defines the type of function needed when calling DoReturnResults for the Usual type
type MoqUsual_InterfaceResult_doReturnFn func(sParam string, bParam bool) (r io.Reader)

// MoqUsual_InterfaceResult_results holds the results of the Usual type
type MoqUsual_InterfaceResult_results struct {
	Params  MoqUsual_InterfaceResult_params
	Results []struct {
		Values     *struct{ Result1 io.Reader }
		Sequence   uint32
		DoFn       MoqUsual_InterfaceResult_doFn
		DoReturnFn MoqUsual_InterfaceResult_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqUsual_InterfaceResult_fnRecorder routes recorded function calls to the MoqUsual moq
type MoqUsual_InterfaceResult_fnRecorder struct {
	Params    MoqUsual_InterfaceResult_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqUsual_InterfaceResult_results
	Moq       *MoqUsual
}

// MoqUsual_InterfaceResult_anyParams isolates the any params functions of the Usual type
type MoqUsual_InterfaceResult_anyParams struct {
	Recorder *MoqUsual_InterfaceResult_fnRecorder
}

// NewMoqUsual creates a new moq of the Usual type
func NewMoqUsual(scene *moq.Scene, config *moq.Config) *MoqUsual {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqUsual{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqUsual_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Usual struct {
					SParam moq.ParamIndexing
					BParam moq.ParamIndexing
				}
				NoNames struct {
					Param1 moq.ParamIndexing
					Param2 moq.ParamIndexing
				}
				NoResults struct {
					SParam moq.ParamIndexing
					BParam moq.ParamIndexing
				}
				NoParams struct{}
				Nothing  struct{}
				Variadic struct {
					Other moq.ParamIndexing
					Args  moq.ParamIndexing
				}
				RepeatedIds struct {
					SParam1 moq.ParamIndexing
					SParam2 moq.ParamIndexing
					BParam  moq.ParamIndexing
				}
				Times struct {
					SParam moq.ParamIndexing
					Times  moq.ParamIndexing
				}
				DifficultParamNames struct {
					Param1 moq.ParamIndexing
					Param2 moq.ParamIndexing
					Param3 moq.ParamIndexing
					Param  moq.ParamIndexing
					Param5 moq.ParamIndexing
					Param6 moq.ParamIndexing
					Param7 moq.ParamIndexing
					Param8 moq.ParamIndexing
					Param9 moq.ParamIndexing
				}
				DifficultResultNames struct{}
				PassByReference      struct {
					P moq.ParamIndexing
				}
				InterfaceParam struct {
					W moq.ParamIndexing
				}
				InterfaceResult struct {
					SParam moq.ParamIndexing
					BParam moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			Usual struct {
				SParam moq.ParamIndexing
				BParam moq.ParamIndexing
			}
			NoNames struct {
				Param1 moq.ParamIndexing
				Param2 moq.ParamIndexing
			}
			NoResults struct {
				SParam moq.ParamIndexing
				BParam moq.ParamIndexing
			}
			NoParams struct{}
			Nothing  struct{}
			Variadic struct {
				Other moq.ParamIndexing
				Args  moq.ParamIndexing
			}
			RepeatedIds struct {
				SParam1 moq.ParamIndexing
				SParam2 moq.ParamIndexing
				BParam  moq.ParamIndexing
			}
			Times struct {
				SParam moq.ParamIndexing
				Times  moq.ParamIndexing
			}
			DifficultParamNames struct {
				Param1 moq.ParamIndexing
				Param2 moq.ParamIndexing
				Param3 moq.ParamIndexing
				Param  moq.ParamIndexing
				Param5 moq.ParamIndexing
				Param6 moq.ParamIndexing
				Param7 moq.ParamIndexing
				Param8 moq.ParamIndexing
				Param9 moq.ParamIndexing
			}
			DifficultResultNames struct{}
			PassByReference      struct {
				P moq.ParamIndexing
			}
			InterfaceParam struct {
				W moq.ParamIndexing
			}
			InterfaceResult struct {
				SParam moq.ParamIndexing
				BParam moq.ParamIndexing
			}
		}{
			Usual: struct {
				SParam moq.ParamIndexing
				BParam moq.ParamIndexing
			}{
				SParam: moq.ParamIndexByValue,
				BParam: moq.ParamIndexByValue,
			},
			NoNames: struct {
				Param1 moq.ParamIndexing
				Param2 moq.ParamIndexing
			}{
				Param1: moq.ParamIndexByValue,
				Param2: moq.ParamIndexByValue,
			},
			NoResults: struct {
				SParam moq.ParamIndexing
				BParam moq.ParamIndexing
			}{
				SParam: moq.ParamIndexByValue,
				BParam: moq.ParamIndexByValue,
			},
			NoParams: struct{}{},
			Nothing:  struct{}{},
			Variadic: struct {
				Other moq.ParamIndexing
				Args  moq.ParamIndexing
			}{
				Other: moq.ParamIndexByValue,
				Args:  moq.ParamIndexByHash,
			},
			RepeatedIds: struct {
				SParam1 moq.ParamIndexing
				SParam2 moq.ParamIndexing
				BParam  moq.ParamIndexing
			}{
				SParam1: moq.ParamIndexByValue,
				SParam2: moq.ParamIndexByValue,
				BParam:  moq.ParamIndexByValue,
			},
			Times: struct {
				SParam moq.ParamIndexing
				Times  moq.ParamIndexing
			}{
				SParam: moq.ParamIndexByValue,
				Times:  moq.ParamIndexByValue,
			},
			DifficultParamNames: struct {
				Param1 moq.ParamIndexing
				Param2 moq.ParamIndexing
				Param3 moq.ParamIndexing
				Param  moq.ParamIndexing
				Param5 moq.ParamIndexing
				Param6 moq.ParamIndexing
				Param7 moq.ParamIndexing
				Param8 moq.ParamIndexing
				Param9 moq.ParamIndexing
			}{
				Param1: moq.ParamIndexByValue,
				Param2: moq.ParamIndexByValue,
				Param3: moq.ParamIndexByValue,
				Param:  moq.ParamIndexByValue,
				Param5: moq.ParamIndexByValue,
				Param6: moq.ParamIndexByValue,
				Param7: moq.ParamIndexByValue,
				Param8: moq.ParamIndexByValue,
				Param9: moq.ParamIndexByValue,
			},
			DifficultResultNames: struct{}{},
			PassByReference: struct {
				P moq.ParamIndexing
			}{
				P: moq.ParamIndexByHash,
			},
			InterfaceParam: struct {
				W moq.ParamIndexing
			}{
				W: moq.ParamIndexByHash,
			},
			InterfaceResult: struct {
				SParam moq.ParamIndexing
				BParam moq.ParamIndexing
			}{
				SParam: moq.ParamIndexByValue,
				BParam: moq.ParamIndexByValue,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Usual type
func (m *MoqUsual) Mock() *MoqUsual_mock { return m.Moq }

func (m *MoqUsual_mock) Usual(sParam string, bParam bool) (sResult string, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqUsual_Usual_params{
		SParam: sParam,
		BParam: bParam,
	}
	var results *MoqUsual_Usual_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Usual {
		paramsKey := m.Moq.ParamsKey_Usual(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Usual(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Usual(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Usual(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(sParam, bParam)
	}

	if result.Values != nil {
		sResult = result.Values.SResult
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		sResult, err = result.DoReturnFn(sParam, bParam)
	}
	return
}

func (m *MoqUsual_mock) NoNames(param1 string, param2 bool) (result1 string, result2 error) {
	m.Moq.Scene.T.Helper()
	params := MoqUsual_NoNames_params{
		Param1: param1,
		Param2: param2,
	}
	var results *MoqUsual_NoNames_results
	for _, resultsByParams := range m.Moq.ResultsByParams_NoNames {
		paramsKey := m.Moq.ParamsKey_NoNames(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_NoNames(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_NoNames(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_NoNames(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(param1, param2)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(param1, param2)
	}
	return
}

func (m *MoqUsual_mock) NoResults(sParam string, bParam bool) {
	m.Moq.Scene.T.Helper()
	params := MoqUsual_NoResults_params{
		SParam: sParam,
		BParam: bParam,
	}
	var results *MoqUsual_NoResults_results
	for _, resultsByParams := range m.Moq.ResultsByParams_NoResults {
		paramsKey := m.Moq.ParamsKey_NoResults(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_NoResults(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_NoResults(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_NoResults(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(sParam, bParam)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(sParam, bParam)
	}
	return
}

func (m *MoqUsual_mock) NoParams() (sResult string, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqUsual_NoParams_params{}
	var results *MoqUsual_NoParams_results
	for _, resultsByParams := range m.Moq.ResultsByParams_NoParams {
		paramsKey := m.Moq.ParamsKey_NoParams(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_NoParams(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_NoParams(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_NoParams(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		sResult = result.Values.SResult
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		sResult, err = result.DoReturnFn()
	}
	return
}

func (m *MoqUsual_mock) Nothing() {
	m.Moq.Scene.T.Helper()
	params := MoqUsual_Nothing_params{}
	var results *MoqUsual_Nothing_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Nothing {
		paramsKey := m.Moq.ParamsKey_Nothing(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Nothing(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Nothing(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Nothing(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn()
	}
	return
}

func (m *MoqUsual_mock) Variadic(other bool, args ...string) (sResult string, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqUsual_Variadic_params{
		Other: other,
		Args:  args,
	}
	var results *MoqUsual_Variadic_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Variadic {
		paramsKey := m.Moq.ParamsKey_Variadic(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Variadic(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Variadic(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Variadic(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(other, args...)
	}

	if result.Values != nil {
		sResult = result.Values.SResult
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		sResult, err = result.DoReturnFn(other, args...)
	}
	return
}

func (m *MoqUsual_mock) RepeatedIds(sParam1, sParam2 string, bParam bool) (sResult1, sResult2 string, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqUsual_RepeatedIds_params{
		SParam1: sParam1,
		SParam2: sParam2,
		BParam:  bParam,
	}
	var results *MoqUsual_RepeatedIds_results
	for _, resultsByParams := range m.Moq.ResultsByParams_RepeatedIds {
		paramsKey := m.Moq.ParamsKey_RepeatedIds(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_RepeatedIds(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_RepeatedIds(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_RepeatedIds(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(sParam1, sParam2, bParam)
	}

	if result.Values != nil {
		sResult1 = result.Values.SResult1
		sResult2 = result.Values.SResult2
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		sResult1, sResult2, err = result.DoReturnFn(sParam1, sParam2, bParam)
	}
	return
}

func (m *MoqUsual_mock) Times(sParam string, times bool) (sResult string, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqUsual_Times_params{
		SParam: sParam,
		Times:  times,
	}
	var results *MoqUsual_Times_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Times {
		paramsKey := m.Moq.ParamsKey_Times(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Times(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Times(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Times(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(sParam, times)
	}

	if result.Values != nil {
		sResult = result.Values.SResult
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		sResult, err = result.DoReturnFn(sParam, times)
	}
	return
}

func (m *MoqUsual_mock) DifficultParamNames(param1, param2 bool, param3 string, param, param5, param6 int, param7, param8, param9 float32) {
	m.Moq.Scene.T.Helper()
	params := MoqUsual_DifficultParamNames_params{
		Param1: param1,
		Param2: param2,
		Param3: param3,
		Param:  param,
		Param5: param5,
		Param6: param6,
		Param7: param7,
		Param8: param8,
		Param9: param9,
	}
	var results *MoqUsual_DifficultParamNames_results
	for _, resultsByParams := range m.Moq.ResultsByParams_DifficultParamNames {
		paramsKey := m.Moq.ParamsKey_DifficultParamNames(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_DifficultParamNames(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_DifficultParamNames(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_DifficultParamNames(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(param1, param2, param3, param, param5, param6, param7, param8, param9)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(param1, param2, param3, param, param5, param6, param7, param8, param9)
	}
	return
}

func (m *MoqUsual_mock) DifficultResultNames() (result1, result2 string, result3 error, param, result5, result6 int, result7, result8, result9 float32) {
	m.Moq.Scene.T.Helper()
	params := MoqUsual_DifficultResultNames_params{}
	var results *MoqUsual_DifficultResultNames_results
	for _, resultsByParams := range m.Moq.ResultsByParams_DifficultResultNames {
		paramsKey := m.Moq.ParamsKey_DifficultResultNames(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_DifficultResultNames(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_DifficultResultNames(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_DifficultResultNames(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
		result3 = result.Values.Result3
		param = result.Values.Param
		result5 = result.Values.Result5
		result6 = result.Values.Result6
		result7 = result.Values.Result7
		result8 = result.Values.Result8
		result9 = result.Values.Result9
	}
	if result.DoReturnFn != nil {
		result1, result2, result3, param, result5, result6, result7, result8, result9 = result.DoReturnFn()
	}
	return
}

func (m *MoqUsual_mock) PassByReference(p *testmoqs.PassByReferenceParams) (sResult string, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqUsual_PassByReference_params{
		P: p,
	}
	var results *MoqUsual_PassByReference_results
	for _, resultsByParams := range m.Moq.ResultsByParams_PassByReference {
		paramsKey := m.Moq.ParamsKey_PassByReference(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_PassByReference(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_PassByReference(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_PassByReference(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(p)
	}

	if result.Values != nil {
		sResult = result.Values.SResult
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		sResult, err = result.DoReturnFn(p)
	}
	return
}

func (m *MoqUsual_mock) InterfaceParam(w io.Writer) (sResult string, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqUsual_InterfaceParam_params{
		W: w,
	}
	var results *MoqUsual_InterfaceParam_results
	for _, resultsByParams := range m.Moq.ResultsByParams_InterfaceParam {
		paramsKey := m.Moq.ParamsKey_InterfaceParam(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_InterfaceParam(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_InterfaceParam(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_InterfaceParam(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(w)
	}

	if result.Values != nil {
		sResult = result.Values.SResult
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		sResult, err = result.DoReturnFn(w)
	}
	return
}

func (m *MoqUsual_mock) InterfaceResult(sParam string, bParam bool) (result1 io.Reader) {
	m.Moq.Scene.T.Helper()
	params := MoqUsual_InterfaceResult_params{
		SParam: sParam,
		BParam: bParam,
	}
	var results *MoqUsual_InterfaceResult_results
	for _, resultsByParams := range m.Moq.ResultsByParams_InterfaceResult {
		paramsKey := m.Moq.ParamsKey_InterfaceResult(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_InterfaceResult(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_InterfaceResult(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_InterfaceResult(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(sParam, bParam)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
	}
	if result.DoReturnFn != nil {
		result1 = result.DoReturnFn(sParam, bParam)
	}
	return
}

// OnCall returns the recorder implementation of the Usual type
func (m *MoqUsual) OnCall() *MoqUsual_recorder {
	return &MoqUsual_recorder{
		Moq: m,
	}
}

func (m *MoqUsual_recorder) Usual(sParam string, bParam bool) *MoqUsual_Usual_fnRecorder {
	return &MoqUsual_Usual_fnRecorder{
		Params: MoqUsual_Usual_params{
			SParam: sParam,
			BParam: bParam,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqUsual_Usual_fnRecorder) Any() *MoqUsual_Usual_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Usual(r.Params))
		return nil
	}
	return &MoqUsual_Usual_anyParams{Recorder: r}
}

func (a *MoqUsual_Usual_anyParams) SParam() *MoqUsual_Usual_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqUsual_Usual_anyParams) BParam() *MoqUsual_Usual_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqUsual_Usual_fnRecorder) Seq() *MoqUsual_Usual_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Usual(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqUsual_Usual_fnRecorder) NoSeq() *MoqUsual_Usual_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Usual(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqUsual_Usual_fnRecorder) ReturnResults(sResult string, err error) *MoqUsual_Usual_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			SResult string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqUsual_Usual_doFn
		DoReturnFn MoqUsual_Usual_doReturnFn
	}{
		Values: &struct {
			SResult string
			Err     error
		}{
			SResult: sResult,
			Err:     err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqUsual_Usual_fnRecorder) AndDo(fn MoqUsual_Usual_doFn) *MoqUsual_Usual_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqUsual_Usual_fnRecorder) DoReturnResults(fn MoqUsual_Usual_doReturnFn) *MoqUsual_Usual_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			SResult string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqUsual_Usual_doFn
		DoReturnFn MoqUsual_Usual_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqUsual_Usual_fnRecorder) FindResults() {
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqUsual_Usual_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Usual {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqUsual_Usual_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqUsual_Usual_paramsKey]*MoqUsual_Usual_results{},
		}
		r.Moq.ResultsByParams_Usual = append(r.Moq.ResultsByParams_Usual, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Usual) {
			copy(r.Moq.ResultsByParams_Usual[insertAt+1:], r.Moq.ResultsByParams_Usual[insertAt:0])
			r.Moq.ResultsByParams_Usual[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Usual(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqUsual_Usual_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqUsual_Usual_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqUsual_Usual_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					SResult string
					Err     error
				}
				Sequence   uint32
				DoFn       MoqUsual_Usual_doFn
				DoReturnFn MoqUsual_Usual_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqUsual) PrettyParams_Usual(params MoqUsual_Usual_params) string {
	return fmt.Sprintf("Usual(%#v, %#v)", params.SParam, params.BParam)
}

func (m *MoqUsual) ParamsKey_Usual(params MoqUsual_Usual_params, anyParams uint64) MoqUsual_Usual_paramsKey {
	var sParamUsed string
	var sParamUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Usual.SParam == moq.ParamIndexByValue {
			sParamUsed = params.SParam
		} else {
			sParamUsedHash = hash.DeepHash(params.SParam)
		}
	}
	var bParamUsed bool
	var bParamUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Usual.BParam == moq.ParamIndexByValue {
			bParamUsed = params.BParam
		} else {
			bParamUsedHash = hash.DeepHash(params.BParam)
		}
	}
	return MoqUsual_Usual_paramsKey{
		Params: struct {
			SParam string
			BParam bool
		}{
			SParam: sParamUsed,
			BParam: bParamUsed,
		},
		Hashes: struct {
			SParam hash.Hash
			BParam hash.Hash
		}{
			SParam: sParamUsedHash,
			BParam: bParamUsedHash,
		},
	}
}

func (m *MoqUsual_recorder) NoNames(param1 string, param2 bool) *MoqUsual_NoNames_fnRecorder {
	return &MoqUsual_NoNames_fnRecorder{
		Params: MoqUsual_NoNames_params{
			Param1: param1,
			Param2: param2,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqUsual_NoNames_fnRecorder) Any() *MoqUsual_NoNames_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_NoNames(r.Params))
		return nil
	}
	return &MoqUsual_NoNames_anyParams{Recorder: r}
}

func (a *MoqUsual_NoNames_anyParams) Param1() *MoqUsual_NoNames_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqUsual_NoNames_anyParams) Param2() *MoqUsual_NoNames_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqUsual_NoNames_fnRecorder) Seq() *MoqUsual_NoNames_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_NoNames(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqUsual_NoNames_fnRecorder) NoSeq() *MoqUsual_NoNames_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_NoNames(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqUsual_NoNames_fnRecorder) ReturnResults(result1 string, result2 error) *MoqUsual_NoNames_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqUsual_NoNames_doFn
		DoReturnFn MoqUsual_NoNames_doReturnFn
	}{
		Values: &struct {
			Result1 string
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqUsual_NoNames_fnRecorder) AndDo(fn MoqUsual_NoNames_doFn) *MoqUsual_NoNames_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqUsual_NoNames_fnRecorder) DoReturnResults(fn MoqUsual_NoNames_doReturnFn) *MoqUsual_NoNames_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqUsual_NoNames_doFn
		DoReturnFn MoqUsual_NoNames_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqUsual_NoNames_fnRecorder) FindResults() {
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqUsual_NoNames_resultsByParams
	for n, res := range r.Moq.ResultsByParams_NoNames {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqUsual_NoNames_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqUsual_NoNames_paramsKey]*MoqUsual_NoNames_results{},
		}
		r.Moq.ResultsByParams_NoNames = append(r.Moq.ResultsByParams_NoNames, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_NoNames) {
			copy(r.Moq.ResultsByParams_NoNames[insertAt+1:], r.Moq.ResultsByParams_NoNames[insertAt:0])
			r.Moq.ResultsByParams_NoNames[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_NoNames(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqUsual_NoNames_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqUsual_NoNames_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqUsual_NoNames_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1 string
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqUsual_NoNames_doFn
				DoReturnFn MoqUsual_NoNames_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqUsual) PrettyParams_NoNames(params MoqUsual_NoNames_params) string {
	return fmt.Sprintf("NoNames(%#v, %#v)", params.Param1, params.Param2)
}

func (m *MoqUsual) ParamsKey_NoNames(params MoqUsual_NoNames_params, anyParams uint64) MoqUsual_NoNames_paramsKey {
	var param1Used string
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.NoNames.Param1 == moq.ParamIndexByValue {
			param1Used = params.Param1
		} else {
			param1UsedHash = hash.DeepHash(params.Param1)
		}
	}
	var param2Used bool
	var param2UsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.NoNames.Param2 == moq.ParamIndexByValue {
			param2Used = params.Param2
		} else {
			param2UsedHash = hash.DeepHash(params.Param2)
		}
	}
	return MoqUsual_NoNames_paramsKey{
		Params: struct {
			Param1 string
			Param2 bool
		}{
			Param1: param1Used,
			Param2: param2Used,
		},
		Hashes: struct {
			Param1 hash.Hash
			Param2 hash.Hash
		}{
			Param1: param1UsedHash,
			Param2: param2UsedHash,
		},
	}
}

func (m *MoqUsual_recorder) NoResults(sParam string, bParam bool) *MoqUsual_NoResults_fnRecorder {
	return &MoqUsual_NoResults_fnRecorder{
		Params: MoqUsual_NoResults_params{
			SParam: sParam,
			BParam: bParam,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqUsual_NoResults_fnRecorder) Any() *MoqUsual_NoResults_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_NoResults(r.Params))
		return nil
	}
	return &MoqUsual_NoResults_anyParams{Recorder: r}
}

func (a *MoqUsual_NoResults_anyParams) SParam() *MoqUsual_NoResults_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqUsual_NoResults_anyParams) BParam() *MoqUsual_NoResults_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqUsual_NoResults_fnRecorder) Seq() *MoqUsual_NoResults_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_NoResults(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqUsual_NoResults_fnRecorder) NoSeq() *MoqUsual_NoResults_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_NoResults(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqUsual_NoResults_fnRecorder) ReturnResults() *MoqUsual_NoResults_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqUsual_NoResults_doFn
		DoReturnFn MoqUsual_NoResults_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqUsual_NoResults_fnRecorder) AndDo(fn MoqUsual_NoResults_doFn) *MoqUsual_NoResults_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqUsual_NoResults_fnRecorder) DoReturnResults(fn MoqUsual_NoResults_doReturnFn) *MoqUsual_NoResults_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqUsual_NoResults_doFn
		DoReturnFn MoqUsual_NoResults_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqUsual_NoResults_fnRecorder) FindResults() {
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqUsual_NoResults_resultsByParams
	for n, res := range r.Moq.ResultsByParams_NoResults {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqUsual_NoResults_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqUsual_NoResults_paramsKey]*MoqUsual_NoResults_results{},
		}
		r.Moq.ResultsByParams_NoResults = append(r.Moq.ResultsByParams_NoResults, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_NoResults) {
			copy(r.Moq.ResultsByParams_NoResults[insertAt+1:], r.Moq.ResultsByParams_NoResults[insertAt:0])
			r.Moq.ResultsByParams_NoResults[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_NoResults(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqUsual_NoResults_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqUsual_NoResults_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqUsual_NoResults_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqUsual_NoResults_doFn
				DoReturnFn MoqUsual_NoResults_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqUsual) PrettyParams_NoResults(params MoqUsual_NoResults_params) string {
	return fmt.Sprintf("NoResults(%#v, %#v)", params.SParam, params.BParam)
}

func (m *MoqUsual) ParamsKey_NoResults(params MoqUsual_NoResults_params, anyParams uint64) MoqUsual_NoResults_paramsKey {
	var sParamUsed string
	var sParamUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.NoResults.SParam == moq.ParamIndexByValue {
			sParamUsed = params.SParam
		} else {
			sParamUsedHash = hash.DeepHash(params.SParam)
		}
	}
	var bParamUsed bool
	var bParamUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.NoResults.BParam == moq.ParamIndexByValue {
			bParamUsed = params.BParam
		} else {
			bParamUsedHash = hash.DeepHash(params.BParam)
		}
	}
	return MoqUsual_NoResults_paramsKey{
		Params: struct {
			SParam string
			BParam bool
		}{
			SParam: sParamUsed,
			BParam: bParamUsed,
		},
		Hashes: struct {
			SParam hash.Hash
			BParam hash.Hash
		}{
			SParam: sParamUsedHash,
			BParam: bParamUsedHash,
		},
	}
}

func (m *MoqUsual_recorder) NoParams() *MoqUsual_NoParams_fnRecorder {
	return &MoqUsual_NoParams_fnRecorder{
		Params:   MoqUsual_NoParams_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqUsual_NoParams_fnRecorder) Any() *MoqUsual_NoParams_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_NoParams(r.Params))
		return nil
	}
	return &MoqUsual_NoParams_anyParams{Recorder: r}
}

func (r *MoqUsual_NoParams_fnRecorder) Seq() *MoqUsual_NoParams_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_NoParams(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqUsual_NoParams_fnRecorder) NoSeq() *MoqUsual_NoParams_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_NoParams(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqUsual_NoParams_fnRecorder) ReturnResults(sResult string, err error) *MoqUsual_NoParams_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			SResult string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqUsual_NoParams_doFn
		DoReturnFn MoqUsual_NoParams_doReturnFn
	}{
		Values: &struct {
			SResult string
			Err     error
		}{
			SResult: sResult,
			Err:     err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqUsual_NoParams_fnRecorder) AndDo(fn MoqUsual_NoParams_doFn) *MoqUsual_NoParams_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqUsual_NoParams_fnRecorder) DoReturnResults(fn MoqUsual_NoParams_doReturnFn) *MoqUsual_NoParams_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			SResult string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqUsual_NoParams_doFn
		DoReturnFn MoqUsual_NoParams_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqUsual_NoParams_fnRecorder) FindResults() {
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqUsual_NoParams_resultsByParams
	for n, res := range r.Moq.ResultsByParams_NoParams {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqUsual_NoParams_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqUsual_NoParams_paramsKey]*MoqUsual_NoParams_results{},
		}
		r.Moq.ResultsByParams_NoParams = append(r.Moq.ResultsByParams_NoParams, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_NoParams) {
			copy(r.Moq.ResultsByParams_NoParams[insertAt+1:], r.Moq.ResultsByParams_NoParams[insertAt:0])
			r.Moq.ResultsByParams_NoParams[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_NoParams(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqUsual_NoParams_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqUsual_NoParams_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqUsual_NoParams_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					SResult string
					Err     error
				}
				Sequence   uint32
				DoFn       MoqUsual_NoParams_doFn
				DoReturnFn MoqUsual_NoParams_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqUsual) PrettyParams_NoParams(params MoqUsual_NoParams_params) string {
	return fmt.Sprintf("NoParams()")
}

func (m *MoqUsual) ParamsKey_NoParams(params MoqUsual_NoParams_params, anyParams uint64) MoqUsual_NoParams_paramsKey {
	return MoqUsual_NoParams_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqUsual_recorder) Nothing() *MoqUsual_Nothing_fnRecorder {
	return &MoqUsual_Nothing_fnRecorder{
		Params:   MoqUsual_Nothing_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqUsual_Nothing_fnRecorder) Any() *MoqUsual_Nothing_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Nothing(r.Params))
		return nil
	}
	return &MoqUsual_Nothing_anyParams{Recorder: r}
}

func (r *MoqUsual_Nothing_fnRecorder) Seq() *MoqUsual_Nothing_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Nothing(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqUsual_Nothing_fnRecorder) NoSeq() *MoqUsual_Nothing_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Nothing(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqUsual_Nothing_fnRecorder) ReturnResults() *MoqUsual_Nothing_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqUsual_Nothing_doFn
		DoReturnFn MoqUsual_Nothing_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqUsual_Nothing_fnRecorder) AndDo(fn MoqUsual_Nothing_doFn) *MoqUsual_Nothing_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqUsual_Nothing_fnRecorder) DoReturnResults(fn MoqUsual_Nothing_doReturnFn) *MoqUsual_Nothing_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqUsual_Nothing_doFn
		DoReturnFn MoqUsual_Nothing_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqUsual_Nothing_fnRecorder) FindResults() {
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqUsual_Nothing_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Nothing {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqUsual_Nothing_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqUsual_Nothing_paramsKey]*MoqUsual_Nothing_results{},
		}
		r.Moq.ResultsByParams_Nothing = append(r.Moq.ResultsByParams_Nothing, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Nothing) {
			copy(r.Moq.ResultsByParams_Nothing[insertAt+1:], r.Moq.ResultsByParams_Nothing[insertAt:0])
			r.Moq.ResultsByParams_Nothing[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Nothing(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqUsual_Nothing_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqUsual_Nothing_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqUsual_Nothing_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqUsual_Nothing_doFn
				DoReturnFn MoqUsual_Nothing_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqUsual) PrettyParams_Nothing(params MoqUsual_Nothing_params) string {
	return fmt.Sprintf("Nothing()")
}

func (m *MoqUsual) ParamsKey_Nothing(params MoqUsual_Nothing_params, anyParams uint64) MoqUsual_Nothing_paramsKey {
	return MoqUsual_Nothing_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqUsual_recorder) Variadic(other bool, args ...string) *MoqUsual_Variadic_fnRecorder {
	return &MoqUsual_Variadic_fnRecorder{
		Params: MoqUsual_Variadic_params{
			Other: other,
			Args:  args,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqUsual_Variadic_fnRecorder) Any() *MoqUsual_Variadic_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Variadic(r.Params))
		return nil
	}
	return &MoqUsual_Variadic_anyParams{Recorder: r}
}

func (a *MoqUsual_Variadic_anyParams) Other() *MoqUsual_Variadic_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqUsual_Variadic_anyParams) Args() *MoqUsual_Variadic_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqUsual_Variadic_fnRecorder) Seq() *MoqUsual_Variadic_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Variadic(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqUsual_Variadic_fnRecorder) NoSeq() *MoqUsual_Variadic_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Variadic(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqUsual_Variadic_fnRecorder) ReturnResults(sResult string, err error) *MoqUsual_Variadic_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			SResult string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqUsual_Variadic_doFn
		DoReturnFn MoqUsual_Variadic_doReturnFn
	}{
		Values: &struct {
			SResult string
			Err     error
		}{
			SResult: sResult,
			Err:     err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqUsual_Variadic_fnRecorder) AndDo(fn MoqUsual_Variadic_doFn) *MoqUsual_Variadic_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqUsual_Variadic_fnRecorder) DoReturnResults(fn MoqUsual_Variadic_doReturnFn) *MoqUsual_Variadic_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			SResult string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqUsual_Variadic_doFn
		DoReturnFn MoqUsual_Variadic_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqUsual_Variadic_fnRecorder) FindResults() {
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqUsual_Variadic_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Variadic {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqUsual_Variadic_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqUsual_Variadic_paramsKey]*MoqUsual_Variadic_results{},
		}
		r.Moq.ResultsByParams_Variadic = append(r.Moq.ResultsByParams_Variadic, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Variadic) {
			copy(r.Moq.ResultsByParams_Variadic[insertAt+1:], r.Moq.ResultsByParams_Variadic[insertAt:0])
			r.Moq.ResultsByParams_Variadic[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Variadic(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqUsual_Variadic_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqUsual_Variadic_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqUsual_Variadic_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					SResult string
					Err     error
				}
				Sequence   uint32
				DoFn       MoqUsual_Variadic_doFn
				DoReturnFn MoqUsual_Variadic_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqUsual) PrettyParams_Variadic(params MoqUsual_Variadic_params) string {
	return fmt.Sprintf("Variadic(%#v, %#v)", params.Other, params.Args)
}

func (m *MoqUsual) ParamsKey_Variadic(params MoqUsual_Variadic_params, anyParams uint64) MoqUsual_Variadic_paramsKey {
	var otherUsed bool
	var otherUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Variadic.Other == moq.ParamIndexByValue {
			otherUsed = params.Other
		} else {
			otherUsedHash = hash.DeepHash(params.Other)
		}
	}
	var argsUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Variadic.Args == moq.ParamIndexByValue {
			m.Scene.T.Fatalf("The args parameter of the Variadic function can't be indexed by value")
		}
		argsUsedHash = hash.DeepHash(params.Args)
	}
	return MoqUsual_Variadic_paramsKey{
		Params: struct{ Other bool }{
			Other: otherUsed,
		},
		Hashes: struct {
			Other hash.Hash
			Args  hash.Hash
		}{
			Other: otherUsedHash,
			Args:  argsUsedHash,
		},
	}
}

func (m *MoqUsual_recorder) RepeatedIds(sParam1, sParam2 string, bParam bool) *MoqUsual_RepeatedIds_fnRecorder {
	return &MoqUsual_RepeatedIds_fnRecorder{
		Params: MoqUsual_RepeatedIds_params{
			SParam1: sParam1,
			SParam2: sParam2,
			BParam:  bParam,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqUsual_RepeatedIds_fnRecorder) Any() *MoqUsual_RepeatedIds_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_RepeatedIds(r.Params))
		return nil
	}
	return &MoqUsual_RepeatedIds_anyParams{Recorder: r}
}

func (a *MoqUsual_RepeatedIds_anyParams) SParam1() *MoqUsual_RepeatedIds_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqUsual_RepeatedIds_anyParams) SParam2() *MoqUsual_RepeatedIds_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (a *MoqUsual_RepeatedIds_anyParams) BParam() *MoqUsual_RepeatedIds_fnRecorder {
	a.Recorder.AnyParams |= 1 << 2
	return a.Recorder
}

func (r *MoqUsual_RepeatedIds_fnRecorder) Seq() *MoqUsual_RepeatedIds_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_RepeatedIds(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqUsual_RepeatedIds_fnRecorder) NoSeq() *MoqUsual_RepeatedIds_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_RepeatedIds(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqUsual_RepeatedIds_fnRecorder) ReturnResults(sResult1, sResult2 string, err error) *MoqUsual_RepeatedIds_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			SResult1, SResult2 string
			Err                error
		}
		Sequence   uint32
		DoFn       MoqUsual_RepeatedIds_doFn
		DoReturnFn MoqUsual_RepeatedIds_doReturnFn
	}{
		Values: &struct {
			SResult1, SResult2 string
			Err                error
		}{
			SResult1: sResult1,
			SResult2: sResult2,
			Err:      err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqUsual_RepeatedIds_fnRecorder) AndDo(fn MoqUsual_RepeatedIds_doFn) *MoqUsual_RepeatedIds_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqUsual_RepeatedIds_fnRecorder) DoReturnResults(fn MoqUsual_RepeatedIds_doReturnFn) *MoqUsual_RepeatedIds_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			SResult1, SResult2 string
			Err                error
		}
		Sequence   uint32
		DoFn       MoqUsual_RepeatedIds_doFn
		DoReturnFn MoqUsual_RepeatedIds_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqUsual_RepeatedIds_fnRecorder) FindResults() {
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqUsual_RepeatedIds_resultsByParams
	for n, res := range r.Moq.ResultsByParams_RepeatedIds {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqUsual_RepeatedIds_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqUsual_RepeatedIds_paramsKey]*MoqUsual_RepeatedIds_results{},
		}
		r.Moq.ResultsByParams_RepeatedIds = append(r.Moq.ResultsByParams_RepeatedIds, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_RepeatedIds) {
			copy(r.Moq.ResultsByParams_RepeatedIds[insertAt+1:], r.Moq.ResultsByParams_RepeatedIds[insertAt:0])
			r.Moq.ResultsByParams_RepeatedIds[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_RepeatedIds(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqUsual_RepeatedIds_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqUsual_RepeatedIds_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqUsual_RepeatedIds_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					SResult1, SResult2 string
					Err                error
				}
				Sequence   uint32
				DoFn       MoqUsual_RepeatedIds_doFn
				DoReturnFn MoqUsual_RepeatedIds_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqUsual) PrettyParams_RepeatedIds(params MoqUsual_RepeatedIds_params) string {
	return fmt.Sprintf("RepeatedIds(%#v, %#v, %#v)", params.SParam1, params.SParam2, params.BParam)
}

func (m *MoqUsual) ParamsKey_RepeatedIds(params MoqUsual_RepeatedIds_params, anyParams uint64) MoqUsual_RepeatedIds_paramsKey {
	var sParam1Used string
	var sParam1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.RepeatedIds.SParam1 == moq.ParamIndexByValue {
			sParam1Used = params.SParam1
		} else {
			sParam1UsedHash = hash.DeepHash(params.SParam1)
		}
	}
	var sParam2Used string
	var sParam2UsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.RepeatedIds.SParam2 == moq.ParamIndexByValue {
			sParam2Used = params.SParam2
		} else {
			sParam2UsedHash = hash.DeepHash(params.SParam2)
		}
	}
	var bParamUsed bool
	var bParamUsedHash hash.Hash
	if anyParams&(1<<2) == 0 {
		if m.Runtime.ParameterIndexing.RepeatedIds.BParam == moq.ParamIndexByValue {
			bParamUsed = params.BParam
		} else {
			bParamUsedHash = hash.DeepHash(params.BParam)
		}
	}
	return MoqUsual_RepeatedIds_paramsKey{
		Params: struct {
			SParam1, SParam2 string
			BParam           bool
		}{
			SParam1: sParam1Used,
			SParam2: sParam2Used,
			BParam:  bParamUsed,
		},
		Hashes: struct {
			SParam1, SParam2 hash.Hash
			BParam           hash.Hash
		}{
			SParam1: sParam1UsedHash,
			SParam2: sParam2UsedHash,
			BParam:  bParamUsedHash,
		},
	}
}

func (m *MoqUsual_recorder) Times(sParam string, times bool) *MoqUsual_Times_fnRecorder {
	return &MoqUsual_Times_fnRecorder{
		Params: MoqUsual_Times_params{
			SParam: sParam,
			Times:  times,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqUsual_Times_fnRecorder) Any() *MoqUsual_Times_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Times(r.Params))
		return nil
	}
	return &MoqUsual_Times_anyParams{Recorder: r}
}

func (a *MoqUsual_Times_anyParams) SParam() *MoqUsual_Times_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqUsual_Times_anyParams) Times() *MoqUsual_Times_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqUsual_Times_fnRecorder) Seq() *MoqUsual_Times_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Times(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqUsual_Times_fnRecorder) NoSeq() *MoqUsual_Times_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Times(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqUsual_Times_fnRecorder) ReturnResults(sResult string, err error) *MoqUsual_Times_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			SResult string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqUsual_Times_doFn
		DoReturnFn MoqUsual_Times_doReturnFn
	}{
		Values: &struct {
			SResult string
			Err     error
		}{
			SResult: sResult,
			Err:     err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqUsual_Times_fnRecorder) AndDo(fn MoqUsual_Times_doFn) *MoqUsual_Times_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqUsual_Times_fnRecorder) DoReturnResults(fn MoqUsual_Times_doReturnFn) *MoqUsual_Times_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			SResult string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqUsual_Times_doFn
		DoReturnFn MoqUsual_Times_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqUsual_Times_fnRecorder) FindResults() {
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqUsual_Times_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Times {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqUsual_Times_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqUsual_Times_paramsKey]*MoqUsual_Times_results{},
		}
		r.Moq.ResultsByParams_Times = append(r.Moq.ResultsByParams_Times, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Times) {
			copy(r.Moq.ResultsByParams_Times[insertAt+1:], r.Moq.ResultsByParams_Times[insertAt:0])
			r.Moq.ResultsByParams_Times[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Times(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqUsual_Times_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqUsual_Times_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqUsual_Times_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					SResult string
					Err     error
				}
				Sequence   uint32
				DoFn       MoqUsual_Times_doFn
				DoReturnFn MoqUsual_Times_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqUsual) PrettyParams_Times(params MoqUsual_Times_params) string {
	return fmt.Sprintf("Times(%#v, %#v)", params.SParam, params.Times)
}

func (m *MoqUsual) ParamsKey_Times(params MoqUsual_Times_params, anyParams uint64) MoqUsual_Times_paramsKey {
	var sParamUsed string
	var sParamUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Times.SParam == moq.ParamIndexByValue {
			sParamUsed = params.SParam
		} else {
			sParamUsedHash = hash.DeepHash(params.SParam)
		}
	}
	var timesUsed bool
	var timesUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Times.Times == moq.ParamIndexByValue {
			timesUsed = params.Times
		} else {
			timesUsedHash = hash.DeepHash(params.Times)
		}
	}
	return MoqUsual_Times_paramsKey{
		Params: struct {
			SParam string
			Times  bool
		}{
			SParam: sParamUsed,
			Times:  timesUsed,
		},
		Hashes: struct {
			SParam hash.Hash
			Times  hash.Hash
		}{
			SParam: sParamUsedHash,
			Times:  timesUsedHash,
		},
	}
}

func (m *MoqUsual_recorder) DifficultParamNames(param1, param2 bool, param3 string, param, param5, param6 int, param7, param8, param9 float32) *MoqUsual_DifficultParamNames_fnRecorder {
	return &MoqUsual_DifficultParamNames_fnRecorder{
		Params: MoqUsual_DifficultParamNames_params{
			Param1: param1,
			Param2: param2,
			Param3: param3,
			Param:  param,
			Param5: param5,
			Param6: param6,
			Param7: param7,
			Param8: param8,
			Param9: param9,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqUsual_DifficultParamNames_fnRecorder) Any() *MoqUsual_DifficultParamNames_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_DifficultParamNames(r.Params))
		return nil
	}
	return &MoqUsual_DifficultParamNames_anyParams{Recorder: r}
}

func (a *MoqUsual_DifficultParamNames_anyParams) Param1() *MoqUsual_DifficultParamNames_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqUsual_DifficultParamNames_anyParams) Param2() *MoqUsual_DifficultParamNames_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (a *MoqUsual_DifficultParamNames_anyParams) Param3() *MoqUsual_DifficultParamNames_fnRecorder {
	a.Recorder.AnyParams |= 1 << 2
	return a.Recorder
}

func (a *MoqUsual_DifficultParamNames_anyParams) Param() *MoqUsual_DifficultParamNames_fnRecorder {
	a.Recorder.AnyParams |= 1 << 3
	return a.Recorder
}

func (a *MoqUsual_DifficultParamNames_anyParams) Param5() *MoqUsual_DifficultParamNames_fnRecorder {
	a.Recorder.AnyParams |= 1 << 4
	return a.Recorder
}

func (a *MoqUsual_DifficultParamNames_anyParams) Param6() *MoqUsual_DifficultParamNames_fnRecorder {
	a.Recorder.AnyParams |= 1 << 5
	return a.Recorder
}

func (a *MoqUsual_DifficultParamNames_anyParams) Param7() *MoqUsual_DifficultParamNames_fnRecorder {
	a.Recorder.AnyParams |= 1 << 6
	return a.Recorder
}

func (a *MoqUsual_DifficultParamNames_anyParams) Param8() *MoqUsual_DifficultParamNames_fnRecorder {
	a.Recorder.AnyParams |= 1 << 7
	return a.Recorder
}

func (a *MoqUsual_DifficultParamNames_anyParams) Param9() *MoqUsual_DifficultParamNames_fnRecorder {
	a.Recorder.AnyParams |= 1 << 8
	return a.Recorder
}

func (r *MoqUsual_DifficultParamNames_fnRecorder) Seq() *MoqUsual_DifficultParamNames_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_DifficultParamNames(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqUsual_DifficultParamNames_fnRecorder) NoSeq() *MoqUsual_DifficultParamNames_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_DifficultParamNames(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqUsual_DifficultParamNames_fnRecorder) ReturnResults() *MoqUsual_DifficultParamNames_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqUsual_DifficultParamNames_doFn
		DoReturnFn MoqUsual_DifficultParamNames_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqUsual_DifficultParamNames_fnRecorder) AndDo(fn MoqUsual_DifficultParamNames_doFn) *MoqUsual_DifficultParamNames_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqUsual_DifficultParamNames_fnRecorder) DoReturnResults(fn MoqUsual_DifficultParamNames_doReturnFn) *MoqUsual_DifficultParamNames_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqUsual_DifficultParamNames_doFn
		DoReturnFn MoqUsual_DifficultParamNames_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqUsual_DifficultParamNames_fnRecorder) FindResults() {
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqUsual_DifficultParamNames_resultsByParams
	for n, res := range r.Moq.ResultsByParams_DifficultParamNames {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqUsual_DifficultParamNames_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqUsual_DifficultParamNames_paramsKey]*MoqUsual_DifficultParamNames_results{},
		}
		r.Moq.ResultsByParams_DifficultParamNames = append(r.Moq.ResultsByParams_DifficultParamNames, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_DifficultParamNames) {
			copy(r.Moq.ResultsByParams_DifficultParamNames[insertAt+1:], r.Moq.ResultsByParams_DifficultParamNames[insertAt:0])
			r.Moq.ResultsByParams_DifficultParamNames[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_DifficultParamNames(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqUsual_DifficultParamNames_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqUsual_DifficultParamNames_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqUsual_DifficultParamNames_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqUsual_DifficultParamNames_doFn
				DoReturnFn MoqUsual_DifficultParamNames_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqUsual) PrettyParams_DifficultParamNames(params MoqUsual_DifficultParamNames_params) string {
	return fmt.Sprintf("DifficultParamNames(%#v, %#v, %#v, %#v, %#v, %#v, %#v, %#v, %#v)", params.Param1, params.Param2, params.Param3, params.Param, params.Param5, params.Param6, params.Param7, params.Param8, params.Param9)
}

func (m *MoqUsual) ParamsKey_DifficultParamNames(params MoqUsual_DifficultParamNames_params, anyParams uint64) MoqUsual_DifficultParamNames_paramsKey {
	var param1Used bool
	var param1UsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.DifficultParamNames.Param1 == moq.ParamIndexByValue {
			param1Used = params.Param1
		} else {
			param1UsedHash = hash.DeepHash(params.Param1)
		}
	}
	var param2Used bool
	var param2UsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.DifficultParamNames.Param2 == moq.ParamIndexByValue {
			param2Used = params.Param2
		} else {
			param2UsedHash = hash.DeepHash(params.Param2)
		}
	}
	var param3Used string
	var param3UsedHash hash.Hash
	if anyParams&(1<<2) == 0 {
		if m.Runtime.ParameterIndexing.DifficultParamNames.Param3 == moq.ParamIndexByValue {
			param3Used = params.Param3
		} else {
			param3UsedHash = hash.DeepHash(params.Param3)
		}
	}
	var paramUsed int
	var paramUsedHash hash.Hash
	if anyParams&(1<<3) == 0 {
		if m.Runtime.ParameterIndexing.DifficultParamNames.Param == moq.ParamIndexByValue {
			paramUsed = params.Param
		} else {
			paramUsedHash = hash.DeepHash(params.Param)
		}
	}
	var param5Used int
	var param5UsedHash hash.Hash
	if anyParams&(1<<4) == 0 {
		if m.Runtime.ParameterIndexing.DifficultParamNames.Param5 == moq.ParamIndexByValue {
			param5Used = params.Param5
		} else {
			param5UsedHash = hash.DeepHash(params.Param5)
		}
	}
	var param6Used int
	var param6UsedHash hash.Hash
	if anyParams&(1<<5) == 0 {
		if m.Runtime.ParameterIndexing.DifficultParamNames.Param6 == moq.ParamIndexByValue {
			param6Used = params.Param6
		} else {
			param6UsedHash = hash.DeepHash(params.Param6)
		}
	}
	var param7Used float32
	var param7UsedHash hash.Hash
	if anyParams&(1<<6) == 0 {
		if m.Runtime.ParameterIndexing.DifficultParamNames.Param7 == moq.ParamIndexByValue {
			param7Used = params.Param7
		} else {
			param7UsedHash = hash.DeepHash(params.Param7)
		}
	}
	var param8Used float32
	var param8UsedHash hash.Hash
	if anyParams&(1<<7) == 0 {
		if m.Runtime.ParameterIndexing.DifficultParamNames.Param8 == moq.ParamIndexByValue {
			param8Used = params.Param8
		} else {
			param8UsedHash = hash.DeepHash(params.Param8)
		}
	}
	var param9Used float32
	var param9UsedHash hash.Hash
	if anyParams&(1<<8) == 0 {
		if m.Runtime.ParameterIndexing.DifficultParamNames.Param9 == moq.ParamIndexByValue {
			param9Used = params.Param9
		} else {
			param9UsedHash = hash.DeepHash(params.Param9)
		}
	}
	return MoqUsual_DifficultParamNames_paramsKey{
		Params: struct {
			Param1, Param2         bool
			Param3                 string
			Param, Param5, Param6  int
			Param7, Param8, Param9 float32
		}{
			Param1: param1Used,
			Param2: param2Used,
			Param3: param3Used,
			Param:  paramUsed,
			Param5: param5Used,
			Param6: param6Used,
			Param7: param7Used,
			Param8: param8Used,
			Param9: param9Used,
		},
		Hashes: struct {
			Param1, Param2         hash.Hash
			Param3                 hash.Hash
			Param, Param5, Param6  hash.Hash
			Param7, Param8, Param9 hash.Hash
		}{
			Param1: param1UsedHash,
			Param2: param2UsedHash,
			Param3: param3UsedHash,
			Param:  paramUsedHash,
			Param5: param5UsedHash,
			Param6: param6UsedHash,
			Param7: param7UsedHash,
			Param8: param8UsedHash,
			Param9: param9UsedHash,
		},
	}
}

func (m *MoqUsual_recorder) DifficultResultNames() *MoqUsual_DifficultResultNames_fnRecorder {
	return &MoqUsual_DifficultResultNames_fnRecorder{
		Params:   MoqUsual_DifficultResultNames_params{},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqUsual_DifficultResultNames_fnRecorder) Any() *MoqUsual_DifficultResultNames_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_DifficultResultNames(r.Params))
		return nil
	}
	return &MoqUsual_DifficultResultNames_anyParams{Recorder: r}
}

func (r *MoqUsual_DifficultResultNames_fnRecorder) Seq() *MoqUsual_DifficultResultNames_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_DifficultResultNames(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqUsual_DifficultResultNames_fnRecorder) NoSeq() *MoqUsual_DifficultResultNames_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_DifficultResultNames(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqUsual_DifficultResultNames_fnRecorder) ReturnResults(result1, result2 string, result3 error, param, result5, result6 int, result7, result8, result9 float32) *MoqUsual_DifficultResultNames_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1, Result2          string
			Result3                   error
			Param, Result5, Result6   int
			Result7, Result8, Result9 float32
		}
		Sequence   uint32
		DoFn       MoqUsual_DifficultResultNames_doFn
		DoReturnFn MoqUsual_DifficultResultNames_doReturnFn
	}{
		Values: &struct {
			Result1, Result2          string
			Result3                   error
			Param, Result5, Result6   int
			Result7, Result8, Result9 float32
		}{
			Result1: result1,
			Result2: result2,
			Result3: result3,
			Param:   param,
			Result5: result5,
			Result6: result6,
			Result7: result7,
			Result8: result8,
			Result9: result9,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqUsual_DifficultResultNames_fnRecorder) AndDo(fn MoqUsual_DifficultResultNames_doFn) *MoqUsual_DifficultResultNames_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqUsual_DifficultResultNames_fnRecorder) DoReturnResults(fn MoqUsual_DifficultResultNames_doReturnFn) *MoqUsual_DifficultResultNames_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1, Result2          string
			Result3                   error
			Param, Result5, Result6   int
			Result7, Result8, Result9 float32
		}
		Sequence   uint32
		DoFn       MoqUsual_DifficultResultNames_doFn
		DoReturnFn MoqUsual_DifficultResultNames_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqUsual_DifficultResultNames_fnRecorder) FindResults() {
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqUsual_DifficultResultNames_resultsByParams
	for n, res := range r.Moq.ResultsByParams_DifficultResultNames {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqUsual_DifficultResultNames_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqUsual_DifficultResultNames_paramsKey]*MoqUsual_DifficultResultNames_results{},
		}
		r.Moq.ResultsByParams_DifficultResultNames = append(r.Moq.ResultsByParams_DifficultResultNames, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_DifficultResultNames) {
			copy(r.Moq.ResultsByParams_DifficultResultNames[insertAt+1:], r.Moq.ResultsByParams_DifficultResultNames[insertAt:0])
			r.Moq.ResultsByParams_DifficultResultNames[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_DifficultResultNames(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqUsual_DifficultResultNames_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqUsual_DifficultResultNames_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqUsual_DifficultResultNames_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					Result1, Result2          string
					Result3                   error
					Param, Result5, Result6   int
					Result7, Result8, Result9 float32
				}
				Sequence   uint32
				DoFn       MoqUsual_DifficultResultNames_doFn
				DoReturnFn MoqUsual_DifficultResultNames_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqUsual) PrettyParams_DifficultResultNames(params MoqUsual_DifficultResultNames_params) string {
	return fmt.Sprintf("DifficultResultNames()")
}

func (m *MoqUsual) ParamsKey_DifficultResultNames(params MoqUsual_DifficultResultNames_params, anyParams uint64) MoqUsual_DifficultResultNames_paramsKey {
	return MoqUsual_DifficultResultNames_paramsKey{
		Params: struct{}{},
		Hashes: struct{}{},
	}
}

func (m *MoqUsual_recorder) PassByReference(p *testmoqs.PassByReferenceParams) *MoqUsual_PassByReference_fnRecorder {
	return &MoqUsual_PassByReference_fnRecorder{
		Params: MoqUsual_PassByReference_params{
			P: p,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqUsual_PassByReference_fnRecorder) Any() *MoqUsual_PassByReference_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_PassByReference(r.Params))
		return nil
	}
	return &MoqUsual_PassByReference_anyParams{Recorder: r}
}

func (a *MoqUsual_PassByReference_anyParams) P() *MoqUsual_PassByReference_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqUsual_PassByReference_fnRecorder) Seq() *MoqUsual_PassByReference_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_PassByReference(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqUsual_PassByReference_fnRecorder) NoSeq() *MoqUsual_PassByReference_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_PassByReference(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqUsual_PassByReference_fnRecorder) ReturnResults(sResult string, err error) *MoqUsual_PassByReference_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			SResult string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqUsual_PassByReference_doFn
		DoReturnFn MoqUsual_PassByReference_doReturnFn
	}{
		Values: &struct {
			SResult string
			Err     error
		}{
			SResult: sResult,
			Err:     err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqUsual_PassByReference_fnRecorder) AndDo(fn MoqUsual_PassByReference_doFn) *MoqUsual_PassByReference_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqUsual_PassByReference_fnRecorder) DoReturnResults(fn MoqUsual_PassByReference_doReturnFn) *MoqUsual_PassByReference_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			SResult string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqUsual_PassByReference_doFn
		DoReturnFn MoqUsual_PassByReference_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqUsual_PassByReference_fnRecorder) FindResults() {
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqUsual_PassByReference_resultsByParams
	for n, res := range r.Moq.ResultsByParams_PassByReference {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqUsual_PassByReference_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqUsual_PassByReference_paramsKey]*MoqUsual_PassByReference_results{},
		}
		r.Moq.ResultsByParams_PassByReference = append(r.Moq.ResultsByParams_PassByReference, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_PassByReference) {
			copy(r.Moq.ResultsByParams_PassByReference[insertAt+1:], r.Moq.ResultsByParams_PassByReference[insertAt:0])
			r.Moq.ResultsByParams_PassByReference[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_PassByReference(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqUsual_PassByReference_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqUsual_PassByReference_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqUsual_PassByReference_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					SResult string
					Err     error
				}
				Sequence   uint32
				DoFn       MoqUsual_PassByReference_doFn
				DoReturnFn MoqUsual_PassByReference_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqUsual) PrettyParams_PassByReference(params MoqUsual_PassByReference_params) string {
	return fmt.Sprintf("PassByReference(%#v)", params.P)
}

func (m *MoqUsual) ParamsKey_PassByReference(params MoqUsual_PassByReference_params, anyParams uint64) MoqUsual_PassByReference_paramsKey {
	var pUsed *testmoqs.PassByReferenceParams
	var pUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.PassByReference.P == moq.ParamIndexByValue {
			pUsed = params.P
		} else {
			pUsedHash = hash.DeepHash(params.P)
		}
	}
	return MoqUsual_PassByReference_paramsKey{
		Params: struct {
			P *testmoqs.PassByReferenceParams
		}{
			P: pUsed,
		},
		Hashes: struct{ P hash.Hash }{
			P: pUsedHash,
		},
	}
}

func (m *MoqUsual_recorder) InterfaceParam(w io.Writer) *MoqUsual_InterfaceParam_fnRecorder {
	return &MoqUsual_InterfaceParam_fnRecorder{
		Params: MoqUsual_InterfaceParam_params{
			W: w,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqUsual_InterfaceParam_fnRecorder) Any() *MoqUsual_InterfaceParam_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_InterfaceParam(r.Params))
		return nil
	}
	return &MoqUsual_InterfaceParam_anyParams{Recorder: r}
}

func (a *MoqUsual_InterfaceParam_anyParams) W() *MoqUsual_InterfaceParam_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (r *MoqUsual_InterfaceParam_fnRecorder) Seq() *MoqUsual_InterfaceParam_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_InterfaceParam(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqUsual_InterfaceParam_fnRecorder) NoSeq() *MoqUsual_InterfaceParam_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_InterfaceParam(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqUsual_InterfaceParam_fnRecorder) ReturnResults(sResult string, err error) *MoqUsual_InterfaceParam_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			SResult string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqUsual_InterfaceParam_doFn
		DoReturnFn MoqUsual_InterfaceParam_doReturnFn
	}{
		Values: &struct {
			SResult string
			Err     error
		}{
			SResult: sResult,
			Err:     err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqUsual_InterfaceParam_fnRecorder) AndDo(fn MoqUsual_InterfaceParam_doFn) *MoqUsual_InterfaceParam_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqUsual_InterfaceParam_fnRecorder) DoReturnResults(fn MoqUsual_InterfaceParam_doReturnFn) *MoqUsual_InterfaceParam_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			SResult string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqUsual_InterfaceParam_doFn
		DoReturnFn MoqUsual_InterfaceParam_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqUsual_InterfaceParam_fnRecorder) FindResults() {
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqUsual_InterfaceParam_resultsByParams
	for n, res := range r.Moq.ResultsByParams_InterfaceParam {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqUsual_InterfaceParam_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqUsual_InterfaceParam_paramsKey]*MoqUsual_InterfaceParam_results{},
		}
		r.Moq.ResultsByParams_InterfaceParam = append(r.Moq.ResultsByParams_InterfaceParam, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_InterfaceParam) {
			copy(r.Moq.ResultsByParams_InterfaceParam[insertAt+1:], r.Moq.ResultsByParams_InterfaceParam[insertAt:0])
			r.Moq.ResultsByParams_InterfaceParam[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_InterfaceParam(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqUsual_InterfaceParam_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqUsual_InterfaceParam_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqUsual_InterfaceParam_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					SResult string
					Err     error
				}
				Sequence   uint32
				DoFn       MoqUsual_InterfaceParam_doFn
				DoReturnFn MoqUsual_InterfaceParam_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqUsual) PrettyParams_InterfaceParam(params MoqUsual_InterfaceParam_params) string {
	return fmt.Sprintf("InterfaceParam(%#v)", params.W)
}

func (m *MoqUsual) ParamsKey_InterfaceParam(params MoqUsual_InterfaceParam_params, anyParams uint64) MoqUsual_InterfaceParam_paramsKey {
	var wUsed io.Writer
	var wUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.InterfaceParam.W == moq.ParamIndexByValue {
			wUsed = params.W
		} else {
			wUsedHash = hash.DeepHash(params.W)
		}
	}
	return MoqUsual_InterfaceParam_paramsKey{
		Params: struct{ W io.Writer }{
			W: wUsed,
		},
		Hashes: struct{ W hash.Hash }{
			W: wUsedHash,
		},
	}
}

func (m *MoqUsual_recorder) InterfaceResult(sParam string, bParam bool) *MoqUsual_InterfaceResult_fnRecorder {
	return &MoqUsual_InterfaceResult_fnRecorder{
		Params: MoqUsual_InterfaceResult_params{
			SParam: sParam,
			BParam: bParam,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqUsual_InterfaceResult_fnRecorder) Any() *MoqUsual_InterfaceResult_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_InterfaceResult(r.Params))
		return nil
	}
	return &MoqUsual_InterfaceResult_anyParams{Recorder: r}
}

func (a *MoqUsual_InterfaceResult_anyParams) SParam() *MoqUsual_InterfaceResult_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqUsual_InterfaceResult_anyParams) BParam() *MoqUsual_InterfaceResult_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqUsual_InterfaceResult_fnRecorder) Seq() *MoqUsual_InterfaceResult_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_InterfaceResult(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqUsual_InterfaceResult_fnRecorder) NoSeq() *MoqUsual_InterfaceResult_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_InterfaceResult(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqUsual_InterfaceResult_fnRecorder) ReturnResults(result1 io.Reader) *MoqUsual_InterfaceResult_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{ Result1 io.Reader }
		Sequence   uint32
		DoFn       MoqUsual_InterfaceResult_doFn
		DoReturnFn MoqUsual_InterfaceResult_doReturnFn
	}{
		Values: &struct{ Result1 io.Reader }{
			Result1: result1,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqUsual_InterfaceResult_fnRecorder) AndDo(fn MoqUsual_InterfaceResult_doFn) *MoqUsual_InterfaceResult_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqUsual_InterfaceResult_fnRecorder) DoReturnResults(fn MoqUsual_InterfaceResult_doReturnFn) *MoqUsual_InterfaceResult_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{ Result1 io.Reader }
		Sequence   uint32
		DoFn       MoqUsual_InterfaceResult_doFn
		DoReturnFn MoqUsual_InterfaceResult_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqUsual_InterfaceResult_fnRecorder) FindResults() {
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqUsual_InterfaceResult_resultsByParams
	for n, res := range r.Moq.ResultsByParams_InterfaceResult {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqUsual_InterfaceResult_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqUsual_InterfaceResult_paramsKey]*MoqUsual_InterfaceResult_results{},
		}
		r.Moq.ResultsByParams_InterfaceResult = append(r.Moq.ResultsByParams_InterfaceResult, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_InterfaceResult) {
			copy(r.Moq.ResultsByParams_InterfaceResult[insertAt+1:], r.Moq.ResultsByParams_InterfaceResult[insertAt:0])
			r.Moq.ResultsByParams_InterfaceResult[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_InterfaceResult(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqUsual_InterfaceResult_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqUsual_InterfaceResult_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqUsual_InterfaceResult_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{ Result1 io.Reader }
				Sequence   uint32
				DoFn       MoqUsual_InterfaceResult_doFn
				DoReturnFn MoqUsual_InterfaceResult_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqUsual) PrettyParams_InterfaceResult(params MoqUsual_InterfaceResult_params) string {
	return fmt.Sprintf("InterfaceResult(%#v, %#v)", params.SParam, params.BParam)
}

func (m *MoqUsual) ParamsKey_InterfaceResult(params MoqUsual_InterfaceResult_params, anyParams uint64) MoqUsual_InterfaceResult_paramsKey {
	var sParamUsed string
	var sParamUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.InterfaceResult.SParam == moq.ParamIndexByValue {
			sParamUsed = params.SParam
		} else {
			sParamUsedHash = hash.DeepHash(params.SParam)
		}
	}
	var bParamUsed bool
	var bParamUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.InterfaceResult.BParam == moq.ParamIndexByValue {
			bParamUsed = params.BParam
		} else {
			bParamUsedHash = hash.DeepHash(params.BParam)
		}
	}
	return MoqUsual_InterfaceResult_paramsKey{
		Params: struct {
			SParam string
			BParam bool
		}{
			SParam: sParamUsed,
			BParam: bParamUsed,
		},
		Hashes: struct {
			SParam hash.Hash
			BParam hash.Hash
		}{
			SParam: sParamUsedHash,
			BParam: bParamUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqUsual) Reset() {
	m.ResultsByParams_Usual = nil
	m.ResultsByParams_NoNames = nil
	m.ResultsByParams_NoResults = nil
	m.ResultsByParams_NoParams = nil
	m.ResultsByParams_Nothing = nil
	m.ResultsByParams_Variadic = nil
	m.ResultsByParams_RepeatedIds = nil
	m.ResultsByParams_Times = nil
	m.ResultsByParams_DifficultParamNames = nil
	m.ResultsByParams_DifficultResultNames = nil
	m.ResultsByParams_PassByReference = nil
	m.ResultsByParams_InterfaceParam = nil
	m.ResultsByParams_InterfaceResult = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqUsual) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Usual {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Usual(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_NoNames {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_NoNames(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_NoResults {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_NoResults(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_NoParams {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_NoParams(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Nothing {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Nothing(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Variadic {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Variadic(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_RepeatedIds {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_RepeatedIds(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_Times {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Times(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_DifficultParamNames {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_DifficultParamNames(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_DifficultResultNames {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_DifficultResultNames(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_PassByReference {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_PassByReference(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_InterfaceParam {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_InterfaceParam(results.Params))
			}
		}
	}
	for _, res := range m.ResultsByParams_InterfaceResult {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_InterfaceResult(results.Params))
			}
		}
	}
}
