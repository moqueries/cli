// Code generated by Moqueries - https://github.com/myshkin5/moqueries - DO NOT EDIT!

package exported

import (
	"fmt"
	"math/bits"
	"sync/atomic"

	"github.com/myshkin5/moqueries/hash"
	"github.com/myshkin5/moqueries/moq"
)

// The following type assertion assures that Reduced_reduced is mocked
// completely
var _ Reduced_reduced = (*MoqReduced_mock)(nil)

// Reduced_reduced is the fabricated implementation type of this mock (emitted
// when the original interface contains non-exported methods)
type Reduced_reduced interface {
	Usual(sParam string, bParam bool) (sResult string, err error)
}

// MoqReduced holds the state of a moq of the Reduced_reduced type
type MoqReduced struct {
	Scene  *moq.Scene
	Config moq.Config
	Moq    *MoqReduced_mock

	ResultsByParams_Usual []MoqReduced_Usual_resultsByParams

	Runtime struct {
		ParameterIndexing struct {
			Usual struct {
				SParam moq.ParamIndexing
				BParam moq.ParamIndexing
			}
		}
	}
	// MoqReduced_mock isolates the mock interface of the Reduced type
}

type MoqReduced_mock struct {
	Moq *MoqReduced
}

// MoqReduced_recorder isolates the recorder interface of the Reduced type
type MoqReduced_recorder struct {
	Moq *MoqReduced
}

// MoqReduced_Usual_params holds the params of the Reduced type
type MoqReduced_Usual_params struct {
	SParam string
	BParam bool
}

// MoqReduced_Usual_paramsKey holds the map key params of the Reduced type
type MoqReduced_Usual_paramsKey struct {
	Params struct {
		SParam string
		BParam bool
	}
	Hashes struct {
		SParam hash.Hash
		BParam hash.Hash
	}
}

// MoqReduced_Usual_resultsByParams contains the results for a given set of
// parameters for the Reduced type
type MoqReduced_Usual_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqReduced_Usual_paramsKey]*MoqReduced_Usual_results
}

// MoqReduced_Usual_doFn defines the type of function needed when calling AndDo
// for the Reduced type
type MoqReduced_Usual_doFn func(sParam string, bParam bool)

// MoqReduced_Usual_doReturnFn defines the type of function needed when calling
// DoReturnResults for the Reduced type
type MoqReduced_Usual_doReturnFn func(sParam string, bParam bool) (sResult string, err error)

// MoqReduced_Usual_results holds the results of the Reduced type
type MoqReduced_Usual_results struct {
	Params  MoqReduced_Usual_params
	Results []struct {
		Values *struct {
			SResult string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqReduced_Usual_doFn
		DoReturnFn MoqReduced_Usual_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqReduced_Usual_fnRecorder routes recorded function calls to the MoqReduced
// moq
type MoqReduced_Usual_fnRecorder struct {
	Params    MoqReduced_Usual_params
	AnyParams uint64
	Sequence  bool
	Results   *MoqReduced_Usual_results
	Moq       *MoqReduced
}

// MoqReduced_Usual_anyParams isolates the any params functions of the Reduced
// type
type MoqReduced_Usual_anyParams struct {
	Recorder *MoqReduced_Usual_fnRecorder
}

// NewMoqReduced creates a new moq of the Reduced type
func NewMoqReduced(scene *moq.Scene, config *moq.Config) *MoqReduced {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqReduced{
		Scene:  scene,
		Config: *config,
		Moq:    &MoqReduced_mock{},

		Runtime: struct {
			ParameterIndexing struct {
				Usual struct {
					SParam moq.ParamIndexing
					BParam moq.ParamIndexing
				}
			}
		}{ParameterIndexing: struct {
			Usual struct {
				SParam moq.ParamIndexing
				BParam moq.ParamIndexing
			}
		}{
			Usual: struct {
				SParam moq.ParamIndexing
				BParam moq.ParamIndexing
			}{
				SParam: moq.ParamIndexByValue,
				BParam: moq.ParamIndexByValue,
			},
		}},
	}
	m.Moq.Moq = m

	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Reduced type
func (m *MoqReduced) Mock() *MoqReduced_mock { return m.Moq }

func (m *MoqReduced_mock) Usual(sParam string, bParam bool) (sResult string, err error) {
	m.Moq.Scene.T.Helper()
	params := MoqReduced_Usual_params{
		SParam: sParam,
		BParam: bParam,
	}
	var results *MoqReduced_Usual_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Usual {
		paramsKey := m.Moq.ParamsKey_Usual(params, resultsByParams.AnyParams)
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call to %s", m.Moq.PrettyParams_Usual(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to %s", m.Moq.PrettyParams_Usual(params))
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match call to %s", m.Moq.PrettyParams_Usual(params))
		}
	}

	if result.DoFn != nil {
		result.DoFn(sParam, bParam)
	}

	if result.Values != nil {
		sResult = result.Values.SResult
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		sResult, err = result.DoReturnFn(sParam, bParam)
	}
	return
}

// OnCall returns the recorder implementation of the Reduced type
func (m *MoqReduced) OnCall() *MoqReduced_recorder {
	return &MoqReduced_recorder{
		Moq: m,
	}
}

func (m *MoqReduced_recorder) Usual(sParam string, bParam bool) *MoqReduced_Usual_fnRecorder {
	return &MoqReduced_Usual_fnRecorder{
		Params: MoqReduced_Usual_params{
			SParam: sParam,
			BParam: bParam,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqReduced_Usual_fnRecorder) Any() *MoqReduced_Usual_anyParams {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Usual(r.Params))
		return nil
	}
	return &MoqReduced_Usual_anyParams{Recorder: r}
}

func (a *MoqReduced_Usual_anyParams) SParam() *MoqReduced_Usual_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqReduced_Usual_anyParams) BParam() *MoqReduced_Usual_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqReduced_Usual_fnRecorder) Seq() *MoqReduced_Usual_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Usual(r.Params))
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqReduced_Usual_fnRecorder) NoSeq() *MoqReduced_Usual_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, recording %s", r.Moq.PrettyParams_Usual(r.Params))
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqReduced_Usual_fnRecorder) ReturnResults(sResult string, err error) *MoqReduced_Usual_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			SResult string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqReduced_Usual_doFn
		DoReturnFn MoqReduced_Usual_doReturnFn
	}{
		Values: &struct {
			SResult string
			Err     error
		}{
			SResult: sResult,
			Err:     err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqReduced_Usual_fnRecorder) AndDo(fn MoqReduced_Usual_doFn) *MoqReduced_Usual_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqReduced_Usual_fnRecorder) DoReturnResults(fn MoqReduced_Usual_doReturnFn) *MoqReduced_Usual_fnRecorder {
	r.Moq.Scene.T.Helper()
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			SResult string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqReduced_Usual_doFn
		DoReturnFn MoqReduced_Usual_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqReduced_Usual_fnRecorder) FindResults() {
	r.Moq.Scene.T.Helper()
	if r.Results != nil {
		r.Results.Repeat.Increment(r.Moq.Scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.AnyParams)
	insertAt := -1
	var results *MoqReduced_Usual_resultsByParams
	for n, res := range r.Moq.ResultsByParams_Usual {
		if res.AnyParams == r.AnyParams {
			results = &res
			break
		}
		if res.AnyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &MoqReduced_Usual_resultsByParams{
			AnyCount:  anyCount,
			AnyParams: r.AnyParams,
			Results:   map[MoqReduced_Usual_paramsKey]*MoqReduced_Usual_results{},
		}
		r.Moq.ResultsByParams_Usual = append(r.Moq.ResultsByParams_Usual, *results)
		if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Usual) {
			copy(r.Moq.ResultsByParams_Usual[insertAt+1:], r.Moq.ResultsByParams_Usual[insertAt:0])
			r.Moq.ResultsByParams_Usual[insertAt] = *results
		}
	}

	paramsKey := r.Moq.ParamsKey_Usual(r.Params, r.AnyParams)

	var ok bool
	r.Results, ok = results.Results[paramsKey]
	if !ok {
		r.Results = &MoqReduced_Usual_results{
			Params:  r.Params,
			Results: nil,
			Index:   0,
			Repeat:  &moq.RepeatVal{},
		}
		results.Results[paramsKey] = r.Results
	}

	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqReduced_Usual_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqReduced_Usual_fnRecorder {
	r.Moq.Scene.T.Helper()
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values *struct {
					SResult string
					Err     error
				}
				Sequence   uint32
				DoFn       MoqReduced_Usual_doFn
				DoReturnFn MoqReduced_Usual_doReturnFn
			}{
				Values:   last.Values,
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (m *MoqReduced) PrettyParams_Usual(params MoqReduced_Usual_params) string {
	return fmt.Sprintf("Usual(%#v, %#v)", params.SParam, params.BParam)
}

func (m *MoqReduced) ParamsKey_Usual(params MoqReduced_Usual_params, anyParams uint64) MoqReduced_Usual_paramsKey {
	m.Scene.T.Helper()
	var sParamUsed string
	var sParamUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.Runtime.ParameterIndexing.Usual.SParam == moq.ParamIndexByValue {
			sParamUsed = params.SParam
		} else {
			sParamUsedHash = hash.DeepHash(params.SParam)
		}
	}
	var bParamUsed bool
	var bParamUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.Runtime.ParameterIndexing.Usual.BParam == moq.ParamIndexByValue {
			bParamUsed = params.BParam
		} else {
			bParamUsedHash = hash.DeepHash(params.BParam)
		}
	}
	return MoqReduced_Usual_paramsKey{
		Params: struct {
			SParam string
			BParam bool
		}{
			SParam: sParamUsed,
			BParam: bParamUsed,
		},
		Hashes: struct {
			SParam hash.Hash
			BParam hash.Hash
		}{
			SParam: sParamUsedHash,
			BParam: bParamUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *MoqReduced) Reset() { m.ResultsByParams_Usual = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqReduced) AssertExpectationsMet() {
	m.Scene.T.Helper()
	for _, res := range m.ResultsByParams_Usual {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.PrettyParams_Usual(results.Params))
			}
		}
	}
}
