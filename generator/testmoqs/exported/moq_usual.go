// Code generated by Moqueries - https://github.com/myshkin5/moqueries - DO NOT EDIT!

package exported

import (
	"math/bits"
	"sync/atomic"

	"github.com/myshkin5/moqueries/hash"
	"github.com/myshkin5/moqueries/moq"
)

// MoqUsual holds the state of a moq of the Usual type
type MoqUsual struct {
	Scene                       *moq.Scene
	Config                      moq.Config
	ResultsByParams_Usual       []MoqUsual_Usual_resultsByParams
	ResultsByParams_NoNames     []MoqUsual_NoNames_resultsByParams
	ResultsByParams_NoResults   []MoqUsual_NoResults_resultsByParams
	ResultsByParams_NoParams    []MoqUsual_NoParams_resultsByParams
	ResultsByParams_Nothing     []MoqUsual_Nothing_resultsByParams
	ResultsByParams_Variadic    []MoqUsual_Variadic_resultsByParams
	ResultsByParams_RepeatedIds []MoqUsual_RepeatedIds_resultsByParams
	ResultsByParams_Times       []MoqUsual_Times_resultsByParams
}

// MoqUsual_mock isolates the mock interface of the Usual type
type MoqUsual_mock struct {
	Moq *MoqUsual
}

// MoqUsual_recorder isolates the recorder interface of the Usual type
type MoqUsual_recorder struct {
	Moq *MoqUsual
}

// MoqUsual_Usual_params holds the params of the Usual type
type MoqUsual_Usual_params struct {
	SParam string
	BParam bool
}

// MoqUsual_Usual_paramsKey holds the map key params of the Usual type
type MoqUsual_Usual_paramsKey struct {
	SParam string
	BParam bool
}

// MoqUsual_Usual_resultsByParams contains the results for a given set of parameters for the Usual type
type MoqUsual_Usual_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqUsual_Usual_paramsKey]*MoqUsual_Usual_results
}

// MoqUsual_Usual_doFn defines the type of function needed when calling AndDo for the Usual type
type MoqUsual_Usual_doFn func(sParam string, bParam bool)

// MoqUsual_Usual_doReturnFn defines the type of function needed when calling DoReturnResults for the Usual type
type MoqUsual_Usual_doReturnFn func(sParam string, bParam bool) (sResult string, err error)

// MoqUsual_Usual_results holds the results of the Usual type
type MoqUsual_Usual_results struct {
	Params  MoqUsual_Usual_params
	Results []struct {
		Values *struct {
			SResult string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqUsual_Usual_doFn
		DoReturnFn MoqUsual_Usual_doReturnFn
	}
	Index    uint32
	AnyTimes bool
}

// MoqUsual_Usual_fnRecorder routes recorded function calls to the MoqUsual moq
type MoqUsual_Usual_fnRecorder struct {
	Params    MoqUsual_Usual_params
	ParamsKey MoqUsual_Usual_paramsKey
	AnyParams uint64
	Sequence  bool
	Results   *MoqUsual_Usual_results
	Moq       *MoqUsual
}

// MoqUsual_Usual_anyParams isolates the any params functions of the Usual type
type MoqUsual_Usual_anyParams struct {
	Recorder *MoqUsual_Usual_fnRecorder
}

// MoqUsual_NoNames_params holds the params of the Usual type
type MoqUsual_NoNames_params struct {
	Param1 string
	Param2 bool
}

// MoqUsual_NoNames_paramsKey holds the map key params of the Usual type
type MoqUsual_NoNames_paramsKey struct {
	Param1 string
	Param2 bool
}

// MoqUsual_NoNames_resultsByParams contains the results for a given set of parameters for the Usual type
type MoqUsual_NoNames_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqUsual_NoNames_paramsKey]*MoqUsual_NoNames_results
}

// MoqUsual_NoNames_doFn defines the type of function needed when calling AndDo for the Usual type
type MoqUsual_NoNames_doFn func(string, bool)

// MoqUsual_NoNames_doReturnFn defines the type of function needed when calling DoReturnResults for the Usual type
type MoqUsual_NoNames_doReturnFn func(string, bool) (string, error)

// MoqUsual_NoNames_results holds the results of the Usual type
type MoqUsual_NoNames_results struct {
	Params  MoqUsual_NoNames_params
	Results []struct {
		Values *struct {
			Result1 string
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqUsual_NoNames_doFn
		DoReturnFn MoqUsual_NoNames_doReturnFn
	}
	Index    uint32
	AnyTimes bool
}

// MoqUsual_NoNames_fnRecorder routes recorded function calls to the MoqUsual moq
type MoqUsual_NoNames_fnRecorder struct {
	Params    MoqUsual_NoNames_params
	ParamsKey MoqUsual_NoNames_paramsKey
	AnyParams uint64
	Sequence  bool
	Results   *MoqUsual_NoNames_results
	Moq       *MoqUsual
}

// MoqUsual_NoNames_anyParams isolates the any params functions of the Usual type
type MoqUsual_NoNames_anyParams struct {
	Recorder *MoqUsual_NoNames_fnRecorder
}

// MoqUsual_NoResults_params holds the params of the Usual type
type MoqUsual_NoResults_params struct {
	SParam string
	BParam bool
}

// MoqUsual_NoResults_paramsKey holds the map key params of the Usual type
type MoqUsual_NoResults_paramsKey struct {
	SParam string
	BParam bool
}

// MoqUsual_NoResults_resultsByParams contains the results for a given set of parameters for the Usual type
type MoqUsual_NoResults_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqUsual_NoResults_paramsKey]*MoqUsual_NoResults_results
}

// MoqUsual_NoResults_doFn defines the type of function needed when calling AndDo for the Usual type
type MoqUsual_NoResults_doFn func(sParam string, bParam bool)

// MoqUsual_NoResults_doReturnFn defines the type of function needed when calling DoReturnResults for the Usual type
type MoqUsual_NoResults_doReturnFn func(sParam string, bParam bool)

// MoqUsual_NoResults_results holds the results of the Usual type
type MoqUsual_NoResults_results struct {
	Params  MoqUsual_NoResults_params
	Results []struct {
		Values *struct {
		}
		Sequence   uint32
		DoFn       MoqUsual_NoResults_doFn
		DoReturnFn MoqUsual_NoResults_doReturnFn
	}
	Index    uint32
	AnyTimes bool
}

// MoqUsual_NoResults_fnRecorder routes recorded function calls to the MoqUsual moq
type MoqUsual_NoResults_fnRecorder struct {
	Params    MoqUsual_NoResults_params
	ParamsKey MoqUsual_NoResults_paramsKey
	AnyParams uint64
	Sequence  bool
	Results   *MoqUsual_NoResults_results
	Moq       *MoqUsual
}

// MoqUsual_NoResults_anyParams isolates the any params functions of the Usual type
type MoqUsual_NoResults_anyParams struct {
	Recorder *MoqUsual_NoResults_fnRecorder
}

// MoqUsual_NoParams_params holds the params of the Usual type
type MoqUsual_NoParams_params struct{}

// MoqUsual_NoParams_paramsKey holds the map key params of the Usual type
type MoqUsual_NoParams_paramsKey struct{}

// MoqUsual_NoParams_resultsByParams contains the results for a given set of parameters for the Usual type
type MoqUsual_NoParams_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqUsual_NoParams_paramsKey]*MoqUsual_NoParams_results
}

// MoqUsual_NoParams_doFn defines the type of function needed when calling AndDo for the Usual type
type MoqUsual_NoParams_doFn func()

// MoqUsual_NoParams_doReturnFn defines the type of function needed when calling DoReturnResults for the Usual type
type MoqUsual_NoParams_doReturnFn func() (sResult string, err error)

// MoqUsual_NoParams_results holds the results of the Usual type
type MoqUsual_NoParams_results struct {
	Params  MoqUsual_NoParams_params
	Results []struct {
		Values *struct {
			SResult string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqUsual_NoParams_doFn
		DoReturnFn MoqUsual_NoParams_doReturnFn
	}
	Index    uint32
	AnyTimes bool
}

// MoqUsual_NoParams_fnRecorder routes recorded function calls to the MoqUsual moq
type MoqUsual_NoParams_fnRecorder struct {
	Params    MoqUsual_NoParams_params
	ParamsKey MoqUsual_NoParams_paramsKey
	AnyParams uint64
	Sequence  bool
	Results   *MoqUsual_NoParams_results
	Moq       *MoqUsual
}

// MoqUsual_NoParams_anyParams isolates the any params functions of the Usual type
type MoqUsual_NoParams_anyParams struct {
	Recorder *MoqUsual_NoParams_fnRecorder
}

// MoqUsual_Nothing_params holds the params of the Usual type
type MoqUsual_Nothing_params struct{}

// MoqUsual_Nothing_paramsKey holds the map key params of the Usual type
type MoqUsual_Nothing_paramsKey struct{}

// MoqUsual_Nothing_resultsByParams contains the results for a given set of parameters for the Usual type
type MoqUsual_Nothing_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqUsual_Nothing_paramsKey]*MoqUsual_Nothing_results
}

// MoqUsual_Nothing_doFn defines the type of function needed when calling AndDo for the Usual type
type MoqUsual_Nothing_doFn func()

// MoqUsual_Nothing_doReturnFn defines the type of function needed when calling DoReturnResults for the Usual type
type MoqUsual_Nothing_doReturnFn func()

// MoqUsual_Nothing_results holds the results of the Usual type
type MoqUsual_Nothing_results struct {
	Params  MoqUsual_Nothing_params
	Results []struct {
		Values *struct {
		}
		Sequence   uint32
		DoFn       MoqUsual_Nothing_doFn
		DoReturnFn MoqUsual_Nothing_doReturnFn
	}
	Index    uint32
	AnyTimes bool
}

// MoqUsual_Nothing_fnRecorder routes recorded function calls to the MoqUsual moq
type MoqUsual_Nothing_fnRecorder struct {
	Params    MoqUsual_Nothing_params
	ParamsKey MoqUsual_Nothing_paramsKey
	AnyParams uint64
	Sequence  bool
	Results   *MoqUsual_Nothing_results
	Moq       *MoqUsual
}

// MoqUsual_Nothing_anyParams isolates the any params functions of the Usual type
type MoqUsual_Nothing_anyParams struct {
	Recorder *MoqUsual_Nothing_fnRecorder
}

// MoqUsual_Variadic_params holds the params of the Usual type
type MoqUsual_Variadic_params struct {
	Other bool
	Args  []string
}

// MoqUsual_Variadic_paramsKey holds the map key params of the Usual type
type MoqUsual_Variadic_paramsKey struct {
	Other bool
	Args  hash.Hash
}

// MoqUsual_Variadic_resultsByParams contains the results for a given set of parameters for the Usual type
type MoqUsual_Variadic_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqUsual_Variadic_paramsKey]*MoqUsual_Variadic_results
}

// MoqUsual_Variadic_doFn defines the type of function needed when calling AndDo for the Usual type
type MoqUsual_Variadic_doFn func(other bool, args ...string)

// MoqUsual_Variadic_doReturnFn defines the type of function needed when calling DoReturnResults for the Usual type
type MoqUsual_Variadic_doReturnFn func(other bool, args ...string) (sResult string, err error)

// MoqUsual_Variadic_results holds the results of the Usual type
type MoqUsual_Variadic_results struct {
	Params  MoqUsual_Variadic_params
	Results []struct {
		Values *struct {
			SResult string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqUsual_Variadic_doFn
		DoReturnFn MoqUsual_Variadic_doReturnFn
	}
	Index    uint32
	AnyTimes bool
}

// MoqUsual_Variadic_fnRecorder routes recorded function calls to the MoqUsual moq
type MoqUsual_Variadic_fnRecorder struct {
	Params    MoqUsual_Variadic_params
	ParamsKey MoqUsual_Variadic_paramsKey
	AnyParams uint64
	Sequence  bool
	Results   *MoqUsual_Variadic_results
	Moq       *MoqUsual
}

// MoqUsual_Variadic_anyParams isolates the any params functions of the Usual type
type MoqUsual_Variadic_anyParams struct {
	Recorder *MoqUsual_Variadic_fnRecorder
}

// MoqUsual_RepeatedIds_params holds the params of the Usual type
type MoqUsual_RepeatedIds_params struct {
	SParam1, SParam2 string
	BParam           bool
}

// MoqUsual_RepeatedIds_paramsKey holds the map key params of the Usual type
type MoqUsual_RepeatedIds_paramsKey struct {
	SParam1, SParam2 string
	BParam           bool
}

// MoqUsual_RepeatedIds_resultsByParams contains the results for a given set of parameters for the Usual type
type MoqUsual_RepeatedIds_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqUsual_RepeatedIds_paramsKey]*MoqUsual_RepeatedIds_results
}

// MoqUsual_RepeatedIds_doFn defines the type of function needed when calling AndDo for the Usual type
type MoqUsual_RepeatedIds_doFn func(sParam1, sParam2 string, bParam bool)

// MoqUsual_RepeatedIds_doReturnFn defines the type of function needed when calling DoReturnResults for the Usual type
type MoqUsual_RepeatedIds_doReturnFn func(sParam1, sParam2 string, bParam bool) (sResult1, sResult2 string, err error)

// MoqUsual_RepeatedIds_results holds the results of the Usual type
type MoqUsual_RepeatedIds_results struct {
	Params  MoqUsual_RepeatedIds_params
	Results []struct {
		Values *struct {
			SResult1, SResult2 string
			Err                error
		}
		Sequence   uint32
		DoFn       MoqUsual_RepeatedIds_doFn
		DoReturnFn MoqUsual_RepeatedIds_doReturnFn
	}
	Index    uint32
	AnyTimes bool
}

// MoqUsual_RepeatedIds_fnRecorder routes recorded function calls to the MoqUsual moq
type MoqUsual_RepeatedIds_fnRecorder struct {
	Params    MoqUsual_RepeatedIds_params
	ParamsKey MoqUsual_RepeatedIds_paramsKey
	AnyParams uint64
	Sequence  bool
	Results   *MoqUsual_RepeatedIds_results
	Moq       *MoqUsual
}

// MoqUsual_RepeatedIds_anyParams isolates the any params functions of the Usual type
type MoqUsual_RepeatedIds_anyParams struct {
	Recorder *MoqUsual_RepeatedIds_fnRecorder
}

// MoqUsual_Times_params holds the params of the Usual type
type MoqUsual_Times_params struct {
	SParam string
	Times  bool
}

// MoqUsual_Times_paramsKey holds the map key params of the Usual type
type MoqUsual_Times_paramsKey struct {
	SParam string
	Times  bool
}

// MoqUsual_Times_resultsByParams contains the results for a given set of parameters for the Usual type
type MoqUsual_Times_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqUsual_Times_paramsKey]*MoqUsual_Times_results
}

// MoqUsual_Times_doFn defines the type of function needed when calling AndDo for the Usual type
type MoqUsual_Times_doFn func(sParam string, times bool)

// MoqUsual_Times_doReturnFn defines the type of function needed when calling DoReturnResults for the Usual type
type MoqUsual_Times_doReturnFn func(sParam string, times bool) (sResult string, err error)

// MoqUsual_Times_results holds the results of the Usual type
type MoqUsual_Times_results struct {
	Params  MoqUsual_Times_params
	Results []struct {
		Values *struct {
			SResult string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqUsual_Times_doFn
		DoReturnFn MoqUsual_Times_doReturnFn
	}
	Index    uint32
	AnyTimes bool
}

// MoqUsual_Times_fnRecorder routes recorded function calls to the MoqUsual moq
type MoqUsual_Times_fnRecorder struct {
	Params    MoqUsual_Times_params
	ParamsKey MoqUsual_Times_paramsKey
	AnyParams uint64
	Sequence  bool
	Results   *MoqUsual_Times_results
	Moq       *MoqUsual
}

// MoqUsual_Times_anyParams isolates the any params functions of the Usual type
type MoqUsual_Times_anyParams struct {
	Recorder *MoqUsual_Times_fnRecorder
}

// NewMoqUsual creates a new moq of the Usual type
func NewMoqUsual(scene *moq.Scene, config *moq.Config) *MoqUsual {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqUsual{
		Scene:  scene,
		Config: *config,
	}
	scene.AddMoq(m)
	return m
}

// Mock returns the mock implementation of the Usual type
func (m *MoqUsual) Mock() *MoqUsual_mock {
	return &MoqUsual_mock{
		Moq: m,
	}
}

func (m *MoqUsual_mock) Usual(sParam string, bParam bool) (sResult string, err error) {
	params := MoqUsual_Usual_params{
		SParam: sParam,
		BParam: bParam,
	}
	var results *MoqUsual_Usual_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Usual {
		var sParamUsed string
		if resultsByParams.AnyParams&(1<<0) == 0 {
			sParamUsed = sParam
		}
		var bParamUsed bool
		if resultsByParams.AnyParams&(1<<1) == 0 {
			bParamUsed = bParam
		}
		paramsKey := MoqUsual_Usual_paramsKey{
			SParam: sParamUsed,
			BParam: bParamUsed,
		}
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= len(results.Results) {
		if !results.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = len(results.Results) - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match %#v", params)
		}
	}

	if result.DoFn != nil {
		result.DoFn(sParam, bParam)
	}

	if result.Values != nil {
		sResult = result.Values.SResult
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		sResult, err = result.DoReturnFn(sParam, bParam)
	}
	return
}

func (m *MoqUsual_mock) NoNames(param1 string, param2 bool) (result1 string, result2 error) {
	params := MoqUsual_NoNames_params{
		Param1: param1,
		Param2: param2,
	}
	var results *MoqUsual_NoNames_results
	for _, resultsByParams := range m.Moq.ResultsByParams_NoNames {
		var param1Used string
		if resultsByParams.AnyParams&(1<<0) == 0 {
			param1Used = param1
		}
		var param2Used bool
		if resultsByParams.AnyParams&(1<<1) == 0 {
			param2Used = param2
		}
		paramsKey := MoqUsual_NoNames_paramsKey{
			Param1: param1Used,
			Param2: param2Used,
		}
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= len(results.Results) {
		if !results.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = len(results.Results) - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match %#v", params)
		}
	}

	if result.DoFn != nil {
		result.DoFn(param1, param2)
	}

	if result.Values != nil {
		result1 = result.Values.Result1
		result2 = result.Values.Result2
	}
	if result.DoReturnFn != nil {
		result1, result2 = result.DoReturnFn(param1, param2)
	}
	return
}

func (m *MoqUsual_mock) NoResults(sParam string, bParam bool) {
	params := MoqUsual_NoResults_params{
		SParam: sParam,
		BParam: bParam,
	}
	var results *MoqUsual_NoResults_results
	for _, resultsByParams := range m.Moq.ResultsByParams_NoResults {
		var sParamUsed string
		if resultsByParams.AnyParams&(1<<0) == 0 {
			sParamUsed = sParam
		}
		var bParamUsed bool
		if resultsByParams.AnyParams&(1<<1) == 0 {
			bParamUsed = bParam
		}
		paramsKey := MoqUsual_NoResults_paramsKey{
			SParam: sParamUsed,
			BParam: bParamUsed,
		}
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= len(results.Results) {
		if !results.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = len(results.Results) - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match %#v", params)
		}
	}

	if result.DoFn != nil {
		result.DoFn(sParam, bParam)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(sParam, bParam)
	}
	return
}

func (m *MoqUsual_mock) NoParams() (sResult string, err error) {
	params := MoqUsual_NoParams_params{}
	var results *MoqUsual_NoParams_results
	for _, resultsByParams := range m.Moq.ResultsByParams_NoParams {
		paramsKey := MoqUsual_NoParams_paramsKey{}
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= len(results.Results) {
		if !results.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = len(results.Results) - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match %#v", params)
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.Values != nil {
		sResult = result.Values.SResult
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		sResult, err = result.DoReturnFn()
	}
	return
}

func (m *MoqUsual_mock) Nothing() {
	params := MoqUsual_Nothing_params{}
	var results *MoqUsual_Nothing_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Nothing {
		paramsKey := MoqUsual_Nothing_paramsKey{}
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= len(results.Results) {
		if !results.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = len(results.Results) - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match %#v", params)
		}
	}

	if result.DoFn != nil {
		result.DoFn()
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn()
	}
	return
}

func (m *MoqUsual_mock) Variadic(other bool, args ...string) (sResult string, err error) {
	params := MoqUsual_Variadic_params{
		Other: other,
		Args:  args,
	}
	var results *MoqUsual_Variadic_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Variadic {
		var otherUsed bool
		if resultsByParams.AnyParams&(1<<0) == 0 {
			otherUsed = other
		}
		var argsUsed hash.Hash
		if resultsByParams.AnyParams&(1<<1) == 0 {
			argsUsed = hash.DeepHash(args)
		}
		paramsKey := MoqUsual_Variadic_paramsKey{
			Other: otherUsed,
			Args:  argsUsed,
		}
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= len(results.Results) {
		if !results.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = len(results.Results) - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match %#v", params)
		}
	}

	if result.DoFn != nil {
		result.DoFn(other, args...)
	}

	if result.Values != nil {
		sResult = result.Values.SResult
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		sResult, err = result.DoReturnFn(other, args...)
	}
	return
}

func (m *MoqUsual_mock) RepeatedIds(sParam1, sParam2 string, bParam bool) (sResult1, sResult2 string, err error) {
	params := MoqUsual_RepeatedIds_params{
		SParam1: sParam1,
		SParam2: sParam2,
		BParam:  bParam,
	}
	var results *MoqUsual_RepeatedIds_results
	for _, resultsByParams := range m.Moq.ResultsByParams_RepeatedIds {
		var sParam1Used string
		if resultsByParams.AnyParams&(1<<0) == 0 {
			sParam1Used = sParam1
		}
		var sParam2Used string
		if resultsByParams.AnyParams&(1<<1) == 0 {
			sParam2Used = sParam2
		}
		var bParamUsed bool
		if resultsByParams.AnyParams&(1<<2) == 0 {
			bParamUsed = bParam
		}
		paramsKey := MoqUsual_RepeatedIds_paramsKey{
			SParam1: sParam1Used,
			SParam2: sParam2Used,
			BParam:  bParamUsed,
		}
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= len(results.Results) {
		if !results.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = len(results.Results) - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match %#v", params)
		}
	}

	if result.DoFn != nil {
		result.DoFn(sParam1, sParam2, bParam)
	}

	if result.Values != nil {
		sResult1 = result.Values.SResult1
		sResult2 = result.Values.SResult2
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		sResult1, sResult2, err = result.DoReturnFn(sParam1, sParam2, bParam)
	}
	return
}

func (m *MoqUsual_mock) Times(sParam string, times bool) (sResult string, err error) {
	params := MoqUsual_Times_params{
		SParam: sParam,
		Times:  times,
	}
	var results *MoqUsual_Times_results
	for _, resultsByParams := range m.Moq.ResultsByParams_Times {
		var sParamUsed string
		if resultsByParams.AnyParams&(1<<0) == 0 {
			sParamUsed = sParam
		}
		var timesUsed bool
		if resultsByParams.AnyParams&(1<<1) == 0 {
			timesUsed = times
		}
		paramsKey := MoqUsual_Times_paramsKey{
			SParam: sParamUsed,
			Times:  timesUsed,
		}
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= len(results.Results) {
		if !results.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = len(results.Results) - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match %#v", params)
		}
	}

	if result.DoFn != nil {
		result.DoFn(sParam, times)
	}

	if result.Values != nil {
		sResult = result.Values.SResult
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		sResult, err = result.DoReturnFn(sParam, times)
	}
	return
}

// OnCall returns the recorder implementation of the Usual type
func (m *MoqUsual) OnCall() *MoqUsual_recorder {
	return &MoqUsual_recorder{
		Moq: m,
	}
}

func (m *MoqUsual_recorder) Usual(sParam string, bParam bool) *MoqUsual_Usual_fnRecorder {
	return &MoqUsual_Usual_fnRecorder{
		Params: MoqUsual_Usual_params{
			SParam: sParam,
			BParam: bParam,
		},
		ParamsKey: MoqUsual_Usual_paramsKey{
			SParam: sParam,
			BParam: bParam,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqUsual_Usual_fnRecorder) Any() *MoqUsual_Usual_anyParams {
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, parameters: %#v", r.Params)
		return nil
	}
	return &MoqUsual_Usual_anyParams{Recorder: r}
}

func (a *MoqUsual_Usual_anyParams) SParam() *MoqUsual_Usual_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqUsual_Usual_anyParams) BParam() *MoqUsual_Usual_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqUsual_Usual_fnRecorder) Seq() *MoqUsual_Usual_fnRecorder {
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, parameters: %#v", r.Params)
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqUsual_Usual_fnRecorder) NoSeq() *MoqUsual_Usual_fnRecorder {
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, parameters: %#v", r.Params)
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqUsual_Usual_fnRecorder) ReturnResults(sResult string, err error) *MoqUsual_Usual_fnRecorder {
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			SResult string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqUsual_Usual_doFn
		DoReturnFn MoqUsual_Usual_doReturnFn
	}{
		Values: &struct {
			SResult string
			Err     error
		}{
			SResult: sResult,
			Err:     err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqUsual_Usual_fnRecorder) AndDo(fn MoqUsual_Usual_doFn) *MoqUsual_Usual_fnRecorder {
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqUsual_Usual_fnRecorder) DoReturnResults(fn MoqUsual_Usual_doReturnFn) *MoqUsual_Usual_fnRecorder {
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			SResult string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqUsual_Usual_doFn
		DoReturnFn MoqUsual_Usual_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqUsual_Usual_fnRecorder) FindResults() {
	if r.Results == nil {
		anyCount := bits.OnesCount64(r.AnyParams)
		insertAt := -1
		var results *MoqUsual_Usual_resultsByParams
		for n, res := range r.Moq.ResultsByParams_Usual {
			if res.AnyParams == r.AnyParams {
				results = &res
				break
			}
			if res.AnyCount > anyCount {
				insertAt = n
			}
		}
		if results == nil {
			results = &MoqUsual_Usual_resultsByParams{
				AnyCount:  anyCount,
				AnyParams: r.AnyParams,
				Results:   map[MoqUsual_Usual_paramsKey]*MoqUsual_Usual_results{},
			}
			r.Moq.ResultsByParams_Usual = append(r.Moq.ResultsByParams_Usual, *results)
			if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Usual) {
				copy(r.Moq.ResultsByParams_Usual[insertAt+1:], r.Moq.ResultsByParams_Usual[insertAt:0])
				r.Moq.ResultsByParams_Usual[insertAt] = *results
			}
		}

		var sParamUsed string
		if r.AnyParams&(1<<0) == 0 {
			sParamUsed = r.ParamsKey.SParam
		}
		var bParamUsed bool
		if r.AnyParams&(1<<1) == 0 {
			bParamUsed = r.ParamsKey.BParam
		}
		paramsKey := MoqUsual_Usual_paramsKey{
			SParam: sParamUsed,
			BParam: bParamUsed,
		}

		var ok bool
		r.Results, ok = results.Results[paramsKey]
		if !ok {
			r.Results = &MoqUsual_Usual_results{
				Params:   r.Params,
				Results:  nil,
				Index:    0,
				AnyTimes: false,
			}
			results.Results[paramsKey] = r.Results
		}
	}
}

func (r *MoqUsual_Usual_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqUsual_Usual_fnRecorder {
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	repeat := moq.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < repeat.MaxTimes-1; n++ {
		if last.Sequence != 0 {
			last = struct {
				Values *struct {
					SResult string
					Err     error
				}
				Sequence   uint32
				DoFn       MoqUsual_Usual_doFn
				DoReturnFn MoqUsual_Usual_doReturnFn
			}{
				Values: &struct {
					SResult string
					Err     error
				}{
					SResult: last.Values.SResult,
					Err:     last.Values.Err,
				},
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	r.Results.AnyTimes = repeat.AnyTimes
	return r
}

func (m *MoqUsual_recorder) NoNames(param1 string, param2 bool) *MoqUsual_NoNames_fnRecorder {
	return &MoqUsual_NoNames_fnRecorder{
		Params: MoqUsual_NoNames_params{
			Param1: param1,
			Param2: param2,
		},
		ParamsKey: MoqUsual_NoNames_paramsKey{
			Param1: param1,
			Param2: param2,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqUsual_NoNames_fnRecorder) Any() *MoqUsual_NoNames_anyParams {
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, parameters: %#v", r.Params)
		return nil
	}
	return &MoqUsual_NoNames_anyParams{Recorder: r}
}

func (a *MoqUsual_NoNames_anyParams) Param1() *MoqUsual_NoNames_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqUsual_NoNames_anyParams) Param2() *MoqUsual_NoNames_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqUsual_NoNames_fnRecorder) Seq() *MoqUsual_NoNames_fnRecorder {
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, parameters: %#v", r.Params)
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqUsual_NoNames_fnRecorder) NoSeq() *MoqUsual_NoNames_fnRecorder {
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, parameters: %#v", r.Params)
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqUsual_NoNames_fnRecorder) ReturnResults(result1 string, result2 error) *MoqUsual_NoNames_fnRecorder {
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqUsual_NoNames_doFn
		DoReturnFn MoqUsual_NoNames_doReturnFn
	}{
		Values: &struct {
			Result1 string
			Result2 error
		}{
			Result1: result1,
			Result2: result2,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqUsual_NoNames_fnRecorder) AndDo(fn MoqUsual_NoNames_doFn) *MoqUsual_NoNames_fnRecorder {
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqUsual_NoNames_fnRecorder) DoReturnResults(fn MoqUsual_NoNames_doReturnFn) *MoqUsual_NoNames_fnRecorder {
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			Result1 string
			Result2 error
		}
		Sequence   uint32
		DoFn       MoqUsual_NoNames_doFn
		DoReturnFn MoqUsual_NoNames_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqUsual_NoNames_fnRecorder) FindResults() {
	if r.Results == nil {
		anyCount := bits.OnesCount64(r.AnyParams)
		insertAt := -1
		var results *MoqUsual_NoNames_resultsByParams
		for n, res := range r.Moq.ResultsByParams_NoNames {
			if res.AnyParams == r.AnyParams {
				results = &res
				break
			}
			if res.AnyCount > anyCount {
				insertAt = n
			}
		}
		if results == nil {
			results = &MoqUsual_NoNames_resultsByParams{
				AnyCount:  anyCount,
				AnyParams: r.AnyParams,
				Results:   map[MoqUsual_NoNames_paramsKey]*MoqUsual_NoNames_results{},
			}
			r.Moq.ResultsByParams_NoNames = append(r.Moq.ResultsByParams_NoNames, *results)
			if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_NoNames) {
				copy(r.Moq.ResultsByParams_NoNames[insertAt+1:], r.Moq.ResultsByParams_NoNames[insertAt:0])
				r.Moq.ResultsByParams_NoNames[insertAt] = *results
			}
		}

		var param1Used string
		if r.AnyParams&(1<<0) == 0 {
			param1Used = r.ParamsKey.Param1
		}
		var param2Used bool
		if r.AnyParams&(1<<1) == 0 {
			param2Used = r.ParamsKey.Param2
		}
		paramsKey := MoqUsual_NoNames_paramsKey{
			Param1: param1Used,
			Param2: param2Used,
		}

		var ok bool
		r.Results, ok = results.Results[paramsKey]
		if !ok {
			r.Results = &MoqUsual_NoNames_results{
				Params:   r.Params,
				Results:  nil,
				Index:    0,
				AnyTimes: false,
			}
			results.Results[paramsKey] = r.Results
		}
	}
}

func (r *MoqUsual_NoNames_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqUsual_NoNames_fnRecorder {
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	repeat := moq.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < repeat.MaxTimes-1; n++ {
		if last.Sequence != 0 {
			last = struct {
				Values *struct {
					Result1 string
					Result2 error
				}
				Sequence   uint32
				DoFn       MoqUsual_NoNames_doFn
				DoReturnFn MoqUsual_NoNames_doReturnFn
			}{
				Values: &struct {
					Result1 string
					Result2 error
				}{
					Result1: last.Values.Result1,
					Result2: last.Values.Result2,
				},
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	r.Results.AnyTimes = repeat.AnyTimes
	return r
}

func (m *MoqUsual_recorder) NoResults(sParam string, bParam bool) *MoqUsual_NoResults_fnRecorder {
	return &MoqUsual_NoResults_fnRecorder{
		Params: MoqUsual_NoResults_params{
			SParam: sParam,
			BParam: bParam,
		},
		ParamsKey: MoqUsual_NoResults_paramsKey{
			SParam: sParam,
			BParam: bParam,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqUsual_NoResults_fnRecorder) Any() *MoqUsual_NoResults_anyParams {
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, parameters: %#v", r.Params)
		return nil
	}
	return &MoqUsual_NoResults_anyParams{Recorder: r}
}

func (a *MoqUsual_NoResults_anyParams) SParam() *MoqUsual_NoResults_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqUsual_NoResults_anyParams) BParam() *MoqUsual_NoResults_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqUsual_NoResults_fnRecorder) Seq() *MoqUsual_NoResults_fnRecorder {
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, parameters: %#v", r.Params)
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqUsual_NoResults_fnRecorder) NoSeq() *MoqUsual_NoResults_fnRecorder {
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, parameters: %#v", r.Params)
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqUsual_NoResults_fnRecorder) ReturnResults() *MoqUsual_NoResults_fnRecorder {
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
		}
		Sequence   uint32
		DoFn       MoqUsual_NoResults_doFn
		DoReturnFn MoqUsual_NoResults_doReturnFn
	}{
		Values: &struct {
		}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqUsual_NoResults_fnRecorder) AndDo(fn MoqUsual_NoResults_doFn) *MoqUsual_NoResults_fnRecorder {
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqUsual_NoResults_fnRecorder) DoReturnResults(fn MoqUsual_NoResults_doReturnFn) *MoqUsual_NoResults_fnRecorder {
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
		}
		Sequence   uint32
		DoFn       MoqUsual_NoResults_doFn
		DoReturnFn MoqUsual_NoResults_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqUsual_NoResults_fnRecorder) FindResults() {
	if r.Results == nil {
		anyCount := bits.OnesCount64(r.AnyParams)
		insertAt := -1
		var results *MoqUsual_NoResults_resultsByParams
		for n, res := range r.Moq.ResultsByParams_NoResults {
			if res.AnyParams == r.AnyParams {
				results = &res
				break
			}
			if res.AnyCount > anyCount {
				insertAt = n
			}
		}
		if results == nil {
			results = &MoqUsual_NoResults_resultsByParams{
				AnyCount:  anyCount,
				AnyParams: r.AnyParams,
				Results:   map[MoqUsual_NoResults_paramsKey]*MoqUsual_NoResults_results{},
			}
			r.Moq.ResultsByParams_NoResults = append(r.Moq.ResultsByParams_NoResults, *results)
			if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_NoResults) {
				copy(r.Moq.ResultsByParams_NoResults[insertAt+1:], r.Moq.ResultsByParams_NoResults[insertAt:0])
				r.Moq.ResultsByParams_NoResults[insertAt] = *results
			}
		}

		var sParamUsed string
		if r.AnyParams&(1<<0) == 0 {
			sParamUsed = r.ParamsKey.SParam
		}
		var bParamUsed bool
		if r.AnyParams&(1<<1) == 0 {
			bParamUsed = r.ParamsKey.BParam
		}
		paramsKey := MoqUsual_NoResults_paramsKey{
			SParam: sParamUsed,
			BParam: bParamUsed,
		}

		var ok bool
		r.Results, ok = results.Results[paramsKey]
		if !ok {
			r.Results = &MoqUsual_NoResults_results{
				Params:   r.Params,
				Results:  nil,
				Index:    0,
				AnyTimes: false,
			}
			results.Results[paramsKey] = r.Results
		}
	}
}

func (r *MoqUsual_NoResults_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqUsual_NoResults_fnRecorder {
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	repeat := moq.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < repeat.MaxTimes-1; n++ {
		if last.Sequence != 0 {
			last = struct {
				Values *struct {
				}
				Sequence   uint32
				DoFn       MoqUsual_NoResults_doFn
				DoReturnFn MoqUsual_NoResults_doReturnFn
			}{
				Values: &struct {
				}{},
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	r.Results.AnyTimes = repeat.AnyTimes
	return r
}

func (m *MoqUsual_recorder) NoParams() *MoqUsual_NoParams_fnRecorder {
	return &MoqUsual_NoParams_fnRecorder{
		Params:    MoqUsual_NoParams_params{},
		ParamsKey: MoqUsual_NoParams_paramsKey{},
		Sequence:  m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:       m.Moq,
	}
}

func (r *MoqUsual_NoParams_fnRecorder) Any() *MoqUsual_NoParams_anyParams {
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, parameters: %#v", r.Params)
		return nil
	}
	return &MoqUsual_NoParams_anyParams{Recorder: r}
}

func (r *MoqUsual_NoParams_fnRecorder) Seq() *MoqUsual_NoParams_fnRecorder {
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, parameters: %#v", r.Params)
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqUsual_NoParams_fnRecorder) NoSeq() *MoqUsual_NoParams_fnRecorder {
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, parameters: %#v", r.Params)
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqUsual_NoParams_fnRecorder) ReturnResults(sResult string, err error) *MoqUsual_NoParams_fnRecorder {
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			SResult string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqUsual_NoParams_doFn
		DoReturnFn MoqUsual_NoParams_doReturnFn
	}{
		Values: &struct {
			SResult string
			Err     error
		}{
			SResult: sResult,
			Err:     err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqUsual_NoParams_fnRecorder) AndDo(fn MoqUsual_NoParams_doFn) *MoqUsual_NoParams_fnRecorder {
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqUsual_NoParams_fnRecorder) DoReturnResults(fn MoqUsual_NoParams_doReturnFn) *MoqUsual_NoParams_fnRecorder {
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			SResult string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqUsual_NoParams_doFn
		DoReturnFn MoqUsual_NoParams_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqUsual_NoParams_fnRecorder) FindResults() {
	if r.Results == nil {
		anyCount := bits.OnesCount64(r.AnyParams)
		insertAt := -1
		var results *MoqUsual_NoParams_resultsByParams
		for n, res := range r.Moq.ResultsByParams_NoParams {
			if res.AnyParams == r.AnyParams {
				results = &res
				break
			}
			if res.AnyCount > anyCount {
				insertAt = n
			}
		}
		if results == nil {
			results = &MoqUsual_NoParams_resultsByParams{
				AnyCount:  anyCount,
				AnyParams: r.AnyParams,
				Results:   map[MoqUsual_NoParams_paramsKey]*MoqUsual_NoParams_results{},
			}
			r.Moq.ResultsByParams_NoParams = append(r.Moq.ResultsByParams_NoParams, *results)
			if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_NoParams) {
				copy(r.Moq.ResultsByParams_NoParams[insertAt+1:], r.Moq.ResultsByParams_NoParams[insertAt:0])
				r.Moq.ResultsByParams_NoParams[insertAt] = *results
			}
		}

		paramsKey := MoqUsual_NoParams_paramsKey{}

		var ok bool
		r.Results, ok = results.Results[paramsKey]
		if !ok {
			r.Results = &MoqUsual_NoParams_results{
				Params:   r.Params,
				Results:  nil,
				Index:    0,
				AnyTimes: false,
			}
			results.Results[paramsKey] = r.Results
		}
	}
}

func (r *MoqUsual_NoParams_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqUsual_NoParams_fnRecorder {
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	repeat := moq.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < repeat.MaxTimes-1; n++ {
		if last.Sequence != 0 {
			last = struct {
				Values *struct {
					SResult string
					Err     error
				}
				Sequence   uint32
				DoFn       MoqUsual_NoParams_doFn
				DoReturnFn MoqUsual_NoParams_doReturnFn
			}{
				Values: &struct {
					SResult string
					Err     error
				}{
					SResult: last.Values.SResult,
					Err:     last.Values.Err,
				},
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	r.Results.AnyTimes = repeat.AnyTimes
	return r
}

func (m *MoqUsual_recorder) Nothing() *MoqUsual_Nothing_fnRecorder {
	return &MoqUsual_Nothing_fnRecorder{
		Params:    MoqUsual_Nothing_params{},
		ParamsKey: MoqUsual_Nothing_paramsKey{},
		Sequence:  m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:       m.Moq,
	}
}

func (r *MoqUsual_Nothing_fnRecorder) Any() *MoqUsual_Nothing_anyParams {
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, parameters: %#v", r.Params)
		return nil
	}
	return &MoqUsual_Nothing_anyParams{Recorder: r}
}

func (r *MoqUsual_Nothing_fnRecorder) Seq() *MoqUsual_Nothing_fnRecorder {
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, parameters: %#v", r.Params)
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqUsual_Nothing_fnRecorder) NoSeq() *MoqUsual_Nothing_fnRecorder {
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, parameters: %#v", r.Params)
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqUsual_Nothing_fnRecorder) ReturnResults() *MoqUsual_Nothing_fnRecorder {
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
		}
		Sequence   uint32
		DoFn       MoqUsual_Nothing_doFn
		DoReturnFn MoqUsual_Nothing_doReturnFn
	}{
		Values: &struct {
		}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqUsual_Nothing_fnRecorder) AndDo(fn MoqUsual_Nothing_doFn) *MoqUsual_Nothing_fnRecorder {
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqUsual_Nothing_fnRecorder) DoReturnResults(fn MoqUsual_Nothing_doReturnFn) *MoqUsual_Nothing_fnRecorder {
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
		}
		Sequence   uint32
		DoFn       MoqUsual_Nothing_doFn
		DoReturnFn MoqUsual_Nothing_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqUsual_Nothing_fnRecorder) FindResults() {
	if r.Results == nil {
		anyCount := bits.OnesCount64(r.AnyParams)
		insertAt := -1
		var results *MoqUsual_Nothing_resultsByParams
		for n, res := range r.Moq.ResultsByParams_Nothing {
			if res.AnyParams == r.AnyParams {
				results = &res
				break
			}
			if res.AnyCount > anyCount {
				insertAt = n
			}
		}
		if results == nil {
			results = &MoqUsual_Nothing_resultsByParams{
				AnyCount:  anyCount,
				AnyParams: r.AnyParams,
				Results:   map[MoqUsual_Nothing_paramsKey]*MoqUsual_Nothing_results{},
			}
			r.Moq.ResultsByParams_Nothing = append(r.Moq.ResultsByParams_Nothing, *results)
			if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Nothing) {
				copy(r.Moq.ResultsByParams_Nothing[insertAt+1:], r.Moq.ResultsByParams_Nothing[insertAt:0])
				r.Moq.ResultsByParams_Nothing[insertAt] = *results
			}
		}

		paramsKey := MoqUsual_Nothing_paramsKey{}

		var ok bool
		r.Results, ok = results.Results[paramsKey]
		if !ok {
			r.Results = &MoqUsual_Nothing_results{
				Params:   r.Params,
				Results:  nil,
				Index:    0,
				AnyTimes: false,
			}
			results.Results[paramsKey] = r.Results
		}
	}
}

func (r *MoqUsual_Nothing_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqUsual_Nothing_fnRecorder {
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	repeat := moq.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < repeat.MaxTimes-1; n++ {
		if last.Sequence != 0 {
			last = struct {
				Values *struct {
				}
				Sequence   uint32
				DoFn       MoqUsual_Nothing_doFn
				DoReturnFn MoqUsual_Nothing_doReturnFn
			}{
				Values: &struct {
				}{},
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	r.Results.AnyTimes = repeat.AnyTimes
	return r
}

func (m *MoqUsual_recorder) Variadic(other bool, args ...string) *MoqUsual_Variadic_fnRecorder {
	return &MoqUsual_Variadic_fnRecorder{
		Params: MoqUsual_Variadic_params{
			Other: other,
			Args:  args,
		},
		ParamsKey: MoqUsual_Variadic_paramsKey{
			Other: other,
			Args:  hash.DeepHash(args),
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqUsual_Variadic_fnRecorder) Any() *MoqUsual_Variadic_anyParams {
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, parameters: %#v", r.Params)
		return nil
	}
	return &MoqUsual_Variadic_anyParams{Recorder: r}
}

func (a *MoqUsual_Variadic_anyParams) Other() *MoqUsual_Variadic_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqUsual_Variadic_anyParams) Args() *MoqUsual_Variadic_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqUsual_Variadic_fnRecorder) Seq() *MoqUsual_Variadic_fnRecorder {
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, parameters: %#v", r.Params)
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqUsual_Variadic_fnRecorder) NoSeq() *MoqUsual_Variadic_fnRecorder {
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, parameters: %#v", r.Params)
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqUsual_Variadic_fnRecorder) ReturnResults(sResult string, err error) *MoqUsual_Variadic_fnRecorder {
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			SResult string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqUsual_Variadic_doFn
		DoReturnFn MoqUsual_Variadic_doReturnFn
	}{
		Values: &struct {
			SResult string
			Err     error
		}{
			SResult: sResult,
			Err:     err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqUsual_Variadic_fnRecorder) AndDo(fn MoqUsual_Variadic_doFn) *MoqUsual_Variadic_fnRecorder {
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqUsual_Variadic_fnRecorder) DoReturnResults(fn MoqUsual_Variadic_doReturnFn) *MoqUsual_Variadic_fnRecorder {
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			SResult string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqUsual_Variadic_doFn
		DoReturnFn MoqUsual_Variadic_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqUsual_Variadic_fnRecorder) FindResults() {
	if r.Results == nil {
		anyCount := bits.OnesCount64(r.AnyParams)
		insertAt := -1
		var results *MoqUsual_Variadic_resultsByParams
		for n, res := range r.Moq.ResultsByParams_Variadic {
			if res.AnyParams == r.AnyParams {
				results = &res
				break
			}
			if res.AnyCount > anyCount {
				insertAt = n
			}
		}
		if results == nil {
			results = &MoqUsual_Variadic_resultsByParams{
				AnyCount:  anyCount,
				AnyParams: r.AnyParams,
				Results:   map[MoqUsual_Variadic_paramsKey]*MoqUsual_Variadic_results{},
			}
			r.Moq.ResultsByParams_Variadic = append(r.Moq.ResultsByParams_Variadic, *results)
			if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Variadic) {
				copy(r.Moq.ResultsByParams_Variadic[insertAt+1:], r.Moq.ResultsByParams_Variadic[insertAt:0])
				r.Moq.ResultsByParams_Variadic[insertAt] = *results
			}
		}

		var otherUsed bool
		if r.AnyParams&(1<<0) == 0 {
			otherUsed = r.ParamsKey.Other
		}
		var argsUsed hash.Hash
		if r.AnyParams&(1<<1) == 0 {
			argsUsed = r.ParamsKey.Args
		}
		paramsKey := MoqUsual_Variadic_paramsKey{
			Other: otherUsed,
			Args:  argsUsed,
		}

		var ok bool
		r.Results, ok = results.Results[paramsKey]
		if !ok {
			r.Results = &MoqUsual_Variadic_results{
				Params:   r.Params,
				Results:  nil,
				Index:    0,
				AnyTimes: false,
			}
			results.Results[paramsKey] = r.Results
		}
	}
}

func (r *MoqUsual_Variadic_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqUsual_Variadic_fnRecorder {
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	repeat := moq.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < repeat.MaxTimes-1; n++ {
		if last.Sequence != 0 {
			last = struct {
				Values *struct {
					SResult string
					Err     error
				}
				Sequence   uint32
				DoFn       MoqUsual_Variadic_doFn
				DoReturnFn MoqUsual_Variadic_doReturnFn
			}{
				Values: &struct {
					SResult string
					Err     error
				}{
					SResult: last.Values.SResult,
					Err:     last.Values.Err,
				},
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	r.Results.AnyTimes = repeat.AnyTimes
	return r
}

func (m *MoqUsual_recorder) RepeatedIds(sParam1, sParam2 string, bParam bool) *MoqUsual_RepeatedIds_fnRecorder {
	return &MoqUsual_RepeatedIds_fnRecorder{
		Params: MoqUsual_RepeatedIds_params{
			SParam1: sParam1,
			SParam2: sParam2,
			BParam:  bParam,
		},
		ParamsKey: MoqUsual_RepeatedIds_paramsKey{
			SParam1: sParam1,
			SParam2: sParam2,
			BParam:  bParam,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqUsual_RepeatedIds_fnRecorder) Any() *MoqUsual_RepeatedIds_anyParams {
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, parameters: %#v", r.Params)
		return nil
	}
	return &MoqUsual_RepeatedIds_anyParams{Recorder: r}
}

func (a *MoqUsual_RepeatedIds_anyParams) SParam1() *MoqUsual_RepeatedIds_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqUsual_RepeatedIds_anyParams) SParam2() *MoqUsual_RepeatedIds_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (a *MoqUsual_RepeatedIds_anyParams) BParam() *MoqUsual_RepeatedIds_fnRecorder {
	a.Recorder.AnyParams |= 1 << 2
	return a.Recorder
}

func (r *MoqUsual_RepeatedIds_fnRecorder) Seq() *MoqUsual_RepeatedIds_fnRecorder {
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, parameters: %#v", r.Params)
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqUsual_RepeatedIds_fnRecorder) NoSeq() *MoqUsual_RepeatedIds_fnRecorder {
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, parameters: %#v", r.Params)
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqUsual_RepeatedIds_fnRecorder) ReturnResults(sResult1, sResult2 string, err error) *MoqUsual_RepeatedIds_fnRecorder {
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			SResult1, SResult2 string
			Err                error
		}
		Sequence   uint32
		DoFn       MoqUsual_RepeatedIds_doFn
		DoReturnFn MoqUsual_RepeatedIds_doReturnFn
	}{
		Values: &struct {
			SResult1, SResult2 string
			Err                error
		}{
			SResult1: sResult1,
			SResult2: sResult2,
			Err:      err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqUsual_RepeatedIds_fnRecorder) AndDo(fn MoqUsual_RepeatedIds_doFn) *MoqUsual_RepeatedIds_fnRecorder {
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqUsual_RepeatedIds_fnRecorder) DoReturnResults(fn MoqUsual_RepeatedIds_doReturnFn) *MoqUsual_RepeatedIds_fnRecorder {
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			SResult1, SResult2 string
			Err                error
		}
		Sequence   uint32
		DoFn       MoqUsual_RepeatedIds_doFn
		DoReturnFn MoqUsual_RepeatedIds_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqUsual_RepeatedIds_fnRecorder) FindResults() {
	if r.Results == nil {
		anyCount := bits.OnesCount64(r.AnyParams)
		insertAt := -1
		var results *MoqUsual_RepeatedIds_resultsByParams
		for n, res := range r.Moq.ResultsByParams_RepeatedIds {
			if res.AnyParams == r.AnyParams {
				results = &res
				break
			}
			if res.AnyCount > anyCount {
				insertAt = n
			}
		}
		if results == nil {
			results = &MoqUsual_RepeatedIds_resultsByParams{
				AnyCount:  anyCount,
				AnyParams: r.AnyParams,
				Results:   map[MoqUsual_RepeatedIds_paramsKey]*MoqUsual_RepeatedIds_results{},
			}
			r.Moq.ResultsByParams_RepeatedIds = append(r.Moq.ResultsByParams_RepeatedIds, *results)
			if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_RepeatedIds) {
				copy(r.Moq.ResultsByParams_RepeatedIds[insertAt+1:], r.Moq.ResultsByParams_RepeatedIds[insertAt:0])
				r.Moq.ResultsByParams_RepeatedIds[insertAt] = *results
			}
		}

		var sParam1Used string
		if r.AnyParams&(1<<0) == 0 {
			sParam1Used = r.ParamsKey.SParam1
		}
		var sParam2Used string
		if r.AnyParams&(1<<1) == 0 {
			sParam2Used = r.ParamsKey.SParam2
		}
		var bParamUsed bool
		if r.AnyParams&(1<<2) == 0 {
			bParamUsed = r.ParamsKey.BParam
		}
		paramsKey := MoqUsual_RepeatedIds_paramsKey{
			SParam1: sParam1Used,
			SParam2: sParam2Used,
			BParam:  bParamUsed,
		}

		var ok bool
		r.Results, ok = results.Results[paramsKey]
		if !ok {
			r.Results = &MoqUsual_RepeatedIds_results{
				Params:   r.Params,
				Results:  nil,
				Index:    0,
				AnyTimes: false,
			}
			results.Results[paramsKey] = r.Results
		}
	}
}

func (r *MoqUsual_RepeatedIds_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqUsual_RepeatedIds_fnRecorder {
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	repeat := moq.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < repeat.MaxTimes-1; n++ {
		if last.Sequence != 0 {
			last = struct {
				Values *struct {
					SResult1, SResult2 string
					Err                error
				}
				Sequence   uint32
				DoFn       MoqUsual_RepeatedIds_doFn
				DoReturnFn MoqUsual_RepeatedIds_doReturnFn
			}{
				Values: &struct {
					SResult1, SResult2 string
					Err                error
				}{
					SResult1: last.Values.SResult1,
					SResult2: last.Values.SResult2,
					Err:      last.Values.Err,
				},
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	r.Results.AnyTimes = repeat.AnyTimes
	return r
}

func (m *MoqUsual_recorder) Times(sParam string, times bool) *MoqUsual_Times_fnRecorder {
	return &MoqUsual_Times_fnRecorder{
		Params: MoqUsual_Times_params{
			SParam: sParam,
			Times:  times,
		},
		ParamsKey: MoqUsual_Times_paramsKey{
			SParam: sParam,
			Times:  times,
		},
		Sequence: m.Moq.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m.Moq,
	}
}

func (r *MoqUsual_Times_fnRecorder) Any() *MoqUsual_Times_anyParams {
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, parameters: %#v", r.Params)
		return nil
	}
	return &MoqUsual_Times_anyParams{Recorder: r}
}

func (a *MoqUsual_Times_anyParams) SParam() *MoqUsual_Times_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqUsual_Times_anyParams) Times() *MoqUsual_Times_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (r *MoqUsual_Times_fnRecorder) Seq() *MoqUsual_Times_fnRecorder {
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, parameters: %#v", r.Params)
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqUsual_Times_fnRecorder) NoSeq() *MoqUsual_Times_fnRecorder {
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, parameters: %#v", r.Params)
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqUsual_Times_fnRecorder) ReturnResults(sResult string, err error) *MoqUsual_Times_fnRecorder {
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			SResult string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqUsual_Times_doFn
		DoReturnFn MoqUsual_Times_doReturnFn
	}{
		Values: &struct {
			SResult string
			Err     error
		}{
			SResult: sResult,
			Err:     err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqUsual_Times_fnRecorder) AndDo(fn MoqUsual_Times_doFn) *MoqUsual_Times_fnRecorder {
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqUsual_Times_fnRecorder) DoReturnResults(fn MoqUsual_Times_doReturnFn) *MoqUsual_Times_fnRecorder {
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			SResult string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqUsual_Times_doFn
		DoReturnFn MoqUsual_Times_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqUsual_Times_fnRecorder) FindResults() {
	if r.Results == nil {
		anyCount := bits.OnesCount64(r.AnyParams)
		insertAt := -1
		var results *MoqUsual_Times_resultsByParams
		for n, res := range r.Moq.ResultsByParams_Times {
			if res.AnyParams == r.AnyParams {
				results = &res
				break
			}
			if res.AnyCount > anyCount {
				insertAt = n
			}
		}
		if results == nil {
			results = &MoqUsual_Times_resultsByParams{
				AnyCount:  anyCount,
				AnyParams: r.AnyParams,
				Results:   map[MoqUsual_Times_paramsKey]*MoqUsual_Times_results{},
			}
			r.Moq.ResultsByParams_Times = append(r.Moq.ResultsByParams_Times, *results)
			if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams_Times) {
				copy(r.Moq.ResultsByParams_Times[insertAt+1:], r.Moq.ResultsByParams_Times[insertAt:0])
				r.Moq.ResultsByParams_Times[insertAt] = *results
			}
		}

		var sParamUsed string
		if r.AnyParams&(1<<0) == 0 {
			sParamUsed = r.ParamsKey.SParam
		}
		var timesUsed bool
		if r.AnyParams&(1<<1) == 0 {
			timesUsed = r.ParamsKey.Times
		}
		paramsKey := MoqUsual_Times_paramsKey{
			SParam: sParamUsed,
			Times:  timesUsed,
		}

		var ok bool
		r.Results, ok = results.Results[paramsKey]
		if !ok {
			r.Results = &MoqUsual_Times_results{
				Params:   r.Params,
				Results:  nil,
				Index:    0,
				AnyTimes: false,
			}
			results.Results[paramsKey] = r.Results
		}
	}
}

func (r *MoqUsual_Times_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqUsual_Times_fnRecorder {
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	repeat := moq.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < repeat.MaxTimes-1; n++ {
		if last.Sequence != 0 {
			last = struct {
				Values *struct {
					SResult string
					Err     error
				}
				Sequence   uint32
				DoFn       MoqUsual_Times_doFn
				DoReturnFn MoqUsual_Times_doReturnFn
			}{
				Values: &struct {
					SResult string
					Err     error
				}{
					SResult: last.Values.SResult,
					Err:     last.Values.Err,
				},
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	r.Results.AnyTimes = repeat.AnyTimes
	return r
}

// Reset resets the state of the moq
func (m *MoqUsual) Reset() {
	m.ResultsByParams_Usual = nil
	m.ResultsByParams_NoNames = nil
	m.ResultsByParams_NoResults = nil
	m.ResultsByParams_NoParams = nil
	m.ResultsByParams_Nothing = nil
	m.ResultsByParams_Variadic = nil
	m.ResultsByParams_RepeatedIds = nil
	m.ResultsByParams_Times = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqUsual) AssertExpectationsMet() {
	for _, res := range m.ResultsByParams_Usual {
		for _, results := range res.Results {
			missing := len(results.Results) - int(atomic.LoadUint32(&results.Index))
			if missing == 1 && results.AnyTimes == true {
				continue
			}
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.Params)
			}
		}
	}
	for _, res := range m.ResultsByParams_NoNames {
		for _, results := range res.Results {
			missing := len(results.Results) - int(atomic.LoadUint32(&results.Index))
			if missing == 1 && results.AnyTimes == true {
				continue
			}
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.Params)
			}
		}
	}
	for _, res := range m.ResultsByParams_NoResults {
		for _, results := range res.Results {
			missing := len(results.Results) - int(atomic.LoadUint32(&results.Index))
			if missing == 1 && results.AnyTimes == true {
				continue
			}
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.Params)
			}
		}
	}
	for _, res := range m.ResultsByParams_NoParams {
		for _, results := range res.Results {
			missing := len(results.Results) - int(atomic.LoadUint32(&results.Index))
			if missing == 1 && results.AnyTimes == true {
				continue
			}
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.Params)
			}
		}
	}
	for _, res := range m.ResultsByParams_Nothing {
		for _, results := range res.Results {
			missing := len(results.Results) - int(atomic.LoadUint32(&results.Index))
			if missing == 1 && results.AnyTimes == true {
				continue
			}
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.Params)
			}
		}
	}
	for _, res := range m.ResultsByParams_Variadic {
		for _, results := range res.Results {
			missing := len(results.Results) - int(atomic.LoadUint32(&results.Index))
			if missing == 1 && results.AnyTimes == true {
				continue
			}
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.Params)
			}
		}
	}
	for _, res := range m.ResultsByParams_RepeatedIds {
		for _, results := range res.Results {
			missing := len(results.Results) - int(atomic.LoadUint32(&results.Index))
			if missing == 1 && results.AnyTimes == true {
				continue
			}
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.Params)
			}
		}
	}
	for _, res := range m.ResultsByParams_Times {
		for _, results := range res.Results {
			missing := len(results.Results) - int(atomic.LoadUint32(&results.Index))
			if missing == 1 && results.AnyTimes == true {
				continue
			}
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.Params)
			}
		}
	}
}
