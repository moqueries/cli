// Code generated by Moqueries - https://github.com/myshkin5/moqueries - DO NOT EDIT!

package exported

import (
	"math/bits"
	"sync/atomic"

	"github.com/myshkin5/moqueries/generator/testmoqs"
	"github.com/myshkin5/moqueries/hash"
	"github.com/myshkin5/moqueries/moq"
)

// MoqVariadicFn holds the state of a moq of the VariadicFn type
type MoqVariadicFn struct {
	Scene           *moq.Scene
	Config          moq.Config
	ResultsByParams []MoqVariadicFn_resultsByParams
}

// MoqVariadicFn_mock isolates the mock interface of the VariadicFn type
type MoqVariadicFn_mock struct {
	Moq *MoqVariadicFn
}

// MoqVariadicFn_params holds the params of the VariadicFn type
type MoqVariadicFn_params struct {
	Other bool
	Args  []string
}

// MoqVariadicFn_paramsKey holds the map key params of the VariadicFn type
type MoqVariadicFn_paramsKey struct {
	Other bool
	Args  hash.Hash
}

// MoqVariadicFn_resultsByParams contains the results for a given set of parameters for the VariadicFn type
type MoqVariadicFn_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqVariadicFn_paramsKey]*MoqVariadicFn_results
}

// MoqVariadicFn_doFn defines the type of function needed when calling AndDo for the VariadicFn type
type MoqVariadicFn_doFn func(other bool, args ...string)

// MoqVariadicFn_doReturnFn defines the type of function needed when calling DoReturnResults for the VariadicFn type
type MoqVariadicFn_doReturnFn func(other bool, args ...string) (sResult string, err error)

// MoqVariadicFn_results holds the results of the VariadicFn type
type MoqVariadicFn_results struct {
	Params  MoqVariadicFn_params
	Results []struct {
		Values *struct {
			SResult string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqVariadicFn_doFn
		DoReturnFn MoqVariadicFn_doReturnFn
	}
	Index    uint32
	AnyTimes bool
}

// MoqVariadicFn_fnRecorder routes recorded function calls to the MoqVariadicFn moq
type MoqVariadicFn_fnRecorder struct {
	Params    MoqVariadicFn_params
	ParamsKey MoqVariadicFn_paramsKey
	AnyParams uint64
	Sequence  bool
	Results   *MoqVariadicFn_results
	Moq       *MoqVariadicFn
}

// NewMoqVariadicFn creates a new moq of the VariadicFn type
func NewMoqVariadicFn(scene *moq.Scene, config *moq.Config) *MoqVariadicFn {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqVariadicFn{
		Scene:  scene,
		Config: *config,
	}
	scene.AddMoq(m)
	return m
}

// Mock returns the moq implementation of the VariadicFn type
func (m *MoqVariadicFn) Mock() testmoqs.VariadicFn {
	return func(other bool, args ...string) (sResult string, err error) {
		moq := &MoqVariadicFn_mock{Moq: m}
		return moq.Fn(other, args...)
	}
}

func (m *MoqVariadicFn_mock) Fn(other bool, args ...string) (sResult string, err error) {
	params := MoqVariadicFn_params{
		Other: other,
		Args:  args,
	}
	var results *MoqVariadicFn_results
	for _, resultsByParams := range m.Moq.ResultsByParams {
		var otherUsed bool
		if resultsByParams.AnyParams&(1<<0) == 0 {
			otherUsed = other
		}
		var argsUsed hash.Hash
		if resultsByParams.AnyParams&(1<<1) == 0 {
			argsUsed = hash.DeepHash(args)
		}
		paramsKey := MoqVariadicFn_paramsKey{
			Other: otherUsed,
			Args:  argsUsed,
		}
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= len(results.Results) {
		if !results.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = len(results.Results) - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match %#v", params)
		}
	}

	if result.DoFn != nil {
		result.DoFn(other, args...)
	}

	if result.Values != nil {
		sResult = result.Values.SResult
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		sResult, err = result.DoReturnFn(other, args...)
	}
	return
}

func (m *MoqVariadicFn) OnCall(other bool, args ...string) *MoqVariadicFn_fnRecorder {
	return &MoqVariadicFn_fnRecorder{
		Params: MoqVariadicFn_params{
			Other: other,
			Args:  args,
		},
		ParamsKey: MoqVariadicFn_paramsKey{
			Other: other,
			Args:  hash.DeepHash(args),
		},
		Sequence: m.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m,
	}
}

func (r *MoqVariadicFn_fnRecorder) AnyOther() *MoqVariadicFn_fnRecorder {
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, parameters: %#v", r.Params)
		return nil
	}
	r.AnyParams |= 1 << 0
	return r
}

func (r *MoqVariadicFn_fnRecorder) AnyArgs() *MoqVariadicFn_fnRecorder {
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, parameters: %#v", r.Params)
		return nil
	}
	r.AnyParams |= 1 << 1
	return r
}

func (r *MoqVariadicFn_fnRecorder) Seq() *MoqVariadicFn_fnRecorder {
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, parameters: %#v", r.Params)
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqVariadicFn_fnRecorder) NoSeq() *MoqVariadicFn_fnRecorder {
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, parameters: %#v", r.Params)
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqVariadicFn_fnRecorder) ReturnResults(sResult string, err error) *MoqVariadicFn_fnRecorder {
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			SResult string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqVariadicFn_doFn
		DoReturnFn MoqVariadicFn_doReturnFn
	}{
		Values: &struct {
			SResult string
			Err     error
		}{
			SResult: sResult,
			Err:     err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqVariadicFn_fnRecorder) AndDo(fn MoqVariadicFn_doFn) *MoqVariadicFn_fnRecorder {
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqVariadicFn_fnRecorder) DoReturnResults(fn MoqVariadicFn_doReturnFn) *MoqVariadicFn_fnRecorder {
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			SResult string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqVariadicFn_doFn
		DoReturnFn MoqVariadicFn_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqVariadicFn_fnRecorder) FindResults() {
	if r.Results == nil {
		anyCount := bits.OnesCount64(r.AnyParams)
		insertAt := -1
		var results *MoqVariadicFn_resultsByParams
		for n, res := range r.Moq.ResultsByParams {
			if res.AnyParams == r.AnyParams {
				results = &res
				break
			}
			if res.AnyCount > anyCount {
				insertAt = n
			}
		}
		if results == nil {
			results = &MoqVariadicFn_resultsByParams{
				AnyCount:  anyCount,
				AnyParams: r.AnyParams,
				Results:   map[MoqVariadicFn_paramsKey]*MoqVariadicFn_results{},
			}
			r.Moq.ResultsByParams = append(r.Moq.ResultsByParams, *results)
			if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams) {
				copy(r.Moq.ResultsByParams[insertAt+1:], r.Moq.ResultsByParams[insertAt:0])
				r.Moq.ResultsByParams[insertAt] = *results
			}
		}

		var otherUsed bool
		if r.AnyParams&(1<<0) == 0 {
			otherUsed = r.ParamsKey.Other
		}
		var argsUsed hash.Hash
		if r.AnyParams&(1<<1) == 0 {
			argsUsed = r.ParamsKey.Args
		}
		paramsKey := MoqVariadicFn_paramsKey{
			Other: otherUsed,
			Args:  argsUsed,
		}

		var ok bool
		r.Results, ok = results.Results[paramsKey]
		if !ok {
			r.Results = &MoqVariadicFn_results{
				Params:   r.Params,
				Results:  nil,
				Index:    0,
				AnyTimes: false,
			}
			results.Results[paramsKey] = r.Results
		}
	}
}

func (r *MoqVariadicFn_fnRecorder) Times(count int) *MoqVariadicFn_fnRecorder {
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Times")
		return nil
	}
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < count-1; n++ {
		if last.Sequence != 0 {
			last = struct {
				Values *struct {
					SResult string
					Err     error
				}
				Sequence   uint32
				DoFn       MoqVariadicFn_doFn
				DoReturnFn MoqVariadicFn_doReturnFn
			}{
				Values: &struct {
					SResult string
					Err     error
				}{
					SResult: last.Values.SResult,
					Err:     last.Values.Err,
				},
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (r *MoqVariadicFn_fnRecorder) AnyTimes() {
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling AnyTimes")
		return
	}
	r.Results.AnyTimes = true
}

// Reset resets the state of the moq
func (m *MoqVariadicFn) Reset() { m.ResultsByParams = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqVariadicFn) AssertExpectationsMet() {
	for _, res := range m.ResultsByParams {
		for _, results := range res.Results {
			missing := len(results.Results) - int(atomic.LoadUint32(&results.Index))
			if missing == 1 && results.AnyTimes == true {
				continue
			}
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.Params)
			}
		}
	}
}
