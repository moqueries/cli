// Code generated by Moqueries - https://github.com/myshkin5/moqueries - DO NOT EDIT!

package exported

import (
	"math/bits"
	"sync/atomic"

	"github.com/myshkin5/moqueries/generator/testmoqs"
	"github.com/myshkin5/moqueries/moq"
)

// MoqDifficultParamNamesFn holds the state of a moq of the DifficultParamNamesFn type
type MoqDifficultParamNamesFn struct {
	Scene           *moq.Scene
	Config          moq.Config
	ResultsByParams []MoqDifficultParamNamesFn_resultsByParams
}

// MoqDifficultParamNamesFn_mock isolates the mock interface of the DifficultParamNamesFn type
type MoqDifficultParamNamesFn_mock struct {
	Moq *MoqDifficultParamNamesFn
}

// MoqDifficultParamNamesFn_params holds the params of the DifficultParamNamesFn type
type MoqDifficultParamNamesFn_params struct {
	Param1, Param2 bool
	Param3         string
	Param, Param5  int
	Param6, Param7 float32
}

// MoqDifficultParamNamesFn_paramsKey holds the map key params of the DifficultParamNamesFn type
type MoqDifficultParamNamesFn_paramsKey struct {
	Param1, Param2 bool
	Param3         string
	Param, Param5  int
	Param6, Param7 float32
}

// MoqDifficultParamNamesFn_resultsByParams contains the results for a given set of parameters for the DifficultParamNamesFn type
type MoqDifficultParamNamesFn_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqDifficultParamNamesFn_paramsKey]*MoqDifficultParamNamesFn_results
}

// MoqDifficultParamNamesFn_doFn defines the type of function needed when calling AndDo for the DifficultParamNamesFn type
type MoqDifficultParamNamesFn_doFn func(m, r bool, sequence string, param, params int, result, results float32)

// MoqDifficultParamNamesFn_doReturnFn defines the type of function needed when calling DoReturnResults for the DifficultParamNamesFn type
type MoqDifficultParamNamesFn_doReturnFn func(m, r bool, sequence string, param, params int, result, results float32)

// MoqDifficultParamNamesFn_results holds the results of the DifficultParamNamesFn type
type MoqDifficultParamNamesFn_results struct {
	Params  MoqDifficultParamNamesFn_params
	Results []struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqDifficultParamNamesFn_doFn
		DoReturnFn MoqDifficultParamNamesFn_doReturnFn
	}
	Index  uint32
	Repeat *moq.RepeatVal
}

// MoqDifficultParamNamesFn_fnRecorder routes recorded function calls to the MoqDifficultParamNamesFn moq
type MoqDifficultParamNamesFn_fnRecorder struct {
	Params    MoqDifficultParamNamesFn_params
	ParamsKey MoqDifficultParamNamesFn_paramsKey
	AnyParams uint64
	Sequence  bool
	Results   *MoqDifficultParamNamesFn_results
	Moq       *MoqDifficultParamNamesFn
}

// MoqDifficultParamNamesFn_anyParams isolates the any params functions of the DifficultParamNamesFn type
type MoqDifficultParamNamesFn_anyParams struct {
	Recorder *MoqDifficultParamNamesFn_fnRecorder
}

// NewMoqDifficultParamNamesFn creates a new moq of the DifficultParamNamesFn type
func NewMoqDifficultParamNamesFn(scene *moq.Scene, config *moq.Config) *MoqDifficultParamNamesFn {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqDifficultParamNamesFn{
		Scene:  scene,
		Config: *config,
	}
	scene.AddMoq(m)
	return m
}

// Mock returns the moq implementation of the DifficultParamNamesFn type
func (m *MoqDifficultParamNamesFn) Mock() testmoqs.DifficultParamNamesFn {
	return func(param1, param2 bool, param3 string, param, param5 int, param6, param7 float32) {
		moq := &MoqDifficultParamNamesFn_mock{Moq: m}
		moq.Fn(param1, param2, param3, param, param5, param6, param7)
	}
}

func (m *MoqDifficultParamNamesFn_mock) Fn(param1, param2 bool, param3 string, param, param5 int, param6, param7 float32) {
	params := MoqDifficultParamNamesFn_params{
		Param1: param1,
		Param2: param2,
		Param3: param3,
		Param:  param,
		Param5: param5,
		Param6: param6,
		Param7: param7,
	}
	var results *MoqDifficultParamNamesFn_results
	for _, resultsByParams := range m.Moq.ResultsByParams {
		var param1Used bool
		if resultsByParams.AnyParams&(1<<0) == 0 {
			param1Used = param1
		}
		var param2Used bool
		if resultsByParams.AnyParams&(1<<1) == 0 {
			param2Used = param2
		}
		var param3Used string
		if resultsByParams.AnyParams&(1<<2) == 0 {
			param3Used = param3
		}
		var paramUsed int
		if resultsByParams.AnyParams&(1<<3) == 0 {
			paramUsed = param
		}
		var param5Used int
		if resultsByParams.AnyParams&(1<<4) == 0 {
			param5Used = param5
		}
		var param6Used float32
		if resultsByParams.AnyParams&(1<<5) == 0 {
			param6Used = param6
		}
		var param7Used float32
		if resultsByParams.AnyParams&(1<<6) == 0 {
			param7Used = param7
		}
		paramsKey := MoqDifficultParamNamesFn_paramsKey{
			Param1: param1Used,
			Param2: param2Used,
			Param3: param3Used,
			Param:  paramUsed,
			Param5: param5Used,
			Param6: param6Used,
			Param7: param7Used,
		}
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= results.Repeat.ResultCount {
		if !results.Repeat.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = results.Repeat.ResultCount - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.Repeat.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match %#v", params)
		}
	}

	if result.DoFn != nil {
		result.DoFn(param1, param2, param3, param, param5, param6, param7)
	}

	if result.DoReturnFn != nil {
		result.DoReturnFn(param1, param2, param3, param, param5, param6, param7)
	}
	return
}

func (m *MoqDifficultParamNamesFn) OnCall(param1, param2 bool, param3 string, param, param5 int, param6, param7 float32) *MoqDifficultParamNamesFn_fnRecorder {
	return &MoqDifficultParamNamesFn_fnRecorder{
		Params: MoqDifficultParamNamesFn_params{
			Param1: param1,
			Param2: param2,
			Param3: param3,
			Param:  param,
			Param5: param5,
			Param6: param6,
			Param7: param7,
		},
		ParamsKey: MoqDifficultParamNamesFn_paramsKey{
			Param1: param1,
			Param2: param2,
			Param3: param3,
			Param:  param,
			Param5: param5,
			Param6: param6,
			Param7: param7,
		},
		Sequence: m.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m,
	}
}

func (r *MoqDifficultParamNamesFn_fnRecorder) Any() *MoqDifficultParamNamesFn_anyParams {
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, parameters: %#v", r.Params)
		return nil
	}
	return &MoqDifficultParamNamesFn_anyParams{Recorder: r}
}

func (a *MoqDifficultParamNamesFn_anyParams) Param1() *MoqDifficultParamNamesFn_fnRecorder {
	a.Recorder.AnyParams |= 1 << 0
	return a.Recorder
}

func (a *MoqDifficultParamNamesFn_anyParams) Param2() *MoqDifficultParamNamesFn_fnRecorder {
	a.Recorder.AnyParams |= 1 << 1
	return a.Recorder
}

func (a *MoqDifficultParamNamesFn_anyParams) Param3() *MoqDifficultParamNamesFn_fnRecorder {
	a.Recorder.AnyParams |= 1 << 2
	return a.Recorder
}

func (a *MoqDifficultParamNamesFn_anyParams) Param() *MoqDifficultParamNamesFn_fnRecorder {
	a.Recorder.AnyParams |= 1 << 3
	return a.Recorder
}

func (a *MoqDifficultParamNamesFn_anyParams) Param5() *MoqDifficultParamNamesFn_fnRecorder {
	a.Recorder.AnyParams |= 1 << 4
	return a.Recorder
}

func (a *MoqDifficultParamNamesFn_anyParams) Param6() *MoqDifficultParamNamesFn_fnRecorder {
	a.Recorder.AnyParams |= 1 << 5
	return a.Recorder
}

func (a *MoqDifficultParamNamesFn_anyParams) Param7() *MoqDifficultParamNamesFn_fnRecorder {
	a.Recorder.AnyParams |= 1 << 6
	return a.Recorder
}

func (r *MoqDifficultParamNamesFn_fnRecorder) Seq() *MoqDifficultParamNamesFn_fnRecorder {
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, parameters: %#v", r.Params)
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqDifficultParamNamesFn_fnRecorder) NoSeq() *MoqDifficultParamNamesFn_fnRecorder {
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, parameters: %#v", r.Params)
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqDifficultParamNamesFn_fnRecorder) ReturnResults() *MoqDifficultParamNamesFn_fnRecorder {
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqDifficultParamNamesFn_doFn
		DoReturnFn MoqDifficultParamNamesFn_doReturnFn
	}{
		Values:   &struct{}{},
		Sequence: sequence,
	})
	return r
}

func (r *MoqDifficultParamNamesFn_fnRecorder) AndDo(fn MoqDifficultParamNamesFn_doFn) *MoqDifficultParamNamesFn_fnRecorder {
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqDifficultParamNamesFn_fnRecorder) DoReturnResults(fn MoqDifficultParamNamesFn_doReturnFn) *MoqDifficultParamNamesFn_fnRecorder {
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values     *struct{}
		Sequence   uint32
		DoFn       MoqDifficultParamNamesFn_doFn
		DoReturnFn MoqDifficultParamNamesFn_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqDifficultParamNamesFn_fnRecorder) FindResults() {
	if r.Results == nil {
		anyCount := bits.OnesCount64(r.AnyParams)
		insertAt := -1
		var results *MoqDifficultParamNamesFn_resultsByParams
		for n, res := range r.Moq.ResultsByParams {
			if res.AnyParams == r.AnyParams {
				results = &res
				break
			}
			if res.AnyCount > anyCount {
				insertAt = n
			}
		}
		if results == nil {
			results = &MoqDifficultParamNamesFn_resultsByParams{
				AnyCount:  anyCount,
				AnyParams: r.AnyParams,
				Results:   map[MoqDifficultParamNamesFn_paramsKey]*MoqDifficultParamNamesFn_results{},
			}
			r.Moq.ResultsByParams = append(r.Moq.ResultsByParams, *results)
			if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams) {
				copy(r.Moq.ResultsByParams[insertAt+1:], r.Moq.ResultsByParams[insertAt:0])
				r.Moq.ResultsByParams[insertAt] = *results
			}
		}

		var param1Used bool
		if r.AnyParams&(1<<0) == 0 {
			param1Used = r.ParamsKey.Param1
		}
		var param2Used bool
		if r.AnyParams&(1<<1) == 0 {
			param2Used = r.ParamsKey.Param2
		}
		var param3Used string
		if r.AnyParams&(1<<2) == 0 {
			param3Used = r.ParamsKey.Param3
		}
		var paramUsed int
		if r.AnyParams&(1<<3) == 0 {
			paramUsed = r.ParamsKey.Param
		}
		var param5Used int
		if r.AnyParams&(1<<4) == 0 {
			param5Used = r.ParamsKey.Param5
		}
		var param6Used float32
		if r.AnyParams&(1<<5) == 0 {
			param6Used = r.ParamsKey.Param6
		}
		var param7Used float32
		if r.AnyParams&(1<<6) == 0 {
			param7Used = r.ParamsKey.Param7
		}
		paramsKey := MoqDifficultParamNamesFn_paramsKey{
			Param1: param1Used,
			Param2: param2Used,
			Param3: param3Used,
			Param:  paramUsed,
			Param5: param5Used,
			Param6: param6Used,
			Param7: param7Used,
		}

		var ok bool
		r.Results, ok = results.Results[paramsKey]
		if !ok {
			r.Results = &MoqDifficultParamNamesFn_results{
				Params:  r.Params,
				Results: nil,
				Index:   0,
				Repeat:  &moq.RepeatVal{},
			}
			results.Results[paramsKey] = r.Results
		}
	}
	r.Results.Repeat.Increment(r.Moq.Scene.T)
}

func (r *MoqDifficultParamNamesFn_fnRecorder) Repeat(repeaters ...moq.Repeater) *MoqDifficultParamNamesFn_fnRecorder {
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Repeat")
		return nil
	}
	r.Results.Repeat.Repeat(r.Moq.Scene.T, repeaters)
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < r.Results.Repeat.ResultCount-1; n++ {
		if r.Sequence {
			last = struct {
				Values     *struct{}
				Sequence   uint32
				DoFn       MoqDifficultParamNamesFn_doFn
				DoReturnFn MoqDifficultParamNamesFn_doReturnFn
			}{
				Values:   &struct{}{},
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

// Reset resets the state of the moq
func (m *MoqDifficultParamNamesFn) Reset() { m.ResultsByParams = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqDifficultParamNamesFn) AssertExpectationsMet() {
	for _, res := range m.ResultsByParams {
		for _, results := range res.Results {
			missing := results.Repeat.MinTimes - int(atomic.LoadUint32(&results.Index))
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.Params)
			}
		}
	}
}
