// Code generated by Moqueries - https://github.com/myshkin5/moqueries - DO NOT EDIT!

package exported

import (
	"math/bits"
	"sync/atomic"

	"github.com/myshkin5/moqueries/generator/testmoqs"
	"github.com/myshkin5/moqueries/moq"
)

// MoqUsualFn holds the state of a moq of the UsualFn type
type MoqUsualFn struct {
	Scene           *moq.Scene
	Config          moq.Config
	ResultsByParams []MoqUsualFn_resultsByParams
}

// MoqUsualFn_mock isolates the mock interface of the UsualFn type
type MoqUsualFn_mock struct {
	Moq *MoqUsualFn
}

// MoqUsualFn_params holds the params of the UsualFn type
type MoqUsualFn_params struct {
	SParam string
	BParam bool
}

// MoqUsualFn_paramsKey holds the map key params of the UsualFn type
type MoqUsualFn_paramsKey struct {
	SParam string
	BParam bool
}

// MoqUsualFn_resultsByParams contains the results for a given set of parameters for the UsualFn type
type MoqUsualFn_resultsByParams struct {
	AnyCount  int
	AnyParams uint64
	Results   map[MoqUsualFn_paramsKey]*MoqUsualFn_results
}

// MoqUsualFn_doFn defines the type of function needed when calling AndDo for the UsualFn type
type MoqUsualFn_doFn func(sParam string, bParam bool)

// MoqUsualFn_doReturnFn defines the type of function needed when calling DoReturnResults for the UsualFn type
type MoqUsualFn_doReturnFn func(sParam string, bParam bool) (sResult string, err error)

// MoqUsualFn_results holds the results of the UsualFn type
type MoqUsualFn_results struct {
	Params  MoqUsualFn_params
	Results []struct {
		Values *struct {
			SResult string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqUsualFn_doFn
		DoReturnFn MoqUsualFn_doReturnFn
	}
	Index    uint32
	AnyTimes bool
}

// MoqUsualFn_fnRecorder routes recorded function calls to the MoqUsualFn moq
type MoqUsualFn_fnRecorder struct {
	Params    MoqUsualFn_params
	ParamsKey MoqUsualFn_paramsKey
	AnyParams uint64
	Sequence  bool
	Results   *MoqUsualFn_results
	Moq       *MoqUsualFn
}

// NewMoqUsualFn creates a new moq of the UsualFn type
func NewMoqUsualFn(scene *moq.Scene, config *moq.Config) *MoqUsualFn {
	if config == nil {
		config = &moq.Config{}
	}
	m := &MoqUsualFn{
		Scene:  scene,
		Config: *config,
	}
	scene.AddMoq(m)
	return m
}

// Mock returns the moq implementation of the UsualFn type
func (m *MoqUsualFn) Mock() testmoqs.UsualFn {
	return func(sParam string, bParam bool) (sResult string, err error) {
		moq := &MoqUsualFn_mock{Moq: m}
		return moq.Fn(sParam, bParam)
	}
}

func (m *MoqUsualFn_mock) Fn(sParam string, bParam bool) (sResult string, err error) {
	params := MoqUsualFn_params{
		SParam: sParam,
		BParam: bParam,
	}
	var results *MoqUsualFn_results
	for _, resultsByParams := range m.Moq.ResultsByParams {
		var sParamUsed string
		if resultsByParams.AnyParams&(1<<0) == 0 {
			sParamUsed = sParam
		}
		var bParamUsed bool
		if resultsByParams.AnyParams&(1<<1) == 0 {
			bParamUsed = bParam
		}
		paramsKey := MoqUsualFn_paramsKey{
			SParam: sParamUsed,
			BParam: bParamUsed,
		}
		var ok bool
		results, ok = resultsByParams.Results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.Moq.Config.Expectation == moq.Strict {
			m.Moq.Scene.T.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.Index, 1)) - 1
	if i >= len(results.Results) {
		if !results.AnyTimes {
			if m.Moq.Config.Expectation == moq.Strict {
				m.Moq.Scene.T.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = len(results.Results) - 1
	}

	result := results.Results[i]
	if result.Sequence != 0 {
		sequence := m.Moq.Scene.NextMockSequence()
		if (!results.AnyTimes && result.Sequence != sequence) || result.Sequence > sequence {
			m.Moq.Scene.T.Fatalf("Call sequence does not match %#v", params)
		}
	}

	if result.DoFn != nil {
		result.DoFn(sParam, bParam)
	}

	if result.Values != nil {
		sResult = result.Values.SResult
		err = result.Values.Err
	}
	if result.DoReturnFn != nil {
		sResult, err = result.DoReturnFn(sParam, bParam)
	}
	return
}

func (m *MoqUsualFn) OnCall(sParam string, bParam bool) *MoqUsualFn_fnRecorder {
	return &MoqUsualFn_fnRecorder{
		Params: MoqUsualFn_params{
			SParam: sParam,
			BParam: bParam,
		},
		ParamsKey: MoqUsualFn_paramsKey{
			SParam: sParam,
			BParam: bParam,
		},
		Sequence: m.Config.Sequence == moq.SeqDefaultOn,
		Moq:      m,
	}
}

func (r *MoqUsualFn_fnRecorder) AnySParam() *MoqUsualFn_fnRecorder {
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, parameters: %#v", r.Params)
		return nil
	}
	r.AnyParams |= 1 << 0
	return r
}

func (r *MoqUsualFn_fnRecorder) AnyBParam() *MoqUsualFn_fnRecorder {
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Any functions must be called before ReturnResults or DoReturnResults calls, parameters: %#v", r.Params)
		return nil
	}
	r.AnyParams |= 1 << 1
	return r
}

func (r *MoqUsualFn_fnRecorder) Seq() *MoqUsualFn_fnRecorder {
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("Seq must be called before ReturnResults or DoReturnResults calls, parameters: %#v", r.Params)
		return nil
	}
	r.Sequence = true
	return r
}

func (r *MoqUsualFn_fnRecorder) NoSeq() *MoqUsualFn_fnRecorder {
	if r.Results != nil {
		r.Moq.Scene.T.Fatalf("NoSeq must be called before ReturnResults or DoReturnResults calls, parameters: %#v", r.Params)
		return nil
	}
	r.Sequence = false
	return r
}

func (r *MoqUsualFn_fnRecorder) ReturnResults(sResult string, err error) *MoqUsualFn_fnRecorder {
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			SResult string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqUsualFn_doFn
		DoReturnFn MoqUsualFn_doReturnFn
	}{
		Values: &struct {
			SResult string
			Err     error
		}{
			SResult: sResult,
			Err:     err,
		},
		Sequence: sequence,
	})
	return r
}

func (r *MoqUsualFn_fnRecorder) AndDo(fn MoqUsualFn_doFn) *MoqUsualFn_fnRecorder {
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults must be called before calling AndDo")
		return nil
	}
	last := &r.Results.Results[len(r.Results.Results)-1]
	last.DoFn = fn
	return r
}

func (r *MoqUsualFn_fnRecorder) DoReturnResults(fn MoqUsualFn_doReturnFn) *MoqUsualFn_fnRecorder {
	r.FindResults()

	var sequence uint32
	if r.Sequence {
		sequence = r.Moq.Scene.NextRecorderSequence()
	}

	r.Results.Results = append(r.Results.Results, struct {
		Values *struct {
			SResult string
			Err     error
		}
		Sequence   uint32
		DoFn       MoqUsualFn_doFn
		DoReturnFn MoqUsualFn_doReturnFn
	}{Sequence: sequence, DoReturnFn: fn})
	return r
}

func (r *MoqUsualFn_fnRecorder) FindResults() {
	if r.Results == nil {
		anyCount := bits.OnesCount64(r.AnyParams)
		insertAt := -1
		var results *MoqUsualFn_resultsByParams
		for n, res := range r.Moq.ResultsByParams {
			if res.AnyParams == r.AnyParams {
				results = &res
				break
			}
			if res.AnyCount > anyCount {
				insertAt = n
			}
		}
		if results == nil {
			results = &MoqUsualFn_resultsByParams{
				AnyCount:  anyCount,
				AnyParams: r.AnyParams,
				Results:   map[MoqUsualFn_paramsKey]*MoqUsualFn_results{},
			}
			r.Moq.ResultsByParams = append(r.Moq.ResultsByParams, *results)
			if insertAt != -1 && insertAt+1 < len(r.Moq.ResultsByParams) {
				copy(r.Moq.ResultsByParams[insertAt+1:], r.Moq.ResultsByParams[insertAt:0])
				r.Moq.ResultsByParams[insertAt] = *results
			}
		}

		var sParamUsed string
		if r.AnyParams&(1<<0) == 0 {
			sParamUsed = r.ParamsKey.SParam
		}
		var bParamUsed bool
		if r.AnyParams&(1<<1) == 0 {
			bParamUsed = r.ParamsKey.BParam
		}
		paramsKey := MoqUsualFn_paramsKey{
			SParam: sParamUsed,
			BParam: bParamUsed,
		}

		var ok bool
		r.Results, ok = results.Results[paramsKey]
		if !ok {
			r.Results = &MoqUsualFn_results{
				Params:   r.Params,
				Results:  nil,
				Index:    0,
				AnyTimes: false,
			}
			results.Results[paramsKey] = r.Results
		}
	}
}

func (r *MoqUsualFn_fnRecorder) Times(count int) *MoqUsualFn_fnRecorder {
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling Times")
		return nil
	}
	last := r.Results.Results[len(r.Results.Results)-1]
	for n := 0; n < count-1; n++ {
		if last.Sequence != 0 {
			last = struct {
				Values *struct {
					SResult string
					Err     error
				}
				Sequence   uint32
				DoFn       MoqUsualFn_doFn
				DoReturnFn MoqUsualFn_doReturnFn
			}{
				Values: &struct {
					SResult string
					Err     error
				}{
					SResult: last.Values.SResult,
					Err:     last.Values.Err,
				},
				Sequence: r.Moq.Scene.NextRecorderSequence(),
			}
		}
		r.Results.Results = append(r.Results.Results, last)
	}
	return r
}

func (r *MoqUsualFn_fnRecorder) AnyTimes() {
	if r.Results == nil {
		r.Moq.Scene.T.Fatalf("ReturnResults or DoReturnResults must be called before calling AnyTimes")
		return
	}
	r.Results.AnyTimes = true
}

// Reset resets the state of the moq
func (m *MoqUsualFn) Reset() { m.ResultsByParams = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *MoqUsualFn) AssertExpectationsMet() {
	for _, res := range m.ResultsByParams {
		for _, results := range res.Results {
			missing := len(results.Results) - int(atomic.LoadUint32(&results.Index))
			if missing == 1 && results.AnyTimes == true {
				continue
			}
			if missing > 0 {
				m.Scene.T.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.Params)
			}
		}
	}
}
