// Code generated by Moqueries - https://github.com/myshkin5/moqueries - DO NOT EDIT!

package testmoqs_test

import (
	"io"
	"math/bits"
	"sync/atomic"

	"github.com/myshkin5/moqueries/generator/testmoqs"
	"github.com/myshkin5/moqueries/hash"
	"github.com/myshkin5/moqueries/moq"
)

// moqInterfaceResultFn holds the state of a moq of the InterfaceResultFn type
type moqInterfaceResultFn struct {
	scene  *moq.Scene
	config moq.Config
	moq    *moqInterfaceResultFn_mock

	resultsByParams []moqInterfaceResultFn_resultsByParams

	runtime struct {
		parameterIndexing struct {
			sParam moq.ParamIndexing
			bParam moq.ParamIndexing
		}
	}
}

// moqInterfaceResultFn_mock isolates the mock interface of the InterfaceResultFn type
type moqInterfaceResultFn_mock struct {
	moq *moqInterfaceResultFn
}

// moqInterfaceResultFn_params holds the params of the InterfaceResultFn type
type moqInterfaceResultFn_params struct {
	sParam string
	bParam bool
}

// moqInterfaceResultFn_paramsKey holds the map key params of the InterfaceResultFn type
type moqInterfaceResultFn_paramsKey struct {
	params struct {
		sParam string
		bParam bool
	}
	hashes struct {
		sParam hash.Hash
		bParam hash.Hash
	}
}

// moqInterfaceResultFn_resultsByParams contains the results for a given set of parameters for the InterfaceResultFn type
type moqInterfaceResultFn_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqInterfaceResultFn_paramsKey]*moqInterfaceResultFn_results
}

// moqInterfaceResultFn_doFn defines the type of function needed when calling andDo for the InterfaceResultFn type
type moqInterfaceResultFn_doFn func(sParam string, bParam bool)

// moqInterfaceResultFn_doReturnFn defines the type of function needed when calling doReturnResults for the InterfaceResultFn type
type moqInterfaceResultFn_doReturnFn func(sParam string, bParam bool) (r io.Reader)

// moqInterfaceResultFn_results holds the results of the InterfaceResultFn type
type moqInterfaceResultFn_results struct {
	params  moqInterfaceResultFn_params
	results []struct {
		values     *struct{ result1 io.Reader }
		sequence   uint32
		doFn       moqInterfaceResultFn_doFn
		doReturnFn moqInterfaceResultFn_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqInterfaceResultFn_fnRecorder routes recorded function calls to the moqInterfaceResultFn moq
type moqInterfaceResultFn_fnRecorder struct {
	params    moqInterfaceResultFn_params
	anyParams uint64
	sequence  bool
	results   *moqInterfaceResultFn_results
	moq       *moqInterfaceResultFn
}

// moqInterfaceResultFn_anyParams isolates the any params functions of the InterfaceResultFn type
type moqInterfaceResultFn_anyParams struct {
	recorder *moqInterfaceResultFn_fnRecorder
}

// newMoqInterfaceResultFn creates a new moq of the InterfaceResultFn type
func newMoqInterfaceResultFn(scene *moq.Scene, config *moq.Config) *moqInterfaceResultFn {
	if config == nil {
		config = &moq.Config{}
	}
	m := &moqInterfaceResultFn{
		scene:  scene,
		config: *config,
		moq:    &moqInterfaceResultFn_mock{},

		runtime: struct {
			parameterIndexing struct {
				sParam moq.ParamIndexing
				bParam moq.ParamIndexing
			}
		}{parameterIndexing: struct {
			sParam moq.ParamIndexing
			bParam moq.ParamIndexing
		}{
			sParam: moq.ParamIndexByValue,
			bParam: moq.ParamIndexByValue,
		}},
	}
	m.moq.moq = m

	scene.AddMoq(m)
	return m
}

// mock returns the moq implementation of the InterfaceResultFn type
func (m *moqInterfaceResultFn) mock() testmoqs.InterfaceResultFn {
	return func(sParam string, bParam bool) (_ io.Reader) {
		moq := &moqInterfaceResultFn_mock{moq: m}
		return moq.fn(sParam, bParam)
	}
}

func (m *moqInterfaceResultFn_mock) fn(sParam string, bParam bool) (result1 io.Reader) {
	params := moqInterfaceResultFn_params{
		sParam: sParam,
		bParam: bParam,
	}
	var results *moqInterfaceResultFn_results
	for _, resultsByParams := range m.moq.resultsByParams {
		paramsKey := m.moq.paramsKey(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match %#v", params)
		}
	}

	if result.doFn != nil {
		result.doFn(sParam, bParam)
	}

	if result.values != nil {
		result1 = result.values.result1
	}
	if result.doReturnFn != nil {
		result1 = result.doReturnFn(sParam, bParam)
	}
	return
}

func (m *moqInterfaceResultFn) onCall(sParam string, bParam bool) *moqInterfaceResultFn_fnRecorder {
	return &moqInterfaceResultFn_fnRecorder{
		params: moqInterfaceResultFn_params{
			sParam: sParam,
			bParam: bParam,
		},
		sequence: m.config.Sequence == moq.SeqDefaultOn,
		moq:      m,
	}
}

func (r *moqInterfaceResultFn_fnRecorder) any() *moqInterfaceResultFn_anyParams {
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	return &moqInterfaceResultFn_anyParams{recorder: r}
}

func (a *moqInterfaceResultFn_anyParams) sParam() *moqInterfaceResultFn_fnRecorder {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (a *moqInterfaceResultFn_anyParams) bParam() *moqInterfaceResultFn_fnRecorder {
	a.recorder.anyParams |= 1 << 1
	return a.recorder
}

func (r *moqInterfaceResultFn_fnRecorder) seq() *moqInterfaceResultFn_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqInterfaceResultFn_fnRecorder) noSeq() *moqInterfaceResultFn_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqInterfaceResultFn_fnRecorder) returnResults(result1 io.Reader) *moqInterfaceResultFn_fnRecorder {
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values     *struct{ result1 io.Reader }
		sequence   uint32
		doFn       moqInterfaceResultFn_doFn
		doReturnFn moqInterfaceResultFn_doReturnFn
	}{
		values: &struct{ result1 io.Reader }{
			result1: result1,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqInterfaceResultFn_fnRecorder) andDo(fn moqInterfaceResultFn_doFn) *moqInterfaceResultFn_fnRecorder {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqInterfaceResultFn_fnRecorder) doReturnResults(fn moqInterfaceResultFn_doReturnFn) *moqInterfaceResultFn_fnRecorder {
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values     *struct{ result1 io.Reader }
		sequence   uint32
		doFn       moqInterfaceResultFn_doFn
		doReturnFn moqInterfaceResultFn_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqInterfaceResultFn_fnRecorder) findResults() {
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqInterfaceResultFn_resultsByParams
	for n, res := range r.moq.resultsByParams {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqInterfaceResultFn_resultsByParams{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqInterfaceResultFn_paramsKey]*moqInterfaceResultFn_results{},
		}
		r.moq.resultsByParams = append(r.moq.resultsByParams, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams) {
			copy(r.moq.resultsByParams[insertAt+1:], r.moq.resultsByParams[insertAt:0])
			r.moq.resultsByParams[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqInterfaceResultFn_results{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqInterfaceResultFn_fnRecorder) repeat(repeaters ...moq.Repeater) *moqInterfaceResultFn_fnRecorder {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values     *struct{ result1 io.Reader }
				sequence   uint32
				doFn       moqInterfaceResultFn_doFn
				doReturnFn moqInterfaceResultFn_doReturnFn
			}{
				values: &struct{ result1 io.Reader }{
					result1: last.values.result1,
				},
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqInterfaceResultFn) paramsKey(params moqInterfaceResultFn_params, anyParams uint64) moqInterfaceResultFn_paramsKey {
	var sParamUsed string
	var sParamUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.sParam == moq.ParamIndexByValue {
			sParamUsed = params.sParam
		} else {
			sParamUsedHash = hash.DeepHash(params.sParam)
		}
	}
	var bParamUsed bool
	var bParamUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.runtime.parameterIndexing.bParam == moq.ParamIndexByValue {
			bParamUsed = params.bParam
		} else {
			bParamUsedHash = hash.DeepHash(params.bParam)
		}
	}
	return moqInterfaceResultFn_paramsKey{
		params: struct {
			sParam string
			bParam bool
		}{
			sParam: sParamUsed,
			bParam: bParamUsed,
		},
		hashes: struct {
			sParam hash.Hash
			bParam hash.Hash
		}{
			sParam: sParamUsedHash,
			bParam: bParamUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *moqInterfaceResultFn) Reset() { m.resultsByParams = nil }

// AssertExpectationsMet asserts that all expectations have been met
func (m *moqInterfaceResultFn) AssertExpectationsMet() {
	for _, res := range m.resultsByParams {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.params)
			}
		}
	}
}
