// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT.

package generator_test

import (
	"fmt"

	"moqueries.org/cli/generator"
	"moqueries.org/runtime/impl"
	"moqueries.org/runtime/moq"
)

// moqGetwdFunc holds the state of a moq of the GetwdFunc type
type moqGetwdFunc struct {
	moq *impl.Moq[
		*moqGetwdFunc_adaptor,
		moqGetwdFunc_params,
		moqGetwdFunc_paramsKey,
		moqGetwdFunc_results,
	]

	runtime moqGetwdFunc_runtime
}

// moqGetwdFunc_runtime holds runtime configuration for the GetwdFunc type
type moqGetwdFunc_runtime struct {
	parameterIndexing moqGetwdFunc_paramIndexing
}

// moqGetwdFunc_adaptor adapts moqGetwdFunc as needed by the runtime
type moqGetwdFunc_adaptor struct {
	moq *moqGetwdFunc
}

// moqGetwdFunc_params holds the params of the GetwdFunc type
type moqGetwdFunc_params struct{}

// moqGetwdFunc_paramsKey holds the map key params of the GetwdFunc type
type moqGetwdFunc_paramsKey struct {
	params struct{}
	hashes struct{}
}

// moqGetwdFunc_results holds the results of the GetwdFunc type
type moqGetwdFunc_results struct {
	result1 string
	result2 error
}

// moqGetwdFunc_paramIndexing holds the parameter indexing runtime
// configuration for the GetwdFunc type
type moqGetwdFunc_paramIndexing struct{}

// moqGetwdFunc_doFn defines the type of function needed when calling andDo for
// the GetwdFunc type
type moqGetwdFunc_doFn func()

// moqGetwdFunc_doReturnFn defines the type of function needed when calling
// doReturnResults for the GetwdFunc type
type moqGetwdFunc_doReturnFn func() (string, error)

// moqGetwdFunc_recorder routes recorded function calls to the moqGetwdFunc moq
type moqGetwdFunc_recorder struct {
	recorder *impl.Recorder[
		*moqGetwdFunc_adaptor,
		moqGetwdFunc_params,
		moqGetwdFunc_paramsKey,
		moqGetwdFunc_results,
	]
}

// moqGetwdFunc_anyParams isolates the any params functions of the GetwdFunc
// type
type moqGetwdFunc_anyParams struct {
	recorder *moqGetwdFunc_recorder
}

// newMoqGetwdFunc creates a new moq of the GetwdFunc type
func newMoqGetwdFunc(scene *moq.Scene, config *moq.Config) *moqGetwdFunc {
	adaptor1 := &moqGetwdFunc_adaptor{}
	m := &moqGetwdFunc{
		moq: impl.NewMoq[
			*moqGetwdFunc_adaptor,
			moqGetwdFunc_params,
			moqGetwdFunc_paramsKey,
			moqGetwdFunc_results,
		](scene, adaptor1, config),

		runtime: moqGetwdFunc_runtime{parameterIndexing: moqGetwdFunc_paramIndexing{}},
	}
	adaptor1.moq = m

	scene.AddMoq(m)
	return m
}

// mock returns the moq implementation of the GetwdFunc type
func (m *moqGetwdFunc) mock() generator.GetwdFunc {
	return func() (string, error) {
		m.moq.Scene.T.Helper()
		params := moqGetwdFunc_params{}

		var result1 string
		var result2 error
		if result := m.moq.Function(params); result != nil {
			result1 = result.result1
			result2 = result.result2
		}
		return result1, result2
	}
}

func (m *moqGetwdFunc) onCall() *moqGetwdFunc_recorder {
	return &moqGetwdFunc_recorder{
		recorder: m.moq.OnCall(moqGetwdFunc_params{}),
	}
}

func (r *moqGetwdFunc_recorder) any() *moqGetwdFunc_anyParams {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.IsAnyPermitted(false) {
		return nil
	}
	return &moqGetwdFunc_anyParams{recorder: r}
}

func (r *moqGetwdFunc_recorder) seq() *moqGetwdFunc_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.Seq(true, "seq", false) {
		return nil
	}
	return r
}

func (r *moqGetwdFunc_recorder) noSeq() *moqGetwdFunc_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.Seq(false, "noSeq", false) {
		return nil
	}
	return r
}

func (r *moqGetwdFunc_recorder) returnResults(result1 string, result2 error) *moqGetwdFunc_recorder {
	r.recorder.Moq.Scene.T.Helper()
	r.recorder.ReturnResults(moqGetwdFunc_results{
		result1: result1,
		result2: result2,
	})
	return r
}

func (r *moqGetwdFunc_recorder) andDo(fn moqGetwdFunc_doFn) *moqGetwdFunc_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.AndDo(func(params moqGetwdFunc_params) {
		fn()
	}, false) {
		return nil
	}
	return r
}

func (r *moqGetwdFunc_recorder) doReturnResults(fn moqGetwdFunc_doReturnFn) *moqGetwdFunc_recorder {
	r.recorder.Moq.Scene.T.Helper()
	r.recorder.DoReturnResults(func(params moqGetwdFunc_params) *moqGetwdFunc_results {
		result1, result2 := fn()
		return &moqGetwdFunc_results{
			result1: result1,
			result2: result2,
		}
	})
	return r
}

func (r *moqGetwdFunc_recorder) repeat(repeaters ...moq.Repeater) *moqGetwdFunc_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.Repeat(repeaters, false) {
		return nil
	}
	return r
}

func (*moqGetwdFunc_adaptor) PrettyParams(params moqGetwdFunc_params) string {
	return fmt.Sprintf("GetwdFunc()")
}

func (a *moqGetwdFunc_adaptor) ParamsKey(params moqGetwdFunc_params, anyParams uint64) moqGetwdFunc_paramsKey {
	a.moq.moq.Scene.T.Helper()
	return moqGetwdFunc_paramsKey{
		params: struct{}{},
		hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *moqGetwdFunc) Reset() {
	m.moq.Reset()
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *moqGetwdFunc) AssertExpectationsMet() {
	m.moq.Scene.T.Helper()
	m.moq.AssertExpectationsMet()
}
