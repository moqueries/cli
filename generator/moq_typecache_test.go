// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT!

package generator_test

import (
	"fmt"
	"math/bits"
	"sync/atomic"

	"github.com/dave/dst"
	"moqueries.org/cli/ast"
	"moqueries.org/cli/generator"
	"moqueries.org/runtime/hash"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that generator.TypeCache is mocked
// completely
var _ generator.TypeCache = (*moqTypeCache_mock)(nil)

// moqTypeCache holds the state of a moq of the TypeCache type
type moqTypeCache struct {
	scene  *moq.Scene
	config moq.Config
	moq    *moqTypeCache_mock

	resultsByParams_Type                []moqTypeCache_Type_resultsByParams
	resultsByParams_IsComparable        []moqTypeCache_IsComparable_resultsByParams
	resultsByParams_IsDefaultComparable []moqTypeCache_IsDefaultComparable_resultsByParams
	resultsByParams_FindPackage         []moqTypeCache_FindPackage_resultsByParams

	runtime struct {
		parameterIndexing struct {
			Type struct {
				id         moq.ParamIndexing
				contextPkg moq.ParamIndexing
				testImport moq.ParamIndexing
			}
			IsComparable struct {
				expr moq.ParamIndexing
			}
			IsDefaultComparable struct {
				expr moq.ParamIndexing
			}
			FindPackage struct {
				dir moq.ParamIndexing
			}
		}
	}
	// moqTypeCache_mock isolates the mock interface of the TypeCache type
}

type moqTypeCache_mock struct {
	moq *moqTypeCache
}

// moqTypeCache_recorder isolates the recorder interface of the TypeCache type
type moqTypeCache_recorder struct {
	moq *moqTypeCache
}

// moqTypeCache_Type_params holds the params of the TypeCache type
type moqTypeCache_Type_params struct {
	id         dst.Ident
	contextPkg string
	testImport bool
}

// moqTypeCache_Type_paramsKey holds the map key params of the TypeCache type
type moqTypeCache_Type_paramsKey struct {
	params struct {
		contextPkg string
		testImport bool
	}
	hashes struct {
		id         hash.Hash
		contextPkg hash.Hash
		testImport hash.Hash
	}
}

// moqTypeCache_Type_resultsByParams contains the results for a given set of
// parameters for the TypeCache type
type moqTypeCache_Type_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqTypeCache_Type_paramsKey]*moqTypeCache_Type_results
}

// moqTypeCache_Type_doFn defines the type of function needed when calling
// andDo for the TypeCache type
type moqTypeCache_Type_doFn func(id dst.Ident, contextPkg string, testImport bool)

// moqTypeCache_Type_doReturnFn defines the type of function needed when
// calling doReturnResults for the TypeCache type
type moqTypeCache_Type_doReturnFn func(id dst.Ident, contextPkg string, testImport bool) (ast.TypeInfo, error)

// moqTypeCache_Type_results holds the results of the TypeCache type
type moqTypeCache_Type_results struct {
	params  moqTypeCache_Type_params
	results []struct {
		values *struct {
			result1 ast.TypeInfo
			result2 error
		}
		sequence   uint32
		doFn       moqTypeCache_Type_doFn
		doReturnFn moqTypeCache_Type_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqTypeCache_Type_fnRecorder routes recorded function calls to the
// moqTypeCache moq
type moqTypeCache_Type_fnRecorder struct {
	params    moqTypeCache_Type_params
	anyParams uint64
	sequence  bool
	results   *moqTypeCache_Type_results
	moq       *moqTypeCache
}

// moqTypeCache_Type_anyParams isolates the any params functions of the
// TypeCache type
type moqTypeCache_Type_anyParams struct {
	recorder *moqTypeCache_Type_fnRecorder
}

// moqTypeCache_IsComparable_params holds the params of the TypeCache type
type moqTypeCache_IsComparable_params struct{ expr dst.Expr }

// moqTypeCache_IsComparable_paramsKey holds the map key params of the
// TypeCache type
type moqTypeCache_IsComparable_paramsKey struct {
	params struct{ expr dst.Expr }
	hashes struct{ expr hash.Hash }
}

// moqTypeCache_IsComparable_resultsByParams contains the results for a given
// set of parameters for the TypeCache type
type moqTypeCache_IsComparable_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqTypeCache_IsComparable_paramsKey]*moqTypeCache_IsComparable_results
}

// moqTypeCache_IsComparable_doFn defines the type of function needed when
// calling andDo for the TypeCache type
type moqTypeCache_IsComparable_doFn func(expr dst.Expr)

// moqTypeCache_IsComparable_doReturnFn defines the type of function needed
// when calling doReturnResults for the TypeCache type
type moqTypeCache_IsComparable_doReturnFn func(expr dst.Expr) (bool, error)

// moqTypeCache_IsComparable_results holds the results of the TypeCache type
type moqTypeCache_IsComparable_results struct {
	params  moqTypeCache_IsComparable_params
	results []struct {
		values *struct {
			result1 bool
			result2 error
		}
		sequence   uint32
		doFn       moqTypeCache_IsComparable_doFn
		doReturnFn moqTypeCache_IsComparable_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqTypeCache_IsComparable_fnRecorder routes recorded function calls to the
// moqTypeCache moq
type moqTypeCache_IsComparable_fnRecorder struct {
	params    moqTypeCache_IsComparable_params
	anyParams uint64
	sequence  bool
	results   *moqTypeCache_IsComparable_results
	moq       *moqTypeCache
}

// moqTypeCache_IsComparable_anyParams isolates the any params functions of the
// TypeCache type
type moqTypeCache_IsComparable_anyParams struct {
	recorder *moqTypeCache_IsComparable_fnRecorder
}

// moqTypeCache_IsDefaultComparable_params holds the params of the TypeCache
// type
type moqTypeCache_IsDefaultComparable_params struct{ expr dst.Expr }

// moqTypeCache_IsDefaultComparable_paramsKey holds the map key params of the
// TypeCache type
type moqTypeCache_IsDefaultComparable_paramsKey struct {
	params struct{ expr dst.Expr }
	hashes struct{ expr hash.Hash }
}

// moqTypeCache_IsDefaultComparable_resultsByParams contains the results for a
// given set of parameters for the TypeCache type
type moqTypeCache_IsDefaultComparable_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqTypeCache_IsDefaultComparable_paramsKey]*moqTypeCache_IsDefaultComparable_results
}

// moqTypeCache_IsDefaultComparable_doFn defines the type of function needed
// when calling andDo for the TypeCache type
type moqTypeCache_IsDefaultComparable_doFn func(expr dst.Expr)

// moqTypeCache_IsDefaultComparable_doReturnFn defines the type of function
// needed when calling doReturnResults for the TypeCache type
type moqTypeCache_IsDefaultComparable_doReturnFn func(expr dst.Expr) (bool, error)

// moqTypeCache_IsDefaultComparable_results holds the results of the TypeCache
// type
type moqTypeCache_IsDefaultComparable_results struct {
	params  moqTypeCache_IsDefaultComparable_params
	results []struct {
		values *struct {
			result1 bool
			result2 error
		}
		sequence   uint32
		doFn       moqTypeCache_IsDefaultComparable_doFn
		doReturnFn moqTypeCache_IsDefaultComparable_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqTypeCache_IsDefaultComparable_fnRecorder routes recorded function calls
// to the moqTypeCache moq
type moqTypeCache_IsDefaultComparable_fnRecorder struct {
	params    moqTypeCache_IsDefaultComparable_params
	anyParams uint64
	sequence  bool
	results   *moqTypeCache_IsDefaultComparable_results
	moq       *moqTypeCache
}

// moqTypeCache_IsDefaultComparable_anyParams isolates the any params functions
// of the TypeCache type
type moqTypeCache_IsDefaultComparable_anyParams struct {
	recorder *moqTypeCache_IsDefaultComparable_fnRecorder
}

// moqTypeCache_FindPackage_params holds the params of the TypeCache type
type moqTypeCache_FindPackage_params struct{ dir string }

// moqTypeCache_FindPackage_paramsKey holds the map key params of the TypeCache
// type
type moqTypeCache_FindPackage_paramsKey struct {
	params struct{ dir string }
	hashes struct{ dir hash.Hash }
}

// moqTypeCache_FindPackage_resultsByParams contains the results for a given
// set of parameters for the TypeCache type
type moqTypeCache_FindPackage_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqTypeCache_FindPackage_paramsKey]*moqTypeCache_FindPackage_results
}

// moqTypeCache_FindPackage_doFn defines the type of function needed when
// calling andDo for the TypeCache type
type moqTypeCache_FindPackage_doFn func(dir string)

// moqTypeCache_FindPackage_doReturnFn defines the type of function needed when
// calling doReturnResults for the TypeCache type
type moqTypeCache_FindPackage_doReturnFn func(dir string) (string, error)

// moqTypeCache_FindPackage_results holds the results of the TypeCache type
type moqTypeCache_FindPackage_results struct {
	params  moqTypeCache_FindPackage_params
	results []struct {
		values *struct {
			result1 string
			result2 error
		}
		sequence   uint32
		doFn       moqTypeCache_FindPackage_doFn
		doReturnFn moqTypeCache_FindPackage_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqTypeCache_FindPackage_fnRecorder routes recorded function calls to the
// moqTypeCache moq
type moqTypeCache_FindPackage_fnRecorder struct {
	params    moqTypeCache_FindPackage_params
	anyParams uint64
	sequence  bool
	results   *moqTypeCache_FindPackage_results
	moq       *moqTypeCache
}

// moqTypeCache_FindPackage_anyParams isolates the any params functions of the
// TypeCache type
type moqTypeCache_FindPackage_anyParams struct {
	recorder *moqTypeCache_FindPackage_fnRecorder
}

// newMoqTypeCache creates a new moq of the TypeCache type
func newMoqTypeCache(scene *moq.Scene, config *moq.Config) *moqTypeCache {
	if config == nil {
		config = &moq.Config{}
	}
	m := &moqTypeCache{
		scene:  scene,
		config: *config,
		moq:    &moqTypeCache_mock{},

		runtime: struct {
			parameterIndexing struct {
				Type struct {
					id         moq.ParamIndexing
					contextPkg moq.ParamIndexing
					testImport moq.ParamIndexing
				}
				IsComparable struct {
					expr moq.ParamIndexing
				}
				IsDefaultComparable struct {
					expr moq.ParamIndexing
				}
				FindPackage struct {
					dir moq.ParamIndexing
				}
			}
		}{parameterIndexing: struct {
			Type struct {
				id         moq.ParamIndexing
				contextPkg moq.ParamIndexing
				testImport moq.ParamIndexing
			}
			IsComparable struct {
				expr moq.ParamIndexing
			}
			IsDefaultComparable struct {
				expr moq.ParamIndexing
			}
			FindPackage struct {
				dir moq.ParamIndexing
			}
		}{
			Type: struct {
				id         moq.ParamIndexing
				contextPkg moq.ParamIndexing
				testImport moq.ParamIndexing
			}{
				id:         moq.ParamIndexByHash,
				contextPkg: moq.ParamIndexByValue,
				testImport: moq.ParamIndexByValue,
			},
			IsComparable: struct {
				expr moq.ParamIndexing
			}{
				expr: moq.ParamIndexByHash,
			},
			IsDefaultComparable: struct {
				expr moq.ParamIndexing
			}{
				expr: moq.ParamIndexByHash,
			},
			FindPackage: struct {
				dir moq.ParamIndexing
			}{
				dir: moq.ParamIndexByValue,
			},
		}},
	}
	m.moq.moq = m

	scene.AddMoq(m)
	return m
}

// mock returns the mock implementation of the TypeCache type
func (m *moqTypeCache) mock() *moqTypeCache_mock { return m.moq }

func (m *moqTypeCache_mock) Type(id dst.Ident, contextPkg string, testImport bool) (result1 ast.TypeInfo, result2 error) {
	m.moq.scene.T.Helper()
	params := moqTypeCache_Type_params{
		id:         id,
		contextPkg: contextPkg,
		testImport: testImport,
	}
	var results *moqTypeCache_Type_results
	for _, resultsByParams := range m.moq.resultsByParams_Type {
		paramsKey := m.moq.paramsKey_Type(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call to %s", m.moq.prettyParams_Type(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to %s", m.moq.prettyParams_Type(params))
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match call to %s", m.moq.prettyParams_Type(params))
		}
	}

	if result.doFn != nil {
		result.doFn(id, contextPkg, testImport)
	}

	if result.values != nil {
		result1 = result.values.result1
		result2 = result.values.result2
	}
	if result.doReturnFn != nil {
		result1, result2 = result.doReturnFn(id, contextPkg, testImport)
	}
	return
}

func (m *moqTypeCache_mock) IsComparable(expr dst.Expr) (result1 bool, result2 error) {
	m.moq.scene.T.Helper()
	params := moqTypeCache_IsComparable_params{
		expr: expr,
	}
	var results *moqTypeCache_IsComparable_results
	for _, resultsByParams := range m.moq.resultsByParams_IsComparable {
		paramsKey := m.moq.paramsKey_IsComparable(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call to %s", m.moq.prettyParams_IsComparable(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to %s", m.moq.prettyParams_IsComparable(params))
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match call to %s", m.moq.prettyParams_IsComparable(params))
		}
	}

	if result.doFn != nil {
		result.doFn(expr)
	}

	if result.values != nil {
		result1 = result.values.result1
		result2 = result.values.result2
	}
	if result.doReturnFn != nil {
		result1, result2 = result.doReturnFn(expr)
	}
	return
}

func (m *moqTypeCache_mock) IsDefaultComparable(expr dst.Expr) (result1 bool, result2 error) {
	m.moq.scene.T.Helper()
	params := moqTypeCache_IsDefaultComparable_params{
		expr: expr,
	}
	var results *moqTypeCache_IsDefaultComparable_results
	for _, resultsByParams := range m.moq.resultsByParams_IsDefaultComparable {
		paramsKey := m.moq.paramsKey_IsDefaultComparable(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call to %s", m.moq.prettyParams_IsDefaultComparable(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to %s", m.moq.prettyParams_IsDefaultComparable(params))
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match call to %s", m.moq.prettyParams_IsDefaultComparable(params))
		}
	}

	if result.doFn != nil {
		result.doFn(expr)
	}

	if result.values != nil {
		result1 = result.values.result1
		result2 = result.values.result2
	}
	if result.doReturnFn != nil {
		result1, result2 = result.doReturnFn(expr)
	}
	return
}

func (m *moqTypeCache_mock) FindPackage(dir string) (result1 string, result2 error) {
	m.moq.scene.T.Helper()
	params := moqTypeCache_FindPackage_params{
		dir: dir,
	}
	var results *moqTypeCache_FindPackage_results
	for _, resultsByParams := range m.moq.resultsByParams_FindPackage {
		paramsKey := m.moq.paramsKey_FindPackage(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call to %s", m.moq.prettyParams_FindPackage(params))
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to %s", m.moq.prettyParams_FindPackage(params))
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match call to %s", m.moq.prettyParams_FindPackage(params))
		}
	}

	if result.doFn != nil {
		result.doFn(dir)
	}

	if result.values != nil {
		result1 = result.values.result1
		result2 = result.values.result2
	}
	if result.doReturnFn != nil {
		result1, result2 = result.doReturnFn(dir)
	}
	return
}

// onCall returns the recorder implementation of the TypeCache type
func (m *moqTypeCache) onCall() *moqTypeCache_recorder {
	return &moqTypeCache_recorder{
		moq: m,
	}
}

func (m *moqTypeCache_recorder) Type(id dst.Ident, contextPkg string, testImport bool) *moqTypeCache_Type_fnRecorder {
	return &moqTypeCache_Type_fnRecorder{
		params: moqTypeCache_Type_params{
			id:         id,
			contextPkg: contextPkg,
			testImport: testImport,
		},
		sequence: m.moq.config.Sequence == moq.SeqDefaultOn,
		moq:      m.moq,
	}
}

func (r *moqTypeCache_Type_fnRecorder) any() *moqTypeCache_Type_anyParams {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_Type(r.params))
		return nil
	}
	return &moqTypeCache_Type_anyParams{recorder: r}
}

func (a *moqTypeCache_Type_anyParams) id() *moqTypeCache_Type_fnRecorder {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (a *moqTypeCache_Type_anyParams) contextPkg() *moqTypeCache_Type_fnRecorder {
	a.recorder.anyParams |= 1 << 1
	return a.recorder
}

func (a *moqTypeCache_Type_anyParams) testImport() *moqTypeCache_Type_fnRecorder {
	a.recorder.anyParams |= 1 << 2
	return a.recorder
}

func (r *moqTypeCache_Type_fnRecorder) seq() *moqTypeCache_Type_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_Type(r.params))
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqTypeCache_Type_fnRecorder) noSeq() *moqTypeCache_Type_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_Type(r.params))
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqTypeCache_Type_fnRecorder) returnResults(result1 ast.TypeInfo, result2 error) *moqTypeCache_Type_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 ast.TypeInfo
			result2 error
		}
		sequence   uint32
		doFn       moqTypeCache_Type_doFn
		doReturnFn moqTypeCache_Type_doReturnFn
	}{
		values: &struct {
			result1 ast.TypeInfo
			result2 error
		}{
			result1: result1,
			result2: result2,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqTypeCache_Type_fnRecorder) andDo(fn moqTypeCache_Type_doFn) *moqTypeCache_Type_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqTypeCache_Type_fnRecorder) doReturnResults(fn moqTypeCache_Type_doReturnFn) *moqTypeCache_Type_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 ast.TypeInfo
			result2 error
		}
		sequence   uint32
		doFn       moqTypeCache_Type_doFn
		doReturnFn moqTypeCache_Type_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqTypeCache_Type_fnRecorder) findResults() {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqTypeCache_Type_resultsByParams
	for n, res := range r.moq.resultsByParams_Type {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqTypeCache_Type_resultsByParams{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqTypeCache_Type_paramsKey]*moqTypeCache_Type_results{},
		}
		r.moq.resultsByParams_Type = append(r.moq.resultsByParams_Type, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams_Type) {
			copy(r.moq.resultsByParams_Type[insertAt+1:], r.moq.resultsByParams_Type[insertAt:0])
			r.moq.resultsByParams_Type[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey_Type(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqTypeCache_Type_results{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqTypeCache_Type_fnRecorder) repeat(repeaters ...moq.Repeater) *moqTypeCache_Type_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values *struct {
					result1 ast.TypeInfo
					result2 error
				}
				sequence   uint32
				doFn       moqTypeCache_Type_doFn
				doReturnFn moqTypeCache_Type_doReturnFn
			}{
				values:   last.values,
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqTypeCache) prettyParams_Type(params moqTypeCache_Type_params) string {
	return fmt.Sprintf("Type(%#v, %#v, %#v)", params.id, params.contextPkg, params.testImport)
}

func (m *moqTypeCache) paramsKey_Type(params moqTypeCache_Type_params, anyParams uint64) moqTypeCache_Type_paramsKey {
	m.scene.T.Helper()
	var idUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.Type.id == moq.ParamIndexByValue {
			m.scene.T.Fatalf("The id parameter of the Type function can't be indexed by value")
		}
		idUsedHash = hash.DeepHash(params.id)
	}
	var contextPkgUsed string
	var contextPkgUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.runtime.parameterIndexing.Type.contextPkg == moq.ParamIndexByValue {
			contextPkgUsed = params.contextPkg
		} else {
			contextPkgUsedHash = hash.DeepHash(params.contextPkg)
		}
	}
	var testImportUsed bool
	var testImportUsedHash hash.Hash
	if anyParams&(1<<2) == 0 {
		if m.runtime.parameterIndexing.Type.testImport == moq.ParamIndexByValue {
			testImportUsed = params.testImport
		} else {
			testImportUsedHash = hash.DeepHash(params.testImport)
		}
	}
	return moqTypeCache_Type_paramsKey{
		params: struct {
			contextPkg string
			testImport bool
		}{
			contextPkg: contextPkgUsed,
			testImport: testImportUsed,
		},
		hashes: struct {
			id         hash.Hash
			contextPkg hash.Hash
			testImport hash.Hash
		}{
			id:         idUsedHash,
			contextPkg: contextPkgUsedHash,
			testImport: testImportUsedHash,
		},
	}
}

func (m *moqTypeCache_recorder) IsComparable(expr dst.Expr) *moqTypeCache_IsComparable_fnRecorder {
	return &moqTypeCache_IsComparable_fnRecorder{
		params: moqTypeCache_IsComparable_params{
			expr: expr,
		},
		sequence: m.moq.config.Sequence == moq.SeqDefaultOn,
		moq:      m.moq,
	}
}

func (r *moqTypeCache_IsComparable_fnRecorder) any() *moqTypeCache_IsComparable_anyParams {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_IsComparable(r.params))
		return nil
	}
	return &moqTypeCache_IsComparable_anyParams{recorder: r}
}

func (a *moqTypeCache_IsComparable_anyParams) expr() *moqTypeCache_IsComparable_fnRecorder {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (r *moqTypeCache_IsComparable_fnRecorder) seq() *moqTypeCache_IsComparable_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_IsComparable(r.params))
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqTypeCache_IsComparable_fnRecorder) noSeq() *moqTypeCache_IsComparable_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_IsComparable(r.params))
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqTypeCache_IsComparable_fnRecorder) returnResults(result1 bool, result2 error) *moqTypeCache_IsComparable_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 bool
			result2 error
		}
		sequence   uint32
		doFn       moqTypeCache_IsComparable_doFn
		doReturnFn moqTypeCache_IsComparable_doReturnFn
	}{
		values: &struct {
			result1 bool
			result2 error
		}{
			result1: result1,
			result2: result2,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqTypeCache_IsComparable_fnRecorder) andDo(fn moqTypeCache_IsComparable_doFn) *moqTypeCache_IsComparable_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqTypeCache_IsComparable_fnRecorder) doReturnResults(fn moqTypeCache_IsComparable_doReturnFn) *moqTypeCache_IsComparable_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 bool
			result2 error
		}
		sequence   uint32
		doFn       moqTypeCache_IsComparable_doFn
		doReturnFn moqTypeCache_IsComparable_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqTypeCache_IsComparable_fnRecorder) findResults() {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqTypeCache_IsComparable_resultsByParams
	for n, res := range r.moq.resultsByParams_IsComparable {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqTypeCache_IsComparable_resultsByParams{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqTypeCache_IsComparable_paramsKey]*moqTypeCache_IsComparable_results{},
		}
		r.moq.resultsByParams_IsComparable = append(r.moq.resultsByParams_IsComparable, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams_IsComparable) {
			copy(r.moq.resultsByParams_IsComparable[insertAt+1:], r.moq.resultsByParams_IsComparable[insertAt:0])
			r.moq.resultsByParams_IsComparable[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey_IsComparable(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqTypeCache_IsComparable_results{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqTypeCache_IsComparable_fnRecorder) repeat(repeaters ...moq.Repeater) *moqTypeCache_IsComparable_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values *struct {
					result1 bool
					result2 error
				}
				sequence   uint32
				doFn       moqTypeCache_IsComparable_doFn
				doReturnFn moqTypeCache_IsComparable_doReturnFn
			}{
				values:   last.values,
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqTypeCache) prettyParams_IsComparable(params moqTypeCache_IsComparable_params) string {
	return fmt.Sprintf("IsComparable(%#v)", params.expr)
}

func (m *moqTypeCache) paramsKey_IsComparable(params moqTypeCache_IsComparable_params, anyParams uint64) moqTypeCache_IsComparable_paramsKey {
	m.scene.T.Helper()
	var exprUsed dst.Expr
	var exprUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.IsComparable.expr == moq.ParamIndexByValue {
			exprUsed = params.expr
		} else {
			exprUsedHash = hash.DeepHash(params.expr)
		}
	}
	return moqTypeCache_IsComparable_paramsKey{
		params: struct{ expr dst.Expr }{
			expr: exprUsed,
		},
		hashes: struct{ expr hash.Hash }{
			expr: exprUsedHash,
		},
	}
}

func (m *moqTypeCache_recorder) IsDefaultComparable(expr dst.Expr) *moqTypeCache_IsDefaultComparable_fnRecorder {
	return &moqTypeCache_IsDefaultComparable_fnRecorder{
		params: moqTypeCache_IsDefaultComparable_params{
			expr: expr,
		},
		sequence: m.moq.config.Sequence == moq.SeqDefaultOn,
		moq:      m.moq,
	}
}

func (r *moqTypeCache_IsDefaultComparable_fnRecorder) any() *moqTypeCache_IsDefaultComparable_anyParams {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_IsDefaultComparable(r.params))
		return nil
	}
	return &moqTypeCache_IsDefaultComparable_anyParams{recorder: r}
}

func (a *moqTypeCache_IsDefaultComparable_anyParams) expr() *moqTypeCache_IsDefaultComparable_fnRecorder {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (r *moqTypeCache_IsDefaultComparable_fnRecorder) seq() *moqTypeCache_IsDefaultComparable_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_IsDefaultComparable(r.params))
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqTypeCache_IsDefaultComparable_fnRecorder) noSeq() *moqTypeCache_IsDefaultComparable_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_IsDefaultComparable(r.params))
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqTypeCache_IsDefaultComparable_fnRecorder) returnResults(result1 bool, result2 error) *moqTypeCache_IsDefaultComparable_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 bool
			result2 error
		}
		sequence   uint32
		doFn       moqTypeCache_IsDefaultComparable_doFn
		doReturnFn moqTypeCache_IsDefaultComparable_doReturnFn
	}{
		values: &struct {
			result1 bool
			result2 error
		}{
			result1: result1,
			result2: result2,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqTypeCache_IsDefaultComparable_fnRecorder) andDo(fn moqTypeCache_IsDefaultComparable_doFn) *moqTypeCache_IsDefaultComparable_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqTypeCache_IsDefaultComparable_fnRecorder) doReturnResults(fn moqTypeCache_IsDefaultComparable_doReturnFn) *moqTypeCache_IsDefaultComparable_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 bool
			result2 error
		}
		sequence   uint32
		doFn       moqTypeCache_IsDefaultComparable_doFn
		doReturnFn moqTypeCache_IsDefaultComparable_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqTypeCache_IsDefaultComparable_fnRecorder) findResults() {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqTypeCache_IsDefaultComparable_resultsByParams
	for n, res := range r.moq.resultsByParams_IsDefaultComparable {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqTypeCache_IsDefaultComparable_resultsByParams{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqTypeCache_IsDefaultComparable_paramsKey]*moqTypeCache_IsDefaultComparable_results{},
		}
		r.moq.resultsByParams_IsDefaultComparable = append(r.moq.resultsByParams_IsDefaultComparable, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams_IsDefaultComparable) {
			copy(r.moq.resultsByParams_IsDefaultComparable[insertAt+1:], r.moq.resultsByParams_IsDefaultComparable[insertAt:0])
			r.moq.resultsByParams_IsDefaultComparable[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey_IsDefaultComparable(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqTypeCache_IsDefaultComparable_results{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqTypeCache_IsDefaultComparable_fnRecorder) repeat(repeaters ...moq.Repeater) *moqTypeCache_IsDefaultComparable_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values *struct {
					result1 bool
					result2 error
				}
				sequence   uint32
				doFn       moqTypeCache_IsDefaultComparable_doFn
				doReturnFn moqTypeCache_IsDefaultComparable_doReturnFn
			}{
				values:   last.values,
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqTypeCache) prettyParams_IsDefaultComparable(params moqTypeCache_IsDefaultComparable_params) string {
	return fmt.Sprintf("IsDefaultComparable(%#v)", params.expr)
}

func (m *moqTypeCache) paramsKey_IsDefaultComparable(params moqTypeCache_IsDefaultComparable_params, anyParams uint64) moqTypeCache_IsDefaultComparable_paramsKey {
	m.scene.T.Helper()
	var exprUsed dst.Expr
	var exprUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.IsDefaultComparable.expr == moq.ParamIndexByValue {
			exprUsed = params.expr
		} else {
			exprUsedHash = hash.DeepHash(params.expr)
		}
	}
	return moqTypeCache_IsDefaultComparable_paramsKey{
		params: struct{ expr dst.Expr }{
			expr: exprUsed,
		},
		hashes: struct{ expr hash.Hash }{
			expr: exprUsedHash,
		},
	}
}

func (m *moqTypeCache_recorder) FindPackage(dir string) *moqTypeCache_FindPackage_fnRecorder {
	return &moqTypeCache_FindPackage_fnRecorder{
		params: moqTypeCache_FindPackage_params{
			dir: dir,
		},
		sequence: m.moq.config.Sequence == moq.SeqDefaultOn,
		moq:      m.moq,
	}
}

func (r *moqTypeCache_FindPackage_fnRecorder) any() *moqTypeCache_FindPackage_anyParams {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_FindPackage(r.params))
		return nil
	}
	return &moqTypeCache_FindPackage_anyParams{recorder: r}
}

func (a *moqTypeCache_FindPackage_anyParams) dir() *moqTypeCache_FindPackage_fnRecorder {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (r *moqTypeCache_FindPackage_fnRecorder) seq() *moqTypeCache_FindPackage_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_FindPackage(r.params))
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqTypeCache_FindPackage_fnRecorder) noSeq() *moqTypeCache_FindPackage_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, recording %s", r.moq.prettyParams_FindPackage(r.params))
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqTypeCache_FindPackage_fnRecorder) returnResults(result1 string, result2 error) *moqTypeCache_FindPackage_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 string
			result2 error
		}
		sequence   uint32
		doFn       moqTypeCache_FindPackage_doFn
		doReturnFn moqTypeCache_FindPackage_doReturnFn
	}{
		values: &struct {
			result1 string
			result2 error
		}{
			result1: result1,
			result2: result2,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqTypeCache_FindPackage_fnRecorder) andDo(fn moqTypeCache_FindPackage_doFn) *moqTypeCache_FindPackage_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqTypeCache_FindPackage_fnRecorder) doReturnResults(fn moqTypeCache_FindPackage_doReturnFn) *moqTypeCache_FindPackage_fnRecorder {
	r.moq.scene.T.Helper()
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			result1 string
			result2 error
		}
		sequence   uint32
		doFn       moqTypeCache_FindPackage_doFn
		doReturnFn moqTypeCache_FindPackage_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqTypeCache_FindPackage_fnRecorder) findResults() {
	r.moq.scene.T.Helper()
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqTypeCache_FindPackage_resultsByParams
	for n, res := range r.moq.resultsByParams_FindPackage {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqTypeCache_FindPackage_resultsByParams{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqTypeCache_FindPackage_paramsKey]*moqTypeCache_FindPackage_results{},
		}
		r.moq.resultsByParams_FindPackage = append(r.moq.resultsByParams_FindPackage, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams_FindPackage) {
			copy(r.moq.resultsByParams_FindPackage[insertAt+1:], r.moq.resultsByParams_FindPackage[insertAt:0])
			r.moq.resultsByParams_FindPackage[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey_FindPackage(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqTypeCache_FindPackage_results{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqTypeCache_FindPackage_fnRecorder) repeat(repeaters ...moq.Repeater) *moqTypeCache_FindPackage_fnRecorder {
	r.moq.scene.T.Helper()
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values *struct {
					result1 string
					result2 error
				}
				sequence   uint32
				doFn       moqTypeCache_FindPackage_doFn
				doReturnFn moqTypeCache_FindPackage_doReturnFn
			}{
				values:   last.values,
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqTypeCache) prettyParams_FindPackage(params moqTypeCache_FindPackage_params) string {
	return fmt.Sprintf("FindPackage(%#v)", params.dir)
}

func (m *moqTypeCache) paramsKey_FindPackage(params moqTypeCache_FindPackage_params, anyParams uint64) moqTypeCache_FindPackage_paramsKey {
	m.scene.T.Helper()
	var dirUsed string
	var dirUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.FindPackage.dir == moq.ParamIndexByValue {
			dirUsed = params.dir
		} else {
			dirUsedHash = hash.DeepHash(params.dir)
		}
	}
	return moqTypeCache_FindPackage_paramsKey{
		params: struct{ dir string }{
			dir: dirUsed,
		},
		hashes: struct{ dir hash.Hash }{
			dir: dirUsedHash,
		},
	}
}

// Reset resets the state of the moq
func (m *moqTypeCache) Reset() {
	m.resultsByParams_Type = nil
	m.resultsByParams_IsComparable = nil
	m.resultsByParams_IsDefaultComparable = nil
	m.resultsByParams_FindPackage = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *moqTypeCache) AssertExpectationsMet() {
	m.scene.T.Helper()
	for _, res := range m.resultsByParams_Type {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.prettyParams_Type(results.params))
			}
		}
	}
	for _, res := range m.resultsByParams_IsComparable {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.prettyParams_IsComparable(results.params))
			}
		}
	}
	for _, res := range m.resultsByParams_IsDefaultComparable {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.prettyParams_IsDefaultComparable(results.params))
			}
		}
	}
	for _, res := range m.resultsByParams_FindPackage {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) to %s", missing, m.prettyParams_FindPackage(results.params))
			}
		}
	}
}
