// Code generated by Moqueries - https://moqueries.org - DO NOT EDIT.

package generator_test

import (
	"fmt"

	"moqueries.org/runtime/impl"
	"moqueries.org/runtime/moq"
)

// The following type assertion assures that generator_test.testInterface is
// mocked completely
var _ testInterface = (*moqTestInterface_mock)(nil)

// moqTestInterface holds the state of a moq of the testInterface type
type moqTestInterface struct {
	moq *moqTestInterface_mock

	moq_something *impl.Moq[
		*moqTestInterface_something_adaptor,
		moqTestInterface_something_params,
		moqTestInterface_something_paramsKey,
		moqTestInterface_something_results,
	]

	runtime moqTestInterface_runtime
}

// moqTestInterface_mock isolates the mock interface of the testInterface type
type moqTestInterface_mock struct {
	moq *moqTestInterface
}

// moqTestInterface_recorder isolates the recorder interface of the
// testInterface type
type moqTestInterface_recorder struct {
	moq *moqTestInterface
}

// moqTestInterface_runtime holds runtime configuration for the testInterface
// type
type moqTestInterface_runtime struct {
	parameterIndexing struct {
		something moqTestInterface_something_paramIndexing
	}
}

// moqTestInterface_something_adaptor adapts moqTestInterface as needed by the
// runtime
type moqTestInterface_something_adaptor struct {
	moq *moqTestInterface
}

// moqTestInterface_something_params holds the params of the testInterface type
type moqTestInterface_something_params struct{}

// moqTestInterface_something_paramsKey holds the map key params of the
// testInterface type
type moqTestInterface_something_paramsKey struct {
	params struct{}
	hashes struct{}
}

// moqTestInterface_something_results holds the results of the testInterface
// type
type moqTestInterface_something_results struct{}

// moqTestInterface_something_paramIndexing holds the parameter indexing
// runtime configuration for the testInterface type
type moqTestInterface_something_paramIndexing struct{}

// moqTestInterface_something_doFn defines the type of function needed when
// calling andDo for the testInterface type
type moqTestInterface_something_doFn func()

// moqTestInterface_something_doReturnFn defines the type of function needed
// when calling doReturnResults for the testInterface type
type moqTestInterface_something_doReturnFn func()

// moqTestInterface_something_recorder routes recorded function calls to the
// moqTestInterface moq
type moqTestInterface_something_recorder struct {
	recorder *impl.Recorder[
		*moqTestInterface_something_adaptor,
		moqTestInterface_something_params,
		moqTestInterface_something_paramsKey,
		moqTestInterface_something_results,
	]
}

// moqTestInterface_something_anyParams isolates the any params functions of
// the testInterface type
type moqTestInterface_something_anyParams struct {
	recorder *moqTestInterface_something_recorder
}

// newMoqtestInterface creates a new moq of the testInterface type
func newMoqtestInterface(scene *moq.Scene, config *moq.Config) *moqTestInterface {
	adaptor1 := &moqTestInterface_something_adaptor{}
	m := &moqTestInterface{
		moq: &moqTestInterface_mock{},

		moq_something: impl.NewMoq[
			*moqTestInterface_something_adaptor,
			moqTestInterface_something_params,
			moqTestInterface_something_paramsKey,
			moqTestInterface_something_results,
		](scene, adaptor1, config),

		runtime: moqTestInterface_runtime{parameterIndexing: struct {
			something moqTestInterface_something_paramIndexing
		}{
			something: moqTestInterface_something_paramIndexing{},
		}},
	}
	m.moq.moq = m

	adaptor1.moq = m

	scene.AddMoq(m)
	return m
}

// mock returns the mock implementation of the testInterface type
func (m *moqTestInterface) mock() *moqTestInterface_mock { return m.moq }

func (m *moqTestInterface_mock) something() {
	m.moq.moq_something.Scene.T.Helper()
	params := moqTestInterface_something_params{}

	m.moq.moq_something.Function(params)
}

// onCall returns the recorder implementation of the testInterface type
func (m *moqTestInterface) onCall() *moqTestInterface_recorder {
	return &moqTestInterface_recorder{
		moq: m,
	}
}

func (m *moqTestInterface_recorder) something() *moqTestInterface_something_recorder {
	return &moqTestInterface_something_recorder{
		recorder: m.moq.moq_something.OnCall(moqTestInterface_something_params{}),
	}
}

func (r *moqTestInterface_something_recorder) any() *moqTestInterface_something_anyParams {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.IsAnyPermitted(false) {
		return nil
	}
	return &moqTestInterface_something_anyParams{recorder: r}
}

func (r *moqTestInterface_something_recorder) seq() *moqTestInterface_something_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.Seq(true, "seq", false) {
		return nil
	}
	return r
}

func (r *moqTestInterface_something_recorder) noSeq() *moqTestInterface_something_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.Seq(false, "noSeq", false) {
		return nil
	}
	return r
}

func (r *moqTestInterface_something_recorder) returnResults() *moqTestInterface_something_recorder {
	r.recorder.Moq.Scene.T.Helper()
	r.recorder.ReturnResults(moqTestInterface_something_results{})
	return r
}

func (r *moqTestInterface_something_recorder) andDo(fn moqTestInterface_something_doFn) *moqTestInterface_something_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.AndDo(func(params moqTestInterface_something_params) {
		fn()
	}, false) {
		return nil
	}
	return r
}

func (r *moqTestInterface_something_recorder) doReturnResults(fn moqTestInterface_something_doReturnFn) *moqTestInterface_something_recorder {
	r.recorder.Moq.Scene.T.Helper()
	r.recorder.DoReturnResults(func(params moqTestInterface_something_params) *moqTestInterface_something_results {
		fn()
		return &moqTestInterface_something_results{}
	})
	return r
}

func (r *moqTestInterface_something_recorder) repeat(repeaters ...moq.Repeater) *moqTestInterface_something_recorder {
	r.recorder.Moq.Scene.T.Helper()
	if !r.recorder.Repeat(repeaters, false) {
		return nil
	}
	return r
}

func (*moqTestInterface_something_adaptor) PrettyParams(params moqTestInterface_something_params) string {
	return fmt.Sprintf("something()")
}

func (a *moqTestInterface_something_adaptor) ParamsKey(params moqTestInterface_something_params, anyParams uint64) moqTestInterface_something_paramsKey {
	a.moq.moq_something.Scene.T.Helper()
	return moqTestInterface_something_paramsKey{
		params: struct{}{},
		hashes: struct{}{},
	}
}

// Reset resets the state of the moq
func (m *moqTestInterface) Reset() {
	m.moq_something.Reset()
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *moqTestInterface) AssertExpectationsMet() {
	m.moq_something.Scene.T.Helper()
	m.moq_something.AssertExpectationsMet()
}
