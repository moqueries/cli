// Code generated by Moqueries - https://github.com/myshkin5/moqueries - DO NOT EDIT!

package generator_test

import (
	"math/bits"
	"sync/atomic"

	"github.com/dave/dst"
	"github.com/myshkin5/moqueries/generator"
	"github.com/myshkin5/moqueries/hash"
	"github.com/myshkin5/moqueries/moq"
)

// moqConverterer holds the state of a moq of the Converterer type
type moqConverterer struct {
	scene  *moq.Scene
	config moq.Config
	moq    *moqConverterer_mock

	resultsByParams_BaseStruct        []moqConverterer_BaseStruct_resultsByParams
	resultsByParams_IsolationStruct   []moqConverterer_IsolationStruct_resultsByParams
	resultsByParams_MethodStructs     []moqConverterer_MethodStructs_resultsByParams
	resultsByParams_NewFunc           []moqConverterer_NewFunc_resultsByParams
	resultsByParams_IsolationAccessor []moqConverterer_IsolationAccessor_resultsByParams
	resultsByParams_FuncClosure       []moqConverterer_FuncClosure_resultsByParams
	resultsByParams_MockMethod        []moqConverterer_MockMethod_resultsByParams
	resultsByParams_RecorderMethods   []moqConverterer_RecorderMethods_resultsByParams
	resultsByParams_ResetMethod       []moqConverterer_ResetMethod_resultsByParams
	resultsByParams_AssertMethod      []moqConverterer_AssertMethod_resultsByParams

	runtime struct {
		parameterIndexing struct {
			BaseStruct struct {
				typeSpec moq.ParamIndexing
				funcs    moq.ParamIndexing
			}
			IsolationStruct struct {
				typeName moq.ParamIndexing
				suffix   moq.ParamIndexing
			}
			MethodStructs struct {
				typeSpec moq.ParamIndexing
				fn       moq.ParamIndexing
			}
			NewFunc struct {
				typeSpec moq.ParamIndexing
				funcs    moq.ParamIndexing
			}
			IsolationAccessor struct {
				typeName moq.ParamIndexing
				suffix   moq.ParamIndexing
				fnName   moq.ParamIndexing
			}
			FuncClosure struct {
				typeName moq.ParamIndexing
				pkgPath  moq.ParamIndexing
				fn       moq.ParamIndexing
			}
			MockMethod struct {
				typeName moq.ParamIndexing
				fn       moq.ParamIndexing
			}
			RecorderMethods struct {
				typeName moq.ParamIndexing
				fn       moq.ParamIndexing
			}
			ResetMethod struct {
				typeSpec moq.ParamIndexing
				funcs    moq.ParamIndexing
			}
			AssertMethod struct {
				typeSpec moq.ParamIndexing
				funcs    moq.ParamIndexing
			}
		}
	}
	// moqConverterer_mock isolates the mock interface of the Converterer type
}

type moqConverterer_mock struct {
	moq *moqConverterer
}

// moqConverterer_recorder isolates the recorder interface of the Converterer type
type moqConverterer_recorder struct {
	moq *moqConverterer
}

// moqConverterer_BaseStruct_params holds the params of the Converterer type
type moqConverterer_BaseStruct_params struct {
	typeSpec *dst.TypeSpec
	funcs    []generator.Func
}

// moqConverterer_BaseStruct_paramsKey holds the map key params of the Converterer type
type moqConverterer_BaseStruct_paramsKey struct {
	params struct{ typeSpec *dst.TypeSpec }
	hashes struct {
		typeSpec hash.Hash
		funcs    hash.Hash
	}
}

// moqConverterer_BaseStruct_resultsByParams contains the results for a given set of parameters for the Converterer type
type moqConverterer_BaseStruct_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqConverterer_BaseStruct_paramsKey]*moqConverterer_BaseStruct_results
}

// moqConverterer_BaseStruct_doFn defines the type of function needed when calling andDo for the Converterer type
type moqConverterer_BaseStruct_doFn func(typeSpec *dst.TypeSpec, funcs []generator.Func)

// moqConverterer_BaseStruct_doReturnFn defines the type of function needed when calling doReturnResults for the Converterer type
type moqConverterer_BaseStruct_doReturnFn func(typeSpec *dst.TypeSpec, funcs []generator.Func) (structDecl *dst.GenDecl)

// moqConverterer_BaseStruct_results holds the results of the Converterer type
type moqConverterer_BaseStruct_results struct {
	params  moqConverterer_BaseStruct_params
	results []struct {
		values     *struct{ structDecl *dst.GenDecl }
		sequence   uint32
		doFn       moqConverterer_BaseStruct_doFn
		doReturnFn moqConverterer_BaseStruct_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqConverterer_BaseStruct_fnRecorder routes recorded function calls to the moqConverterer moq
type moqConverterer_BaseStruct_fnRecorder struct {
	params    moqConverterer_BaseStruct_params
	anyParams uint64
	sequence  bool
	results   *moqConverterer_BaseStruct_results
	moq       *moqConverterer
}

// moqConverterer_BaseStruct_anyParams isolates the any params functions of the Converterer type
type moqConverterer_BaseStruct_anyParams struct {
	recorder *moqConverterer_BaseStruct_fnRecorder
}

// moqConverterer_IsolationStruct_params holds the params of the Converterer type
type moqConverterer_IsolationStruct_params struct{ typeName, suffix string }

// moqConverterer_IsolationStruct_paramsKey holds the map key params of the Converterer type
type moqConverterer_IsolationStruct_paramsKey struct {
	params struct{ typeName, suffix string }
	hashes struct{ typeName, suffix hash.Hash }
}

// moqConverterer_IsolationStruct_resultsByParams contains the results for a given set of parameters for the Converterer type
type moqConverterer_IsolationStruct_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqConverterer_IsolationStruct_paramsKey]*moqConverterer_IsolationStruct_results
}

// moqConverterer_IsolationStruct_doFn defines the type of function needed when calling andDo for the Converterer type
type moqConverterer_IsolationStruct_doFn func(typeName, suffix string)

// moqConverterer_IsolationStruct_doReturnFn defines the type of function needed when calling doReturnResults for the Converterer type
type moqConverterer_IsolationStruct_doReturnFn func(typeName, suffix string) (structDecl *dst.GenDecl)

// moqConverterer_IsolationStruct_results holds the results of the Converterer type
type moqConverterer_IsolationStruct_results struct {
	params  moqConverterer_IsolationStruct_params
	results []struct {
		values     *struct{ structDecl *dst.GenDecl }
		sequence   uint32
		doFn       moqConverterer_IsolationStruct_doFn
		doReturnFn moqConverterer_IsolationStruct_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqConverterer_IsolationStruct_fnRecorder routes recorded function calls to the moqConverterer moq
type moqConverterer_IsolationStruct_fnRecorder struct {
	params    moqConverterer_IsolationStruct_params
	anyParams uint64
	sequence  bool
	results   *moqConverterer_IsolationStruct_results
	moq       *moqConverterer
}

// moqConverterer_IsolationStruct_anyParams isolates the any params functions of the Converterer type
type moqConverterer_IsolationStruct_anyParams struct {
	recorder *moqConverterer_IsolationStruct_fnRecorder
}

// moqConverterer_MethodStructs_params holds the params of the Converterer type
type moqConverterer_MethodStructs_params struct {
	typeSpec *dst.TypeSpec
	fn       generator.Func
}

// moqConverterer_MethodStructs_paramsKey holds the map key params of the Converterer type
type moqConverterer_MethodStructs_paramsKey struct {
	params struct {
		typeSpec *dst.TypeSpec
		fn       generator.Func
	}
	hashes struct {
		typeSpec hash.Hash
		fn       hash.Hash
	}
}

// moqConverterer_MethodStructs_resultsByParams contains the results for a given set of parameters for the Converterer type
type moqConverterer_MethodStructs_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqConverterer_MethodStructs_paramsKey]*moqConverterer_MethodStructs_results
}

// moqConverterer_MethodStructs_doFn defines the type of function needed when calling andDo for the Converterer type
type moqConverterer_MethodStructs_doFn func(typeSpec *dst.TypeSpec, fn generator.Func)

// moqConverterer_MethodStructs_doReturnFn defines the type of function needed when calling doReturnResults for the Converterer type
type moqConverterer_MethodStructs_doReturnFn func(typeSpec *dst.TypeSpec, fn generator.Func) (structDecls []dst.Decl, err error)

// moqConverterer_MethodStructs_results holds the results of the Converterer type
type moqConverterer_MethodStructs_results struct {
	params  moqConverterer_MethodStructs_params
	results []struct {
		values *struct {
			structDecls []dst.Decl
			err         error
		}
		sequence   uint32
		doFn       moqConverterer_MethodStructs_doFn
		doReturnFn moqConverterer_MethodStructs_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqConverterer_MethodStructs_fnRecorder routes recorded function calls to the moqConverterer moq
type moqConverterer_MethodStructs_fnRecorder struct {
	params    moqConverterer_MethodStructs_params
	anyParams uint64
	sequence  bool
	results   *moqConverterer_MethodStructs_results
	moq       *moqConverterer
}

// moqConverterer_MethodStructs_anyParams isolates the any params functions of the Converterer type
type moqConverterer_MethodStructs_anyParams struct {
	recorder *moqConverterer_MethodStructs_fnRecorder
}

// moqConverterer_NewFunc_params holds the params of the Converterer type
type moqConverterer_NewFunc_params struct {
	typeSpec *dst.TypeSpec
	funcs    []generator.Func
}

// moqConverterer_NewFunc_paramsKey holds the map key params of the Converterer type
type moqConverterer_NewFunc_paramsKey struct {
	params struct{ typeSpec *dst.TypeSpec }
	hashes struct {
		typeSpec hash.Hash
		funcs    hash.Hash
	}
}

// moqConverterer_NewFunc_resultsByParams contains the results for a given set of parameters for the Converterer type
type moqConverterer_NewFunc_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqConverterer_NewFunc_paramsKey]*moqConverterer_NewFunc_results
}

// moqConverterer_NewFunc_doFn defines the type of function needed when calling andDo for the Converterer type
type moqConverterer_NewFunc_doFn func(typeSpec *dst.TypeSpec, funcs []generator.Func)

// moqConverterer_NewFunc_doReturnFn defines the type of function needed when calling doReturnResults for the Converterer type
type moqConverterer_NewFunc_doReturnFn func(typeSpec *dst.TypeSpec, funcs []generator.Func) (funcDecl *dst.FuncDecl)

// moqConverterer_NewFunc_results holds the results of the Converterer type
type moqConverterer_NewFunc_results struct {
	params  moqConverterer_NewFunc_params
	results []struct {
		values     *struct{ funcDecl *dst.FuncDecl }
		sequence   uint32
		doFn       moqConverterer_NewFunc_doFn
		doReturnFn moqConverterer_NewFunc_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqConverterer_NewFunc_fnRecorder routes recorded function calls to the moqConverterer moq
type moqConverterer_NewFunc_fnRecorder struct {
	params    moqConverterer_NewFunc_params
	anyParams uint64
	sequence  bool
	results   *moqConverterer_NewFunc_results
	moq       *moqConverterer
}

// moqConverterer_NewFunc_anyParams isolates the any params functions of the Converterer type
type moqConverterer_NewFunc_anyParams struct {
	recorder *moqConverterer_NewFunc_fnRecorder
}

// moqConverterer_IsolationAccessor_params holds the params of the Converterer type
type moqConverterer_IsolationAccessor_params struct{ typeName, suffix, fnName string }

// moqConverterer_IsolationAccessor_paramsKey holds the map key params of the Converterer type
type moqConverterer_IsolationAccessor_paramsKey struct {
	params struct{ typeName, suffix, fnName string }
	hashes struct{ typeName, suffix, fnName hash.Hash }
}

// moqConverterer_IsolationAccessor_resultsByParams contains the results for a given set of parameters for the Converterer type
type moqConverterer_IsolationAccessor_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqConverterer_IsolationAccessor_paramsKey]*moqConverterer_IsolationAccessor_results
}

// moqConverterer_IsolationAccessor_doFn defines the type of function needed when calling andDo for the Converterer type
type moqConverterer_IsolationAccessor_doFn func(typeName, suffix, fnName string)

// moqConverterer_IsolationAccessor_doReturnFn defines the type of function needed when calling doReturnResults for the Converterer type
type moqConverterer_IsolationAccessor_doReturnFn func(typeName, suffix, fnName string) (funcDecl *dst.FuncDecl)

// moqConverterer_IsolationAccessor_results holds the results of the Converterer type
type moqConverterer_IsolationAccessor_results struct {
	params  moqConverterer_IsolationAccessor_params
	results []struct {
		values     *struct{ funcDecl *dst.FuncDecl }
		sequence   uint32
		doFn       moqConverterer_IsolationAccessor_doFn
		doReturnFn moqConverterer_IsolationAccessor_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqConverterer_IsolationAccessor_fnRecorder routes recorded function calls to the moqConverterer moq
type moqConverterer_IsolationAccessor_fnRecorder struct {
	params    moqConverterer_IsolationAccessor_params
	anyParams uint64
	sequence  bool
	results   *moqConverterer_IsolationAccessor_results
	moq       *moqConverterer
}

// moqConverterer_IsolationAccessor_anyParams isolates the any params functions of the Converterer type
type moqConverterer_IsolationAccessor_anyParams struct {
	recorder *moqConverterer_IsolationAccessor_fnRecorder
}

// moqConverterer_FuncClosure_params holds the params of the Converterer type
type moqConverterer_FuncClosure_params struct {
	typeName, pkgPath string
	fn                generator.Func
}

// moqConverterer_FuncClosure_paramsKey holds the map key params of the Converterer type
type moqConverterer_FuncClosure_paramsKey struct {
	params struct {
		typeName, pkgPath string
		fn                generator.Func
	}
	hashes struct {
		typeName, pkgPath hash.Hash
		fn                hash.Hash
	}
}

// moqConverterer_FuncClosure_resultsByParams contains the results for a given set of parameters for the Converterer type
type moqConverterer_FuncClosure_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqConverterer_FuncClosure_paramsKey]*moqConverterer_FuncClosure_results
}

// moqConverterer_FuncClosure_doFn defines the type of function needed when calling andDo for the Converterer type
type moqConverterer_FuncClosure_doFn func(typeName, pkgPath string, fn generator.Func)

// moqConverterer_FuncClosure_doReturnFn defines the type of function needed when calling doReturnResults for the Converterer type
type moqConverterer_FuncClosure_doReturnFn func(typeName, pkgPath string, fn generator.Func) (funcDecl *dst.FuncDecl)

// moqConverterer_FuncClosure_results holds the results of the Converterer type
type moqConverterer_FuncClosure_results struct {
	params  moqConverterer_FuncClosure_params
	results []struct {
		values     *struct{ funcDecl *dst.FuncDecl }
		sequence   uint32
		doFn       moqConverterer_FuncClosure_doFn
		doReturnFn moqConverterer_FuncClosure_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqConverterer_FuncClosure_fnRecorder routes recorded function calls to the moqConverterer moq
type moqConverterer_FuncClosure_fnRecorder struct {
	params    moqConverterer_FuncClosure_params
	anyParams uint64
	sequence  bool
	results   *moqConverterer_FuncClosure_results
	moq       *moqConverterer
}

// moqConverterer_FuncClosure_anyParams isolates the any params functions of the Converterer type
type moqConverterer_FuncClosure_anyParams struct {
	recorder *moqConverterer_FuncClosure_fnRecorder
}

// moqConverterer_MockMethod_params holds the params of the Converterer type
type moqConverterer_MockMethod_params struct {
	typeName string
	fn       generator.Func
}

// moqConverterer_MockMethod_paramsKey holds the map key params of the Converterer type
type moqConverterer_MockMethod_paramsKey struct {
	params struct {
		typeName string
		fn       generator.Func
	}
	hashes struct {
		typeName hash.Hash
		fn       hash.Hash
	}
}

// moqConverterer_MockMethod_resultsByParams contains the results for a given set of parameters for the Converterer type
type moqConverterer_MockMethod_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqConverterer_MockMethod_paramsKey]*moqConverterer_MockMethod_results
}

// moqConverterer_MockMethod_doFn defines the type of function needed when calling andDo for the Converterer type
type moqConverterer_MockMethod_doFn func(typeName string, fn generator.Func)

// moqConverterer_MockMethod_doReturnFn defines the type of function needed when calling doReturnResults for the Converterer type
type moqConverterer_MockMethod_doReturnFn func(typeName string, fn generator.Func) (funcDecl *dst.FuncDecl)

// moqConverterer_MockMethod_results holds the results of the Converterer type
type moqConverterer_MockMethod_results struct {
	params  moqConverterer_MockMethod_params
	results []struct {
		values     *struct{ funcDecl *dst.FuncDecl }
		sequence   uint32
		doFn       moqConverterer_MockMethod_doFn
		doReturnFn moqConverterer_MockMethod_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqConverterer_MockMethod_fnRecorder routes recorded function calls to the moqConverterer moq
type moqConverterer_MockMethod_fnRecorder struct {
	params    moqConverterer_MockMethod_params
	anyParams uint64
	sequence  bool
	results   *moqConverterer_MockMethod_results
	moq       *moqConverterer
}

// moqConverterer_MockMethod_anyParams isolates the any params functions of the Converterer type
type moqConverterer_MockMethod_anyParams struct {
	recorder *moqConverterer_MockMethod_fnRecorder
}

// moqConverterer_RecorderMethods_params holds the params of the Converterer type
type moqConverterer_RecorderMethods_params struct {
	typeName string
	fn       generator.Func
}

// moqConverterer_RecorderMethods_paramsKey holds the map key params of the Converterer type
type moqConverterer_RecorderMethods_paramsKey struct {
	params struct {
		typeName string
		fn       generator.Func
	}
	hashes struct {
		typeName hash.Hash
		fn       hash.Hash
	}
}

// moqConverterer_RecorderMethods_resultsByParams contains the results for a given set of parameters for the Converterer type
type moqConverterer_RecorderMethods_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqConverterer_RecorderMethods_paramsKey]*moqConverterer_RecorderMethods_results
}

// moqConverterer_RecorderMethods_doFn defines the type of function needed when calling andDo for the Converterer type
type moqConverterer_RecorderMethods_doFn func(typeName string, fn generator.Func)

// moqConverterer_RecorderMethods_doReturnFn defines the type of function needed when calling doReturnResults for the Converterer type
type moqConverterer_RecorderMethods_doReturnFn func(typeName string, fn generator.Func) (funcDecls []dst.Decl)

// moqConverterer_RecorderMethods_results holds the results of the Converterer type
type moqConverterer_RecorderMethods_results struct {
	params  moqConverterer_RecorderMethods_params
	results []struct {
		values     *struct{ funcDecls []dst.Decl }
		sequence   uint32
		doFn       moqConverterer_RecorderMethods_doFn
		doReturnFn moqConverterer_RecorderMethods_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqConverterer_RecorderMethods_fnRecorder routes recorded function calls to the moqConverterer moq
type moqConverterer_RecorderMethods_fnRecorder struct {
	params    moqConverterer_RecorderMethods_params
	anyParams uint64
	sequence  bool
	results   *moqConverterer_RecorderMethods_results
	moq       *moqConverterer
}

// moqConverterer_RecorderMethods_anyParams isolates the any params functions of the Converterer type
type moqConverterer_RecorderMethods_anyParams struct {
	recorder *moqConverterer_RecorderMethods_fnRecorder
}

// moqConverterer_ResetMethod_params holds the params of the Converterer type
type moqConverterer_ResetMethod_params struct {
	typeSpec *dst.TypeSpec
	funcs    []generator.Func
}

// moqConverterer_ResetMethod_paramsKey holds the map key params of the Converterer type
type moqConverterer_ResetMethod_paramsKey struct {
	params struct{ typeSpec *dst.TypeSpec }
	hashes struct {
		typeSpec hash.Hash
		funcs    hash.Hash
	}
}

// moqConverterer_ResetMethod_resultsByParams contains the results for a given set of parameters for the Converterer type
type moqConverterer_ResetMethod_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqConverterer_ResetMethod_paramsKey]*moqConverterer_ResetMethod_results
}

// moqConverterer_ResetMethod_doFn defines the type of function needed when calling andDo for the Converterer type
type moqConverterer_ResetMethod_doFn func(typeSpec *dst.TypeSpec, funcs []generator.Func)

// moqConverterer_ResetMethod_doReturnFn defines the type of function needed when calling doReturnResults for the Converterer type
type moqConverterer_ResetMethod_doReturnFn func(typeSpec *dst.TypeSpec, funcs []generator.Func) (funcDecl *dst.FuncDecl)

// moqConverterer_ResetMethod_results holds the results of the Converterer type
type moqConverterer_ResetMethod_results struct {
	params  moqConverterer_ResetMethod_params
	results []struct {
		values     *struct{ funcDecl *dst.FuncDecl }
		sequence   uint32
		doFn       moqConverterer_ResetMethod_doFn
		doReturnFn moqConverterer_ResetMethod_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqConverterer_ResetMethod_fnRecorder routes recorded function calls to the moqConverterer moq
type moqConverterer_ResetMethod_fnRecorder struct {
	params    moqConverterer_ResetMethod_params
	anyParams uint64
	sequence  bool
	results   *moqConverterer_ResetMethod_results
	moq       *moqConverterer
}

// moqConverterer_ResetMethod_anyParams isolates the any params functions of the Converterer type
type moqConverterer_ResetMethod_anyParams struct {
	recorder *moqConverterer_ResetMethod_fnRecorder
}

// moqConverterer_AssertMethod_params holds the params of the Converterer type
type moqConverterer_AssertMethod_params struct {
	typeSpec *dst.TypeSpec
	funcs    []generator.Func
}

// moqConverterer_AssertMethod_paramsKey holds the map key params of the Converterer type
type moqConverterer_AssertMethod_paramsKey struct {
	params struct{ typeSpec *dst.TypeSpec }
	hashes struct {
		typeSpec hash.Hash
		funcs    hash.Hash
	}
}

// moqConverterer_AssertMethod_resultsByParams contains the results for a given set of parameters for the Converterer type
type moqConverterer_AssertMethod_resultsByParams struct {
	anyCount  int
	anyParams uint64
	results   map[moqConverterer_AssertMethod_paramsKey]*moqConverterer_AssertMethod_results
}

// moqConverterer_AssertMethod_doFn defines the type of function needed when calling andDo for the Converterer type
type moqConverterer_AssertMethod_doFn func(typeSpec *dst.TypeSpec, funcs []generator.Func)

// moqConverterer_AssertMethod_doReturnFn defines the type of function needed when calling doReturnResults for the Converterer type
type moqConverterer_AssertMethod_doReturnFn func(typeSpec *dst.TypeSpec, funcs []generator.Func) (funcDecl *dst.FuncDecl)

// moqConverterer_AssertMethod_results holds the results of the Converterer type
type moqConverterer_AssertMethod_results struct {
	params  moqConverterer_AssertMethod_params
	results []struct {
		values     *struct{ funcDecl *dst.FuncDecl }
		sequence   uint32
		doFn       moqConverterer_AssertMethod_doFn
		doReturnFn moqConverterer_AssertMethod_doReturnFn
	}
	index  uint32
	repeat *moq.RepeatVal
}

// moqConverterer_AssertMethod_fnRecorder routes recorded function calls to the moqConverterer moq
type moqConverterer_AssertMethod_fnRecorder struct {
	params    moqConverterer_AssertMethod_params
	anyParams uint64
	sequence  bool
	results   *moqConverterer_AssertMethod_results
	moq       *moqConverterer
}

// moqConverterer_AssertMethod_anyParams isolates the any params functions of the Converterer type
type moqConverterer_AssertMethod_anyParams struct {
	recorder *moqConverterer_AssertMethod_fnRecorder
}

// newMoqConverterer creates a new moq of the Converterer type
func newMoqConverterer(scene *moq.Scene, config *moq.Config) *moqConverterer {
	if config == nil {
		config = &moq.Config{}
	}
	m := &moqConverterer{
		scene:  scene,
		config: *config,
		moq:    &moqConverterer_mock{},

		runtime: struct {
			parameterIndexing struct {
				BaseStruct struct {
					typeSpec moq.ParamIndexing
					funcs    moq.ParamIndexing
				}
				IsolationStruct struct {
					typeName moq.ParamIndexing
					suffix   moq.ParamIndexing
				}
				MethodStructs struct {
					typeSpec moq.ParamIndexing
					fn       moq.ParamIndexing
				}
				NewFunc struct {
					typeSpec moq.ParamIndexing
					funcs    moq.ParamIndexing
				}
				IsolationAccessor struct {
					typeName moq.ParamIndexing
					suffix   moq.ParamIndexing
					fnName   moq.ParamIndexing
				}
				FuncClosure struct {
					typeName moq.ParamIndexing
					pkgPath  moq.ParamIndexing
					fn       moq.ParamIndexing
				}
				MockMethod struct {
					typeName moq.ParamIndexing
					fn       moq.ParamIndexing
				}
				RecorderMethods struct {
					typeName moq.ParamIndexing
					fn       moq.ParamIndexing
				}
				ResetMethod struct {
					typeSpec moq.ParamIndexing
					funcs    moq.ParamIndexing
				}
				AssertMethod struct {
					typeSpec moq.ParamIndexing
					funcs    moq.ParamIndexing
				}
			}
		}{parameterIndexing: struct {
			BaseStruct struct {
				typeSpec moq.ParamIndexing
				funcs    moq.ParamIndexing
			}
			IsolationStruct struct {
				typeName moq.ParamIndexing
				suffix   moq.ParamIndexing
			}
			MethodStructs struct {
				typeSpec moq.ParamIndexing
				fn       moq.ParamIndexing
			}
			NewFunc struct {
				typeSpec moq.ParamIndexing
				funcs    moq.ParamIndexing
			}
			IsolationAccessor struct {
				typeName moq.ParamIndexing
				suffix   moq.ParamIndexing
				fnName   moq.ParamIndexing
			}
			FuncClosure struct {
				typeName moq.ParamIndexing
				pkgPath  moq.ParamIndexing
				fn       moq.ParamIndexing
			}
			MockMethod struct {
				typeName moq.ParamIndexing
				fn       moq.ParamIndexing
			}
			RecorderMethods struct {
				typeName moq.ParamIndexing
				fn       moq.ParamIndexing
			}
			ResetMethod struct {
				typeSpec moq.ParamIndexing
				funcs    moq.ParamIndexing
			}
			AssertMethod struct {
				typeSpec moq.ParamIndexing
				funcs    moq.ParamIndexing
			}
		}{
			BaseStruct: struct {
				typeSpec moq.ParamIndexing
				funcs    moq.ParamIndexing
			}{
				typeSpec: moq.ParamIndexByHash,
				funcs:    moq.ParamIndexByHash,
			},
			IsolationStruct: struct {
				typeName moq.ParamIndexing
				suffix   moq.ParamIndexing
			}{
				typeName: moq.ParamIndexByValue,
				suffix:   moq.ParamIndexByValue,
			},
			MethodStructs: struct {
				typeSpec moq.ParamIndexing
				fn       moq.ParamIndexing
			}{
				typeSpec: moq.ParamIndexByHash,
				fn:       moq.ParamIndexByHash,
			},
			NewFunc: struct {
				typeSpec moq.ParamIndexing
				funcs    moq.ParamIndexing
			}{
				typeSpec: moq.ParamIndexByHash,
				funcs:    moq.ParamIndexByHash,
			},
			IsolationAccessor: struct {
				typeName moq.ParamIndexing
				suffix   moq.ParamIndexing
				fnName   moq.ParamIndexing
			}{
				typeName: moq.ParamIndexByValue,
				suffix:   moq.ParamIndexByValue,
				fnName:   moq.ParamIndexByValue,
			},
			FuncClosure: struct {
				typeName moq.ParamIndexing
				pkgPath  moq.ParamIndexing
				fn       moq.ParamIndexing
			}{
				typeName: moq.ParamIndexByValue,
				pkgPath:  moq.ParamIndexByValue,
				fn:       moq.ParamIndexByHash,
			},
			MockMethod: struct {
				typeName moq.ParamIndexing
				fn       moq.ParamIndexing
			}{
				typeName: moq.ParamIndexByValue,
				fn:       moq.ParamIndexByHash,
			},
			RecorderMethods: struct {
				typeName moq.ParamIndexing
				fn       moq.ParamIndexing
			}{
				typeName: moq.ParamIndexByValue,
				fn:       moq.ParamIndexByHash,
			},
			ResetMethod: struct {
				typeSpec moq.ParamIndexing
				funcs    moq.ParamIndexing
			}{
				typeSpec: moq.ParamIndexByHash,
				funcs:    moq.ParamIndexByHash,
			},
			AssertMethod: struct {
				typeSpec moq.ParamIndexing
				funcs    moq.ParamIndexing
			}{
				typeSpec: moq.ParamIndexByHash,
				funcs:    moq.ParamIndexByHash,
			},
		}},
	}
	m.moq.moq = m

	scene.AddMoq(m)
	return m
}

// mock returns the mock implementation of the Converterer type
func (m *moqConverterer) mock() *moqConverterer_mock { return m.moq }

func (m *moqConverterer_mock) BaseStruct(typeSpec *dst.TypeSpec, funcs []generator.Func) (structDecl *dst.GenDecl) {
	params := moqConverterer_BaseStruct_params{
		typeSpec: typeSpec,
		funcs:    funcs,
	}
	var results *moqConverterer_BaseStruct_results
	for _, resultsByParams := range m.moq.resultsByParams_BaseStruct {
		paramsKey := m.moq.paramsKey_BaseStruct(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match %#v", params)
		}
	}

	if result.doFn != nil {
		result.doFn(typeSpec, funcs)
	}

	if result.values != nil {
		structDecl = result.values.structDecl
	}
	if result.doReturnFn != nil {
		structDecl = result.doReturnFn(typeSpec, funcs)
	}
	return
}

func (m *moqConverterer_mock) IsolationStruct(typeName, suffix string) (structDecl *dst.GenDecl) {
	params := moqConverterer_IsolationStruct_params{
		typeName: typeName,
		suffix:   suffix,
	}
	var results *moqConverterer_IsolationStruct_results
	for _, resultsByParams := range m.moq.resultsByParams_IsolationStruct {
		paramsKey := m.moq.paramsKey_IsolationStruct(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match %#v", params)
		}
	}

	if result.doFn != nil {
		result.doFn(typeName, suffix)
	}

	if result.values != nil {
		structDecl = result.values.structDecl
	}
	if result.doReturnFn != nil {
		structDecl = result.doReturnFn(typeName, suffix)
	}
	return
}

func (m *moqConverterer_mock) MethodStructs(typeSpec *dst.TypeSpec, fn generator.Func) (structDecls []dst.Decl, err error) {
	params := moqConverterer_MethodStructs_params{
		typeSpec: typeSpec,
		fn:       fn,
	}
	var results *moqConverterer_MethodStructs_results
	for _, resultsByParams := range m.moq.resultsByParams_MethodStructs {
		paramsKey := m.moq.paramsKey_MethodStructs(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match %#v", params)
		}
	}

	if result.doFn != nil {
		result.doFn(typeSpec, fn)
	}

	if result.values != nil {
		structDecls = result.values.structDecls
		err = result.values.err
	}
	if result.doReturnFn != nil {
		structDecls, err = result.doReturnFn(typeSpec, fn)
	}
	return
}

func (m *moqConverterer_mock) NewFunc(typeSpec *dst.TypeSpec, funcs []generator.Func) (funcDecl *dst.FuncDecl) {
	params := moqConverterer_NewFunc_params{
		typeSpec: typeSpec,
		funcs:    funcs,
	}
	var results *moqConverterer_NewFunc_results
	for _, resultsByParams := range m.moq.resultsByParams_NewFunc {
		paramsKey := m.moq.paramsKey_NewFunc(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match %#v", params)
		}
	}

	if result.doFn != nil {
		result.doFn(typeSpec, funcs)
	}

	if result.values != nil {
		funcDecl = result.values.funcDecl
	}
	if result.doReturnFn != nil {
		funcDecl = result.doReturnFn(typeSpec, funcs)
	}
	return
}

func (m *moqConverterer_mock) IsolationAccessor(typeName, suffix, fnName string) (funcDecl *dst.FuncDecl) {
	params := moqConverterer_IsolationAccessor_params{
		typeName: typeName,
		suffix:   suffix,
		fnName:   fnName,
	}
	var results *moqConverterer_IsolationAccessor_results
	for _, resultsByParams := range m.moq.resultsByParams_IsolationAccessor {
		paramsKey := m.moq.paramsKey_IsolationAccessor(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match %#v", params)
		}
	}

	if result.doFn != nil {
		result.doFn(typeName, suffix, fnName)
	}

	if result.values != nil {
		funcDecl = result.values.funcDecl
	}
	if result.doReturnFn != nil {
		funcDecl = result.doReturnFn(typeName, suffix, fnName)
	}
	return
}

func (m *moqConverterer_mock) FuncClosure(typeName, pkgPath string, fn generator.Func) (funcDecl *dst.FuncDecl) {
	params := moqConverterer_FuncClosure_params{
		typeName: typeName,
		pkgPath:  pkgPath,
		fn:       fn,
	}
	var results *moqConverterer_FuncClosure_results
	for _, resultsByParams := range m.moq.resultsByParams_FuncClosure {
		paramsKey := m.moq.paramsKey_FuncClosure(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match %#v", params)
		}
	}

	if result.doFn != nil {
		result.doFn(typeName, pkgPath, fn)
	}

	if result.values != nil {
		funcDecl = result.values.funcDecl
	}
	if result.doReturnFn != nil {
		funcDecl = result.doReturnFn(typeName, pkgPath, fn)
	}
	return
}

func (m *moqConverterer_mock) MockMethod(typeName string, fn generator.Func) (funcDecl *dst.FuncDecl) {
	params := moqConverterer_MockMethod_params{
		typeName: typeName,
		fn:       fn,
	}
	var results *moqConverterer_MockMethod_results
	for _, resultsByParams := range m.moq.resultsByParams_MockMethod {
		paramsKey := m.moq.paramsKey_MockMethod(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match %#v", params)
		}
	}

	if result.doFn != nil {
		result.doFn(typeName, fn)
	}

	if result.values != nil {
		funcDecl = result.values.funcDecl
	}
	if result.doReturnFn != nil {
		funcDecl = result.doReturnFn(typeName, fn)
	}
	return
}

func (m *moqConverterer_mock) RecorderMethods(typeName string, fn generator.Func) (funcDecls []dst.Decl) {
	params := moqConverterer_RecorderMethods_params{
		typeName: typeName,
		fn:       fn,
	}
	var results *moqConverterer_RecorderMethods_results
	for _, resultsByParams := range m.moq.resultsByParams_RecorderMethods {
		paramsKey := m.moq.paramsKey_RecorderMethods(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match %#v", params)
		}
	}

	if result.doFn != nil {
		result.doFn(typeName, fn)
	}

	if result.values != nil {
		funcDecls = result.values.funcDecls
	}
	if result.doReturnFn != nil {
		funcDecls = result.doReturnFn(typeName, fn)
	}
	return
}

func (m *moqConverterer_mock) ResetMethod(typeSpec *dst.TypeSpec, funcs []generator.Func) (funcDecl *dst.FuncDecl) {
	params := moqConverterer_ResetMethod_params{
		typeSpec: typeSpec,
		funcs:    funcs,
	}
	var results *moqConverterer_ResetMethod_results
	for _, resultsByParams := range m.moq.resultsByParams_ResetMethod {
		paramsKey := m.moq.paramsKey_ResetMethod(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match %#v", params)
		}
	}

	if result.doFn != nil {
		result.doFn(typeSpec, funcs)
	}

	if result.values != nil {
		funcDecl = result.values.funcDecl
	}
	if result.doReturnFn != nil {
		funcDecl = result.doReturnFn(typeSpec, funcs)
	}
	return
}

func (m *moqConverterer_mock) AssertMethod(typeSpec *dst.TypeSpec, funcs []generator.Func) (funcDecl *dst.FuncDecl) {
	params := moqConverterer_AssertMethod_params{
		typeSpec: typeSpec,
		funcs:    funcs,
	}
	var results *moqConverterer_AssertMethod_results
	for _, resultsByParams := range m.moq.resultsByParams_AssertMethod {
		paramsKey := m.moq.paramsKey_AssertMethod(params, resultsByParams.anyParams)
		var ok bool
		results, ok = resultsByParams.results[paramsKey]
		if ok {
			break
		}
	}
	if results == nil {
		if m.moq.config.Expectation == moq.Strict {
			m.moq.scene.T.Fatalf("Unexpected call with parameters %#v", params)
		}
		return
	}

	i := int(atomic.AddUint32(&results.index, 1)) - 1
	if i >= results.repeat.ResultCount {
		if !results.repeat.AnyTimes {
			if m.moq.config.Expectation == moq.Strict {
				m.moq.scene.T.Fatalf("Too many calls to mock with parameters %#v", params)
			}
			return
		}
		i = results.repeat.ResultCount - 1
	}

	result := results.results[i]
	if result.sequence != 0 {
		sequence := m.moq.scene.NextMockSequence()
		if (!results.repeat.AnyTimes && result.sequence != sequence) || result.sequence > sequence {
			m.moq.scene.T.Fatalf("Call sequence does not match %#v", params)
		}
	}

	if result.doFn != nil {
		result.doFn(typeSpec, funcs)
	}

	if result.values != nil {
		funcDecl = result.values.funcDecl
	}
	if result.doReturnFn != nil {
		funcDecl = result.doReturnFn(typeSpec, funcs)
	}
	return
}

// onCall returns the recorder implementation of the Converterer type
func (m *moqConverterer) onCall() *moqConverterer_recorder {
	return &moqConverterer_recorder{
		moq: m,
	}
}

func (m *moqConverterer_recorder) BaseStruct(typeSpec *dst.TypeSpec, funcs []generator.Func) *moqConverterer_BaseStruct_fnRecorder {
	return &moqConverterer_BaseStruct_fnRecorder{
		params: moqConverterer_BaseStruct_params{
			typeSpec: typeSpec,
			funcs:    funcs,
		},
		sequence: m.moq.config.Sequence == moq.SeqDefaultOn,
		moq:      m.moq,
	}
}

func (r *moqConverterer_BaseStruct_fnRecorder) any() *moqConverterer_BaseStruct_anyParams {
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	return &moqConverterer_BaseStruct_anyParams{recorder: r}
}

func (a *moqConverterer_BaseStruct_anyParams) typeSpec() *moqConverterer_BaseStruct_fnRecorder {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (a *moqConverterer_BaseStruct_anyParams) funcs() *moqConverterer_BaseStruct_fnRecorder {
	a.recorder.anyParams |= 1 << 1
	return a.recorder
}

func (r *moqConverterer_BaseStruct_fnRecorder) seq() *moqConverterer_BaseStruct_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqConverterer_BaseStruct_fnRecorder) noSeq() *moqConverterer_BaseStruct_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqConverterer_BaseStruct_fnRecorder) returnResults(structDecl *dst.GenDecl) *moqConverterer_BaseStruct_fnRecorder {
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values     *struct{ structDecl *dst.GenDecl }
		sequence   uint32
		doFn       moqConverterer_BaseStruct_doFn
		doReturnFn moqConverterer_BaseStruct_doReturnFn
	}{
		values: &struct{ structDecl *dst.GenDecl }{
			structDecl: structDecl,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqConverterer_BaseStruct_fnRecorder) andDo(fn moqConverterer_BaseStruct_doFn) *moqConverterer_BaseStruct_fnRecorder {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqConverterer_BaseStruct_fnRecorder) doReturnResults(fn moqConverterer_BaseStruct_doReturnFn) *moqConverterer_BaseStruct_fnRecorder {
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values     *struct{ structDecl *dst.GenDecl }
		sequence   uint32
		doFn       moqConverterer_BaseStruct_doFn
		doReturnFn moqConverterer_BaseStruct_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqConverterer_BaseStruct_fnRecorder) findResults() {
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqConverterer_BaseStruct_resultsByParams
	for n, res := range r.moq.resultsByParams_BaseStruct {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqConverterer_BaseStruct_resultsByParams{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqConverterer_BaseStruct_paramsKey]*moqConverterer_BaseStruct_results{},
		}
		r.moq.resultsByParams_BaseStruct = append(r.moq.resultsByParams_BaseStruct, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams_BaseStruct) {
			copy(r.moq.resultsByParams_BaseStruct[insertAt+1:], r.moq.resultsByParams_BaseStruct[insertAt:0])
			r.moq.resultsByParams_BaseStruct[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey_BaseStruct(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqConverterer_BaseStruct_results{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqConverterer_BaseStruct_fnRecorder) repeat(repeaters ...moq.Repeater) *moqConverterer_BaseStruct_fnRecorder {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values     *struct{ structDecl *dst.GenDecl }
				sequence   uint32
				doFn       moqConverterer_BaseStruct_doFn
				doReturnFn moqConverterer_BaseStruct_doReturnFn
			}{
				values: &struct{ structDecl *dst.GenDecl }{
					structDecl: last.values.structDecl,
				},
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqConverterer) paramsKey_BaseStruct(params moqConverterer_BaseStruct_params, anyParams uint64) moqConverterer_BaseStruct_paramsKey {
	var typeSpecUsed *dst.TypeSpec
	var typeSpecUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.BaseStruct.typeSpec == moq.ParamIndexByValue {
			typeSpecUsed = params.typeSpec
		} else {
			typeSpecUsedHash = hash.DeepHash(params.typeSpec)
		}
	}
	var funcsUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.runtime.parameterIndexing.BaseStruct.funcs == moq.ParamIndexByValue {
			m.scene.T.Fatalf("The funcs parameter of the BaseStruct function can't be indexed by value")
		}
		funcsUsedHash = hash.DeepHash(params.funcs)
	}
	return moqConverterer_BaseStruct_paramsKey{
		params: struct{ typeSpec *dst.TypeSpec }{
			typeSpec: typeSpecUsed,
		},
		hashes: struct {
			typeSpec hash.Hash
			funcs    hash.Hash
		}{
			typeSpec: typeSpecUsedHash,
			funcs:    funcsUsedHash,
		}}
}

func (m *moqConverterer_recorder) IsolationStruct(typeName, suffix string) *moqConverterer_IsolationStruct_fnRecorder {
	return &moqConverterer_IsolationStruct_fnRecorder{
		params: moqConverterer_IsolationStruct_params{
			typeName: typeName,
			suffix:   suffix,
		},
		sequence: m.moq.config.Sequence == moq.SeqDefaultOn,
		moq:      m.moq,
	}
}

func (r *moqConverterer_IsolationStruct_fnRecorder) any() *moqConverterer_IsolationStruct_anyParams {
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	return &moqConverterer_IsolationStruct_anyParams{recorder: r}
}

func (a *moqConverterer_IsolationStruct_anyParams) typeName() *moqConverterer_IsolationStruct_fnRecorder {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (a *moqConverterer_IsolationStruct_anyParams) suffix() *moqConverterer_IsolationStruct_fnRecorder {
	a.recorder.anyParams |= 1 << 1
	return a.recorder
}

func (r *moqConverterer_IsolationStruct_fnRecorder) seq() *moqConverterer_IsolationStruct_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqConverterer_IsolationStruct_fnRecorder) noSeq() *moqConverterer_IsolationStruct_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqConverterer_IsolationStruct_fnRecorder) returnResults(structDecl *dst.GenDecl) *moqConverterer_IsolationStruct_fnRecorder {
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values     *struct{ structDecl *dst.GenDecl }
		sequence   uint32
		doFn       moqConverterer_IsolationStruct_doFn
		doReturnFn moqConverterer_IsolationStruct_doReturnFn
	}{
		values: &struct{ structDecl *dst.GenDecl }{
			structDecl: structDecl,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqConverterer_IsolationStruct_fnRecorder) andDo(fn moqConverterer_IsolationStruct_doFn) *moqConverterer_IsolationStruct_fnRecorder {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqConverterer_IsolationStruct_fnRecorder) doReturnResults(fn moqConverterer_IsolationStruct_doReturnFn) *moqConverterer_IsolationStruct_fnRecorder {
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values     *struct{ structDecl *dst.GenDecl }
		sequence   uint32
		doFn       moqConverterer_IsolationStruct_doFn
		doReturnFn moqConverterer_IsolationStruct_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqConverterer_IsolationStruct_fnRecorder) findResults() {
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqConverterer_IsolationStruct_resultsByParams
	for n, res := range r.moq.resultsByParams_IsolationStruct {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqConverterer_IsolationStruct_resultsByParams{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqConverterer_IsolationStruct_paramsKey]*moqConverterer_IsolationStruct_results{},
		}
		r.moq.resultsByParams_IsolationStruct = append(r.moq.resultsByParams_IsolationStruct, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams_IsolationStruct) {
			copy(r.moq.resultsByParams_IsolationStruct[insertAt+1:], r.moq.resultsByParams_IsolationStruct[insertAt:0])
			r.moq.resultsByParams_IsolationStruct[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey_IsolationStruct(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqConverterer_IsolationStruct_results{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqConverterer_IsolationStruct_fnRecorder) repeat(repeaters ...moq.Repeater) *moqConverterer_IsolationStruct_fnRecorder {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values     *struct{ structDecl *dst.GenDecl }
				sequence   uint32
				doFn       moqConverterer_IsolationStruct_doFn
				doReturnFn moqConverterer_IsolationStruct_doReturnFn
			}{
				values: &struct{ structDecl *dst.GenDecl }{
					structDecl: last.values.structDecl,
				},
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqConverterer) paramsKey_IsolationStruct(params moqConverterer_IsolationStruct_params, anyParams uint64) moqConverterer_IsolationStruct_paramsKey {
	var typeNameUsed string
	var typeNameUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.IsolationStruct.typeName == moq.ParamIndexByValue {
			typeNameUsed = params.typeName
		} else {
			typeNameUsedHash = hash.DeepHash(params.typeName)
		}
	}
	var suffixUsed string
	var suffixUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.runtime.parameterIndexing.IsolationStruct.suffix == moq.ParamIndexByValue {
			suffixUsed = params.suffix
		} else {
			suffixUsedHash = hash.DeepHash(params.suffix)
		}
	}
	return moqConverterer_IsolationStruct_paramsKey{
		params: struct{ typeName, suffix string }{
			typeName: typeNameUsed,
			suffix:   suffixUsed,
		},
		hashes: struct{ typeName, suffix hash.Hash }{
			typeName: typeNameUsedHash,
			suffix:   suffixUsedHash,
		}}
}

func (m *moqConverterer_recorder) MethodStructs(typeSpec *dst.TypeSpec, fn generator.Func) *moqConverterer_MethodStructs_fnRecorder {
	return &moqConverterer_MethodStructs_fnRecorder{
		params: moqConverterer_MethodStructs_params{
			typeSpec: typeSpec,
			fn:       fn,
		},
		sequence: m.moq.config.Sequence == moq.SeqDefaultOn,
		moq:      m.moq,
	}
}

func (r *moqConverterer_MethodStructs_fnRecorder) any() *moqConverterer_MethodStructs_anyParams {
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	return &moqConverterer_MethodStructs_anyParams{recorder: r}
}

func (a *moqConverterer_MethodStructs_anyParams) typeSpec() *moqConverterer_MethodStructs_fnRecorder {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (a *moqConverterer_MethodStructs_anyParams) fn() *moqConverterer_MethodStructs_fnRecorder {
	a.recorder.anyParams |= 1 << 1
	return a.recorder
}

func (r *moqConverterer_MethodStructs_fnRecorder) seq() *moqConverterer_MethodStructs_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqConverterer_MethodStructs_fnRecorder) noSeq() *moqConverterer_MethodStructs_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqConverterer_MethodStructs_fnRecorder) returnResults(structDecls []dst.Decl, err error) *moqConverterer_MethodStructs_fnRecorder {
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			structDecls []dst.Decl
			err         error
		}
		sequence   uint32
		doFn       moqConverterer_MethodStructs_doFn
		doReturnFn moqConverterer_MethodStructs_doReturnFn
	}{
		values: &struct {
			structDecls []dst.Decl
			err         error
		}{
			structDecls: structDecls,
			err:         err,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqConverterer_MethodStructs_fnRecorder) andDo(fn moqConverterer_MethodStructs_doFn) *moqConverterer_MethodStructs_fnRecorder {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqConverterer_MethodStructs_fnRecorder) doReturnResults(fn moqConverterer_MethodStructs_doReturnFn) *moqConverterer_MethodStructs_fnRecorder {
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values *struct {
			structDecls []dst.Decl
			err         error
		}
		sequence   uint32
		doFn       moqConverterer_MethodStructs_doFn
		doReturnFn moqConverterer_MethodStructs_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqConverterer_MethodStructs_fnRecorder) findResults() {
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqConverterer_MethodStructs_resultsByParams
	for n, res := range r.moq.resultsByParams_MethodStructs {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqConverterer_MethodStructs_resultsByParams{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqConverterer_MethodStructs_paramsKey]*moqConverterer_MethodStructs_results{},
		}
		r.moq.resultsByParams_MethodStructs = append(r.moq.resultsByParams_MethodStructs, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams_MethodStructs) {
			copy(r.moq.resultsByParams_MethodStructs[insertAt+1:], r.moq.resultsByParams_MethodStructs[insertAt:0])
			r.moq.resultsByParams_MethodStructs[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey_MethodStructs(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqConverterer_MethodStructs_results{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqConverterer_MethodStructs_fnRecorder) repeat(repeaters ...moq.Repeater) *moqConverterer_MethodStructs_fnRecorder {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values *struct {
					structDecls []dst.Decl
					err         error
				}
				sequence   uint32
				doFn       moqConverterer_MethodStructs_doFn
				doReturnFn moqConverterer_MethodStructs_doReturnFn
			}{
				values: &struct {
					structDecls []dst.Decl
					err         error
				}{
					structDecls: last.values.structDecls,
					err:         last.values.err,
				},
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqConverterer) paramsKey_MethodStructs(params moqConverterer_MethodStructs_params, anyParams uint64) moqConverterer_MethodStructs_paramsKey {
	var typeSpecUsed *dst.TypeSpec
	var typeSpecUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.MethodStructs.typeSpec == moq.ParamIndexByValue {
			typeSpecUsed = params.typeSpec
		} else {
			typeSpecUsedHash = hash.DeepHash(params.typeSpec)
		}
	}
	var fnUsed generator.Func
	var fnUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.runtime.parameterIndexing.MethodStructs.fn == moq.ParamIndexByValue {
			fnUsed = params.fn
		} else {
			fnUsedHash = hash.DeepHash(params.fn)
		}
	}
	return moqConverterer_MethodStructs_paramsKey{
		params: struct {
			typeSpec *dst.TypeSpec
			fn       generator.Func
		}{
			typeSpec: typeSpecUsed,
			fn:       fnUsed,
		},
		hashes: struct {
			typeSpec hash.Hash
			fn       hash.Hash
		}{
			typeSpec: typeSpecUsedHash,
			fn:       fnUsedHash,
		}}
}

func (m *moqConverterer_recorder) NewFunc(typeSpec *dst.TypeSpec, funcs []generator.Func) *moqConverterer_NewFunc_fnRecorder {
	return &moqConverterer_NewFunc_fnRecorder{
		params: moqConverterer_NewFunc_params{
			typeSpec: typeSpec,
			funcs:    funcs,
		},
		sequence: m.moq.config.Sequence == moq.SeqDefaultOn,
		moq:      m.moq,
	}
}

func (r *moqConverterer_NewFunc_fnRecorder) any() *moqConverterer_NewFunc_anyParams {
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	return &moqConverterer_NewFunc_anyParams{recorder: r}
}

func (a *moqConverterer_NewFunc_anyParams) typeSpec() *moqConverterer_NewFunc_fnRecorder {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (a *moqConverterer_NewFunc_anyParams) funcs() *moqConverterer_NewFunc_fnRecorder {
	a.recorder.anyParams |= 1 << 1
	return a.recorder
}

func (r *moqConverterer_NewFunc_fnRecorder) seq() *moqConverterer_NewFunc_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqConverterer_NewFunc_fnRecorder) noSeq() *moqConverterer_NewFunc_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqConverterer_NewFunc_fnRecorder) returnResults(funcDecl *dst.FuncDecl) *moqConverterer_NewFunc_fnRecorder {
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values     *struct{ funcDecl *dst.FuncDecl }
		sequence   uint32
		doFn       moqConverterer_NewFunc_doFn
		doReturnFn moqConverterer_NewFunc_doReturnFn
	}{
		values: &struct{ funcDecl *dst.FuncDecl }{
			funcDecl: funcDecl,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqConverterer_NewFunc_fnRecorder) andDo(fn moqConverterer_NewFunc_doFn) *moqConverterer_NewFunc_fnRecorder {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqConverterer_NewFunc_fnRecorder) doReturnResults(fn moqConverterer_NewFunc_doReturnFn) *moqConverterer_NewFunc_fnRecorder {
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values     *struct{ funcDecl *dst.FuncDecl }
		sequence   uint32
		doFn       moqConverterer_NewFunc_doFn
		doReturnFn moqConverterer_NewFunc_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqConverterer_NewFunc_fnRecorder) findResults() {
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqConverterer_NewFunc_resultsByParams
	for n, res := range r.moq.resultsByParams_NewFunc {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqConverterer_NewFunc_resultsByParams{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqConverterer_NewFunc_paramsKey]*moqConverterer_NewFunc_results{},
		}
		r.moq.resultsByParams_NewFunc = append(r.moq.resultsByParams_NewFunc, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams_NewFunc) {
			copy(r.moq.resultsByParams_NewFunc[insertAt+1:], r.moq.resultsByParams_NewFunc[insertAt:0])
			r.moq.resultsByParams_NewFunc[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey_NewFunc(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqConverterer_NewFunc_results{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqConverterer_NewFunc_fnRecorder) repeat(repeaters ...moq.Repeater) *moqConverterer_NewFunc_fnRecorder {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values     *struct{ funcDecl *dst.FuncDecl }
				sequence   uint32
				doFn       moqConverterer_NewFunc_doFn
				doReturnFn moqConverterer_NewFunc_doReturnFn
			}{
				values: &struct{ funcDecl *dst.FuncDecl }{
					funcDecl: last.values.funcDecl,
				},
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqConverterer) paramsKey_NewFunc(params moqConverterer_NewFunc_params, anyParams uint64) moqConverterer_NewFunc_paramsKey {
	var typeSpecUsed *dst.TypeSpec
	var typeSpecUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.NewFunc.typeSpec == moq.ParamIndexByValue {
			typeSpecUsed = params.typeSpec
		} else {
			typeSpecUsedHash = hash.DeepHash(params.typeSpec)
		}
	}
	var funcsUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.runtime.parameterIndexing.NewFunc.funcs == moq.ParamIndexByValue {
			m.scene.T.Fatalf("The funcs parameter of the NewFunc function can't be indexed by value")
		}
		funcsUsedHash = hash.DeepHash(params.funcs)
	}
	return moqConverterer_NewFunc_paramsKey{
		params: struct{ typeSpec *dst.TypeSpec }{
			typeSpec: typeSpecUsed,
		},
		hashes: struct {
			typeSpec hash.Hash
			funcs    hash.Hash
		}{
			typeSpec: typeSpecUsedHash,
			funcs:    funcsUsedHash,
		}}
}

func (m *moqConverterer_recorder) IsolationAccessor(typeName, suffix, fnName string) *moqConverterer_IsolationAccessor_fnRecorder {
	return &moqConverterer_IsolationAccessor_fnRecorder{
		params: moqConverterer_IsolationAccessor_params{
			typeName: typeName,
			suffix:   suffix,
			fnName:   fnName,
		},
		sequence: m.moq.config.Sequence == moq.SeqDefaultOn,
		moq:      m.moq,
	}
}

func (r *moqConverterer_IsolationAccessor_fnRecorder) any() *moqConverterer_IsolationAccessor_anyParams {
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	return &moqConverterer_IsolationAccessor_anyParams{recorder: r}
}

func (a *moqConverterer_IsolationAccessor_anyParams) typeName() *moqConverterer_IsolationAccessor_fnRecorder {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (a *moqConverterer_IsolationAccessor_anyParams) suffix() *moqConverterer_IsolationAccessor_fnRecorder {
	a.recorder.anyParams |= 1 << 1
	return a.recorder
}

func (a *moqConverterer_IsolationAccessor_anyParams) fnName() *moqConverterer_IsolationAccessor_fnRecorder {
	a.recorder.anyParams |= 1 << 2
	return a.recorder
}

func (r *moqConverterer_IsolationAccessor_fnRecorder) seq() *moqConverterer_IsolationAccessor_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqConverterer_IsolationAccessor_fnRecorder) noSeq() *moqConverterer_IsolationAccessor_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqConverterer_IsolationAccessor_fnRecorder) returnResults(funcDecl *dst.FuncDecl) *moqConverterer_IsolationAccessor_fnRecorder {
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values     *struct{ funcDecl *dst.FuncDecl }
		sequence   uint32
		doFn       moqConverterer_IsolationAccessor_doFn
		doReturnFn moqConverterer_IsolationAccessor_doReturnFn
	}{
		values: &struct{ funcDecl *dst.FuncDecl }{
			funcDecl: funcDecl,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqConverterer_IsolationAccessor_fnRecorder) andDo(fn moqConverterer_IsolationAccessor_doFn) *moqConverterer_IsolationAccessor_fnRecorder {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqConverterer_IsolationAccessor_fnRecorder) doReturnResults(fn moqConverterer_IsolationAccessor_doReturnFn) *moqConverterer_IsolationAccessor_fnRecorder {
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values     *struct{ funcDecl *dst.FuncDecl }
		sequence   uint32
		doFn       moqConverterer_IsolationAccessor_doFn
		doReturnFn moqConverterer_IsolationAccessor_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqConverterer_IsolationAccessor_fnRecorder) findResults() {
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqConverterer_IsolationAccessor_resultsByParams
	for n, res := range r.moq.resultsByParams_IsolationAccessor {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqConverterer_IsolationAccessor_resultsByParams{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqConverterer_IsolationAccessor_paramsKey]*moqConverterer_IsolationAccessor_results{},
		}
		r.moq.resultsByParams_IsolationAccessor = append(r.moq.resultsByParams_IsolationAccessor, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams_IsolationAccessor) {
			copy(r.moq.resultsByParams_IsolationAccessor[insertAt+1:], r.moq.resultsByParams_IsolationAccessor[insertAt:0])
			r.moq.resultsByParams_IsolationAccessor[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey_IsolationAccessor(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqConverterer_IsolationAccessor_results{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqConverterer_IsolationAccessor_fnRecorder) repeat(repeaters ...moq.Repeater) *moqConverterer_IsolationAccessor_fnRecorder {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values     *struct{ funcDecl *dst.FuncDecl }
				sequence   uint32
				doFn       moqConverterer_IsolationAccessor_doFn
				doReturnFn moqConverterer_IsolationAccessor_doReturnFn
			}{
				values: &struct{ funcDecl *dst.FuncDecl }{
					funcDecl: last.values.funcDecl,
				},
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqConverterer) paramsKey_IsolationAccessor(params moqConverterer_IsolationAccessor_params, anyParams uint64) moqConverterer_IsolationAccessor_paramsKey {
	var typeNameUsed string
	var typeNameUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.IsolationAccessor.typeName == moq.ParamIndexByValue {
			typeNameUsed = params.typeName
		} else {
			typeNameUsedHash = hash.DeepHash(params.typeName)
		}
	}
	var suffixUsed string
	var suffixUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.runtime.parameterIndexing.IsolationAccessor.suffix == moq.ParamIndexByValue {
			suffixUsed = params.suffix
		} else {
			suffixUsedHash = hash.DeepHash(params.suffix)
		}
	}
	var fnNameUsed string
	var fnNameUsedHash hash.Hash
	if anyParams&(1<<2) == 0 {
		if m.runtime.parameterIndexing.IsolationAccessor.fnName == moq.ParamIndexByValue {
			fnNameUsed = params.fnName
		} else {
			fnNameUsedHash = hash.DeepHash(params.fnName)
		}
	}
	return moqConverterer_IsolationAccessor_paramsKey{
		params: struct{ typeName, suffix, fnName string }{
			typeName: typeNameUsed,
			suffix:   suffixUsed,
			fnName:   fnNameUsed,
		},
		hashes: struct{ typeName, suffix, fnName hash.Hash }{
			typeName: typeNameUsedHash,
			suffix:   suffixUsedHash,
			fnName:   fnNameUsedHash,
		}}
}

func (m *moqConverterer_recorder) FuncClosure(typeName, pkgPath string, fn generator.Func) *moqConverterer_FuncClosure_fnRecorder {
	return &moqConverterer_FuncClosure_fnRecorder{
		params: moqConverterer_FuncClosure_params{
			typeName: typeName,
			pkgPath:  pkgPath,
			fn:       fn,
		},
		sequence: m.moq.config.Sequence == moq.SeqDefaultOn,
		moq:      m.moq,
	}
}

func (r *moqConverterer_FuncClosure_fnRecorder) any() *moqConverterer_FuncClosure_anyParams {
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	return &moqConverterer_FuncClosure_anyParams{recorder: r}
}

func (a *moqConverterer_FuncClosure_anyParams) typeName() *moqConverterer_FuncClosure_fnRecorder {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (a *moqConverterer_FuncClosure_anyParams) pkgPath() *moqConverterer_FuncClosure_fnRecorder {
	a.recorder.anyParams |= 1 << 1
	return a.recorder
}

func (a *moqConverterer_FuncClosure_anyParams) fn() *moqConverterer_FuncClosure_fnRecorder {
	a.recorder.anyParams |= 1 << 2
	return a.recorder
}

func (r *moqConverterer_FuncClosure_fnRecorder) seq() *moqConverterer_FuncClosure_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqConverterer_FuncClosure_fnRecorder) noSeq() *moqConverterer_FuncClosure_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqConverterer_FuncClosure_fnRecorder) returnResults(funcDecl *dst.FuncDecl) *moqConverterer_FuncClosure_fnRecorder {
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values     *struct{ funcDecl *dst.FuncDecl }
		sequence   uint32
		doFn       moqConverterer_FuncClosure_doFn
		doReturnFn moqConverterer_FuncClosure_doReturnFn
	}{
		values: &struct{ funcDecl *dst.FuncDecl }{
			funcDecl: funcDecl,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqConverterer_FuncClosure_fnRecorder) andDo(fn moqConverterer_FuncClosure_doFn) *moqConverterer_FuncClosure_fnRecorder {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqConverterer_FuncClosure_fnRecorder) doReturnResults(fn moqConverterer_FuncClosure_doReturnFn) *moqConverterer_FuncClosure_fnRecorder {
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values     *struct{ funcDecl *dst.FuncDecl }
		sequence   uint32
		doFn       moqConverterer_FuncClosure_doFn
		doReturnFn moqConverterer_FuncClosure_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqConverterer_FuncClosure_fnRecorder) findResults() {
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqConverterer_FuncClosure_resultsByParams
	for n, res := range r.moq.resultsByParams_FuncClosure {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqConverterer_FuncClosure_resultsByParams{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqConverterer_FuncClosure_paramsKey]*moqConverterer_FuncClosure_results{},
		}
		r.moq.resultsByParams_FuncClosure = append(r.moq.resultsByParams_FuncClosure, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams_FuncClosure) {
			copy(r.moq.resultsByParams_FuncClosure[insertAt+1:], r.moq.resultsByParams_FuncClosure[insertAt:0])
			r.moq.resultsByParams_FuncClosure[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey_FuncClosure(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqConverterer_FuncClosure_results{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqConverterer_FuncClosure_fnRecorder) repeat(repeaters ...moq.Repeater) *moqConverterer_FuncClosure_fnRecorder {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values     *struct{ funcDecl *dst.FuncDecl }
				sequence   uint32
				doFn       moqConverterer_FuncClosure_doFn
				doReturnFn moqConverterer_FuncClosure_doReturnFn
			}{
				values: &struct{ funcDecl *dst.FuncDecl }{
					funcDecl: last.values.funcDecl,
				},
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqConverterer) paramsKey_FuncClosure(params moqConverterer_FuncClosure_params, anyParams uint64) moqConverterer_FuncClosure_paramsKey {
	var typeNameUsed string
	var typeNameUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.FuncClosure.typeName == moq.ParamIndexByValue {
			typeNameUsed = params.typeName
		} else {
			typeNameUsedHash = hash.DeepHash(params.typeName)
		}
	}
	var pkgPathUsed string
	var pkgPathUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.runtime.parameterIndexing.FuncClosure.pkgPath == moq.ParamIndexByValue {
			pkgPathUsed = params.pkgPath
		} else {
			pkgPathUsedHash = hash.DeepHash(params.pkgPath)
		}
	}
	var fnUsed generator.Func
	var fnUsedHash hash.Hash
	if anyParams&(1<<2) == 0 {
		if m.runtime.parameterIndexing.FuncClosure.fn == moq.ParamIndexByValue {
			fnUsed = params.fn
		} else {
			fnUsedHash = hash.DeepHash(params.fn)
		}
	}
	return moqConverterer_FuncClosure_paramsKey{
		params: struct {
			typeName, pkgPath string
			fn                generator.Func
		}{
			typeName: typeNameUsed,
			pkgPath:  pkgPathUsed,
			fn:       fnUsed,
		},
		hashes: struct {
			typeName, pkgPath hash.Hash
			fn                hash.Hash
		}{
			typeName: typeNameUsedHash,
			pkgPath:  pkgPathUsedHash,
			fn:       fnUsedHash,
		}}
}

func (m *moqConverterer_recorder) MockMethod(typeName string, fn generator.Func) *moqConverterer_MockMethod_fnRecorder {
	return &moqConverterer_MockMethod_fnRecorder{
		params: moqConverterer_MockMethod_params{
			typeName: typeName,
			fn:       fn,
		},
		sequence: m.moq.config.Sequence == moq.SeqDefaultOn,
		moq:      m.moq,
	}
}

func (r *moqConverterer_MockMethod_fnRecorder) any() *moqConverterer_MockMethod_anyParams {
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	return &moqConverterer_MockMethod_anyParams{recorder: r}
}

func (a *moqConverterer_MockMethod_anyParams) typeName() *moqConverterer_MockMethod_fnRecorder {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (a *moqConverterer_MockMethod_anyParams) fn() *moqConverterer_MockMethod_fnRecorder {
	a.recorder.anyParams |= 1 << 1
	return a.recorder
}

func (r *moqConverterer_MockMethod_fnRecorder) seq() *moqConverterer_MockMethod_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqConverterer_MockMethod_fnRecorder) noSeq() *moqConverterer_MockMethod_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqConverterer_MockMethod_fnRecorder) returnResults(funcDecl *dst.FuncDecl) *moqConverterer_MockMethod_fnRecorder {
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values     *struct{ funcDecl *dst.FuncDecl }
		sequence   uint32
		doFn       moqConverterer_MockMethod_doFn
		doReturnFn moqConverterer_MockMethod_doReturnFn
	}{
		values: &struct{ funcDecl *dst.FuncDecl }{
			funcDecl: funcDecl,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqConverterer_MockMethod_fnRecorder) andDo(fn moqConverterer_MockMethod_doFn) *moqConverterer_MockMethod_fnRecorder {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqConverterer_MockMethod_fnRecorder) doReturnResults(fn moqConverterer_MockMethod_doReturnFn) *moqConverterer_MockMethod_fnRecorder {
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values     *struct{ funcDecl *dst.FuncDecl }
		sequence   uint32
		doFn       moqConverterer_MockMethod_doFn
		doReturnFn moqConverterer_MockMethod_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqConverterer_MockMethod_fnRecorder) findResults() {
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqConverterer_MockMethod_resultsByParams
	for n, res := range r.moq.resultsByParams_MockMethod {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqConverterer_MockMethod_resultsByParams{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqConverterer_MockMethod_paramsKey]*moqConverterer_MockMethod_results{},
		}
		r.moq.resultsByParams_MockMethod = append(r.moq.resultsByParams_MockMethod, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams_MockMethod) {
			copy(r.moq.resultsByParams_MockMethod[insertAt+1:], r.moq.resultsByParams_MockMethod[insertAt:0])
			r.moq.resultsByParams_MockMethod[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey_MockMethod(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqConverterer_MockMethod_results{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqConverterer_MockMethod_fnRecorder) repeat(repeaters ...moq.Repeater) *moqConverterer_MockMethod_fnRecorder {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values     *struct{ funcDecl *dst.FuncDecl }
				sequence   uint32
				doFn       moqConverterer_MockMethod_doFn
				doReturnFn moqConverterer_MockMethod_doReturnFn
			}{
				values: &struct{ funcDecl *dst.FuncDecl }{
					funcDecl: last.values.funcDecl,
				},
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqConverterer) paramsKey_MockMethod(params moqConverterer_MockMethod_params, anyParams uint64) moqConverterer_MockMethod_paramsKey {
	var typeNameUsed string
	var typeNameUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.MockMethod.typeName == moq.ParamIndexByValue {
			typeNameUsed = params.typeName
		} else {
			typeNameUsedHash = hash.DeepHash(params.typeName)
		}
	}
	var fnUsed generator.Func
	var fnUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.runtime.parameterIndexing.MockMethod.fn == moq.ParamIndexByValue {
			fnUsed = params.fn
		} else {
			fnUsedHash = hash.DeepHash(params.fn)
		}
	}
	return moqConverterer_MockMethod_paramsKey{
		params: struct {
			typeName string
			fn       generator.Func
		}{
			typeName: typeNameUsed,
			fn:       fnUsed,
		},
		hashes: struct {
			typeName hash.Hash
			fn       hash.Hash
		}{
			typeName: typeNameUsedHash,
			fn:       fnUsedHash,
		}}
}

func (m *moqConverterer_recorder) RecorderMethods(typeName string, fn generator.Func) *moqConverterer_RecorderMethods_fnRecorder {
	return &moqConverterer_RecorderMethods_fnRecorder{
		params: moqConverterer_RecorderMethods_params{
			typeName: typeName,
			fn:       fn,
		},
		sequence: m.moq.config.Sequence == moq.SeqDefaultOn,
		moq:      m.moq,
	}
}

func (r *moqConverterer_RecorderMethods_fnRecorder) any() *moqConverterer_RecorderMethods_anyParams {
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	return &moqConverterer_RecorderMethods_anyParams{recorder: r}
}

func (a *moqConverterer_RecorderMethods_anyParams) typeName() *moqConverterer_RecorderMethods_fnRecorder {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (a *moqConverterer_RecorderMethods_anyParams) fn() *moqConverterer_RecorderMethods_fnRecorder {
	a.recorder.anyParams |= 1 << 1
	return a.recorder
}

func (r *moqConverterer_RecorderMethods_fnRecorder) seq() *moqConverterer_RecorderMethods_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqConverterer_RecorderMethods_fnRecorder) noSeq() *moqConverterer_RecorderMethods_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqConverterer_RecorderMethods_fnRecorder) returnResults(funcDecls []dst.Decl) *moqConverterer_RecorderMethods_fnRecorder {
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values     *struct{ funcDecls []dst.Decl }
		sequence   uint32
		doFn       moqConverterer_RecorderMethods_doFn
		doReturnFn moqConverterer_RecorderMethods_doReturnFn
	}{
		values: &struct{ funcDecls []dst.Decl }{
			funcDecls: funcDecls,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqConverterer_RecorderMethods_fnRecorder) andDo(fn moqConverterer_RecorderMethods_doFn) *moqConverterer_RecorderMethods_fnRecorder {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqConverterer_RecorderMethods_fnRecorder) doReturnResults(fn moqConverterer_RecorderMethods_doReturnFn) *moqConverterer_RecorderMethods_fnRecorder {
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values     *struct{ funcDecls []dst.Decl }
		sequence   uint32
		doFn       moqConverterer_RecorderMethods_doFn
		doReturnFn moqConverterer_RecorderMethods_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqConverterer_RecorderMethods_fnRecorder) findResults() {
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqConverterer_RecorderMethods_resultsByParams
	for n, res := range r.moq.resultsByParams_RecorderMethods {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqConverterer_RecorderMethods_resultsByParams{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqConverterer_RecorderMethods_paramsKey]*moqConverterer_RecorderMethods_results{},
		}
		r.moq.resultsByParams_RecorderMethods = append(r.moq.resultsByParams_RecorderMethods, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams_RecorderMethods) {
			copy(r.moq.resultsByParams_RecorderMethods[insertAt+1:], r.moq.resultsByParams_RecorderMethods[insertAt:0])
			r.moq.resultsByParams_RecorderMethods[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey_RecorderMethods(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqConverterer_RecorderMethods_results{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqConverterer_RecorderMethods_fnRecorder) repeat(repeaters ...moq.Repeater) *moqConverterer_RecorderMethods_fnRecorder {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values     *struct{ funcDecls []dst.Decl }
				sequence   uint32
				doFn       moqConverterer_RecorderMethods_doFn
				doReturnFn moqConverterer_RecorderMethods_doReturnFn
			}{
				values: &struct{ funcDecls []dst.Decl }{
					funcDecls: last.values.funcDecls,
				},
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqConverterer) paramsKey_RecorderMethods(params moqConverterer_RecorderMethods_params, anyParams uint64) moqConverterer_RecorderMethods_paramsKey {
	var typeNameUsed string
	var typeNameUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.RecorderMethods.typeName == moq.ParamIndexByValue {
			typeNameUsed = params.typeName
		} else {
			typeNameUsedHash = hash.DeepHash(params.typeName)
		}
	}
	var fnUsed generator.Func
	var fnUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.runtime.parameterIndexing.RecorderMethods.fn == moq.ParamIndexByValue {
			fnUsed = params.fn
		} else {
			fnUsedHash = hash.DeepHash(params.fn)
		}
	}
	return moqConverterer_RecorderMethods_paramsKey{
		params: struct {
			typeName string
			fn       generator.Func
		}{
			typeName: typeNameUsed,
			fn:       fnUsed,
		},
		hashes: struct {
			typeName hash.Hash
			fn       hash.Hash
		}{
			typeName: typeNameUsedHash,
			fn:       fnUsedHash,
		}}
}

func (m *moqConverterer_recorder) ResetMethod(typeSpec *dst.TypeSpec, funcs []generator.Func) *moqConverterer_ResetMethod_fnRecorder {
	return &moqConverterer_ResetMethod_fnRecorder{
		params: moqConverterer_ResetMethod_params{
			typeSpec: typeSpec,
			funcs:    funcs,
		},
		sequence: m.moq.config.Sequence == moq.SeqDefaultOn,
		moq:      m.moq,
	}
}

func (r *moqConverterer_ResetMethod_fnRecorder) any() *moqConverterer_ResetMethod_anyParams {
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	return &moqConverterer_ResetMethod_anyParams{recorder: r}
}

func (a *moqConverterer_ResetMethod_anyParams) typeSpec() *moqConverterer_ResetMethod_fnRecorder {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (a *moqConverterer_ResetMethod_anyParams) funcs() *moqConverterer_ResetMethod_fnRecorder {
	a.recorder.anyParams |= 1 << 1
	return a.recorder
}

func (r *moqConverterer_ResetMethod_fnRecorder) seq() *moqConverterer_ResetMethod_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqConverterer_ResetMethod_fnRecorder) noSeq() *moqConverterer_ResetMethod_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqConverterer_ResetMethod_fnRecorder) returnResults(funcDecl *dst.FuncDecl) *moqConverterer_ResetMethod_fnRecorder {
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values     *struct{ funcDecl *dst.FuncDecl }
		sequence   uint32
		doFn       moqConverterer_ResetMethod_doFn
		doReturnFn moqConverterer_ResetMethod_doReturnFn
	}{
		values: &struct{ funcDecl *dst.FuncDecl }{
			funcDecl: funcDecl,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqConverterer_ResetMethod_fnRecorder) andDo(fn moqConverterer_ResetMethod_doFn) *moqConverterer_ResetMethod_fnRecorder {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqConverterer_ResetMethod_fnRecorder) doReturnResults(fn moqConverterer_ResetMethod_doReturnFn) *moqConverterer_ResetMethod_fnRecorder {
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values     *struct{ funcDecl *dst.FuncDecl }
		sequence   uint32
		doFn       moqConverterer_ResetMethod_doFn
		doReturnFn moqConverterer_ResetMethod_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqConverterer_ResetMethod_fnRecorder) findResults() {
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqConverterer_ResetMethod_resultsByParams
	for n, res := range r.moq.resultsByParams_ResetMethod {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqConverterer_ResetMethod_resultsByParams{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqConverterer_ResetMethod_paramsKey]*moqConverterer_ResetMethod_results{},
		}
		r.moq.resultsByParams_ResetMethod = append(r.moq.resultsByParams_ResetMethod, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams_ResetMethod) {
			copy(r.moq.resultsByParams_ResetMethod[insertAt+1:], r.moq.resultsByParams_ResetMethod[insertAt:0])
			r.moq.resultsByParams_ResetMethod[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey_ResetMethod(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqConverterer_ResetMethod_results{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqConverterer_ResetMethod_fnRecorder) repeat(repeaters ...moq.Repeater) *moqConverterer_ResetMethod_fnRecorder {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values     *struct{ funcDecl *dst.FuncDecl }
				sequence   uint32
				doFn       moqConverterer_ResetMethod_doFn
				doReturnFn moqConverterer_ResetMethod_doReturnFn
			}{
				values: &struct{ funcDecl *dst.FuncDecl }{
					funcDecl: last.values.funcDecl,
				},
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqConverterer) paramsKey_ResetMethod(params moqConverterer_ResetMethod_params, anyParams uint64) moqConverterer_ResetMethod_paramsKey {
	var typeSpecUsed *dst.TypeSpec
	var typeSpecUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.ResetMethod.typeSpec == moq.ParamIndexByValue {
			typeSpecUsed = params.typeSpec
		} else {
			typeSpecUsedHash = hash.DeepHash(params.typeSpec)
		}
	}
	var funcsUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.runtime.parameterIndexing.ResetMethod.funcs == moq.ParamIndexByValue {
			m.scene.T.Fatalf("The funcs parameter of the ResetMethod function can't be indexed by value")
		}
		funcsUsedHash = hash.DeepHash(params.funcs)
	}
	return moqConverterer_ResetMethod_paramsKey{
		params: struct{ typeSpec *dst.TypeSpec }{
			typeSpec: typeSpecUsed,
		},
		hashes: struct {
			typeSpec hash.Hash
			funcs    hash.Hash
		}{
			typeSpec: typeSpecUsedHash,
			funcs:    funcsUsedHash,
		}}
}

func (m *moqConverterer_recorder) AssertMethod(typeSpec *dst.TypeSpec, funcs []generator.Func) *moqConverterer_AssertMethod_fnRecorder {
	return &moqConverterer_AssertMethod_fnRecorder{
		params: moqConverterer_AssertMethod_params{
			typeSpec: typeSpec,
			funcs:    funcs,
		},
		sequence: m.moq.config.Sequence == moq.SeqDefaultOn,
		moq:      m.moq,
	}
}

func (r *moqConverterer_AssertMethod_fnRecorder) any() *moqConverterer_AssertMethod_anyParams {
	if r.results != nil {
		r.moq.scene.T.Fatalf("Any functions must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	return &moqConverterer_AssertMethod_anyParams{recorder: r}
}

func (a *moqConverterer_AssertMethod_anyParams) typeSpec() *moqConverterer_AssertMethod_fnRecorder {
	a.recorder.anyParams |= 1 << 0
	return a.recorder
}

func (a *moqConverterer_AssertMethod_anyParams) funcs() *moqConverterer_AssertMethod_fnRecorder {
	a.recorder.anyParams |= 1 << 1
	return a.recorder
}

func (r *moqConverterer_AssertMethod_fnRecorder) seq() *moqConverterer_AssertMethod_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("seq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = true
	return r
}

func (r *moqConverterer_AssertMethod_fnRecorder) noSeq() *moqConverterer_AssertMethod_fnRecorder {
	if r.results != nil {
		r.moq.scene.T.Fatalf("noSeq must be called before returnResults or doReturnResults calls, parameters: %#v", r.params)
		return nil
	}
	r.sequence = false
	return r
}

func (r *moqConverterer_AssertMethod_fnRecorder) returnResults(funcDecl *dst.FuncDecl) *moqConverterer_AssertMethod_fnRecorder {
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values     *struct{ funcDecl *dst.FuncDecl }
		sequence   uint32
		doFn       moqConverterer_AssertMethod_doFn
		doReturnFn moqConverterer_AssertMethod_doReturnFn
	}{
		values: &struct{ funcDecl *dst.FuncDecl }{
			funcDecl: funcDecl,
		},
		sequence: sequence,
	})
	return r
}

func (r *moqConverterer_AssertMethod_fnRecorder) andDo(fn moqConverterer_AssertMethod_doFn) *moqConverterer_AssertMethod_fnRecorder {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults must be called before calling andDo")
		return nil
	}
	last := &r.results.results[len(r.results.results)-1]
	last.doFn = fn
	return r
}

func (r *moqConverterer_AssertMethod_fnRecorder) doReturnResults(fn moqConverterer_AssertMethod_doReturnFn) *moqConverterer_AssertMethod_fnRecorder {
	r.findResults()

	var sequence uint32
	if r.sequence {
		sequence = r.moq.scene.NextRecorderSequence()
	}

	r.results.results = append(r.results.results, struct {
		values     *struct{ funcDecl *dst.FuncDecl }
		sequence   uint32
		doFn       moqConverterer_AssertMethod_doFn
		doReturnFn moqConverterer_AssertMethod_doReturnFn
	}{sequence: sequence, doReturnFn: fn})
	return r
}

func (r *moqConverterer_AssertMethod_fnRecorder) findResults() {
	if r.results != nil {
		r.results.repeat.Increment(r.moq.scene.T)
		return
	}

	anyCount := bits.OnesCount64(r.anyParams)
	insertAt := -1
	var results *moqConverterer_AssertMethod_resultsByParams
	for n, res := range r.moq.resultsByParams_AssertMethod {
		if res.anyParams == r.anyParams {
			results = &res
			break
		}
		if res.anyCount > anyCount {
			insertAt = n
		}
	}
	if results == nil {
		results = &moqConverterer_AssertMethod_resultsByParams{
			anyCount:  anyCount,
			anyParams: r.anyParams,
			results:   map[moqConverterer_AssertMethod_paramsKey]*moqConverterer_AssertMethod_results{},
		}
		r.moq.resultsByParams_AssertMethod = append(r.moq.resultsByParams_AssertMethod, *results)
		if insertAt != -1 && insertAt+1 < len(r.moq.resultsByParams_AssertMethod) {
			copy(r.moq.resultsByParams_AssertMethod[insertAt+1:], r.moq.resultsByParams_AssertMethod[insertAt:0])
			r.moq.resultsByParams_AssertMethod[insertAt] = *results
		}
	}

	paramsKey := r.moq.paramsKey_AssertMethod(r.params, r.anyParams)

	var ok bool
	r.results, ok = results.results[paramsKey]
	if !ok {
		r.results = &moqConverterer_AssertMethod_results{
			params:  r.params,
			results: nil,
			index:   0,
			repeat:  &moq.RepeatVal{},
		}
		results.results[paramsKey] = r.results
	}

	r.results.repeat.Increment(r.moq.scene.T)
}

func (r *moqConverterer_AssertMethod_fnRecorder) repeat(repeaters ...moq.Repeater) *moqConverterer_AssertMethod_fnRecorder {
	if r.results == nil {
		r.moq.scene.T.Fatalf("returnResults or doReturnResults must be called before calling repeat")
		return nil
	}
	r.results.repeat.Repeat(r.moq.scene.T, repeaters)
	last := r.results.results[len(r.results.results)-1]
	for n := 0; n < r.results.repeat.ResultCount-1; n++ {
		if r.sequence {
			last = struct {
				values     *struct{ funcDecl *dst.FuncDecl }
				sequence   uint32
				doFn       moqConverterer_AssertMethod_doFn
				doReturnFn moqConverterer_AssertMethod_doReturnFn
			}{
				values: &struct{ funcDecl *dst.FuncDecl }{
					funcDecl: last.values.funcDecl,
				},
				sequence: r.moq.scene.NextRecorderSequence(),
			}
		}
		r.results.results = append(r.results.results, last)
	}
	return r
}

func (m *moqConverterer) paramsKey_AssertMethod(params moqConverterer_AssertMethod_params, anyParams uint64) moqConverterer_AssertMethod_paramsKey {
	var typeSpecUsed *dst.TypeSpec
	var typeSpecUsedHash hash.Hash
	if anyParams&(1<<0) == 0 {
		if m.runtime.parameterIndexing.AssertMethod.typeSpec == moq.ParamIndexByValue {
			typeSpecUsed = params.typeSpec
		} else {
			typeSpecUsedHash = hash.DeepHash(params.typeSpec)
		}
	}
	var funcsUsedHash hash.Hash
	if anyParams&(1<<1) == 0 {
		if m.runtime.parameterIndexing.AssertMethod.funcs == moq.ParamIndexByValue {
			m.scene.T.Fatalf("The funcs parameter of the AssertMethod function can't be indexed by value")
		}
		funcsUsedHash = hash.DeepHash(params.funcs)
	}
	return moqConverterer_AssertMethod_paramsKey{
		params: struct{ typeSpec *dst.TypeSpec }{
			typeSpec: typeSpecUsed,
		},
		hashes: struct {
			typeSpec hash.Hash
			funcs    hash.Hash
		}{
			typeSpec: typeSpecUsedHash,
			funcs:    funcsUsedHash,
		}}
}

// Reset resets the state of the moq
func (m *moqConverterer) Reset() {
	m.resultsByParams_BaseStruct = nil
	m.resultsByParams_IsolationStruct = nil
	m.resultsByParams_MethodStructs = nil
	m.resultsByParams_NewFunc = nil
	m.resultsByParams_IsolationAccessor = nil
	m.resultsByParams_FuncClosure = nil
	m.resultsByParams_MockMethod = nil
	m.resultsByParams_RecorderMethods = nil
	m.resultsByParams_ResetMethod = nil
	m.resultsByParams_AssertMethod = nil
}

// AssertExpectationsMet asserts that all expectations have been met
func (m *moqConverterer) AssertExpectationsMet() {
	for _, res := range m.resultsByParams_BaseStruct {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.params)
			}
		}
	}
	for _, res := range m.resultsByParams_IsolationStruct {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.params)
			}
		}
	}
	for _, res := range m.resultsByParams_MethodStructs {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.params)
			}
		}
	}
	for _, res := range m.resultsByParams_NewFunc {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.params)
			}
		}
	}
	for _, res := range m.resultsByParams_IsolationAccessor {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.params)
			}
		}
	}
	for _, res := range m.resultsByParams_FuncClosure {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.params)
			}
		}
	}
	for _, res := range m.resultsByParams_MockMethod {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.params)
			}
		}
	}
	for _, res := range m.resultsByParams_RecorderMethods {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.params)
			}
		}
	}
	for _, res := range m.resultsByParams_ResetMethod {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.params)
			}
		}
	}
	for _, res := range m.resultsByParams_AssertMethod {
		for _, results := range res.results {
			missing := results.repeat.MinTimes - int(atomic.LoadUint32(&results.index))
			if missing > 0 {
				m.scene.T.Errorf("Expected %d additional call(s) with parameters %#v", missing, results.params)
			}
		}
	}
}
